; ---------------------------------------------------------------------------

ram_init	struc ;	(sizeof=0x10, mappedto_2)
ram_address	DCD ?
length		DCD ?
initmethod	DCD ?
source		DCD ?
ram_init	ends


;
; +-------------------------------------------------------------------------+
; |   This file	has been generated by The Interactive Disassembler (IDA)    |
; |	      Copyright	(c) 2015 Hex-Rays, <support@hex-rays.com>	    |
; |			 License info: 48-321D-7654-91			    |
; |				   Trustwave				    |
; +-------------------------------------------------------------------------+
;
; Input	MD5   :	12CD88078EC96E57C25BB0FD1CB6B914
; Input	CRC32 :	3BA61B9D

; File Name   :	G:\devel\FRsky-10channel\tx_full.bin
; Format      :	Binary file
; Base Address:	0000h Range: 0000h - 10000h Loaded length: 10000h

; Processor	  : ARM
; ARM architecture: ARMv6-M
; Target assembler: Generic assembler for ARM
; Byte sex	  : Little endian

; ===========================================================================

; Segment type:	Regular
		AREA VT, DATA, ALIGN=4
Initial_SP	DCB 0x60 ; `
; _BYTE	byte_1[3]
byte_1		DCB 0x14, 0, 0x20	; DATA XREF: sub_7A38+Co
					; PPMOutMenu+24o
Reset		DCD 0x1A1
NMI		DCD 0x1A9
HardFault	DCD 0x1AB
dword_10	DCD 0
dword_14	DCD 0
		DCD 0
		DCD 0
dword_20	DCD 0
dword_24	DCD 0			; DATA XREF: ROM:0000CB78o
		DCD 0
SVCall		DCB 0xAD ; ­
unk_2D		DCB    1		; DATA XREF: ROM:off_1B20o
		DCB    0
		DCB    0
		DCD 0
		DCD 0
PendSV		DCB 0xAF ; ¯		; DATA XREF: ROM:afhd_logoo
		DCB    1
		DCB    0
		DCB    0
SysTick		DCD 0x1B1
IRQ0		DCD 0x1B3		; DATA XREF: ROM:off_CBC8o
IRQ1		DCD 0b110110011
		DCD 0x1B3
dword_4C	DCD 0x1B3		; DATA XREF: ROM:off_CC40o
		DCD 0x1B3
		DCD 0x1B3
dword_58	DCD 0x1B3		; DATA XREF: ROM:0000C914o
		DCD 0x1B3
dword_60	DCD 0x1B3
		DCD 0x1B3
		DCD 0x1B3
		DCD 0x1B3
		DCD 0x1B3
		DCD 0x1B3
		DCD 0x1B3
dword_7C	DCD 0x1B3
dword_80	DCD 0x1B3		; DATA XREF: ROM:off_D7F4o
		DCD 0x1B3
		DCD 0x1B3
		DCD 0x1B3
		DCD 0x1B3
		DCD 0x1B3
		DCD 0x1B3
		DCD 0x1B3
		DCD 0x1B3
		DCD 0x1B3
dword_A8	DCD 0x1B3
		DCD 0x1B3
		DCD 0x1B3
		DCD 0x1B3
		DCD 0x1B3
		DCD 0x1B3
; VT		ends

; ---------------------------------------------------------------------------
; ===========================================================================

; Segment type:	Regular
		AREA BOOT, DATA, ALIGN=0
		; ORG 0xC0

loc_C0					; CODE XREF: BOOT:000001A6j
					; DATA XREF: BOOT:000001A4o ...
		BL	loc_C8
; ---------------------------------------------------------------------------
		BL	loc_148
; ---------------------------------------------------------------------------

loc_C8					; CODE XREF: BOOT:loc_C0j
		ADR	R0, loc_FC
		LDMIA	R0!, {R4,R5}

loc_CC
		SUBS	R0, #8
		ADDS	R4, R4,	R0
		ADDS	R5, R5,	R0
		MOV	R10, R4
		SUBS	R7, R4,	#1
		MOV	R11, R5
		MOV	R4, R10
		MOV	R5, R11
		CMP	R4, R5

loc_DE
		BNE	loc_E4
		BL	loc_148
; ---------------------------------------------------------------------------

loc_E4					; CODE XREF: BOOT:loc_DEj
		MOV	R6, PC
		SUBS	R6, #0xF
		LDMIA	R4!, {R0-R3}
		MOV	LR, R6
		MOVS	R6, #1
		TST	R3, R6
		BEQ	loc_F4
		SUBS	R3, R7,	R3

loc_F4					; CODE XREF: BOOT:000000F0j
		MOV	R10, R4
		MOV	R11, R5
		ORRS	R3, R6
		BX	R3
; ---------------------------------------------------------------------------

loc_FC					; DATA XREF: BOOT:loc_C8o
					; BOOT:000000CAo
		LSRS	R4, R0,	#0x12

loc_FE
		MOVS	R0, R0
		LSRS	R4, R4,	#0x12
		MOVS	R0, R0

loc_104					; CODE XREF: BOOT:0000010Cj
		SUBS	R2, #0x10
		BCC	loc_10E
		LDMIA	R0!, {R3-R6}
		STMIA	R1!, {R3-R6}
		BHI	loc_104

loc_10E					; CODE XREF: BOOT:00000106j
		LSLS	R2, R2,	#0x1D
		BCC	loc_116
		LDMIA	R0!, {R4,R5}
		STMIA	R1!, {R4,R5}

loc_116					; CODE XREF: BOOT:00000110j
		BPL	locret_11C
		LDR	R4, [R0]
		STR	R4, [R1]

locret_11C				; CODE XREF: BOOT:loc_116j
		BX	LR
; ---------------------------------------------------------------------------
		MOVS	R0, R0
		MOVS	R3, #0
		MOVS	R4, #0
		MOVS	R5, #0
		MOVS	R6, #0

loc_128					; CODE XREF: BOOT:0000012Ej
		SUBS	R2, #0x10
		BCC	loc_130
		STMIA	R1!, {R3-R6}
		BHI	loc_128

loc_130					; CODE XREF: BOOT:0000012Aj
		LSLS	R2, R2,	#0x1D

loc_132
		BCC	loc_136
		STMIA	R1!, {R4,R5}

loc_136					; CODE XREF: BOOT:loc_132j
		BPL	locret_13A
		STR	R3, [R1]

locret_13A				; CODE XREF: BOOT:loc_136j
		BX	LR

; =============== S U B	R O U T	I N E =======================================


sub_13C					; CODE XREF: BOOT:0000014Ep
		PUSH	{R0-R4,LR}
		NOP
		NOP
		POP	{R0-R4,PC}
; End of function sub_13C


; =============== S U B	R O U T	I N E =======================================


sub_144					; CODE XREF: sub_15A+2p
		PUSH	{R4,LR}
		POP	{R4,PC}
; End of function sub_144

; ---------------------------------------------------------------------------

loc_148					; CODE XREF: BOOT:000000C4j
					; BOOT:000000E0j
		BL	sub_302
		MOV	R1, R2
		BL	sub_13C
		BL	loc_A04
; ---------------------------------------------------------------------------
		BL	sub_1EE

; =============== S U B	R O U T	I N E =======================================

; Attributes: noreturn

sub_15A					; CODE XREF: sub_1F4+2p
		PUSH	{R0,R1}
		BL	sub_144
		POP	{R0,R1}
		BL	sub_348
; ---------------------------------------------------------------------------
		MOVS	R0, R0
; End of function sub_15A


; =============== S U B	R O U T	I N E =======================================


sub_168					; CODE XREF: sub_280:loc_2C2p
		PUSH	{R4-R6,LR}
		MOV	R5, R0
		MOV	R4, R1
		MOV	R6, R2
		B	loc_178
; ---------------------------------------------------------------------------

loc_172					; CODE XREF: sub_168+12j
		LDMIA	R4!, {R0-R3}
		STMIA	R5!, {R0-R3}
		SUBS	R6, #0x10

loc_178					; CODE XREF: sub_168+8j
		CMP	R6, #0x10
		BCS	loc_172
		CMP	R6, #8
		BCC	loc_186
		LDMIA	R4!, {R0,R1}
		STMIA	R5!, {R0,R1}
		SUBS	R6, #8

loc_186					; CODE XREF: sub_168+16j
		CMP	R6, #4
		BCC	loc_19A
		LDMIA	R4!, {R0}
		STMIA	R5!, {R0}
		SUBS	R6, R6,	#4
		B	loc_19A
; ---------------------------------------------------------------------------

loc_192					; CODE XREF: sub_168+34j
		LDRB	R1, [R4]
		STRB	R1, [R5]
		ADDS	R4, R4,	#1
		ADDS	R5, R5,	#1

loc_19A					; CODE XREF: sub_168+20j sub_168+28j
		SUBS	R6, R6,	#1
		BCS	loc_192
		POP	{R4-R6,PC}
; End of function sub_168

; ---------------------------------------------------------------------------
		LDR	R0, =(nullsub_1+1)
		BLX	R0 ; nullsub_1
		LDR	R0, =(loc_C0+1)
		BX	R0 ; loc_C0
; ---------------------------------------------------------------------------

loc_1A8					; CODE XREF: BOOT:loc_1A8j
		B	loc_1A8
; ---------------------------------------------------------------------------

loc_1AA					; CODE XREF: BOOT:loc_1AAj
		B	loc_1AA
; ---------------------------------------------------------------------------

loc_1AC					; CODE XREF: BOOT:loc_1ACj
		B	loc_1AC
; ---------------------------------------------------------------------------

loc_1AE					; CODE XREF: BOOT:loc_1AEj
		B	loc_1AE
; ---------------------------------------------------------------------------

loc_1B0					; CODE XREF: BOOT:loc_1B0j
		B	loc_1B0
; ---------------------------------------------------------------------------

loc_1B2					; CODE XREF: BOOT:loc_1B2j
		B	loc_1B2

; =============== S U B	R O U T	I N E =======================================


sub_1B4					; CODE XREF: BOOT:00000A5Cp
		LDR	R0, =dword_1800
		LDR	R0, [R0]
		MOV	SP, R0
		LDR	R0, =off_1804
		LDR	R0, [R0]
		BX	R0
; End of function sub_1B4


; =============== S U B	R O U T	I N E =======================================


get0x2000146020001060			; CODE XREF: sub_302+18p
		LDR	R0, qword_1DC
		LDR	R1, qword_1DC+4
		LDR	R2, qword_1DC
		LDR	R3, =unk_20001060
		BX	LR
; End of function get0x2000146020001060

; ---------------------------------------------------------------------------
		DCB    0
		DCB    0
off_1CC		DCD nullsub_1+1		; DATA XREF: BOOT:000001A0r
off_1D0		DCD loc_C0+1		; DATA XREF: BOOT:000001A4r
off_1D4		DCD dword_1800		; DATA XREF: sub_1B4r
off_1D8		DCD off_1804		; DATA XREF: sub_1B4+6r
qword_1DC	DCQ 0x2000146020001060	; DATA XREF: get0x2000146020001060r
					; get0x2000146020001060+4r ...
off_1E4		DCD unk_20001060	; DATA XREF: get0x2000146020001060+6r
		DCB 0x70 ; p
		DCB 0x47 ; G
		DCB 0x70 ; p
		DCB 0x47 ; G
		DCB 0x70 ; p
		DCB 0x47 ; G

; =============== S U B	R O U T	I N E =======================================

; Attributes: noreturn

sub_1EE					; CODE XREF: BOOT:00000156p
		MOV	R4, R0
		NOP
		NOP
; End of function sub_1EE


; =============== S U B	R O U T	I N E =======================================

; Attributes: noreturn

sub_1F4
		MOV	R0, R4
		BL	sub_15A
; End of function sub_1F4

; ---------------------------------------------------------------------------
		BX	LR

; =============== S U B	R O U T	I N E =======================================


nullsub_1				; CODE XREF: BOOT:000001A2p
					; DATA XREF: BOOT:000001A0o ...
		BX	LR
; End of function nullsub_1

; ---------------------------------------------------------------------------
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    1
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0

; =============== S U B	R O U T	I N E =======================================


sub_280					; CODE XREF: sub_354+Ap
		PUSH	{R3-R7,LR}
		CMP	R2, #4
		BCC	loc_2E0
		LSLS	R3, R0,	#0x1E
		BEQ	loc_2B0
		LDRB	R3, [R1]
		ADDS	R1, R1,	#1
		STRB	R3, [R0]
		ADDS	R0, R0,	#1
		SUBS	R2, R2,	#1
		LSLS	R3, R0,	#0x1E
		BEQ	loc_2B0
		LDRB	R3, [R1]
		ADDS	R1, R1,	#1
		STRB	R3, [R0]
		ADDS	R0, R0,	#1
		SUBS	R2, R2,	#1
		LSLS	R3, R0,	#0x1E
		BEQ	loc_2B0
		LDRB	R3, [R1]
		ADDS	R1, R1,	#1
		STRB	R3, [R0]
		ADDS	R0, R0,	#1
		SUBS	R2, R2,	#1

loc_2B0					; CODE XREF: sub_280+8j sub_280+16j ...
		LSLS	R3, R1,	#0x1E
		LSRS	R3, R3,	#0x1E
		BEQ	loc_2C2
		SUBS	R1, R1,	R3
		LSLS	R7, R3,	#3
		MOVS	R3, #0x20 ; ' '
		SUBS	R6, R3,	R7
		LDMIA	R1!, {R3}
		B	loc_2D8
; ---------------------------------------------------------------------------

loc_2C2					; CODE XREF: sub_280+34j
		BL	sub_168

locret_2C6				; CODE XREF: sub_280+62j sub_280+6Ej ...
		POP	{R3-R7,PC}
; ---------------------------------------------------------------------------

loc_2C8					; CODE XREF: sub_280+5Aj
		MOV	R5, R3
		LDMIA	R1!, {R3}
		LSRS	R5, R7
		MOV	R4, R3
		LSLS	R4, R6
		ORRS	R4, R5
		STMIA	R0!, {R4}
		SUBS	R2, R2,	#4

loc_2D8					; CODE XREF: sub_280+40j
		CMP	R2, #4
		BCS	loc_2C8
		LSRS	R3, R6,	#3
		SUBS	R1, R1,	R3

loc_2E0					; CODE XREF: sub_280+4j
		SUBS	R2, R2,	#1
		BMI	locret_2C6
		LDRB	R3, [R1]
		ADDS	R1, R1,	#1
		STRB	R3, [R0]
		ADDS	R0, R0,	#1
		SUBS	R2, R2,	#1
		BMI	locret_2C6
		LDRB	R3, [R1]
		ADDS	R1, R1,	#1
		STRB	R3, [R0]
		ADDS	R0, R0,	#1
		SUBS	R2, R2,	#1
		BMI	locret_2C6
		LDRB	R1, [R1]
		STRB	R1, [R0]
		POP	{R3-R7,PC}
; End of function sub_280


; =============== S U B	R O U T	I N E =======================================


sub_302					; CODE XREF: BOOT:loc_148p
		MOV	R5, LR
		BL	Get20001000
		MOV	LR, R5
		MOVS	R5, R0
		MOV	R1, SP
		MOV	R3, R10
		LSRS	R0, R0,	#3
		LSLS	R0, R0,	#3
		MOV	SP, R0
		ADD	SP, SP,	#0x60
		PUSH	{R5,LR}
		BL	get0x2000146020001060
		POP	{R5,R6}
		MOVS	R7, #0
		LSRS	R1, R1,	#1
		MOV	LR, R6
		MOVS	R6, #0
		STMIA	R5!, {R6,R7}
		STMIA	R5!, {R6,R7}
		STMIA	R5!, {R6,R7}
		STMIA	R5!, {R6,R7}
		STMIA	R5!, {R6,R7}
		STMIA	R5!, {R6,R7}
		STMIA	R5!, {R6,R7}
		STMIA	R5!, {R6,R7}
		SUBS	R5, #0x40 ; '@'
		LSLS	R1, R1,	#1
		MOV	SP, R1
		BX	LR
; End of function sub_302


; =============== S U B	R O U T	I N E =======================================


Get20001000				; CODE XREF: sub_302+2p
		LDR	R0, =unk_20001000
		BX	LR
; End of function Get20001000

; ---------------------------------------------------------------------------
off_344		DCD unk_20001000	; DATA XREF: Get20001000r

; =============== S U B	R O U T	I N E =======================================

; Attributes: noreturn

sub_348					; CODE XREF: sub_15A+8p
		LDR	R1, =0x20026
		MOVS	R0, #0x18
		BKPT	0xAB ; '«'

loc_34E					; CODE XREF: sub_348:loc_34Ej
		B	loc_34E
; End of function sub_348

; ---------------------------------------------------------------------------
dword_350	DCD 0x20026		; DATA XREF: sub_348r

; =============== S U B	R O U T	I N E =======================================


sub_354					; CODE XREF: BOOT:loc_B24p
		LDR	R1, =(loc_38C+1)
		PUSH	{R4,LR}
		MOVS	R2, #0x28 ; '('
		SUBS	R1, R1,	#1
		LDR	R0, =dword_20000044
		BL	sub_280
		POP	{R4,PC}
; End of function sub_354

; ---------------------------------------------------------------------------
off_364		DCD loc_38C+1		; DATA XREF: sub_354r
off_368		DCD dword_20000044	; DATA XREF: sub_354+8r

; =============== S U B	R O U T	I N E =======================================


sub_36C					; CODE XREF: BOOT:0000058Cp
		PUSH	{R4,LR}
		LDR	R1, =0x40020000
		MOVS	R0, #0x70 ; 'p'
		STRB	R0, [R1]
		BL	sub_3A0
		LDR	R0, =(dword_20000044+1)
		BLX	R0 ; dword_20000044
		BL	sub_3C0
		POP	{R4,PC}
; End of function sub_36C

; ---------------------------------------------------------------------------
		ALIGN 4
dword_384	DCD 0x40020000		; DATA XREF: sub_36C+2r
; int (*off_388)(void)
off_388		DCD dword_20000044+1	; DATA XREF: sub_36C+Cr
; ---------------------------------------------------------------------------

loc_38C					; DATA XREF: sub_354o BOOT:off_364o
		LDR	R0, =0x40020000
		MOVS	R1, #0x80 ; ''
		STRB	R1, [R0]

loc_392					; CODE XREF: BOOT:00000396j
		LDRB	R1, [R0]
		LSLS	R1, R1,	#0x18
		BPL	loc_392
		BX	LR
; ---------------------------------------------------------------------------
		ALIGN 4
dword_39C	DCD 0x40020000		; DATA XREF: BOOT:loc_38Cr

; =============== S U B	R O U T	I N E =======================================


sub_3A0					; CODE XREF: sub_36C+8p sub_410+46p ...
		LDR	R0, =dword_20000030
		LDR	R1, [R0]
		CMP	R1, #0
		BNE	loc_3B2
		LDR	R2, =0xE000E100
		LDR	R3, [R2]
		STR	R3, [R0,#(dword_20000034 - 0x20000030)]
		MOVS	R3, #0
		STR	R3, [R2]

loc_3B2					; CODE XREF: sub_3A0+6j
		ADDS	R1, R1,	#1
		STR	R1, [R0]
		BX	LR
; End of function sub_3A0

; ---------------------------------------------------------------------------
off_3B8		DCD dword_20000030	; DATA XREF: sub_3A0r
dword_3BC	DCD 0xE000E100		; DATA XREF: sub_3A0+8r

; =============== S U B	R O U T	I N E =======================================


sub_3C0					; CODE XREF: sub_36C+10p sub_410+4Ep ...
		LDR	R0, =dword_20000030
		LDR	R1, [R0]
		CMP	R1, #0
		BEQ	locret_3D4
		SUBS	R1, R1,	#1
		STR	R1, [R0]
		BNE	locret_3D4
		LDR	R1, =0xE000E100
		LDR	R0, [R0,#(dword_20000034 - 0x20000030)]
		STR	R0, [R1]

locret_3D4				; CODE XREF: sub_3C0+6j sub_3C0+Cj
		BX	LR
; End of function sub_3C0

; ---------------------------------------------------------------------------
		ALIGN 4
off_3D8		DCD dword_20000030	; DATA XREF: sub_3C0r
dword_3DC	DCD 0xE000E100		; DATA XREF: sub_3C0+Er

; =============== S U B	R O U T	I N E =======================================


sub_3E0					; CODE XREF: sub_800:loc_824p
					; sub_800:loc_8F8p ...
		LDR	R0, =0x40048100
		MOVS	R1, #0x55 ; 'U'
		STR	R1, [R0,#4]
		MOVS	R1, #0xAA ; 'ª'
		STR	R1, [R0,#4]
		BX	LR
; End of function sub_3E0

; ---------------------------------------------------------------------------
dword_3EC	DCD 0x40048100		; DATA XREF: sub_3E0r
		ALIGN 0x20
byte_400	DCB 0xFF
unk_401		DCB 0xFF		; DATA XREF: SticksAdjustPage:loc_AE9Co
					; ROM:off_AFDCo
		DCB 0xFF
		DCB 0xFF
		DCB 0xFF
		DCB 0xFF
		DCB 0xFF
		DCB 0xFF
		DCB 0xFF
		DCB 0xFF
		DCB 0xFF
		DCB 0xFF
		DCB 0xFE ; þ
		DCB 0xF3 ; ó
		DCB 0xFF
		DCB 0xFF

; =============== S U B	R O U T	I N E =======================================


sub_410					; CODE XREF: BOOT:00000660p

var_28		= -0x28
var_18		= -0x18

		PUSH	{R0-R2,R4-R7,LR}
		SUB	SP, SP,	#8
		MOVS	R4, R1
		MOV	R6, R0
		BEQ	loc_4B0
		LDR	R7, =0x40020000
		LDR	R0, =(dword_20000044+1)
		STR	R0, [SP,#0x28+var_28]

loc_420					; CODE XREF: sub_410+9Ej
		LDR	R0, [SP,#0x28+var_18]
		LDRB	R1, [R0]
		MOV	R5, R1
		LDRB	R1, [R0,#1]
		LSLS	R1, R1,	#8
		ORRS	R5, R1
		LDRB	R1, [R0,#2]
		LDRB	R0, [R0,#3]
		LSLS	R1, R1,	#0x10
		ORRS	R5, R1
		LSLS	R0, R0,	#0x18
		ORRS	R5, R0
		CMP	R4, #4
		BCS	loc_448
		LSLS	R1, R4,	#3
		MOVS	R0, #1
		LSLS	R0, R1
		SUBS	R0, R0,	#1
		MVNS	R0, R0
		ORRS	R5, R0

loc_448					; CODE XREF: sub_410+2Aj
		MOVS	R0, #0x6000000

loc_44C					; DATA XREF: ROM:0000B71Eo
					; ROM:off_B7ECo
		ORRS	R0, R6
		STR	R5, [R7,#8]
		STR	R0, [R7,#4]
		MOVS	R0, #0x70 ; 'p'
		STRB	R0, [R7]
		BL	sub_3A0
		LDR	R0, [SP,#0x28+var_28]
		BLX	R0
		BL	sub_3C0
		LDRB	R0, [R7]
		MOVS	R1, #0x71 ; 'q'
		TST	R0, R1
		BEQ	loc_470
		MOVS	R0, #2
		ADD	SP, SP,	#0x14
		POP	{R4-R7,PC}
; ---------------------------------------------------------------------------

loc_470					; CODE XREF: sub_410+58j
		MOVS	R0, #0x2000000
		ORRS	R0, R6
		STR	R0, [R7,#4]
		MOVS	R0, #0x1000000
		STR	R5, [R7,#0xC]
		STR	R0, [R7,#8]
		MOVS	R0, #0x70 ; 'p'
		STRB	R0, [R7]
		BL	sub_3A0
		LDR	R0, [SP,#0x28+var_28]
		BLX	R0
		BL	sub_3C0
		LDRB	R0, [R7]
		MOVS	R1, #0x71 ; 'q'
		TST	R0, R1
		BEQ	loc_49E
		MOVS	R0, #3
		ADD	SP, SP,	#0x14
		POP	{R4-R7,PC}
; ---------------------------------------------------------------------------

loc_49E					; CODE XREF: sub_410+86j
		CMP	R4, #4
		BLS	loc_4B0
		LDR	R0, [SP,#0x28+var_18]
		SUBS	R4, R4,	#4
		ADDS	R0, R0,	#4
		ADDS	R6, R6,	#4
		STR	R0, [SP,#0x28+var_18]
		CMP	R4, #0
		BNE	loc_420

loc_4B0					; CODE XREF: sub_410+8j sub_410+90j
		MOVS	R0, #0
		ADD	SP, SP,	#0x14
		POP	{R4-R7,PC}
; End of function sub_410

; ---------------------------------------------------------------------------
		DCB    0
		DCB    0
dword_4B8	DCD 0x40020000		; DATA XREF: sub_410+Ar
off_4BC		DCD dword_20000044+1	; DATA XREF: sub_410+Cr
; ---------------------------------------------------------------------------

loc_4C0					; CODE XREF: sub_800+B6p
		PUSH	{R4-R6,LR}
		MOVS	R3, #0
		LDRB	R2, [R0,#2]
		MOV	R1, R3
		CMP	R2, #0xC0 ; 'À'
		BEQ	loc_4DC
		CMP	R2, #0xC1 ; 'Á'
		BEQ	loc_534
		ADDS	R5, R0,	#3
		CMP	R2, #0xC2 ; 'Â'
		BEQ	loc_556
		CMP	R2, #0xC3 ; 'Ã'
		BNE	loc_5D8
		B	loc_622
; ---------------------------------------------------------------------------

loc_4DC					; CODE XREF: BOOT:000004CAj
		LDRB	R2, [R0,#1]
		LDRB	R4, [R0]
		LSLS	R0, R2,	#8
		ORRS	R0, R4
		CMP	R0, #5
		BNE	loc_5D8
		LDR	R0, =byte_20000000
		LDRB	R2, [R0]
		LDR	R0, =factoryMode
		CMP	R2, #0
		BEQ	loc_514
		LDR	R2, =dword_278C
		LDR	R2, [R2]
		STRB	R2, [R0,#(byte_20000005	- 0x20000001)]
		LSRS	R3, R2,	#8
		STRB	R3, [R0,#(byte_20000006	- 0x20000001)]
		LSRS	R3, R2,	#0x10
		STRB	R3, [R0,#(byte_20000007	- 0x20000001)]
		LSRS	R2, R2,	#0x18
		STRB	R2, [R0,#(byte_20000008	- 0x20000001)]
		STRB	R1, [R0,#(sw_X - 0x20000001)]
		LSRS	R2, R1,	#8
		STRB	R2, [R0,#(byte_2000000A	- 0x20000001)]
		LSRS	R2, R1,	#0x10
		STRB	R2, [R0,#(sw_X_val - 0x20000001)]
		LSRS	R1, R1,	#0x18
		STRB	R1, [R0,#(byte_2000000C	- 0x20000001)]
		B	loc_530
; ---------------------------------------------------------------------------

loc_514					; CODE XREF: BOOT:000004F0j
					; DATA XREF: ROM:0000B78Ao ...
		STRB	R1, [R0,#(byte_20000005	- 0x20000001)]
		LSRS	R2, R1,	#8
		STRB	R2, [R0,#(byte_20000006	- 0x20000001)]
		LSRS	R2, R1,	#0x10
		STRB	R2, [R0,#(byte_20000007	- 0x20000001)]
		LSRS	R2, R1,	#0x18
		STRB	R2, [R0,#(byte_20000008	- 0x20000001)]
		STRB	R1, [R0,#(sw_X - 0x20000001)]
		LSRS	R2, R1,	#8
		STRB	R2, [R0,#(byte_2000000A	- 0x20000001)]
		LSRS	R2, R1,	#0x10
		STRB	R2, [R0,#(sw_X_val - 0x20000001)]
		LSRS	R1, R1,	#0x18
		STRB	R1, [R0,#(byte_2000000C	- 0x20000001)]

loc_530					; CODE XREF: BOOT:00000512j
		LDR	R3, =factoryMode
		B	loc_684
; ---------------------------------------------------------------------------

loc_534					; CODE XREF: BOOT:000004CEj
		LDRB	R2, [R0,#1]
		LDRB	R4, [R0]
		LSLS	R0, R2,	#8
		ORRS	R0, R4
		CMP	R0, #6
		BNE	loc_5D8
		LDR	R0, =dword_1FFFF800
		STR	R1, [R0]
		STR	R1, [R0,#(dword_1FFFF804 - 0x1FFFF800)]
; ---------------------------------------------------------------------------
		DCB 0xBF ; ¿
		DCB 0xF3 ; ó
		DCB 0x4F ; O
		DCB 0x8F ; 
		DCB 0x54 ; T
		DCB 0x49 ; I
		DCB 0x52 ; R
		DCB 0x48 ; H
		DCB 0xC8 ; È
		DCB 0x60 ; `
		DCB 0xBF ; ¿
		DCB 0xF3 ; ó
		DCB 0x4F ; O
		DCB 0x8F ; 
		DCB 0xFE ; þ
		DCB 0xE7 ; ç
; ---------------------------------------------------------------------------

loc_556					; CODE XREF: BOOT:000004D4j
		LDRB	R2, [R0,#1]
		LDRB	R4, [R0]
		LSLS	R0, R2,	#8
		ORRS	R0, R4
		CMP	R0, #0x11
		BNE	loc_5D8
		LDRB	R3, [R5]
		LDRB	R2, [R5,#3]
		MOV	R0, R3
		LDRB	R3, [R5,#1]
		LSLS	R2, R2,	#0x18
		LSLS	R3, R3,	#8
		ORRS	R0, R3
		LDRB	R3, [R5,#2]
		MOVS	R6, #0x70 ; 'p'
		LSLS	R3, R3,	#0x10
		ORRS	R0, R3
		ORRS	R0, R2
		LDR	R2, =0x9001800
		LDR	R4, =0x40020000
		CMP	R0, R2
		BNE	loc_590
		STRB	R6, [R4]
		STR	R1, [R4,#8]
		LDR	R0, =0x9001000
		STR	R1, [R4,#0xC]
		STR	R0, [R4,#4]
		BL	sub_36C

loc_590					; CODE XREF: BOOT:00000580j
		STRB	R6, [R4]
		LDRB	R2, [R5]
		LDRB	R1, [R5,#3]
		MOV	R0, R2
		LDRB	R2, [R5,#1]
		LSLS	R1, R1,	#0x18
		LSLS	R2, R2,	#8
		ORRS	R0, R2
		LDRB	R2, [R5,#2]
		LSLS	R2, R2,	#0x10
		ORRS	R0, R2
		ORRS	R0, R1
		STR	R0, [R4,#4]
		LDRB	R2, [R5,#4]
		LDRB	R1, [R5,#7]
		MOV	R0, R2
		LDRB	R2, [R5,#5]
		LSLS	R1, R1,	#0x18
		LSLS	R2, R2,	#8
		ORRS	R0, R2
		LDRB	R2, [R5,#6]
		LSLS	R2, R2,	#0x10
		ORRS	R0, R2
		ORRS	R0, R1
		STR	R0, [R4,#8]
		MOVS	R0, #8
		ADDS	R1, R5,	R0
		LDRB	R2, [R1]
		MOV	R0, R2
		LDRB	R2, [R1,#1]
		LSLS	R2, R2,	#8
		ORRS	R0, R2
		LDRB	R2, [R1,#2]
		LSLS	R2, R2,	#0x10
		ORRS	R0, R2
		B	loc_5DA
; ---------------------------------------------------------------------------

loc_5D8					; CODE XREF: BOOT:000004D8j
					; BOOT:000004E6j ...
		B	loc_684
; ---------------------------------------------------------------------------

loc_5DA					; CODE XREF: BOOT:000005D6j
		LDRB	R1, [R1,#3]
; ---------------------------------------------------------------------------
unk_5DC		DCB    9		; DATA XREF: rxpacketHandle+F4o
					; ROM:off_65A0o ...
		DCD 0xE0430806
		DCB 0x60 ; `
		DCB 0xFF
		DCB 0xF7 ; ÷
		DCB 0xC3 ; Ã
		DCB 0xFE ; þ
		DCB 0x20
		DCB 0x78 ; x
		DCB 0x30 ; 0
		DCB 0x49 ; I
		DCB    8
		DCB 0x71 ; q
		DCB 0x2F ; /
		DCB 0x48 ; H
		DCB 0x61 ; a
		DCB 0x68 ; h
		DCB 0x41 ; A
		DCB 0x71 ; q
		DCB  0xA
		DCB  0xA
		DCB 0x82 ; 
		DCB 0x71 ; q
		DCB  0xA
		DCB  0xC
		DCB 0xC2 ; Â
		DCB 0x71 ; q
		DCB    9
		DCB  0xE
		DCB    1
		DCB 0x72 ; r
		DCB 0xA1 ; ¡
		DCB 0x68 ; h
		DCB 0x41 ; A
		DCB 0x72 ; r
		DCB  0xA
		DCB  0xA
		DCB 0x82 ; 
		DCB 0x72 ; r
		DCB  0xA
		DCB  0xC
		DCB 0xC2 ; Â
		DCB 0x72 ; r
		DCB    9
		DCB  0xE
		DCB    1
		DCB 0x73 ; s
		DCB 0xE1 ; á
		DCB 0x68 ; h
		DCB 0x41 ; A
		DCB 0x73 ; s
		DCB  0xA
		DCB  0xA
		DCB 0x82 ; 
		DCB 0x73 ; s
		DCB  0xA
		DCB  0xC
		DCB 0xC2 ; Â
		DCB 0x73 ; s
		DCB    9
		DCB  0xE
		DCB    1
		DCB 0x74 ; t
		DCB    3
		DCB 0x46 ; F
		DCB 0x30 ; 0
		DCB 0xE0 ; à
; ---------------------------------------------------------------------------

loc_622					; CODE XREF: BOOT:000004DAj
		LDRB	R1, [R0,#1]
		MOV	R2, R0
		LDRB	R0, [R0]
		LSLS	R4, R1,	#8
		ORRS	R4, R0
		LDRB	R1, [R2,#8]
		LDRB	R0, [R2,#7]
		LSLS	R1, R1,	#8
		ORRS	R1, R0
		MOV	R6, R1
		ADDS	R1, #0xB
		CMP	R4, R1
		BNE	loc_684
		LDRB	R3, [R5]
		LDRB	R1, [R5,#3]
		MOV	R0, R3
		LDRB	R3, [R5,#1]
		LSLS	R1, R1,	#0x18
		LSLS	R3, R3,	#8
		ORRS	R0, R3
		LDRB	R3, [R5,#2]
		LDR	R4, =(dword_20000020+3)
		LSLS	R3, R3,	#0x10
		ORRS	R0, R3
		ORRS	R0, R1
		MOVS	R1, #0x1400
		CMP	R0, R1
		BCC	loc_676
		ADDS	R2, #9
		MOV	R1, R6
		BL	sub_410
		STRB	R0, [R4,#(activeSensors+3 - 0x20000023)]
		LSRS	R1, R0,	#8
		STRB	R1, [R4,#(dword_20000028 - 0x20000023)]
		LSRS	R1, R0,	#0x10
		STRB	R1, [R4,#(dword_20000028+1 - 0x20000023)]
		LSRS	R0, R0,	#0x18
		STRB	R0, [R4,#(dword_20000028+2 - 0x20000023)]
		MOV	R3, R4
		B	loc_684
; ---------------------------------------------------------------------------

loc_676					; CODE XREF: BOOT:0000065Aj
		MOVS	R0, #4
		STRB	R0, [R4,#(activeSensors+3 - 0x20000023)]
		MOVS	R1, #0
		STRB	R1, [R4,#(dword_20000028 - 0x20000023)]
		STRB	R1, [R4,#(dword_20000028+1 - 0x20000023)]
		LDR	R3, =(dword_20000020+3)
		STRB	R1, [R4,#(dword_20000028+2 - 0x20000023)]

loc_684					; CODE XREF: BOOT:00000532j
					; BOOT:loc_5D8j ...
		MOV	R0, R3
		POP	{R4-R6,PC}
; ---------------------------------------------------------------------------
off_688		DCD byte_20000000	; DATA XREF: BOOT:000004E8r
off_68C		DCD factoryMode		; DATA XREF: BOOT:000004ECr
					; BOOT:loc_530r
off_690		DCD dword_278C		; DATA XREF: BOOT:000004F2r
off_694		DCD dword_1FFFF800	; DATA XREF: BOOT:00000540r
		DCB    4
		DCB    0
		DCB 0xFA ; ú
		DCB    5
		DCB    0
		DCB 0xED ; í
		DCB    0
		DCB 0xE0 ; à
dword_6A0	DCD 0x9001800		; DATA XREF: BOOT:0000057Ar
dword_6A4	DCD 0x40020000		; DATA XREF: BOOT:0000057Cr
dword_6A8	DCD 0x9001000		; DATA XREF: BOOT:00000586r
		DCB 0x10
		DCB    0
		DCB    0
		DCB 0x20
off_6B0		DCD dword_20000020+3	; DATA XREF: BOOT:0000064Cr
					; BOOT:00000680r

; =============== S U B	R O U T	I N E =======================================


sub_6B4					; CODE XREF: BOOT:00000AD4p
		PUSH	{R4,R5}
		LDR	R4, =0x7FFFFFFF
		LDR	R2, =0xFFFF
		LDR	R3, =unk_B80
		CMP	R1, R4
		BLS	loc_6DC
		CMP	R1, #0
		BEQ	loc_724

loc_6C4					; CODE XREF: sub_6B4+24j
		LDRB	R5, [R0]
		LSRS	R4, R2,	#8
		EORS	R4, R5
		LSLS	R4, R4,	#1
		LDRH	R4, [R3,R4]
		LSLS	R2, R2,	#8
		EORS	R4, R2
		ADDS	R0, R0,	#1
		UXTH	R2, R4
		SUBS	R1, R1,	#1
		BNE	loc_6C4
		B	loc_724
; ---------------------------------------------------------------------------

loc_6DC					; CODE XREF: sub_6B4+Aj
		CMP	R1, #0
		BLE	loc_724
		LSLS	R4, R1,	#0x1F
		BEQ	loc_6F8
		LDRB	R4, [R0]
		MOVS	R2, #0xFF
		EORS	R2, R4
		LSLS	R2, R2,	#1
		LDRH	R2, [R3,R2]
		MOVS	R4, #0xFF00
		EORS	R2, R4
		UXTH	R2, R2
		ADDS	R0, R0,	#1

loc_6F8					; CODE XREF: sub_6B4+2Ej
		ASRS	R1, R1,	#1
		BEQ	loc_724

loc_6FC					; CODE XREF: sub_6B4+6Ej
		LSRS	R4, R2,	#8
		LDRB	R5, [R0]
		LSLS	R2, R2,	#8
		EORS	R4, R5
		LSLS	R4, R4,	#1
		LDRH	R4, [R3,R4]
		ADDS	R0, R0,	#1
		EORS	R4, R2
		UXTH	R2, R4
		LDRB	R5, [R0]
		LSRS	R4, R2,	#8
		EORS	R4, R5
		LSLS	R4, R4,	#1
		LDRH	R4, [R3,R4]
		LSLS	R2, R2,	#8
		EORS	R4, R2
		ADDS	R0, R0,	#1
		UXTH	R2, R4
		SUBS	R1, R1,	#1
		BNE	loc_6FC

loc_724					; CODE XREF: sub_6B4+Ej sub_6B4+26j ...
		POP	{R4,R5}
		MOV	R0, R2
		BX	LR
; End of function sub_6B4

; ---------------------------------------------------------------------------
		DCB    0
		DCB    0
dword_72C	DCD 0xFFFF		; DATA XREF: sub_6B4+4r
dword_730	DCD 0x7FFFFFFF		; DATA XREF: sub_6B4+2r
off_734		DCD unk_B80		; DATA XREF: sub_6B4+6r

; =============== S U B	R O U T	I N E =======================================


sub_738					; CODE XREF: BOOT:loc_A60p
		LDR	R1, =0x40048100
		MOVS	R0, #0xD
		STR	R0, [R1]
		LDR	R1, =dword_20000030
		MOVS	R0, #0
		STR	R0, [R1]
		LDR	R0, =0xE000E000
		LDR	R1, =0xFFFFFF
		STR	R1, [R0,#0x14]
		LDR	R1, [R0,#0x10]
		MOVS	R2, #1
		ORRS	R1, R2
		STR	R1, [R0,#0x10]
		LDR	R0, =0x40064000
		MOVS	R1, #0x9C ; ''
		STRB	R1, [R0,#1]
		MOVS	R1, #0x98 ; ''
		STRB	R1, [R0]
		LDRB	R1, [R0,#6]

loc_75E					; CODE XREF: sub_738+2Aj
		LDRB	R1, [R0,#6]
		LSLS	R1, R1,	#0x1B
		BMI	loc_75E

loc_764					; CODE XREF: sub_738+34j
		LDRB	R1, [R0,#6]
		LSLS	R1, R1,	#0x1C
		LSRS	R1, R1,	#0x1E
		CMP	R1, #2
		BNE	loc_764
		LDRB	R1, [R0,#4]
		LSRS	R1, R1,	#5
		LSLS	R1, R1,	#5
		ADDS	R1, R1,	#3
		STRB	R1, [R0,#4]
		LDRB	R1, [R0,#5]
		MOVS	R2, #0x40 ; '@'
		ORRS	R1, R2
		STRB	R1, [R0,#5]
		LDRB	R1, [R0,#5]
		LSRS	R1, R1,	#5
		LSLS	R1, R1,	#5
		STRB	R1, [R0,#5]

loc_788					; CODE XREF: sub_738+54j
		LDRB	R1, [R0,#6]
		LSLS	R1, R1,	#0x1A
		BPL	loc_788

loc_78E					; CODE XREF: sub_738+5Aj
		LDRB	R1, [R0,#6]
		LSLS	R1, R1,	#0x19
		BPL	loc_78E
		LDR	R2, =0x40048040
		LDR	R1, [R2,#4]
		MOVS	R3, #0x70000
		ANDS	R1, R3
		MOVS	R3, #0x10000
		ORRS	R1, R3
		STR	R1, [R2,#4]
		LDRB	R1, [R0]
		LSLS	R1, R1,	#0x1A
		LSRS	R1, R1,	#0x1A
		STRB	R1, [R0]

loc_7AE					; CODE XREF: sub_738+7Ej
		LDRB	R1, [R0,#6]
		LSLS	R1, R1,	#0x1C
		LSRS	R1, R1,	#0x1E
		CMP	R1, #3
		BNE	loc_7AE
		LDR	R0, =0x40065000
		LDRB	R1, [R0]
		MOVS	R3, #0x80 ; ''
		ORRS	R1, R3
		STRB	R1, [R0]
		LDR	R0, =0x40048000
		LDR	R1, [R0,#0x38]
		MOVS	R3, #0x3E00
		ORRS	R1, R3
		STR	R1, [R0,#0x38]
		LDR	R1, [R0,#0x3C]
		MOVS	R3, #2
		ORRS	R1, R3
		STR	R1, [R0,#0x3C]
		LDR	R0, [R2]
		LSLS	R1, R3,	#7
		ORRS	R0, R1
		STR	R0, [R2]
		BX	LR
; End of function sub_738

; ---------------------------------------------------------------------------
dword_7E0	DCD 0x40048100		; DATA XREF: sub_738r
off_7E4		DCD dword_20000030	; DATA XREF: sub_738+6r
dword_7E8	DCD 0xFFFFFF		; DATA XREF: sub_738+Er
dword_7EC	DCD 0xE000E000		; DATA XREF: sub_738+Cr
dword_7F0	DCD 0x40064000		; DATA XREF: sub_738+1Ar
dword_7F4	DCD 0x40048040		; DATA XREF: sub_738+5Cr
dword_7F8	DCD 0x40065000		; DATA XREF: sub_738+80r
dword_7FC	DCD 0x40048000		; DATA XREF: sub_738+8Ar

; =============== S U B	R O U T	I N E =======================================


sub_800					; CODE XREF: BOOT:loc_B30p
					; DATA XREF: ROM:0000ED40o

var_144		= -0x144
var_140		= -0x140
var_13C		= -0x13C
var_134		= -0x134
var_130		= -0x130
var_1C		= -0x1C

		PUSH	{R4-R7,LR}
		LDR	R1, =0x40008100
		SUB	SP, SP,	#0x134
		LDR	R0, [R1,#0x14]

loc_808					; DATA XREF: ROM:0000E504o
		LDR	R7, =dword_20000038
		STR	R0, [R7,#(dword_2000003C - 0x20000038)]
		LDR	R2, [R7,#(dword_20000040 - 0x20000038)]
		CMP	R0, R2
		BEQ	loc_910
		STR	R0, [R7,#(dword_20000040 - 0x20000038)]
		LDR	R0, =0xFFFF
		STR	R0, [R1,#0x18]
		ADD	R0, SP,	#0x148+var_134
		ADDS	R0, #2
		STR	R0, [SP,#0x148+var_1C]
		LDR	R0, =(aFlysky02+0x4C0) ; "Kd\x192Kd\x13222\x01\x02\x1022\x1022\x1"...
		ASRS	R6, R1,	#0x13
		ADDS	R5, R0,	R6

loc_824					; CODE XREF: sub_800+50j sub_800+9Ej ...
		BL	sub_3E0
		LDR	R1, [R7,#(dword_2000003C - 0x20000038)]
		LDR	R0, [R7]
		SUBS	R2, R1,	R0
		CMP	R0, R1
		BLS	loc_834
		ADDS	R2, R2,	R6

loc_834					; CODE XREF: sub_800+30j
					; DATA XREF: ROM:0000B7B2o ...
		CMP	R2, #4
		BCC	loc_910
		LDRB	R1, [R0,#1]
		LDRB	R3, [R0]
		LSLS	R1, R1,	#8
		ORRS	R1, R3
		MOVS	R4, #0xFF
		SUBS	R3, R1,	#4
		ADDS	R4, #0xE
		CMP	R3, R4
		BCC	loc_854
		ADDS	R0, R0,	#1
		STR	R0, [R7]
		CMP	R0, R5
		BCC	loc_824
		B	loc_8A0
; ---------------------------------------------------------------------------

loc_854					; CODE XREF: sub_800+48j
		CMP	R2, R1
		BCC	loc_910
		MOVS	R4, #0
		ADD	R2, SP,	#0x148+var_130
		CMP	R1, #0
		BEQ	loc_87E

loc_860					; CODE XREF: sub_800+7Cj
		LDRB	R3, [R0]
		STRB	R3, [R2]
		CMP	R1, #2
		BLS	loc_86C
		LDRB	R3, [R0]
		ADDS	R4, R3,	R4

loc_86C					; CODE XREF: sub_800+66j
		ADDS	R2, R2,	#1
		ADDS	R0, R0,	#1
		CMP	R0, R5
		BCC	loc_876
		SUBS	R0, R0,	R6

loc_876					; CODE XREF: sub_800+72j
		SUBS	R1, R1,	#1
		LSLS	R1, R1,	#0x10
		LSRS	R1, R1,	#0x10
		BNE	loc_860

loc_87E					; CODE XREF: sub_800+5Ej
		LDR	R0, =0xFFFF
		LDR	R1, [SP,#0x148+var_1C]
		EORS	R4, R0
		MOV	R0, SP
		LDRH	R0, [R0,#0x148+var_130]
		ADDS	R2, R0,	R1
		LDRB	R1, [R2,#1]
		LDRB	R2, [R2]
		LSLS	R1, R1,	#8
		ORRS	R1, R2
		CMP	R1, R4
		BEQ	loc_8A6
		LDR	R0, [R7]
		ADDS	R0, R0,	#1
		STR	R0, [R7]
		CMP	R0, R5
		BCC	loc_824

loc_8A0					; CODE XREF: sub_800+52j
		SUBS	R0, R0,	R6
		STR	R0, [R7]
		B	loc_824
; ---------------------------------------------------------------------------

loc_8A6					; CODE XREF: sub_800+94j
		LDR	R1, [R7]
		ADDS	R0, R0,	R1
		STR	R0, [R7]
		CMP	R0, R5
		BCC	loc_8B4
		SUBS	R0, R0,	R6
		STR	R0, [R7]

loc_8B4					; CODE XREF: sub_800+AEj
		ADD	R0, SP,	#0x148+var_130
		BL	loc_4C0
		STR	R0, [SP,#0x148+var_140]
		CMP	R0, #0
		BEQ	loc_8FC
		LDRB	R1, [R0,#2]
		LDRB	R2, [R0,#1]
		LSLS	R0, R1,	#8
		ORRS	R0, R2
		MOVS	R4, #0
		STR	R0, [SP,#0x148+var_13C]
		CMP	R0, #2
		BEQ	loc_8F8
		LDR	R0, [SP,#0x148+var_140]
		LDR	R1, [SP,#0x148+var_13C]
		SUBS	R0, R0,	#1
		LSLS	R1, R1,	#0x1F
		BEQ	loc_8DE
		ADDS	R0, R0,	#1
		LDRB	R4, [R0]

loc_8DE					; CODE XREF: sub_800+D8j
		LDR	R1, [SP,#0x148+var_13C]
		MOVS	R2, #0
		SUBS	R1, R1,	#2
		LSRS	R1, R1,	#1
		BEQ	loc_8F6

loc_8E8					; CODE XREF: sub_800+F4j
		LDRB	R3, [R0,#1]
		ADDS	R0, R0,	#2
		ADDS	R4, R3,	R4
		LDRB	R3, [R0]
		ADDS	R2, R3,	R2
		SUBS	R1, R1,	#1
		BNE	loc_8E8

loc_8F6					; CODE XREF: sub_800+E6j
		ADDS	R4, R4,	R2

loc_8F8					; CODE XREF: sub_800+CEj
		BL	sub_3E0

loc_8FC					; CODE XREF: sub_800+BEj
		LDR	R2, [SP,#0x148+var_13C]
		LDR	R1, [SP,#0x148+var_140]
		MVNS	R0, R4
		ADDS	R1, R1,	R2
		SUBS	R1, #0x10
		STRB	R0, [R1,#0xE]
		LSRS	R0, R0,	#8
		STRB	R0, [R1,#0xF]
		LDR	R0, [SP,#0x148+var_13C]
		B	loc_912
; ---------------------------------------------------------------------------

loc_910					; CODE XREF: sub_800+10j sub_800+36j ...
		B	loc_95A
; ---------------------------------------------------------------------------

loc_912					; CODE XREF: sub_800+10Ej
		STR	R0, [SP,#0x148+var_144]
		LDR	R0, =0x40008100

loc_916					; CODE XREF: sub_800+11Aj
		LDR	R1, [R0,#8]
		LSLS	R1, R1,	#8
		BNE	loc_916
		LDR	R0, =0x40008100
		LDR	R0, [R0,#8]
		LSLS	R0, R0,	#7
		BPL	loc_930
		LDR	R0, =0x40008100
		LDR	R1, [R0,#8]
		MOVS	R2, #0x1000000
		ORRS	R1, R2
		STR	R1, [R0,#8]

loc_930					; CODE XREF: sub_800+122j
		LDR	R4, =0x4006C000
		LDRB	R0, [R4,#4]
		LSRS	R0, R0,	#6
		CMP	R0, #3
		BEQ	loc_946

loc_93A					; CODE XREF: sub_800+144j
		BL	sub_3E0
		LDRB	R0, [R4,#4]
		LSRS	R0, R0,	#6
		CMP	R0, #3
		BNE	loc_93A

loc_946					; CODE XREF: sub_800+138j
		LDR	R0, =0x40008100
		LDR	R1, [SP,#0x148+var_140]
		STR	R1, [R0]
		LDR	R1, [SP,#0x148+var_144]
		STR	R1, [R0,#8]
		LDR	R1, [R0,#0xC]
		LDR	R2, =0x40010000
		ORRS	R1, R2
		STR	R1, [R0,#0xC]
		B	loc_824
; ---------------------------------------------------------------------------

loc_95A					; CODE XREF: sub_800:loc_910j
		ADD	SP, SP,	#0x134
		POP	{R4-R7,PC}
; End of function sub_800

; ---------------------------------------------------------------------------
		DCB    0
		DCB    0
dword_960	DCD 0x40008100		; DATA XREF: sub_800+2r sub_800+114r ...
off_964		DCD dword_20000038	; DATA XREF: sub_800:loc_808r
dword_968	DCD 0xFFFF		; DATA XREF: sub_800+14r
					; sub_800:loc_87Er
off_96C		DCD aFlysky02+0x4C0	; DATA XREF: sub_800+1Er
					; "Kd\x192Kd\x13222\x01\x02\x1022\x1022\x1"...
dword_970	DCD 0x4006C000		; DATA XREF: sub_800:loc_930r
dword_974	DCD 0x40010000		; DATA XREF: sub_800+152r

; =============== S U B	R O U T	I N E =======================================


sub_978					; CODE XREF: BOOT:00000B28p
		PUSH	{R4}
		LDR	R0, =dword_20000038
		LDR	R1, =(aFlysky02+0x4C0) ; "Kd\x192Kd\x13222\x01\x02\x1022\x1022\x1"...
		STR	R1, [R0]
		STR	R1, [R0,#(dword_2000003C - 0x20000038)]
		STR	R1, [R0,#(dword_20000040 - 0x20000038)]
		LDR	R0, =0x40048000
		LDR	R2, [R0,#0x34]
		MOVS	R3, #0x1000
		ORRS	R2, R3
		STR	R2, [R0,#0x34]
		MOVS	R0, #3
		LDR	R2, =0x4004D040
		LSLS	R0, R0,	#8
		STR	R0, [R2]
		STR	R0, [R2,#4]
		LDR	R0, =0x4006C000
		MOVS	R2, #0
		STRB	R2, [R0]
		MOVS	R2, #0xD
		STRB	R2, [R0,#1]
		LDRB	R2, [R0,#3]
		MOVS	R3, #0xAC ; '¬'
		ORRS	R2, R3
		STRB	R2, [R0,#3]
		LDRB	R2, [R0,#8]
		MOVS	R3, #0xA0 ; ' '
		ORRS	R2, R3
		STRB	R2, [R0,#8]
		LDR	R2, =0x40021000
		MOVS	R0, #0x87 ; ''
		STRB	R0, [R2]
		LDR	R0, =0x40008100
		LDR	R3, =0x4006C007
		STR	R3, [R0,#4]
		LDR	R4, =0x20520080
		STR	R4, [R0,#0xC]
		MOVS	R4, #0x86 ; ''
		STRB	R4, [R2,#1]
		STR	R3, [R0,#0x10]
		STR	R1, [R0,#0x14]
		LDR	R1, =0xFFFF
		STR	R1, [R0,#0x18]
		LDR	R1, =0x601A0800
		STR	R1, [R0,#0x1C]
		POP	{R4}
		BX	LR
; End of function sub_978

; ---------------------------------------------------------------------------
off_9D8		DCD aFlysky02+0x4C0	; DATA XREF: sub_978+4r
					; "Kd\x192Kd\x13222\x01\x02\x1022\x1022\x1"...
off_9DC		DCD dword_20000038	; DATA XREF: sub_978+2r
dword_9E0	DCD 0x40048000		; DATA XREF: sub_978+Cr
dword_9E4	DCD 0x4004D040		; DATA XREF: sub_978+1Ar
dword_9E8	DCD 0x4006C000		; DATA XREF: sub_978+22r
dword_9EC	DCD 0x40021000		; DATA XREF: sub_978+3Cr
dword_9F0	DCD 0x4006C007		; DATA XREF: sub_978+44r
dword_9F4	DCD 0x40008100		; DATA XREF: sub_978+42r
dword_9F8	DCD 0x20520080		; DATA XREF: sub_978+48r
dword_9FC	DCD 0xFFFF		; DATA XREF: sub_978+54r
dword_A00	DCD 0x601A0800		; DATA XREF: sub_978+58r
; ---------------------------------------------------------------------------

loc_A04					; CODE XREF: BOOT:00000152j
		LDR	R1, =factoryMode
		MOVS	R0, #0x55 ; 'U'
		STRB	R0, [R1]
		MOVS	R3, #0xF
		MOV	R2, R1
		STRB	R3, [R2,#(byte_20000002	- 0x20000001)]
		MOVS	R3, #0
		STRB	R3, [R2,#(byte_20000003	- 0x20000001)]
		MOVS	R2, #0xC0 ; 'À'
		STRB	R2, [R1,#(byte_20000004	- 0x20000001)]
		STRB	R3, [R1,#(var_X	- 0x20000001)]
		LDR	R1, =byte_20000010
		MOV	R5, R3
		STRB	R0, [R1]
		MOVS	R3, #0x13
		MOV	R2, R1
		STRB	R3, [R2,#(byte_20000011	- 0x20000010)]
		MOVS	R3, #0
		STRB	R3, [R2,#(byte_20000012	- 0x20000010)]
		MOVS	R2, #0xC2 ; 'Â'
		STRB	R2, [R1,#(byte_20000013	- 0x20000010)]
		LDR	R1, =(dword_20000020+3)
		MOVS	R2, #0xA
		STRB	R0, [R1]
		MOV	R0, R1
		STRB	R2, [R0,#(activeSensors	- 0x20000023)]
		STRB	R3, [R0,#(activeSensors+1 - 0x20000023)]
		MOVS	R0, #0xC3 ; 'Ã'
		LDR	R4, =dword_1FFFF800
		STRB	R0, [R1,#(activeSensors+2 - 0x20000023)]
		LDR	R1, [R4]
		LDR	R0, =0xC87251CC
		LDR	R7, =0x92017EA0
		CMP	R1, R0
		BNE	loc_A60
		LDR	R0, [R4,#(dword_1FFFF804 - 0x1FFFF800)]
		CMP	R0, R7
		BNE	loc_A60
		STR	R5, [R4]
		STR	R5, [R4,#(dword_1FFFF804 - 0x1FFFF800)]
		MOVS	R0, #3
		LDR	R1, =0xE000ED00
		LSLS	R0, R0,	#0xB
		STR	R0, [R1,#8]
		BL	sub_1B4

loc_A60					; CODE XREF: BOOT:00000A48j
					; BOOT:00000A4Ej
		BL	sub_738
		MOVS	R0, #0xFF
		LDR	R1, =0x4004A040
		ADDS	R0, #1
		STR	R0, [R1]
		STR	R0, [R1,#4]
		STR	R0, [R1,#8]
		STR	R0, [R1,#0xC]
		LDR	R1, =0x4004A000
		STR	R0, [R1,#4]
		STR	R0, [R1,#8]
		STR	R0, [R1,#0xC]
		LDR	R0, =0x400FF040
		LDR	R1, [R0,#0x14]
		MOVS	R2, #0xF0000
		BICS	R1, R2
		STR	R1, [R0,#0x14]
		LDR	R2, [R0,#0x14]
		MOVS	R1, #4
		ORRS	R2, R1
		STR	R2, [R0,#0x14]
		LDR	R2, [R0]
		MOVS	R6, #0
		BICS	R2, R1
		STR	R2, [R0]
		MOV	R1, R6

loc_A98					; CODE XREF: BOOT:00000AB0j
		LDR	R2, [R0,#0x10]
		LSRS	R2, R2,	#0x10
		LSLS	R2, R2,	#0x1E
		BMI	loc_AAA
		LDR	R2, [R0,#0x10]
		LSRS	R2, R2,	#0x10
		LSLS	R2, R2,	#0x1D
		BMI	loc_AAA
		MOVS	R6, #1

loc_AAA					; CODE XREF: BOOT:00000A9Ej
					; BOOT:00000AA6j
		ADDS	R1, R1,	#1
		UXTB	R1, R1
		CMP	R1, #0xA
		BCC	loc_A98
		LDR	R0, =signature1
		LDR	R2, [R0]
		LDR	R1, =0xC87251CC
		CMP	R2, R1
		BNE	loc_B20
		LDR	R1, [R0,#(signature2 - 0x2780)]
		LDR	R0, =0x92017EA0
		CMP	R1, R0
		BNE	loc_B20
		LDR	R7, =CRC_SUB_1800
		LDR	R0, [R7]
		LDR	R1, =0xE7FE
		CMP	R0, R1
		BCS	loc_B20
		LDR	R1, [R7]
		MOVS	R0, #0x1800
		BL	sub_6B4
		LDR	R2, [R7]
		MOVS	R1, #0x1800
		ADDS	R2, R2,	R1
		LDRB	R1, [R2,#1]
		LDRB	R2, [R2]
		LSLS	R1, R1,	#8
		ORRS	R1, R2
		CMP	R0, R1
		BNE	loc_B20
		CMP	R6, #0
		BNE	loc_B18
		LDR	R0, [R4]
		LDR	R1, =0x1AE811C9
		CMP	R0, R1
		BNE	loc_B00
		LDR	R0, [R4,#(dword_1FFFF804 - 0x1FFFF800)]
		LDR	R1, =0x7F5594AC
		CMP	R0, R1
		BEQ	loc_B18

loc_B00					; CODE XREF: BOOT:00000AF6j
		LDR	R0, =0xC87251CC
		STR	R0, [R4]
		LDR	R0, =0x92017EA0
		STR	R0, [R4,#(dword_1FFFF804 - 0x1FFFF800)]
; ---------------------------------------------------------------------------
		DCB 0xBF ; ¿
		DCB 0xF3 ; ó
		DCB 0x4F ; O
		DCB 0x8F ; 
		DCB 0x11
		DCB 0x48 ; H
		DCB 0x1A
		DCB 0x49 ; I
		DCB 0xC1 ; Á
		DCB 0x60 ; `
		DCB 0xBF ; ¿
		DCB 0xF3 ; ó
		DCB 0x4F ; O
		DCB 0x8F ; 
		DCB 0xFE ; þ
		DCB 0xE7 ; ç
; ---------------------------------------------------------------------------

loc_B18					; CODE XREF: BOOT:00000AEEj
					; BOOT:00000AFEj
		LDR	R0, =byte_20000000
		MOVS	R1, #1
		STRB	R1, [R0]
		B	loc_B24
; ---------------------------------------------------------------------------

loc_B20					; CODE XREF: BOOT:00000ABAj
					; BOOT:00000AC2j ...
		LDR	R0, =byte_20000000
		STRB	R5, [R0]

loc_B24					; CODE XREF: BOOT:00000B1Ej
		BL	sub_354
		BL	sub_978
		STR	R5, [R4]
		STR	R5, [R4,#4]

loc_B30					; CODE XREF: BOOT:00000B38j
		BL	sub_800
		BL	sub_3E0
		B	loc_B30
; ---------------------------------------------------------------------------
		DCB    0
		DCB    0
off_B3C		DCD factoryMode		; DATA XREF: BOOT:loc_A04r
off_B40		DCD byte_20000010	; DATA XREF: BOOT:00000A1Ar
off_B44		DCD dword_20000020+3	; DATA XREF: BOOT:00000A2Er
off_B48		DCD dword_1FFFF800	; DATA XREF: BOOT:00000A3Cr
dword_B4C	DCD 0xC87251CC		; DATA XREF: BOOT:00000A42r
					; BOOT:00000AB6r ...
dword_B50	DCD 0x92017EA0		; DATA XREF: BOOT:00000A44r
					; BOOT:00000ABEr ...
dword_B54	DCD 0xE000ED00		; DATA XREF: BOOT:00000A56r
dword_B58	DCD 0x4004A040		; DATA XREF: BOOT:00000A66r
dword_B5C	DCD 0x4004A000		; DATA XREF: BOOT:00000A72r
dword_B60	DCD 0x400FF040		; DATA XREF: BOOT:00000A7Ar
off_B64		DCD signature1		; DATA XREF: BOOT:00000AB2r
off_B68		DCD CRC_SUB_1800	; DATA XREF: BOOT:00000AC4r
dword_B6C	DCD 0xE7FE		; DATA XREF: BOOT:00000AC8r
dword_B70	DCD 0x1AE811C9		; DATA XREF: BOOT:00000AF2r
dword_B74	DCD 0x7F5594AC		; DATA XREF: BOOT:00000AFAr
					; FactoryReset+90o ...
		DCB    4
		DCB    0
		DCB 0xFA ; ú
		DCB    5
off_B7C		DCD byte_20000000	; DATA XREF: BOOT:loc_B18r
					; BOOT:loc_B20r
unk_B80		DCB    0		; DATA XREF: sub_6B4+6o BOOT:off_734o
		DCB    0
		DCB 0x21 ; !
		DCB 0x10
		DCB 0x42 ; B
		DCB 0x20
		DCB 0x63 ; c
		DCB 0x30 ; 0
		DCB 0x84 ; 
		DCB 0x40 ; @
		DCB 0xA5 ; ¥
		DCB 0x50 ; P
		DCB 0xC6 ; Æ
		DCB 0x60 ; `
		DCB 0xE7 ; ç
		DCB 0x70 ; p
		DCB    8
		DCB 0x81 ; 
		DCB 0x29 ; )
		DCB 0x91 ; 
		DCB 0x4A ; J
		DCB 0xA1 ; ¡
		DCB 0x6B ; k
		DCB 0xB1 ; ±
		DCB 0x8C ; 
		DCB 0xC1 ; Á
		DCB 0xAD ; ­
		DCB 0xD1 ; Ñ
		DCB 0xCE ; Î
		DCB 0xE1 ; á
		DCB 0xEF ; ï
		DCB 0xF1 ; ñ
		DCB 0x31 ; 1
		DCB 0x12
		DCB 0x10
		DCB    2
		DCB 0x73 ; s
		DCB 0x32 ; 2
		DCB 0x52 ; R
		DCB 0x22 ; "
		DCB 0xB5 ; µ
		DCB 0x52 ; R
		DCB 0x94 ; 
		DCB 0x42 ; B
		DCB 0xF7 ; ÷
		DCB 0x72 ; r
		DCB 0xD6 ; Ö
		DCB 0x62 ; b
		DCB 0x39 ; 9
		DCB 0x93 ; 
		DCB 0x18
		DCB 0x83 ; 
		DCB 0x7B ; {
		DCB 0xB3 ; ³
		DCB 0x5A ; Z
		DCB 0xA3 ; £
byte_BB8	DCB 0xBD		; DATA XREF: controlBackLight+1Ao
					; ROM:off_5CD8o ...
		DCB 0xD3 ; Ó
		DCB 0x9C ; 
		DCB 0xC3 ; Ã
		DCB 0xFF
		DCB 0xF3 ; ó
		DCB 0xDE ; Þ
		DCB 0xE3 ; ã
		DCB 0x62 ; b
		DCB 0x24 ; $
		DCB 0x43 ; C
		DCB 0x34 ; 4
		DCB 0x20
		DCB    4
		DCB    1
		DCB 0x14
		DCB 0xE6 ; æ
		DCB 0x64 ; d
		DCB 0xC7 ; Ç
		DCB 0x74 ; t
		DCB 0xA4 ; ¤
		DCB 0x44 ; D
		DCB 0x85 ; 
		DCB 0x54 ; T
		DCB 0x6A ; j
		DCB 0xA5 ; ¥
		DCB 0x4B ; K
		DCB 0xB5 ; µ
		DCB 0x28 ; (
		DCB 0x85 ; 
		DCB    9
		DCB 0x95 ; 
		DCB 0xEE ; î
		DCB 0xE5 ; å
		DCB 0xCF ; Ï
		DCB 0xF5 ; õ
		DCB 0xAC ; ¬
		DCB 0xC5 ; Å
		DCB 0x8D ; 
		DCB 0xD5 ; Õ
		DCB 0x53 ; S
		DCB 0x36 ; 6
		DCB 0x72 ; r
		DCB 0x26 ; &
		DCB 0x11
		DCB 0x16
		DCB 0x30 ; 0
		DCB    6
		DCB 0xD7 ; ×
		DCB 0x76 ; v
		DCB 0xF6 ; ö
		DCB 0x66 ; f
		DCB 0x95 ; 
		DCB 0x56 ; V
		DCB 0xB4 ; ´
		DCB 0x46 ; F
		DCB 0x5B ; [
		DCB 0xB7 ; ·
		DCB 0x7A ; z
		DCB 0xA7 ; §
		DCB 0x19
		DCB 0x97 ; 
		DCB 0x38 ; 8
		DCB 0x87 ; 
		DCB 0xDF ; ß
		DCB 0xF7 ; ÷
		DCB 0xFE ; þ
		DCB 0xE7 ; ç
		DCB 0x9D ; 
		DCB 0xD7 ; ×
		DCB 0xBC ; ¼
		DCB 0xC7 ; Ç
		DCB 0xC4 ; Ä
		DCB 0x48 ; H
		DCB 0xE5 ; å
		DCB 0x58 ; X
		DCB 0x86 ; 
		DCB 0x68 ; h
		DCB 0xA7 ; §
		DCB 0x78 ; x
		DCB 0x40 ; @
		DCB    8
		DCB 0x61 ; a
		DCB 0x18
		DCB    2
		DCB 0x28 ; (
		DCB 0x23 ; #
		DCB 0x38 ; 8
		DCB 0xCC ; Ì
		DCB 0xC9 ; É
		DCB 0xED ; í
		DCB 0xD9 ; Ù
		DCB 0x8E ; 
		DCB 0xE9 ; é
		DCB 0xAF ; ¯
		DCB 0xF9 ; ù
		DCB 0x48 ; H
		DCB 0x89 ; 
		DCB 0x69 ; i
		DCB 0x99 ; 
		DCB  0xA
		DCB 0xA9 ; ©
		DCB 0x2B ; +
		DCB 0xB9 ; ¹
		DCB 0xF5 ; õ
		DCB 0x5A ; Z
		DCB 0xD4 ; Ô
		DCB 0x4A ; J
		DCB 0xB7 ; ·
		DCB 0x7A ; z
		DCB 0x96 ; 
		DCB 0x6A ; j
		DCB 0x71 ; q
		DCB 0x1A
		DCB 0x50 ; P
		DCB  0xA
		DCB 0x33 ; 3
		DCB 0x3A ; :
		DCB 0x12
		DCB 0x2A ; *
		DCB 0xFD ; ý
		DCB 0xDB ; Û
		DCB 0xDC ; Ü
		DCB 0xCB ; Ë
		DCB 0xBF ; ¿
		DCB 0xFB ; û
		DCB 0x9E ; 
		DCB 0xEB ; ë
		DCB 0x79 ; y
		DCB 0x9B ; 
		DCB 0x58 ; X
		DCB 0x8B ; 
		DCB 0x3B ; ;
		DCB 0xBB ; »
		DCB 0x1A
		DCB 0xAB ; «
		DCB 0xA6 ; ¦
		DCB 0x6C ; l
		DCB 0x87 ; 
		DCB 0x7C ; |
		DCB 0xE4 ; ä
		DCB 0x4C ; L
		DCB 0xC5 ; Å
		DCB 0x5C ; \
		DCB 0x22 ; "
		DCB 0x2C ; ,
		DCB    3
		DCB 0x3C ; <
		DCB 0x60 ; `
		DCB  0xC
		DCB 0x41 ; A
		DCB 0x1C
		DCB 0xAE ; ®
		DCB 0xED ; í
		DCB 0x8F ; 
		DCB 0xFD ; ý
		DCB 0xEC ; ì
		DCB 0xCD ; Í
		DCB 0xCD ; Í
		DCB 0xDD ; Ý
		DCB 0x2A ; *
		DCB 0xAD ; ­
		DCB  0xB
		DCB 0xBD ; ½
		DCB 0x68 ; h
		DCB 0x8D ; 
		DCB 0x49 ; I
		DCB 0x9D ; 
		DCB 0x97 ; 
		DCB 0x7E ; ~
		DCB 0xB6 ; ¶
		DCB 0x6E ; n
		DCB 0xD5 ; Õ
		DCB 0x5E ; ^
		DCB 0xF4 ; ô
		DCB 0x4E ; N
		DCB 0x13
		DCB 0x3E ; >
		DCB 0x32 ; 2
		DCB 0x2E ; .
		DCB 0x51 ; Q
		DCB 0x1E
		DCB 0x70 ; p
		DCB  0xE
		DCB 0x9F ; 
		DCB 0xFF
		DCB 0xBE ; ¾
		DCB 0xEF ; ï
		DCB 0xDD ; Ý
		DCB 0xDF ; ß
		DCB 0xFC ; ü
		DCB 0xCF ; Ï
		DCB 0x1B
		DCB 0xBF ; ¿
		DCB 0x3A ; :
		DCB 0xAF ; ¯
		DCB 0x59 ; Y
		DCB 0x9F ; 
		DCB 0x78 ; x
		DCB 0x8F ; 
		DCB 0x88 ; 
		DCB 0x91 ; 
		DCB 0xA9 ; ©
		DCB 0x81 ; 
		DCB 0xCA ; Ê
		DCB 0xB1 ; ±
		DCB 0xEB ; ë
		DCB 0xA1 ; ¡
		DCB  0xC
		DCB 0xD1 ; Ñ
		DCB 0x2D ; -
		DCB 0xC1 ; Á
		DCB 0x4E ; N
		DCB 0xF1 ; ñ
		DCB 0x6F ; o
		DCB 0xE1 ; á
		DCB 0x80 ; 
		DCB 0x10
		DCB 0xA1 ; ¡
		DCB    0
		DCB 0xC2 ; Â
		DCB 0x30 ; 0
		DCB 0xE3 ; ã
		DCB 0x20
		DCB    4
		DCB 0x50 ; P
		DCB 0x25 ; %
		DCB 0x40 ; @
		DCB 0x46 ; F
		DCB 0x70 ; p
		DCB 0x67 ; g
		DCB 0x60 ; `
		DCB 0xB9 ; ¹
		DCB 0x83 ; 
		DCB 0x98 ; 
		DCB 0x93 ; 
		DCB 0xFB ; û
		DCB 0xA3 ; £
		DCB 0xDA ; Ú
		DCB 0xB3 ; ³
		DCB 0x3D ; =
		DCB 0xC3 ; Ã
		DCB 0x1C
		DCB 0xD3 ; Ó
		DCB 0x7F ; 
		DCB 0xE3 ; ã
		DCB 0x5E ; ^
		DCB 0xF3 ; ó
		DCB 0xB1 ; ±
		DCB    2
		DCB 0x90 ; 
		DCB 0x12
		DCB 0xF3 ; ó
		DCB 0x22 ; "
		DCB 0xD2 ; Ò
		DCB 0x32 ; 2
		DCB 0x35 ; 5
		DCB 0x42 ; B
		DCB 0x14
		DCB 0x52 ; R
		DCB 0x77 ; w
		DCB 0x62 ; b
		DCB 0x56 ; V
		DCB 0x72 ; r
		DCB 0xEA ; ê
		DCB 0xB5 ; µ
		DCB 0xCB ; Ë
		DCB 0xA5 ; ¥
		DCB 0xA8 ; ¨
		DCB 0x95 ; 
		DCB 0x89 ; 
		DCB 0x85 ; 
		DCB 0x6E ; n
		DCB 0xF5 ; õ
		DCB 0x4F ; O
		DCB 0xE5 ; å
		DCB 0x2C ; ,
		DCB 0xD5 ; Õ
		DCB  0xD
		DCB 0xC5 ; Å
		DCB 0xE2 ; â
		DCB 0x34 ; 4
		DCB 0xC3 ; Ã
		DCB 0x24 ; $
		DCB 0xA0 ;  
		DCB 0x14
		DCB 0x81 ; 
		DCB    4
		DCB 0x66 ; f
		DCB 0x74 ; t
		DCB 0x47 ; G
		DCB 0x64 ; d
		DCB 0x24 ; $
		DCB 0x54 ; T
		DCB    5
		DCB 0x44 ; D
		DCB 0xDB ; Û
		DCB 0xA7 ; §
		DCB 0xFA ; ú
		DCB 0xB7 ; ·
		DCB 0x99 ; 
		DCB 0x87 ; 
		DCB 0xB8 ; ¸
		DCB 0x97 ; 
		DCB 0x5F ; _
		DCB 0xE7 ; ç
		DCB 0x7E ; ~
		DCB 0xF7 ; ÷
		DCB 0x1D
		DCB 0xC7 ; Ç
		DCB 0x3C ; <
		DCB 0xD7 ; ×
		DCB 0xD3 ; Ó
		DCB 0x26 ; &
		DCB 0xF2 ; ò
		DCB 0x36 ; 6
		DCB 0x91 ; 
		DCB    6
		DCB 0xB0 ; °
		DCB 0x16
		DCB 0x57 ; W
		DCB 0x66 ; f
		DCB 0x76 ; v
		DCB 0x76 ; v
		DCB 0x15
		DCB 0x46 ; F
		DCB 0x34 ; 4
		DCB 0x56 ; V
		DCB 0x4C ; L
		DCB 0xD9 ; Ù
		DCB 0x6D ; m
		DCB 0xC9 ; É
		DCB  0xE
		DCB 0xF9 ; ù
		DCB 0x2F ; /
		DCB 0xE9 ; é
		DCB 0xC8 ; È
		DCB 0x99 ; 
		DCB 0xE9 ; é
		DCB 0x89 ; 
		DCB 0x8A ; 
		DCB 0xB9 ; ¹
		DCB 0xAB ; «
		DCB 0xA9 ; ©
		DCB 0x44 ; D
		DCB 0x58 ; X
		DCB 0x65 ; e
		DCB 0x48 ; H
		DCB    6
		DCB 0x78 ; x
		DCB 0x27 ; '
		DCB 0x68 ; h
		DCB 0xC0 ; À
		DCB 0x18
		DCB 0xE1 ; á
		DCB    8
		DCB 0x82 ; 
		DCB 0x38 ; 8
		DCB 0xA3 ; £
		DCB 0x28 ; (
		DCB 0x7D ; }
		DCB 0xCB ; Ë
		DCB 0x5C ; \
		DCB 0xDB ; Û
		DCB 0x3F ; ?
		DCB 0xEB ; ë
		DCB 0x1E
		DCB 0xFB ; û
		DCB 0xF9 ; ù
		DCB 0x8B ; 
		DCB 0xD8 ; Ø
		DCB 0x9B ; 
		DCB 0xBB ; »
		DCB 0xAB ; «
		DCB 0x9A ; 
		DCB 0xBB ; »
		DCB 0x75 ; u
		DCB 0x4A ; J
		DCB 0x54 ; T
		DCB 0x5A ; Z
		DCB 0x37 ; 7
		DCB 0x6A ; j
		DCB 0x16
		DCB 0x7A ; z
		DCB 0xF1 ; ñ
		DCB  0xA
		DCB 0xD0 ; Ð
		DCB 0x1A
		DCB 0xB3 ; ³
		DCB 0x2A ; *
		DCB 0x92 ; 
		DCB 0x3A ; :
		DCB 0x2E ; .
		DCB 0xFD ; ý
		DCB  0xF
		DCB 0xED ; í
		DCB 0x6C ; l
		DCB 0xDD ; Ý
		DCB 0x4D ; M
		DCB 0xCD ; Í
		DCB 0xAA ; ª
		DCB 0xBD ; ½
		DCB 0x8B ; 
		DCB 0xAD ; ­
		DCB 0xE8 ; è
		DCB 0x9D ; 
		DCB 0xC9 ; É
		DCB 0x8D ; 
		DCB 0x26 ; &
		DCB 0x7C ; |
		DCB    7
		DCB 0x6C ; l
		DCB 0x64 ; d
		DCB 0x5C ; \
		DCB 0x45 ; E
		DCB 0x4C ; L
		DCB 0xA2 ; ¢
		DCB 0x3C ; <
		DCB 0x83 ; 
		DCB 0x2C ; ,
		DCB 0xE0 ; à
		DCB 0x1C
		DCB 0xC1 ; Á
		DCB  0xC
		DCB 0x1F
		DCB 0xEF ; ï
		DCB 0x3E ; >
		DCB 0xFF
		DCB 0x5D ; ]
		DCB 0xCF ; Ï
		DCB 0x7C ; |
		DCB 0xDF ; ß
		DCB 0x9B ; 
		DCB 0xAF ; ¯
		DCB 0xBA ; º
		DCB 0xBF ; ¿
		DCB 0xD9 ; Ù
		DCB 0x8F ; 
		DCB 0xF8 ; ø
		DCB 0x9F ; 
		DCB 0x17
		DCB 0x6E ; n
		DCB 0x36 ; 6
		DCB 0x7E ; ~
		DCB 0x55 ; U
		DCB 0x4E ; N
		DCB 0x74 ; t
		DCB 0x5E ; ^
		DCB 0x93 ; 
		DCB 0x2E ; .
		DCB 0xB2 ; ²
		DCB 0x3E ; >
		DCB 0xD1 ; Ñ
		DCB  0xE
		DCB 0xF0 ; ð
		DCB 0x1E
		DCB 0x28 ; (
		DCB 0x14
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB 0x20
		DCB 0x44 ; D
		DCB    0
		DCB    0
		DCB    0
		DCB    4
		DCB    1
		DCB    0
		DCB    0
		DCB 0x6C ; l
		DCB 0x14
		DCB    0
		DCB    0
		DCB 0x44 ; D
		DCB    0
		DCB    0
		DCB 0x20
		DCB 0x1C
		DCB 0x14
		DCB    0
		DCB    0
		DCB 0x20
		DCB    1
		DCB    0
		DCB    0
; BOOT		ends

; ===========================================================================

; Segment type:	Regular
		AREA EMPTY, DATA, ALIGN=0
		; ORG 0xDA0
byte_DA0	DCB 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0
					; DATA XREF: startupWarning+3Eo
					; startupWarning+EEo ...
		DCB 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0
		DCB 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0
		DCB 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0
		DCB 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0
		DCB 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0
		DCB 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0
		DCB 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0
		DCB 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0
		DCB 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0
		DCB 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0
		DCB 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0
		DCB 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0
		DCB 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0
		DCB 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0
		DCB 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0
		DCB 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0
		DCB 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0
		DCB 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0
		DCB 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0
		DCB 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0
		DCB 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0
		DCB 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0
		DCB 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0
		DCB 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0
		DCB 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0
		DCB 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0
		DCB 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0
		DCB 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0
		DCB 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0
		DCB 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0
		DCB 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0
		DCB 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0
		DCB 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0
		DCB 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0
		DCB 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0xFF, 0xFF
		DCB 0xFF, 0xFF,	0xFF, 0xFF, 0xFF, 0xFF,	0xFF, 0xFF, 0xFF
		DCB 0xFF, 0xFF,	0xFF, 0xFF, 0xFF, 0xFF,	0xFF, 0xFF, 0xFF
		DCB 0xFF, 0xFF,	0xFF, 0xFF, 0xFF, 0xFF,	0xFF, 0xFF, 0xFF
		DCB 0xFF, 0xFF,	0xFF, 0xFF, 0xFF, 0xFF,	0xFF, 0xFF, 0xFF
		DCB 0xFF, 0xFF,	0xFF, 0xFF, 0xFF, 0xFF,	0xFF, 0xFF, 0xFF
		DCB 0xFF, 0xFF,	0xFF, 0xFF, 0xFF, 0xFF,	0xFF, 0xFF, 0xFF
		DCB 0xFF, 0xFF,	0xFF, 0xFF, 0xFF, 0xFF,	0xFF, 0xFF, 0xFF
		DCB 0xFF, 0xFF,	0xFF, 0xFF, 0xFF, 0xFF,	0xFF, 0xFF, 0xFF
		DCB 0xFF, 0xFF,	0xFF, 0xFF, 0xFF, 0xFF,	0xFF, 0xFF, 0xFF
		DCB 0xFF, 0xFF,	0xFF, 0xFF, 0xFF, 0xFF,	0xFF, 0xFF, 0xFF
		DCB 0xFF, 0xFF,	0xFF, 0xFF, 0xFF, 0xFF,	0xFF, 0xFF, 0xFF
		DCB 0xFF, 0xFF,	0xFF, 0xFF, 0xFF, 0xFF,	0xFF, 0xFF, 0xFF
		DCB 0xFF, 0xFF,	0xFF, 0xFF, 0xFF, 0xFF,	0xFF, 0xFF, 0xFF
		DCB 0xFF, 0xFF,	0xFF, 0xFF, 0xFF, 0xFF,	0xFF, 0xFF, 0xFF
		DCB 0xFF, 0xFF,	0xFF, 0xFF, 0xFF, 0xFF,	0xFF, 0xFF, 0xFF
		DCB 0xFF, 0xFF,	0xFF, 0xFF, 0xFF, 0xFF,	0xFF, 0xFF, 0xFF
		DCB 0xFF, 0xFF,	0xFF, 0xFF, 0xFF, 0xFF,	0xFF, 0xFF, 0xFF
		DCB 0xFF, 0xFF,	0xFF, 0xFF, 0xFF, 0xFF,	0xFF, 0xFF, 0xFF
		DCB 0xFF, 0xFF,	0xFF, 0xFF, 0xFF, 0xFF,	0xFF, 0xFF, 0xFF
		DCB 0xFF, 0xFF,	0xFF, 0xFF, 0xFF, 0xFF,	0xFF, 0xFF, 0xFF
		DCB 0xFF, 0xFF,	0xFF, 0xFF, 0xFF, 0xFF,	0xFF, 0xFF, 0xFF
		DCB 0xFF, 0xFF,	0xFF, 0xFF, 0xFF, 0xFF,	0xFF, 0xFF, 0xFF
		DCB 0xFF, 0xFF,	0xFF, 0xFF, 0xFF, 0xFF,	0xFF, 0xFF, 0xFF
		DCB 0xFF, 0xFF,	0xFF, 0xFF, 0xFF, 0xFF,	0xFF, 0xFF, 0xFF
		DCB 0xFF, 0xFF,	0xFF, 0xFF, 0xFF, 0xFF,	0xFF, 0xFF, 0xFF
		DCB 0xFF, 0xFF,	0xFF, 0xFF, 0xFF, 0xFF,	0xFF, 0xFF, 0xFF
		DCB 0xFF, 0xFF,	0xFF, 0xFF, 0xFF, 0xFF,	0xFF, 0xFF, 0xFF
		DCB 0xFF, 0xFF,	0xFF, 0xFF, 0xFF, 0xFF,	0xFF, 0xFF, 0xFF
		DCB 0xFF, 0xFF,	0xFF, 0xFF, 0xFF, 0xFF,	0xFF, 0xFF, 0xFF
		DCB 0xFF, 0xFF,	0xFF, 0xFF, 0xFF, 0xFF,	0xFF, 0xFF, 0xFF
		DCB 0xFF, 0xFF,	0xFF, 0xFF, 0xFF, 0xFF,	0xFF, 0xFF, 0xFF
		DCB 0xFF, 0xFF,	0xFF, 0xFF, 0xFF, 0xFF,	0xFF, 0xFF, 0xFF
		DCB 0xFF, 0xFF,	0xFF, 0xFF, 0xFF, 0xFF,	0xFF, 0xFF, 0xFF
		DCB 0xFF, 0xFF,	0xFF, 0xFF, 0xFF, 0xFF,	0xFF, 0xFF, 0xFF
		DCB 0xFF, 0xFF,	0xFF, 0xFF, 0xFF, 0xFF,	0xFF, 0xFF, 0xFF
		DCB 0xFF, 0xFF,	0xFF, 0xFF, 0xFF, 0xFF,	0xFF, 0xFF, 0xFF
		DCB 0xFF, 0xFF,	0xFF, 0xFF, 0xFF, 0xFF,	0xFF, 0xFF, 0xFF
		DCB 0xFF, 0xFF,	0xFF, 0xFF, 0xFF, 0xFF,	0xFF, 0xFF, 0xFF
		DCB 0xFF, 0xFF,	0xFF, 0xFF, 0xFF, 0xFF,	0xFF, 0xFF, 0xFF
		DCB 0xFF, 0xFF,	0xFF, 0xFF, 0xFF, 0xFF,	0xFF, 0xFF, 0xFF
		DCB 0xFF, 0xFF,	0xFF, 0xFF, 0xFF, 0xFF,	0xFF, 0xFF, 0xFF
		DCB 0xFF, 0xFF,	0xFF, 0xFF, 0xFF, 0xFF,	0xFF, 0xFF, 0xFF
		DCB 0xFF, 0xFF,	0xFF, 0xFF, 0xFF, 0xFF,	0xFF, 0xFF, 0xFF
		DCB 0xFF, 0xFF,	0xFF, 0xFF, 0xFF, 0xFF,	0xFF, 0xFF, 0xFF
		DCB 0xFF, 0xFF,	0xFF, 0xFF, 0xFF, 0xFF,	0xFF, 0xFF, 0xFF
		DCB 0xFF, 0xFF,	0xFF, 0xFF, 0xFF, 0xFF,	0xFF, 0xFF, 0xFF
		DCB 0xFF, 0xFF,	0xFF, 0xFF, 0xFF, 0xFF,	0xFF, 0xFF, 0xFF
		DCB 0xFF, 0xFF,	0xFF, 0xFF, 0xFF, 0xFF,	0xFF, 0xFF, 0xFF
		DCB 0xFF, 0xFF,	0xFF, 0xFF, 0xFF, 0xFF,	0xFF, 0xFF, 0xFF
		DCB 0xFF, 0xFF,	0xFF, 0xFF, 0xFF, 0xFF,	0xFF, 0xFF, 0xFF
		DCB 0xFF, 0xFF,	0xFF, 0xFF, 0xFF, 0xFF,	0xFF, 0xFF, 0xFF
		DCB 0xFF, 0xFF,	0xFF, 0xFF, 0xFF, 0xFF,	0xFF, 0xFF, 0xFF
		DCB 0xFF, 0xFF,	0xFF, 0xFF, 0xFF, 0xFF,	0xFF, 0xFF, 0xFF
		DCB 0xFF, 0xFF,	0xFF, 0xFF, 0xFF, 0xFF,	0xFF, 0xFF, 0xFF
		DCB 0xFF, 0xFF,	0xFF, 0xFF, 0xFF, 0xFF,	0xFF, 0xFF, 0xFF
		DCB 0xFF, 0xFF,	0xFF, 0xFF, 0xFF, 0xFF,	0xFF, 0xFF, 0xFF
		DCB 0xFF, 0xFF,	0xFF, 0xFF, 0xFF, 0xFF,	0xFF, 0xFF, 0xFF
		DCB 0xFF, 0xFF,	0xFF, 0xFF, 0xFF, 0xFF,	0xFF, 0xFF, 0xFF
		DCB 0xFF, 0xFF,	0xFF, 0xFF, 0xFF, 0xFF,	0xFF, 0xFF, 0xFF
		DCB 0xFF, 0xFF,	0xFF, 0xFF, 0xFF, 0xFF,	0xFF, 0xFF, 0xFF
		DCB 0xFF, 0xFF,	0xFF, 0xFF, 0xFF, 0xFF,	0xFF, 0xFF, 0xFF
		DCB 0xFF, 0xFF,	0xFF, 0xFF, 0xFF, 0xFF,	0xFF, 0xFF, 0xFF
		DCB 0xFF, 0xFF,	0xFF, 0xFF, 0xFF, 0xFF,	0xFF, 0xFF, 0xFF
		DCB 0xFF, 0xFF,	0xFF, 0xFF, 0xFF, 0xFF,	0xFF, 0xFF, 0xFF
		DCB 0xFF, 0xFF,	0xFF, 0xFF, 0xFF, 0xFF,	0xFF, 0xFF, 0xFF
		DCB 0xFF, 0xFF,	0xFF, 0xFF, 0xFF, 0xFF,	0xFF, 0xFF, 0xFF
		DCB 0xFF, 0xFF,	0xFF, 0xFF, 0xFF, 0xFF,	0xFF, 0xFF, 0xFF
		DCB 0xFF, 0xFF,	0xFF, 0xFF, 0xFF, 0xFF,	0xFF, 0xFF, 0xFF
		DCB 0xFF, 0xFF,	0xFF, 0xFF, 0xFF, 0xFF,	0xFF, 0xFF, 0xFF
		DCB 0xFF, 0xFF,	0xFF, 0xFF, 0xFF, 0xFF,	0xFF, 0xFF, 0xFF
		DCB 0xFF, 0xFF,	0xFF, 0xFF, 0xFF, 0xFF,	0xFF, 0xFF, 0xFF
		DCB 0xFF, 0xFF,	0xFF, 0xFF, 0xFF, 0xFF,	0xFF, 0xFF, 0xFF
		DCB 0xFF, 0xFF,	0xFF, 0xFF, 0xFF, 0xFF,	0xFF, 0xFF, 0xFF
		DCB 0xFF, 0xFF,	0xFF, 0xFF, 0xFF, 0xFF,	0xFF, 0xFF, 0xFF
		DCB 0xFF, 0xFF,	0xFF, 0xFF, 0xFF, 0xFF,	0xFF, 0xFF, 0xFF
		DCB 0xFF, 0xFF,	0xFF, 0xFF, 0xFF, 0xFF,	0xFF, 0xFF, 0xFF
		DCB 0xFF, 0xFF,	0xFF, 0xFF, 0xFF, 0xFF,	0xFF, 0xFF, 0xFF
		DCB 0xFF, 0xFF,	0xFF, 0xFF, 0xFF, 0xFF,	0xFF, 0xFF, 0xFF
		DCB 0xFF, 0xFF,	0xFF, 0xFF, 0xFF, 0xFF,	0xFF, 0xFF, 0xFF
		DCB 0xFF, 0xFF,	0xFF, 0xFF, 0xFF, 0xFF,	0xFF, 0xFF, 0xFF
		DCB 0xFF, 0xFF,	0xFF, 0xFF, 0xFF, 0xFF,	0xFF, 0xFF, 0xFF
		DCB 0xFF, 0xFF,	0xFF, 0xFF, 0xFF, 0xFF,	0xFF, 0xFF, 0xFF
		DCB 0xFF, 0xFF,	0xFF, 0xFF, 0xFF, 0xFF,	0xFF, 0xFF, 0xFF
		DCB 0xFF, 0xFF,	0xFF, 0xFF, 0xFF, 0xFF,	0xFF, 0xFF, 0xFF
		DCB 0xFF, 0xFF,	0xFF, 0xFF, 0xFF, 0xFF,	0xFF, 0xFF, 0xFF
		DCB 0xFF, 0xFF,	0xFF, 0xFF, 0xFF, 0xFF,	0xFF, 0xFF, 0xFF
		DCB 0xFF, 0xFF,	0xFF, 0xFF, 0xFF, 0xFF,	0xFF, 0xFF, 0xFF
		DCB 0xFF, 0xFF,	0xFF, 0xFF, 0xFF, 0xFF,	0xFF, 0xFF, 0xFF
		DCB 0xFF, 0xFF,	0xFF, 0xFF, 0xFF, 0xFF,	0xFF, 0xFF, 0xFF
		DCB 0xFF, 0xFF,	0xFF, 0xFF, 0xFF, 0xFF,	0xFF, 0xFF, 0xFF
		DCB 0xFF, 0xFF,	0xFF, 0xFF, 0xFF, 0xFF,	0xFF, 0xFF, 0xFF
		DCB 0xFF, 0xFF,	0xFF, 0xFF, 0xFF, 0xFF,	0xFF, 0xFF, 0xFF
		DCB 0xFF, 0xFF,	0xFF, 0xFF, 0xFF, 0xFF,	0xFF, 0xFF, 0xFF
		DCB 0xFF, 0xFF,	0xFF, 0xFF, 0xFF, 0xFF,	0xFF, 0xFF, 0xFF
		DCB 0xFF, 0xFF,	0xFF, 0xFF, 0xFF, 0xFF,	0xFF, 0xFF, 0xFF
		DCB 0xFF, 0xFF,	0xFF, 0xFF, 0xFF, 0xFF,	0xFF, 0xFF, 0xFF
		DCB 0xFF, 0xFF,	0xFF, 0xFF, 0xFF, 0xFF,	0xFF, 0xFF, 0xFF
		DCB 0xFF, 0xFF,	0xFF, 0xFF, 0xFF, 0xFF,	0xFF, 0xFF, 0xFF
		DCB 0xFF, 0xFF,	0xFF, 0xFF, 0xFF, 0xFF,	0xFF, 0xFF, 0xFF
		DCB 0xFF, 0xFF,	0xFF, 0xFF, 0xFF, 0xFF,	0xFF, 0xFF, 0xFF
		DCB 0xFF, 0xFF,	0xFF, 0xFF, 0xFF, 0xFF,	0xFF, 0xFF, 0xFF
		DCB 0xFF, 0xFF,	0xFF, 0xFF, 0xFF, 0xFF,	0xFF, 0xFF, 0xFF
		DCB 0xFF, 0xFF,	0xFF, 0xFF, 0xFF, 0xFF,	0xFF, 0xFF, 0xFF
		DCB 0xFF, 0xFF,	0xFF, 0xFF, 0xFF, 0xFF,	0xFF, 0xFF, 0xFF
		DCB 0xFF, 0xFF,	0xFF, 0xFF, 0xFF, 0xFF,	0xFF, 0xFF, 0xFF
		DCB 0xFF, 0xFF,	0xFF, 0xFF, 0xFF, 0xFF,	0xFF, 0xFF, 0xFF
		DCB 0xFF, 0xFF,	0xFF, 0xFF, 0xFF, 0xFF,	0xFF, 0xFF, 0xFF
		DCB 0xFF, 0xFF,	0xFF, 0xFF, 0xFF, 0xFF,	0xFF, 0xFF, 0xFF
		DCB 0xFF, 0xFF,	0xFF, 0xFF, 0xFF, 0xFF,	0xFF, 0xFF, 0xFF
		DCB 0xFF, 0xFF,	0xFF, 0xFF, 0xFF, 0xFF,	0xFF, 0xFF, 0xFF
		DCB 0xFF, 0xFF,	0xFF, 0xFF, 0xFF, 0xFF,	0xFF, 0xFF, 0xFF
		DCB 0xFF, 0xFF,	0xFF, 0xFF, 0xFF, 0xFF,	0xFF, 0xFF, 0xFF
		DCB 0xFF, 0xFF,	0xFF, 0xFF, 0xFF, 0xFF,	0xFF, 0xFF, 0xFF
		DCB 0xFF, 0xFF,	0xFF, 0xFF, 0xFF
; EMPTY		ends

; ===========================================================================

; Segment type:	Regular
		AREA TXDATA, DATA, ALIGN=0
		; ORG 0x1400
TX_ID		DCD 0x77368950		; DATA XREF: sendPacketToRadio+238o
					; sendPacketToRadio+23Ar ...
RANDOM_BYTES	DCB 0x63, 0x56,	0x79, 0x24, 0x43, 0x8E,	0x36, 0x5C, 0x3F
					; DATA XREF: methodOnTPM_Event+2E0r
		DCB 0x15, 0x6B,	0x70, 0xE, 0x7E, 0x1B, 0x4C, 0x63, 0x56
		DCB 0x79, 0x24,	0x43, 0x8E, 0x36, 0x5C,	0x3F, 0x15, 0x6B
		DCB 0x70, 0xE, 0x7E, 0x1B, 0x4C
UNKNOWN_ID	DCW 1			; DATA XREF: sub_8AD4+28r sub_8AD4+32r ...
; TXDATA	ends

; ===========================================================================

; Segment type:	Regular
		AREA EMPTY2, DATA, ALIGN=0
		; ORG 0x1426
byte_1426	DCB 0xFF, 0xFF,	0xFF, 0xFF, 0xFF, 0xFF,	0xFF, 0xFF, 0xFF
		DCB 0xFF, 0xFF,	0xFF, 0xFF, 0xFF, 0xFF,	0xFF, 0xFF, 0xFF
		DCB 0xFF, 0xFF,	0xFF, 0xFF, 0xFF, 0xFF,	0xFF, 0xFF, 0xFF
		DCB 0xFF, 0xFF,	0xFF, 0xFF, 0xFF, 0xFF,	0xFF, 0xFF, 0xFF
		DCB 0xFF, 0xFF,	0xFF, 0xFF, 0xFF, 0xFF,	0xFF, 0xFF, 0xFF
		DCB 0xFF, 0xFF,	0xFF, 0xFF, 0xFF, 0xFF,	0xFF, 0xFF, 0xFF
		DCB 0xFF, 0xFF,	0xFF, 0xFF, 0xFF, 0xFF,	0xFF, 0xFF, 0xFF
		DCB 0xFF, 0xFF,	0xFF, 0xFF, 0xFF, 0xFF,	0xFF, 0xFF, 0xFF
		DCB 0xFF, 0xFF,	0xFF, 0xFF, 0xFF, 0xFF,	0xFF, 0xFF, 0xFF
		DCB 0xFF, 0xFF,	0xFF, 0xFF, 0xFF, 0xFF,	0xFF, 0xFF, 0xFF
		DCB 0xFF, 0xFF,	0xFF, 0xFF, 0xFF, 0xFF,	0xFF, 0xFF, 0xFF
		DCB 0xFF, 0xFF,	0xFF, 0xFF, 0xFF, 0xFF,	0xFF, 0xFF, 0xFF
		DCB 0xFF, 0xFF,	0xFF, 0xFF, 0xFF, 0xFF,	0xFF, 0xFF, 0xFF
		DCB 0xFF, 0xFF,	0xFF, 0xFF, 0xFF, 0xFF,	0xFF, 0xFF, 0xFF
		DCB 0xFF, 0xFF,	0xFF, 0xFF, 0xFF, 0xFF,	0xFF, 0xFF, 0xFF
		DCB 0xFF, 0xFF,	0xFF, 0xFF, 0xFF, 0xFF,	0xFF, 0xFF, 0xFF
		DCB 0xFF, 0xFF,	0xFF, 0xFF, 0xFF, 0xFF,	0xFF, 0xFF, 0xFF
		DCB 0xFF, 0xFF,	0xFF, 0xFF, 0xFF, 0xFF,	0xFF, 0xFF, 0xFF
		DCB 0xFF, 0xFF,	0xFF, 0xFF, 0xFF, 0xFF,	0xFF, 0xFF, 0xFF
		DCB 0xFF, 0xFF,	0xFF, 0xFF, 0xFF, 0xFF,	0xFF, 0xFF, 0xFF
		DCB 0xFF, 0xFF,	0xFF, 0xFF, 0xFF, 0xFF,	0xFF, 0xFF, 0xFF
		DCB 0xFF, 0xFF,	0xFF, 0xFF, 0xFF, 0xFF,	0xFF, 0xFF, 0xFF
		DCB 0xFF, 0xFF,	0xFF, 0xFF, 0xFF, 0xFF,	0xFF, 0xFF, 0xFF
		DCB 0xFF, 0xFF,	0xFF, 0xFF, 0xFF, 0xFF,	0xFF, 0xFF, 0xFF
		DCB 0xFF, 0xFF,	0xFF, 0xFF, 0xFF, 0xFF,	0xFF, 0xFF, 0xFF
		DCB 0xFF, 0xFF,	0xFF, 0xFF, 0xFF, 0xFF,	0xFF, 0xFF, 0xFF
		DCB 0xFF, 0xFF,	0xFF, 0xFF, 0xFF, 0xFF,	0xFF, 0xFF, 0xFF
		DCB 0xFF, 0xFF,	0xFF, 0xFF, 0xFF, 0xFF,	0xFF, 0xFF, 0xFF
		DCB 0xFF, 0xFF,	0xFF, 0xFF, 0xFF, 0xFF,	0xFF, 0xFF, 0xFF
		DCB 0xFF, 0xFF,	0xFF, 0xFF, 0xFF, 0xFF,	0xFF, 0xFF, 0xFF
		DCB 0xFF, 0xFF,	0xFF, 0xFF, 0xFF, 0xFF,	0xFF, 0xFF, 0xFF
		DCB 0xFF, 0xFF,	0xFF, 0xFF, 0xFF, 0xFF,	0xFF, 0xFF, 0xFF
		DCB 0xFF, 0xFF,	0xFF, 0xFF, 0xFF, 0xFF,	0xFF, 0xFF, 0xFF
		DCB 0xFF, 0xFF,	0xFF, 0xFF, 0xFF, 0xFF,	0xFF, 0xFF, 0xFF
		DCB 0xFF, 0xFF,	0xFF, 0xFF, 0xFF, 0xFF,	0xFF, 0xFF, 0xFF
		DCB 0xFF, 0xFF,	0xFF, 0xFF, 0xFF, 0xFF,	0xFF, 0xFF, 0xFF
		DCB 0xFF, 0xFF,	0xFF, 0xFF, 0xFF, 0xFF,	0xFF, 0xFF, 0xFF
		DCB 0xFF, 0xFF,	0xFF, 0xFF, 0xFF, 0xFF,	0xFF, 0xFF, 0xFF
		DCB 0xFF, 0xFF,	0xFF, 0xFF, 0xFF, 0xFF,	0xFF, 0xFF, 0xFF
		DCB 0xFF, 0xFF,	0xFF, 0xFF, 0xFF, 0xFF,	0xFF, 0xFF, 0xFF
		DCB 0xFF, 0xFF,	0xFF, 0xFF, 0xFF, 0xFF,	0xFF, 0xFF, 0xFF
		DCB 0xFF, 0xFF,	0xFF, 0xFF, 0xFF, 0xFF,	0xFF, 0xFF, 0xFF
		DCB 0xFF, 0xFF,	0xFF, 0xFF, 0xFF, 0xFF,	0xFF, 0xFF, 0xFF
		DCB 0xFF, 0xFF,	0xFF, 0xFF, 0xFF, 0xFF,	0xFF, 0xFF, 0xFF
		DCB 0xFF, 0xFF,	0xFF, 0xFF, 0xFF, 0xFF,	0xFF, 0xFF, 0xFF
		DCB 0xFF, 0xFF,	0xFF, 0xFF, 0xFF, 0xFF,	0xFF, 0xFF, 0xFF
		DCB 0xFF, 0xFF,	0xFF, 0xFF, 0xFF, 0xFF,	0xFF, 0xFF, 0xFF
		DCB 0xFF, 0xFF,	0xFF, 0xFF, 0xFF, 0xFF,	0xFF, 0xFF, 0xFF
		DCB 0xFF, 0xFF,	0xFF, 0xFF, 0xFF, 0xFF,	0xFF, 0xFF, 0xFF
		DCB 0xFF, 0xFF,	0xFF, 0xFF, 0xFF, 0xFF,	0xFF, 0xFF, 0xFF
		DCB 0xFF, 0xFF,	0xFF, 0xFF, 0xFF, 0xFF,	0xFF, 0xFF, 0xFF
		DCB 0xFF, 0xFF,	0xFF, 0xFF, 0xFF, 0xFF,	0xFF, 0xFF, 0xFF
		DCB 0xFF, 0xFF,	0xFF, 0xFF, 0xFF, 0xFF,	0xFF, 0xFF, 0xFF
		DCB 0xFF, 0xFF,	0xFF, 0xFF, 0xFF, 0xFF,	0xFF, 0xFF, 0xFF
		DCB 0xFF, 0xFF,	0xFF, 0xFF, 0xFF, 0xFF,	0xFF, 0xFF, 0xFF
		DCB 0xFF, 0xFF,	0xFF, 0xFF, 0xFF, 0xFF,	0xFF, 0xFF, 0xFF
		DCB 0xFF, 0xFF,	0xFF, 0xFF, 0xFF, 0xFF,	0xFF, 0xFF, 0xFF
		DCB 0xFF, 0xFF,	0xFF, 0xFF, 0xFF, 0xFF,	0xFF, 0xFF, 0xFF
		DCB 0xFF, 0xFF,	0xFF, 0xFF, 0xFF, 0xFF,	0xFF, 0xFF, 0xFF
		DCB 0xFF, 0xFF,	0xFF, 0xFF, 0xFF, 0xFF,	0xFF, 0xFF, 0xFF
		DCB 0xFF, 0xFF,	0xFF, 0xFF, 0xFF, 0xFF,	0xFF, 0xFF, 0xFF
		DCB 0xFF, 0xFF,	0xFF, 0xFF, 0xFF, 0xFF,	0xFF, 0xFF, 0xFF
		DCB 0xFF, 0xFF,	0xFF, 0xFF, 0xFF, 0xFF,	0xFF, 0xFF, 0xFF
		DCB 0xFF, 0xFF,	0xFF, 0xFF, 0xFF, 0xFF,	0xFF, 0xFF, 0xFF
		DCB 0xFF, 0xFF,	0xFF, 0xFF, 0xFF, 0xFF,	0xFF, 0xFF, 0xFF
		DCB 0xFF, 0xFF,	0xFF, 0xFF, 0xFF, 0xFF,	0xFF, 0xFF, 0xFF
		DCB 0xFF, 0xFF,	0xFF, 0xFF, 0xFF, 0xFF,	0xFF, 0xFF, 0xFF
		DCB 0xFF, 0xFF,	0xFF, 0xFF, 0xFF, 0xFF,	0xFF, 0xFF, 0xFF
		DCB 0xFF, 0xFF,	0xFF, 0xFF, 0xFF, 0xFF,	0xFF, 0xFF, 0xFF
		DCB 0xFF, 0xFF,	0xFF, 0xFF, 0xFF, 0xFF,	0xFF, 0xFF, 0xFF
		DCB 0xFF, 0xFF,	0xFF, 0xFF, 0xFF, 0xFF,	0xFF, 0xFF, 0xFF
		DCB 0xFF, 0xFF,	0xFF, 0xFF, 0xFF, 0xFF,	0xFF, 0xFF, 0xFF
		DCB 0xFF, 0xFF,	0xFF, 0xFF, 0xFF, 0xFF,	0xFF, 0xFF, 0xFF
		DCB 0xFF, 0xFF,	0xFF, 0xFF, 0xFF, 0xFF,	0xFF, 0xFF, 0xFF
		DCB 0xFF, 0xFF,	0xFF, 0xFF, 0xFF, 0xFF,	0xFF, 0xFF, 0xFF
		DCB 0xFF, 0xFF,	0xFF, 0xFF, 0xFF, 0xFF,	0xFF, 0xFF, 0xFF
		DCB 0xFF, 0xFF,	0xFF, 0xFF, 0xFF, 0xFF,	0xFF, 0xFF, 0xFF
		DCB 0xFF, 0xFF,	0xFF, 0xFF, 0xFF, 0xFF,	0xFF, 0xFF, 0xFF
		DCB 0xFF, 0xFF,	0xFF, 0xFF, 0xFF, 0xFF,	0xFF, 0xFF, 0xFF
		DCB 0xFF, 0xFF,	0xFF, 0xFF, 0xFF, 0xFF,	0xFF, 0xFF, 0xFF
		DCB 0xFF, 0xFF,	0xFF, 0xFF, 0xFF, 0xFF,	0xFF, 0xFF, 0xFF
		DCB 0xFF, 0xFF,	0xFF, 0xFF, 0xFF, 0xFF,	0xFF, 0xFF, 0xFF
		DCB 0xFF, 0xFF,	0xFF, 0xFF, 0xFF, 0xFF,	0xFF, 0xFF, 0xFF
		DCB 0xFF, 0xFF,	0xFF, 0xFF, 0xFF, 0xFF,	0xFF, 0xFF, 0xFF
		DCB 0xFF, 0xFF,	0xFF, 0xFF, 0xFF, 0xFF,	0xFF, 0xFF, 0xFF
		DCB 0xFF, 0xFF,	0xFF, 0xFF, 0xFF, 0xFF,	0xFF, 0xFF, 0xFF
		DCB 0xFF, 0xFF,	0xFF, 0xFF, 0xFF, 0xFF,	0xFF, 0xFF, 0xFF
		DCB 0xFF, 0xFF,	0xFF, 0xFF, 0xFF, 0xFF,	0xFF, 0xFF, 0xFF
		DCB 0xFF, 0xFF,	0xFF, 0xFF, 0xFF, 0xFF,	0xFF, 0xFF, 0xFF
		DCB 0xFF, 0xFF,	0xFF, 0xFF, 0xFF, 0xFF,	0xFF, 0xFF, 0xFF
		DCB 0xFF, 0xFF,	0xFF, 0xFF, 0xFF, 0xFF,	0xFF, 0xFF, 0xFF
		DCB 0xFF, 0xFF,	0xFF, 0xFF, 0xFF, 0xFF,	0xFF, 0xFF, 0xFF
		DCB 0xFF, 0xFF,	0xFF, 0xFF, 0xFF, 0xFF,	0xFF, 0xFF, 0xFF
		DCB 0xFF, 0xFF,	0xFF, 0xFF, 0xFF, 0xFF,	0xFF, 0xFF, 0xFF
		DCB 0xFF, 0xFF,	0xFF, 0xFF, 0xFF, 0xFF,	0xFF, 0xFF, 0xFF
		DCB 0xFF, 0xFF,	0xFF, 0xFF, 0xFF, 0xFF,	0xFF, 0xFF, 0xFF
		DCB 0xFF, 0xFF,	0xFF, 0xFF, 0xFF, 0xFF,	0xFF, 0xFF, 0xFF
		DCB 0xFF, 0xFF,	0xFF, 0xFF, 0xFF, 0xFF,	0xFF, 0xFF, 0xFF
		DCB 0xFF, 0xFF,	0xFF, 0xFF, 0xFF, 0xFF,	0xFF, 0xFF, 0xFF
		DCB 0xFF, 0xFF,	0xFF, 0xFF, 0xFF, 0xFF,	0xFF, 0xFF, 0xFF
		DCB 0xFF, 0xFF,	0xFF, 0xFF, 0xFF, 0xFF,	0xFF, 0xFF, 0xFF
		DCB 0xFF, 0xFF,	0xFF, 0xFF, 0xFF, 0xFF,	0xFF, 0xFF, 0xFF
		DCB 0xFF, 0xFF,	0xFF, 0xFF, 0xFF, 0xFF,	0xFF, 0xFF, 0xFF
		DCB 0xFF, 0xFF,	0xFF, 0xFF, 0xFF, 0xFF,	0xFF, 0xFF, 0xFF
		DCB 0xFF, 0xFF,	0xFF, 0xFF, 0xFF, 0xFF,	0xFF, 0xFF, 0xFF
		DCB 0xFF, 0xFF,	0xFF, 0xFF, 0xFF, 0xFF,	0xFF, 0xFF, 0xFF
		DCB 0xFF, 0xFF,	0xFF, 0xFF, 0xFF, 0xFF,	0xFF, 0xFF, 0xFF
		DCB 0xFF, 0xFF,	0xFF, 0xFF, 0xFF, 0xFF,	0xFF, 0xFF, 0xFF
		DCB 0xFF, 0xFF,	0xFF, 0xFF, 0xFF, 0xFF,	0xFF, 0xFF, 0xFF
		DCB 0xFF, 0xFF,	0xFF, 0xFF, 0xFF
; EMPTY2	ends

; ===========================================================================

; Segment type:	Regular
		AREA VT_PROG, DATA, ALIGN=0
		; ORG 0x1800
dword_1800	DCD 0x20001640		; DATA XREF: sub_1B4o sub_1B4+2r ...
off_1804	DCD entryPoint+1	; DATA XREF: sub_1B4+6o sub_1B4+8r ...
		DCD 0x19CD
		DCD 0x19CF
		DCD 0
		DCD 0
		DCD 0
		DCD 0
		DCD 0
		DCD 0
		DCD 0
		DCD 0x19D1
		DCD 0
		DCD 0
		DCD 0x19D3
dword_183C	DCD 0x19D5		; DATA XREF: ROM:0000BF9Co
					; ROM:timerHandlerAddresso
		DCD 0x19D7
		DCD 0x19D7
		DCD 0x19D7
		DCD 0x19D7
		DCD 0x19D7
		DCD 0x19D7
		DCD 0x19D7
		DCD 0x19D7
		DCD 0x5711
		DCD 0x19D7
		DCD 0x19D7
		DCD 0x19D7
		DCD 0x19D7
		DCD 0x19D7
		DCD 0x19D7
		DCD 0x21ED
		DCD 0x19D7
		DCD 0xB6A9
		DCD 0xB6C9
		DCD 0xB6E1
		DCD 0x19D7
		DCD 0x19D7
		DCD 0x7A39
		DCD 0x19D7
		DCD 0x19D7
		DCD 0x19D7
		DCD 0x19D7
		DCD 0x19D7
		DCD 0x19D7
		DCD 0x19D7
		DCD 0x19D7
		DCD 0x7A59
; VT_PROG	ends

; ---------------------------------------------------------------------------
; ===========================================================================

; Segment type:	Pure code
		AREA ROM, CODE,	READWRITE, ALIGN=0
		; ORG 0x18C0
; START	OF FUNCTION CHUNK FOR entryPoint
		CODE16

loc_18C0				; CODE XREF: entryPoint+6j
					; DATA XREF: entryPoint+4o ...
		BL	loc_18C8
; END OF FUNCTION CHUNK	FOR entryPoint
; ---------------------------------------------------------------------------
		DCB    0
		DCB 0xF0 ; ð
		DCB 0x52 ; R
		DCB 0xF8 ; ø
; ---------------------------------------------------------------------------
; START	OF FUNCTION CHUNK FOR entryPoint

loc_18C8				; CODE XREF: entryPoint:loc_18C0j
		ADR	R0, unk_18FC
		LDMIA	R0!, {R4,R5}
		SUBS	R0, #8
		ADDS	R4, R4,	R0
		ADDS	R5, R5,	R0
		MOV	R10, R4
		SUBS	R7, R4,	#1
		MOV	R11, R5
		MOV	R4, R10
		MOV	R5, R11
		CMP	R4, R5
		BNE	loc_18E4
		BL	loc_196C
; ---------------------------------------------------------------------------

loc_18E4				; CODE XREF: entryPoint-E6j
		MOV	R6, PC
		SUBS	R6, #0xF
		LDMIA	R4!, {R0-R3}
		MOV	LR, R6
		MOVS	R6, #1
		TST	R3, R6
		BEQ	loc_18F4
		SUBS	R3, R7,	R3

loc_18F4				; CODE XREF: entryPoint-D4j
		MOV	R10, R4
		MOV	R11, R5
		ORRS	R3, R6
		BX	R3
; END OF FUNCTION CHUNK	FOR entryPoint
; ---------------------------------------------------------------------------
unk_18FC	DCB 0xD4 ; Ô		; DATA XREF: entryPoint:loc_18C8o
					; entryPoint-FAo
		DCB 0xD5 ; Õ
		DCB    0
		DCB    0
		DCB 0x14
		DCB 0xD6 ; Ö
		DCB    0
		DCB    0
		DCB 0x10
		DCB 0x3A ; :
		DCB    2
		DCB 0xD3 ; Ó
		DCB 0x78 ; x
		DCB 0xC8 ; È
		DCB 0x78 ; x
		DCB 0xC1 ; Á
		DCB 0xFA ; ú
		DCB 0xD8 ; Ø
		DCB 0x52 ; R
		DCB    7
		DCB    1
		DCB 0xD3 ; Ó
		DCB 0x30 ; 0
		DCB 0xC8 ; È
		DCB 0x30 ; 0
		DCB 0xC1 ; Á
		DCB    1
		DCB 0xD5 ; Õ
		DCB    4
		DCB 0x68 ; h
		DCB  0xC
		DCB 0x60 ; `
		DCB 0x70 ; p
		DCB 0x47 ; G
		DCB    0
		DCB    0
unk_1920	DCB    0
		DCB 0x23 ; #
		DCB    0
		DCB 0x24 ; $
		DCB    0
		DCB 0x25 ; %
		DCB    0
		DCB 0x26 ; &
		DCB 0x10
		DCB 0x3A ; :
		DCB    1
		DCB 0xD3 ; Ó
		DCB 0x78 ; x
		DCB 0xC1 ; Á
		DCB 0xFB ; û
		DCB 0xD8 ; Ø
		DCB 0x52 ; R
		DCB    7
		DCB    0
		DCB 0xD3 ; Ó
		DCB 0x30 ; 0
		DCB 0xC1 ; Á
		DCB    0
		DCB 0xD5 ; Õ
		DCB  0xB
		DCB 0x60 ; `
		DCB 0x70 ; p
		DCB 0x47 ; G

; =============== S U B	R O U T	I N E =======================================


; int __fastcall sub_193C(int a1, int format, int *a3)
sub_193C				; CODE XREF: sub_1B2C+FEp
		PUSH	{R4,LR}
		CMP	R1, #0x64 ; 'd'
		BNE	loc_1948
		BL	sub_1AC0
		POP	{R4,PC}
; ---------------------------------------------------------------------------

loc_1948				; CODE XREF: sub_193C+4j
		CMP	R1, #0x75 ; 'u'
		BNE	loc_1952
		BL	sub_1AC0
		POP	{R4,PC}
; ---------------------------------------------------------------------------

loc_1952				; CODE XREF: sub_193C+Ej
		CMP	R1, #0x73 ; 's'
		BNE	loc_195C
		BL	sub_215C
		POP	{R4,PC}
; ---------------------------------------------------------------------------

loc_195C				; CODE XREF: sub_193C+18j
		MOVS	R0, #0
		POP	{R4,PC}
; End of function sub_193C


; =============== S U B	R O U T	I N E =======================================


sub_1960				; CODE XREF: entryPoint-52p
		PUSH	{R0-R4,LR}
		NOP
		NOP
		POP	{R0-R4,PC}
; End of function sub_1960


; =============== S U B	R O U T	I N E =======================================


emptySub
		PUSH	{R4,LR}
		POP	{R4,PC}
; End of function emptySub

; ---------------------------------------------------------------------------
; START	OF FUNCTION CHUNK FOR entryPoint

loc_196C				; CODE XREF: entryPoint-E4j
		BL	sub_218C
		MOV	R1, R2
		BL	sub_1960
		BL	main_screen
; END OF FUNCTION CHUNK	FOR entryPoint
; ---------------------------------------------------------------------------
		DCB    0
		DCB 0xF0 ; ð
		DCB 0x26 ; &
		DCB 0xFC ; ü
		DCB    3
		DCB 0xB4 ; ´
		DCB 0xFF
		DCB 0xF7 ; ÷
		DCB 0xF2 ; ò
		DCB 0xFF
		DCB    3
		DCB 0xBC ; ¼
		DCB    0
		DCB 0xF0 ; ð
		DCB 0x2B ; +
		DCB 0xFC ; ü
		DCB    0
		DCB    0

; =============== S U B	R O U T	I N E =======================================


; _BYTE	*__fastcall strcpy(_BYTE *target, _BYTE	*source, unsigned int len)
strcpy					; CODE XREF: memcpy:loc_1D36p
					; sub_1D76:loc_1DB6p ...
		PUSH	{R4-R6,LR}
		MOV	R5, R0
		MOV	R4, R1
		MOV	R6, R2
		B	loc_199C
; ---------------------------------------------------------------------------

loc_1996				; CODE XREF: strcpy+12j
		LDMIA	R4!, {R0-R3}
		STMIA	R5!, {R0-R3}
		SUBS	R6, #0x10

loc_199C				; CODE XREF: strcpy+8j
		CMP	R6, #0x10
		BCS	loc_1996
		CMP	R6, #8
		BCC	loc_19AA
		LDMIA	R4!, {R0,R1}
		STMIA	R5!, {R0,R1}
		SUBS	R6, #8

loc_19AA				; CODE XREF: strcpy+16j
		CMP	R6, #4
		BCC	loc_19BE
		LDMIA	R4!, {R0}
		STMIA	R5!, {R0}
		SUBS	R6, #4
		B	loc_19BE
; ---------------------------------------------------------------------------

loc_19B6				; CODE XREF: strcpy+34j
		LDRB	R1, [R4]
		STRB	R1, [R5]
		ADDS	R4, #1
		ADDS	R5, #1

loc_19BE				; CODE XREF: strcpy+20j strcpy+28j
		SUBS	R6, #1
		BCS	loc_19B6
		POP	{R4-R6,PC}
; End of function strcpy


; =============== S U B	R O U T	I N E =======================================


entryPoint				; DATA XREF: VT_PROG:off_1804o

; FUNCTION CHUNK AT 000018C0 SIZE 00000004 BYTES
; FUNCTION CHUNK AT 000018C8 SIZE 00000034 BYTES
; FUNCTION CHUNK AT 0000196C SIZE 0000000E BYTES

		LDR	R0, =(nullsub_2+1)
		BLX	R0 ; nullsub_2
		LDR	R0, =(loc_18C0+1)
		BX	R0 ; loc_18C0
; End of function entryPoint

; ---------------------------------------------------------------------------

loc_19CC				; CODE XREF: ROM:loc_19CCj
		B	loc_19CC
; ---------------------------------------------------------------------------

loc_19CE				; CODE XREF: ROM:loc_19CEj
		B	loc_19CE
; ---------------------------------------------------------------------------

loc_19D0				; CODE XREF: ROM:loc_19D0j
		B	loc_19D0
; ---------------------------------------------------------------------------

loc_19D2				; CODE XREF: ROM:loc_19D2j
		B	loc_19D2
; ---------------------------------------------------------------------------

loc_19D4				; CODE XREF: ROM:loc_19D4j
		B	loc_19D4
; ---------------------------------------------------------------------------

loc_19D6				; CODE XREF: ROM:loc_19D6j
		B	loc_19D6

; =============== S U B	R O U T	I N E =======================================


get1FFFFE40				; CODE XREF: sub_218C+18p
		LDR	R0, =unk_1FFFFE40
		LDR	R1, =unk_20001640
		LDR	R2, =unk_1FFFFE40
		LDR	R3, =heap
		BX	LR
; End of function get1FFFFE40

; ---------------------------------------------------------------------------
		DCB    0
		DCB    0
off_19E4	DCD nullsub_2+1		; DATA XREF: entryPointr
off_19E8	DCD loc_18C0+1		; DATA XREF: entryPoint+4r
off_19EC	DCD unk_1FFFFE40	; DATA XREF: get1FFFFE40r
					; get1FFFFE40+4r
off_19F0	DCD unk_20001640	; DATA XREF: get1FFFFE40+2r
off_19F4	DCD heap		; DATA XREF: get1FFFFE40+6r

; =============== S U B	R O U T	I N E =======================================


sprintf					; CODE XREF: ChooseSensors+90p
					; ChooseSensors+BCp ...

var_20		= -0x20
varg_r0		= -0x10
varg_r1		= -0xC
varg_r2		= -8
varg_r3		= -4

		PUSH	{R0-R3}
		PUSH	{R2-R4,LR}
		LDR	R3, =(sub_212C+1 - 0x1A04)
		ADD	R2, SP,	#0x20+varg_r2
		ADD	R3, PC ; sub_212C
		MOV	R1, SP
		STR	R0, [SP,#0x20+var_20]
		LDR	R0, [SP,#0x20+varg_r1]
		BL	someSprintfMethod
		MOVS	R0, #0
		MOV	R1, SP
		BL	sub_212C
		POP	{R2-R4}
		POP	{R3}
		ADD	SP, SP,	#0x10
		BX	R3
; End of function sprintf

; ---------------------------------------------------------------------------
off_1A1C	DCD sub_212C+1 - 0x1A04	; DATA XREF: sprintf+4r

; =============== S U B	R O U T	I N E =======================================


sub_1A20				; CODE XREF: sub_1A6E+36p sub_204C+3Cp ...
		PUSH	{R4-R6,LR}
		MOV	R4, R0
		LDR	R5, [R0,#0x18]
		LDR	R0, [R0]
		LSLS	R1, R0,	#0x1B
		BPL	loc_1A30
		MOVS	R6, #0x30 ; '0'
		B	loc_1A32
; ---------------------------------------------------------------------------

loc_1A30				; CODE XREF: sub_1A20+Aj
		MOVS	R6, #0x20 ; ' '

loc_1A32				; CODE XREF: sub_1A20+Ej
		LSLS	R0, R0,	#0x1F
		BEQ	loc_1A46
		POP	{R4-R6,PC}
; ---------------------------------------------------------------------------

loc_1A38				; CODE XREF: sub_1A20+28j
		LDR	R2, [R4,#4]
		MOV	R0, R6
		LDR	R1, [R4,#8]
		BLX	R2
		LDR	R0, [R4,#0x20]
		ADDS	R0, #1
		STR	R0, [R4,#0x20]

loc_1A46				; CODE XREF: sub_1A20+14j
		SUBS	R5, #1
		BPL	loc_1A38
		POP	{R4-R6,PC}
; End of function sub_1A20


; =============== S U B	R O U T	I N E =======================================


sub_1A4C				; CODE XREF: sub_1A6E+4Cp sub_204C+9Cp
		PUSH	{R4-R6,LR}
		MOV	R4, R0
		LDR	R5, [R0,#0x18]
		LDRB	R0, [R0]
		LSLS	R0, R0,	#0x1F
		BNE	loc_1A68
		POP	{R4-R6,PC}
; ---------------------------------------------------------------------------

loc_1A5A				; CODE XREF: sub_1A4C+1Ej
		LDR	R2, [R4,#4]
		LDR	R1, [R4,#8]
		MOVS	R0, #0x20 ; ' '
		BLX	R2
		LDR	R0, [R4,#0x20]
		ADDS	R0, #1
		STR	R0, [R4,#0x20]

loc_1A68				; CODE XREF: sub_1A4C+Aj
		SUBS	R5, #1
		BPL	loc_1A5A
		POP	{R4-R6,PC}
; End of function sub_1A4C


; =============== S U B	R O U T	I N E =======================================


sub_1A6E				; CODE XREF: sub_2136:loc_2144p
		PUSH	{R4-R6,LR}
		MOV	R4, R1
		MOV	R5, R0
		CMP	R2, #1
		BEQ	loc_1A84
		LDRB	R0, [R5]
		LSLS	R0, R0,	#0x1A
		BPL	loc_1A80
		LDR	R2, [R5,#0x1C]

loc_1A80				; CODE XREF: sub_1A6E+Ej
		MOVS	R3, #0
		B	loc_1A8A
; ---------------------------------------------------------------------------

loc_1A84				; CODE XREF: sub_1A6E+8j
		MOVS	R3, #1
		B	loc_1A94
; ---------------------------------------------------------------------------

loc_1A88				; CODE XREF: sub_1A6E+24j
		ADDS	R3, #1

loc_1A8A				; CODE XREF: sub_1A6E+14j
		CMP	R3, R2
		BCS	loc_1A94
		LDRB	R0, [R4,R3]
		CMP	R0, #0
		BNE	loc_1A88

loc_1A94				; CODE XREF: sub_1A6E+18j sub_1A6E+1Ej
		LDR	R0, [R5,#0x18]
		ADDS	R6, R4,	R3
		SUBS	R0, R0,	R3
		STR	R0, [R5,#0x18]
		LDR	R0, [R5,#0x20]
		ADDS	R0, R0,	R3
		STR	R0, [R5,#0x20]
		MOV	R0, R5
		BL	sub_1A20
		B	loc_1AB4
; ---------------------------------------------------------------------------

loc_1AAA				; CODE XREF: sub_1A6E+48j
		LDR	R2, [R5,#4]
		LDRB	R0, [R4]
		LDR	R1, [R5,#8]
		ADDS	R4, #1
		BLX	R2

loc_1AB4				; CODE XREF: sub_1A6E+3Aj
		CMP	R4, R6
		BCC	loc_1AAA
		MOV	R0, R5
		BL	sub_1A4C
		POP	{R4-R6,PC}
; End of function sub_1A6E


; =============== S U B	R O U T	I N E =======================================


sub_1AC0				; CODE XREF: sub_193C+6p sub_193C+10p

var_20		= -0x20

		PUSH	{R0-R2,R4-R7,LR}
		MOVS	R5, #0
		CMP	R1, #0x75 ; 'u'
		LDR	R0, [R2]
		LDR	R1, [SP,#0x20+var_20]
		ADR	R6, unk_1B1C
		BEQ	loc_1AF2
		NOP
		NOP
		CMP	R0, #0
		BGE	loc_1ADC
		NEGS	R0, R0
		ADR	R6, off_1B20
		B	loc_1AEE
; ---------------------------------------------------------------------------

loc_1ADC				; CODE XREF: sub_1AC0+14j
		LDR	R1, [SP,#0x20+var_20]
		LDR	R1, [R1]
		LSLS	R2, R1,	#0x1E
		BPL	loc_1AE8
		ADR	R6, unk_1B24
		B	loc_1AEE
; ---------------------------------------------------------------------------

loc_1AE8				; CODE XREF: sub_1AC0+22j
		LSLS	R1, R1,	#0x1D
		BPL	loc_1AF6
		ADR	R6, unk_1B28

loc_1AEE				; CODE XREF: sub_1AC0+1Aj sub_1AC0+26j
		MOVS	R5, #1
		B	loc_1AF6
; ---------------------------------------------------------------------------

loc_1AF2				; CODE XREF: sub_1AC0+Cj
		NOP
		NOP

loc_1AF6				; CODE XREF: sub_1AC0+2Aj sub_1AC0+30j
		LDR	R7, [SP,#0x20+var_20]
		MOVS	R4, #0
		ADDS	R7, #0x24 ; '$'
		B	loc_1B08
; ---------------------------------------------------------------------------

loc_1AFE				; CODE XREF: sub_1AC0+4Aj
		BL	divBy10
		ADDS	R1, #0x30 ; '0'
		STRB	R1, [R7,R4]
		ADDS	R4, #1

loc_1B08				; CODE XREF: sub_1AC0+3Cj
		CMP	R0, #0
		BNE	loc_1AFE
		MOV	R3, R5
		MOV	R2, R6
		MOV	R1, R4
		LDR	R0, [SP,#0x20+var_20]
		BL	sub_204C
		POP	{R1-R7,PC}
; End of function sub_1AC0

; ---------------------------------------------------------------------------
		DCB    0
		DCB    0
unk_1B1C	DCB    0		; DATA XREF: sub_1AC0+Ao
		DCB    0
		DCB    0
		DCB    0
off_1B20	DCD unk_2D		; DATA XREF: sub_1AC0+18o
unk_1B24	DCB 0x2B ; +		; DATA XREF: sub_1AC0+24o
		DCB 0, 0, 0
unk_1B28	DCB 0x20		; DATA XREF: sub_1AC0+2Co
		DCB 0, 0, 0

; =============== S U B	R O U T	I N E =======================================


sub_1B2C				; CODE XREF: someSprintfMethod+18p

var_20		= -0x20
a3		= -0x18

		PUSH	{R0,R1,R4-R7,LR}
		MOV	R4, R0
		MOVS	R0, #0
		SUB	SP, SP,	#4

loc_1B34				; CODE XREF: sub_1B2C+12Cj
		STR	R0, [R4,#0x20]

loc_1B36				; CODE XREF: sub_1B2C+118j
					; sub_1B2C+11Ej
		MOV	R0, R4
		LDR	R1, [R4,#0xC]
		BLX	R1
		CMP	R0, #0
		BEQ	loc_1C3C
		CMP	R0, #0x25 ; '%'
		BEQ	loc_1B4A
		LDR	R2, [R4,#4]
		LDR	R1, [R4,#8]
		B	loc_1C52
; ---------------------------------------------------------------------------

loc_1B4A				; CODE XREF: sub_1B2C+16j
		LDR	R7, =(word_ED3E	- 0x1B52)
		MOVS	R5, #0
		ADD	R7, PC ; word_ED3E

loc_1B50				; CODE XREF: sub_1B2C+40j
		MOV	R0, R4
		LDR	R1, [R4,#0xC]
		BLX	R1
		CMP	R0, #0x20 ; ' '
		MOV	R6, R0
		BLT	loc_1B6E
		CMP	R6, #0x31 ; '1'
		BCS	loc_1B6E
		ADDS	R0, R7,	R6
		SUBS	R0, #0x20 ; ' '
		LDRB	R0, [R0]
		CMP	R0, #0
		BEQ	loc_1B6E
		ORRS	R5, R0
		B	loc_1B50
; ---------------------------------------------------------------------------

loc_1B6E				; CODE XREF: sub_1B2C+2Ej sub_1B2C+32j ...
		LSLS	R0, R5,	#0x1E
		BPL	loc_1B76
		MOVS	R0, #4
		BICS	R5, R0

loc_1B76				; CODE XREF: sub_1B2C+44j
		MOVS	R0, #0
		STR	R0, [R4,#0x1C]
		MOV	R7, R0
		STR	R0, [R4,#0x18]

loc_1B7E				; CODE XREF: sub_1B2C+C8j
		CMP	R6, #0x2A ; '*'
		BEQ	loc_1B98
		MOV	R0, R6
		BL	isASCICodeSingleDigit
		CMP	R0, #0
		BEQ	loc_1BDC
		SUBS	R6, #0x30 ; '0'
		LSLS	R0, R7,	#2
		ADDS	R0, R0,	R4
		STR	R0, [SP,#0x20+var_20]
		STR	R6, [R0,#0x18]
		B	loc_1BCC
; ---------------------------------------------------------------------------

loc_1B98				; CODE XREF: sub_1B2C+54j
		LDR	R0, [SP,#0x20+a3]
		LSLS	R2, R7,	#2
		ADDS	R2, R2,	R4
		LDMIA	R0!, {R1}
		STR	R1, [R2,#0x18]
		STR	R0, [SP,#0x20+a3]
		MOV	R0, R4
		LDR	R1, [R4,#0xC]
		BLX	R1
		CMP	R7, #1
		MOV	R6, R0
		BNE	loc_1BE0
		LDR	R0, [R4,#0x1C]
		CMP	R0, #0
		BGE	loc_1BF6
		MOVS	R0, #0x20 ; ' '
		BICS	R5, R0
		B	loc_1BF6
; ---------------------------------------------------------------------------

loc_1BBC				; CODE XREF: sub_1B2C+AEj
		LDR	R0, [SP,#0x20+var_20]
		MOVS	R1, #0xA
		LDR	R0, [R0,#0x18]
		MULS	R0, R1
		LDR	R1, [SP,#0x20+var_20]
		ADDS	R0, R0,	R6
		SUBS	R0, #0x30 ; '0'
		STR	R0, [R1,#0x18]

loc_1BCC				; CODE XREF: sub_1B2C+6Aj
		MOV	R0, R4
		LDR	R1, [R4,#0xC]
		BLX	R1
		MOV	R6, R0
		BL	isASCICodeSingleDigit
		CMP	R0, #0
		BNE	loc_1BBC

loc_1BDC				; CODE XREF: sub_1B2C+5Ej
		CMP	R7, #1
		BEQ	loc_1BF6

loc_1BE0				; CODE XREF: sub_1B2C+82j
		CMP	R6, #0x2E ; '.'
		BNE	loc_1BF6
		MOV	R0, R4
		LDR	R1, [R4,#0xC]
		BLX	R1
		MOV	R6, R0
		MOVS	R0, #0x20 ; ' '
		ORRS	R5, R0
		ADDS	R7, #1
		CMP	R7, #2
		BLT	loc_1B7E

loc_1BF6				; CODE XREF: sub_1B2C+88j sub_1B2C+8Ej ...
		LDR	R0, [R4,#0x18]
		CMP	R0, #0
		BGE	loc_1C04
		NEGS	R0, R0
		STR	R0, [R4,#0x18]
		MOVS	R0, #1
		ORRS	R5, R0

loc_1C04				; CODE XREF: sub_1B2C+CEj
		LSLS	R0, R5,	#0x1F
		BEQ	loc_1C0C
		MOVS	R0, #0x10
		BICS	R5, R0

loc_1C0C				; CODE XREF: sub_1B2C+DAj
		CMP	R6, #0
		BEQ	loc_1C5A
		MOV	R0, R6
		SUBS	R0, #0x41 ; 'A'
		CMP	R0, #0x19
		BHI	loc_1C20
		MOVS	R0, #0x800
		ORRS	R5, R0
		ADDS	R6, #0x20 ; ' '

loc_1C20				; CODE XREF: sub_1B2C+EAj
		MOV	R0, R4		; a1
		STR	R5, [R4]
		MOV	R1, R6		; format
		LDR	R2, [SP,#0x20+a3] ; a3
		MOV	R5, R2
		BL	sub_193C
		CMP	R0, #0
		BEQ	loc_1C4C
		CMP	R0, #1
		BEQ	loc_1C46
		ADDS	R5, #7
		LSRS	R0, R5,	#3
		B	loc_1C3E
; ---------------------------------------------------------------------------

loc_1C3C				; CODE XREF: sub_1B2C+12j
		B	loc_1C5A
; ---------------------------------------------------------------------------

loc_1C3E				; CODE XREF: sub_1B2C+10Ej
		LSLS	R0, R0,	#3
		ADDS	R0, #8
		STR	R0, [SP,#0x20+a3]
		B	loc_1B36
; ---------------------------------------------------------------------------

loc_1C46				; CODE XREF: sub_1B2C+108j
		ADDS	R5, #4
		STR	R5, [SP,#0x20+a3]
		B	loc_1B36
; ---------------------------------------------------------------------------

loc_1C4C				; CODE XREF: sub_1B2C+104j
		LDR	R2, [R4,#4]
		MOV	R0, R6
		LDR	R1, [R4,#8]

loc_1C52				; CODE XREF: sub_1B2C+1Cj
		BLX	R2
		LDR	R0, [R4,#0x20]
		ADDS	R0, #1
		B	loc_1B34
; ---------------------------------------------------------------------------

loc_1C5A				; CODE XREF: sub_1B2C+E2j
					; sub_1B2C:loc_1C3Cj
		LDR	R0, [R4,#0x20]
		POP	{R1-R7,PC}
; End of function sub_1B2C

; ---------------------------------------------------------------------------
		ALIGN 0x10
off_1C60	DCD word_ED3E -	0x1B52	; DATA XREF: sub_1B2C:loc_1B4Ar

; =============== S U B	R O U T	I N E =======================================


sub_1C64				; CODE XREF: SensorsList+92p
					; sensorsListMainScreen+17Cp
		MOV	R3, R0
		PUSH	{R4-R6,LR}
		MOV	R2, R0
		ORRS	R3, R1
		LSLS	R3, R3,	#0x1E
		BNE	loc_1C90
		LDR	R4, =0x1010101
		LSLS	R6, R4,	#7
		B	loc_1C78
; ---------------------------------------------------------------------------

loc_1C76				; CODE XREF: sub_1C64+1Cj
		STMIA	R2!, {R3}

loc_1C78				; CODE XREF: sub_1C64+10j
		LDMIA	R1!, {R3}
		SUBS	R5, R3,	R4
		BICS	R5, R3
		TST	R5, R6
		BEQ	loc_1C76

loc_1C82				; CODE XREF: sub_1C64+2Aj
		UXTB	R1, R3
		STRB	R1, [R2]
		ADDS	R2, #1
		CMP	R1, #0
		BEQ	locret_1CA8
		LSRS	R3, R3,	#8
		B	loc_1C82
; ---------------------------------------------------------------------------

loc_1C90				; CODE XREF: sub_1C64+Aj sub_1C64+42j
		LDRB	R3, [R1]
		ADDS	R1, #1
		STRB	R3, [R2]
		ADDS	R2, #1
		CMP	R3, #0
		BEQ	locret_1CA8
		LDRB	R3, [R1]
		ADDS	R1, #1
		STRB	R3, [R2]
		ADDS	R2, #1
		CMP	R3, #0
		BNE	loc_1C90

locret_1CA8				; CODE XREF: sub_1C64+26j sub_1C64+36j
		POP	{R4-R6,PC}
; End of function sub_1C64

; ---------------------------------------------------------------------------
		ALIGN 4
dword_1CAC	DCD 0x1010101		; DATA XREF: sub_1C64+Cr

; =============== S U B	R O U T	I N E =======================================


strLength				; CODE XREF: displayTextAt2+Ap
					; displayTextFromRight+Ap ...
		PUSH	{R4,R5,LR}
		ADDS	R4, R0,	#1
		B	loc_1CBE
; ---------------------------------------------------------------------------

loc_1CB6				; CODE XREF: strLength+10j
		LDRB	R1, [R0]
		ADDS	R0, #1
		CMP	R1, #0
		BEQ	loc_1CDA

loc_1CBE				; CODE XREF: strLength+4j
		LSLS	R1, R0,	#0x1E
		BNE	loc_1CB6
		LDR	R3, =0x1010101
		LSLS	R5, R3,	#7

loc_1CC6				; CODE XREF: strLength+1Ej
		LDMIA	R0!, {R2}
		SUBS	R1, R2,	R3
		BICS	R1, R2
		ANDS	R1, R5
		BEQ	loc_1CC6
		SUBS	R0, R0,	R4
		LSLS	R2, R1,	#0x18
		BEQ	loc_1CDE
		SUBS	R0, #3
		POP	{R4,R5,PC}
; ---------------------------------------------------------------------------

loc_1CDA				; CODE XREF: strLength+Cj
		SUBS	R0, R0,	R4
		POP	{R4,R5,PC}
; ---------------------------------------------------------------------------

loc_1CDE				; CODE XREF: strLength+24j
		LSLS	R2, R1,	#0x10
		BEQ	loc_1CE6
		SUBS	R0, #2

locret_1CE4				; CODE XREF: strLength+38j
		POP	{R4,R5,PC}
; ---------------------------------------------------------------------------

loc_1CE6				; CODE XREF: strLength+30j
		LSLS	R1, R1,	#8
		BEQ	locret_1CE4
		SUBS	R0, #1
		POP	{R4,R5,PC}
; End of function strLength

; ---------------------------------------------------------------------------
		ALIGN 0x10
dword_1CF0	DCD 0x1010101		; DATA XREF: strLength+12r

; =============== S U B	R O U T	I N E =======================================


memcpy					; CODE XREF: ROM:00001DF4p
					; ROM:00001E06p ...
		PUSH	{R3-R7,LR}
		CMP	R2, #4
		BCC	loc_1D54
		LSLS	R3, R0,	#0x1E
		BEQ	loc_1D24
		LDRB	R3, [R1]
		ADDS	R1, #1
		STRB	R3, [R0]
		ADDS	R0, #1
		SUBS	R2, #1
		LSLS	R3, R0,	#0x1E
		BEQ	loc_1D24
		LDRB	R3, [R1]
		ADDS	R1, #1
		STRB	R3, [R0]
		ADDS	R0, #1
		SUBS	R2, #1
		LSLS	R3, R0,	#0x1E
		BEQ	loc_1D24
		LDRB	R3, [R1]
		ADDS	R1, #1		; source
		STRB	R3, [R0]
		ADDS	R0, #1		; target
		SUBS	R2, #1		; len

loc_1D24				; CODE XREF: memcpy+8j	memcpy+16j ...
		LSLS	R3, R1,	#0x1E
		LSRS	R3, R3,	#0x1E
		BEQ	loc_1D36
		SUBS	R1, R1,	R3
		LSLS	R7, R3,	#3
		MOVS	R3, #0x20 ; ' '
		SUBS	R6, R3,	R7
		LDMIA	R1!, {R3}
		B	loc_1D4C
; ---------------------------------------------------------------------------

loc_1D36				; CODE XREF: memcpy+34j
		BL	strcpy

locret_1D3A				; CODE XREF: memcpy+62j memcpy+6Ej ...
		POP	{R3-R7,PC}
; ---------------------------------------------------------------------------

loc_1D3C				; CODE XREF: memcpy+5Aj
		MOV	R5, R3
		LDMIA	R1!, {R3}
		LSRS	R5, R7
		MOV	R4, R3
		LSLS	R4, R6
		ORRS	R4, R5
		STMIA	R0!, {R4}
		SUBS	R2, #4

loc_1D4C				; CODE XREF: memcpy+40j
		CMP	R2, #4
		BCS	loc_1D3C
		LSRS	R3, R6,	#3
		SUBS	R1, R1,	R3

loc_1D54				; CODE XREF: memcpy+4j
		SUBS	R2, #1
		BMI	locret_1D3A
		LDRB	R3, [R1]
		ADDS	R1, #1
		STRB	R3, [R0]
		ADDS	R0, #1
		SUBS	R2, #1
		BMI	locret_1D3A
		LDRB	R3, [R1]
		ADDS	R1, #1
		STRB	R3, [R0]
		ADDS	R0, #1
		SUBS	R2, #1
		BMI	locret_1D3A
		LDRB	R1, [R1]
		STRB	R1, [R0]
		POP	{R3-R7,PC}
; End of function memcpy


; =============== S U B	R O U T	I N E =======================================


sub_1D76				; CODE XREF: ROM:00001DDAp
					; setSensorValue+154p ...
		SUBS	R3, R0,	R1
		PUSH	{R4-R6,LR}
		CMP	R3, R2
		BCS	loc_1DB6
		ADDS	R1, R1,	R2
		ADDS	R0, R0,	R2
		B	loc_1D8E
; ---------------------------------------------------------------------------

loc_1D84				; CODE XREF: sub_1D76+1Aj
		SUBS	R1, #1
		SUBS	R2, #1
		LDRB	R3, [R1]
		SUBS	R0, #1
		STRB	R3, [R0]

loc_1D8E				; CODE XREF: sub_1D76+Cj
		LSLS	R3, R2,	#0x1E
		BNE	loc_1D84
		B	loc_1DA2
; ---------------------------------------------------------------------------

loc_1D94				; CODE XREF: sub_1D76+2Ej
		SUBS	R1, #0x10
		MOV	R3, R1
		SUBS	R0, #0x10
		SUBS	R2, #0x10
		LDMIA	R3, {R3-R6}
		STMIA	R0!, {R3-R6}
		SUBS	R0, #0x10

loc_1DA2				; CODE XREF: sub_1D76+1Cj
		CMP	R2, #0x10
		BCS	loc_1D94
		B	loc_1DB0
; ---------------------------------------------------------------------------

loc_1DA8				; CODE XREF: sub_1D76+3Cj
		SUBS	R0, #4		; target
		SUBS	R1, #4		; source
		LDR	R3, [R1]
		STR	R3, [R0]

loc_1DB0				; CODE XREF: sub_1D76+30j
		SUBS	R2, #4		; len
		BPL	loc_1DA8
		POP	{R4-R6,PC}
; ---------------------------------------------------------------------------

loc_1DB6				; CODE XREF: sub_1D76+6j
		BL	strcpy
		POP	{R4-R6,PC}
; End of function sub_1D76

; ---------------------------------------------------------------------------
		PUSH	{R3-R7,LR}
		MOV	R6, R0
		MOV	R4, R2
		ORRS	R0, R1
		LSLS	R0, R0,	#0x1E
		BEQ	loc_1DD8
		SUBS	R5, R6,	R1
		CMP	R5, R4
		BCS	loc_1E02
		ADDS	R0, R1,	R4
		CMP	R5, #0x10
		BCS	loc_1DFC
		ADDS	R1, R6,	R4
		B	loc_1DE8
; ---------------------------------------------------------------------------

loc_1DD8				; CODE XREF: ROM:00001DC6j
		MOV	R0, R6
		BL	sub_1D76
		POP	{R3-R7,PC}
; ---------------------------------------------------------------------------

loc_1DE0				; CODE XREF: ROM:00001DEAj
		SUBS	R0, #1
		SUBS	R1, #1
		LDRB	R2, [R0]
		STRB	R2, [R1]

loc_1DE8				; CODE XREF: ROM:00001DD6j
		SUBS	R4, #1
		BCS	loc_1DE0
		POP	{R3-R7,PC}
; ---------------------------------------------------------------------------

loc_1DEE				; CODE XREF: ROM:00001DFEj
		SUBS	R7, R0,	R5
		MOV	R2, R5
		MOV	R1, R7
		BL	memcpy
		SUBS	R4, R4,	R5
		MOV	R0, R7

loc_1DFC				; CODE XREF: ROM:00001DD2j
		CMP	R5, R4
		BCC	loc_1DEE
		SUBS	R1, R0,	R4

loc_1E02				; CODE XREF: ROM:00001DCCj
		MOV	R2, R4
		MOV	R0, R6
		BL	memcpy
		POP	{R3-R7,PC}

; =============== S U B	R O U T	I N E =======================================


; _WORD	*__fastcall setupDMA(_WORD *targetAddress, unsigned int	numbButesToSend, unsigned __int8 a3)
setupDMA				; CODE XREF: FactoryReset+88p
					; FactResConfirm+88p ...

; FUNCTION CHUNK AT 00001E24 SIZE 00000032 BYTES

		UXTB	R2, R2
		PUSH	{R4,LR}
		LSLS	R3, R2,	#8
		ADDS	R2, R3,	R2
		LSLS	R3, R2,	#0x10
		ADDS	R2, R3,	R2
		BL	loc_1E38
; ---------------------------------------------------------------------------
		POP	{R4,PC}
; ---------------------------------------------------------------------------

loc_1E1E				; CODE XREF: setupDMA:loc_1E54j
					; ROM:00001E5Cj
		B	loc_1E24
; ---------------------------------------------------------------------------

loc_1E20				; CODE XREF: setupDMA+1Aj
		STMIA	R0!, {R2}
		SUBS	R1, #4
; End of function setupDMA

; START	OF FUNCTION CHUNK FOR setupDMA

loc_1E24				; CODE XREF: setupDMA:loc_1E1Ej
		CMP	R1, #4
		BCS	loc_1E20
		LSLS	R3, R1,	#0x1E
		BPL	loc_1E30
		STRH	R2, [R0]
		ADDS	R0, #2

loc_1E30				; CODE XREF: setupDMA+1Ej
		LSLS	R1, R1,	#0x1F
		BEQ	locret_1E36
		STRB	R2, [R0]

locret_1E36				; CODE XREF: setupDMA+26j
		BX	LR
; ---------------------------------------------------------------------------

loc_1E38				; CODE XREF: setupDMA+Cj
					; callSetupDMA+2j
		CMP	R1, #0
		BEQ	loc_1E54
		LSLS	R3, R0,	#0x1F
		BEQ	loc_1E46
		STRB	R2, [R0]
		ADDS	R0, #1
		SUBS	R1, #1

loc_1E46				; CODE XREF: setupDMA+32j
		CMP	R1, #2
		BCC	loc_1E54
		LSLS	R3, R0,	#0x1E
		BPL	loc_1E54
		STRH	R2, [R0]
		ADDS	R0, #2
		SUBS	R1, #2

loc_1E54				; CODE XREF: setupDMA+2Ej setupDMA+3Cj ...
		B	loc_1E1E
; END OF FUNCTION CHUNK	FOR setupDMA

; =============== S U B	R O U T	I N E =======================================


callSetupDMA				; CODE XREF: setupDMAandSend+8p
					; LCD_clear+172p
		MOVS	R2, #0
		B	loc_1E38
; End of function callSetupDMA

; ---------------------------------------------------------------------------
		MOVS	R2, #0
		B	loc_1E1E

; =============== S U B	R O U T	I N E =======================================


div_Other				; CODE XREF: main+3A6p	main+3B8p ...
		MOVS	R2, #0
		LSRS	R3, R0,	#4
		CMP	R3, R1
		BCC	loc_1F4E
		LSRS	R3, R0,	#8
		CMP	R3, R1
		BCC	loc_1F1E
		LSRS	R3, R0,	#0xC
		CMP	R3, R1
		BCC	loc_1EEC
		LSRS	R3, R0,	#0x10
		CMP	R3, R1
		BCC	loc_1EBC
		B	loc_1EA0
; End of function div_Other


; =============== S U B	R O U T	I N E =======================================


div_					; CODE XREF: sub_237C:loc_23C6p
					; main+210p ...
		MOV	R3, R0
		ORRS	R3, R1
		BMI	loc_1F80
		MOVS	R2, #0
		LSRS	R3, R0,	#1
		CMP	R3, R1
		BCC	loc_1F72
		LSRS	R3, R0,	#4
		CMP	R3, R1
		BCC	loc_1F4E
		LSRS	R3, R0,	#8
		CMP	R3, R1
		BCC	loc_1F1E
		LSRS	R3, R0,	#0xC
		CMP	R3, R1
		BCC	loc_1EEC
		LSRS	R3, R0,	#0x10
		CMP	R3, R1
		BCC	loc_1EBC

loc_1EA0				; CODE XREF: div_Other+1Aj
		MOVS	R2, #0xFF
		LSLS	R1, R1,	#8
		REV	R2, R2
		LSRS	R3, R0,	#0x10
		CMP	R3, R1
		BCC	loc_1EB2
		ASRS	R2, R2,	#8
		LSLS	R1, R1,	#8
		BEQ	loc_1F7E

loc_1EB2				; CODE XREF: div_+30j
		LSRS	R3, R0,	#0xC
		CMP	R3, R1
		BCC	loc_1EEC
		B	loc_1EBC
; ---------------------------------------------------------------------------

loc_1EBA				; CODE XREF: div_+A2j
		LSRS	R1, R1,	#8

loc_1EBC				; CODE XREF: div_Other+18j div_+24j ...
		LSRS	R3, R0,	#0xF
		CMP	R3, R1
		BCC	loc_1EC6
		LSLS	R3, R1,	#0xF
		SUBS	R0, R0,	R3

loc_1EC6				; CODE XREF: div_+46j
		ADCS	R2, R2
		LSRS	R3, R0,	#0xE
		CMP	R3, R1
		BCC	loc_1ED2
		LSLS	R3, R1,	#0xE
		SUBS	R0, R0,	R3

loc_1ED2				; CODE XREF: div_+52j
		ADCS	R2, R2
		LSRS	R3, R0,	#0xD
		CMP	R3, R1
		BCC	loc_1EDE
		LSLS	R3, R1,	#0xD
		SUBS	R0, R0,	R3

loc_1EDE				; CODE XREF: div_+5Ej
		ADCS	R2, R2
		LSRS	R3, R0,	#0xC
		CMP	R3, R1
		BCC	loc_1EEA
		LSLS	R3, R1,	#0xC
		SUBS	R0, R0,	R3

loc_1EEA				; CODE XREF: div_+6Aj
		ADCS	R2, R2

loc_1EEC				; CODE XREF: div_Other+12j div_+1Ej ...
		LSRS	R3, R0,	#0xB
		CMP	R3, R1
		BCC	loc_1EF6
		LSLS	R3, R1,	#0xB
		SUBS	R0, R0,	R3

loc_1EF6				; CODE XREF: div_+76j
		ADCS	R2, R2
		LSRS	R3, R0,	#0xA
		CMP	R3, R1
		BCC	loc_1F02
		LSLS	R3, R1,	#0xA
		SUBS	R0, R0,	R3

loc_1F02				; CODE XREF: div_+82j
		ADCS	R2, R2
		LSRS	R3, R0,	#9
		CMP	R3, R1
		BCC	loc_1F0E
		LSLS	R3, R1,	#9
		SUBS	R0, R0,	R3

loc_1F0E				; CODE XREF: div_+8Ej
		ADCS	R2, R2
		LSRS	R3, R0,	#8
		CMP	R3, R1
		BCC	loc_1F1A
		LSLS	R3, R1,	#8
		SUBS	R0, R0,	R3

loc_1F1A				; CODE XREF: div_+9Aj
		ADCS	R2, R2
		BCS	loc_1EBA

loc_1F1E				; CODE XREF: div_Other+Cj div_+18j
		LSRS	R3, R0,	#7
		CMP	R3, R1
		BCC	loc_1F28
		LSLS	R3, R1,	#7
		SUBS	R0, R0,	R3

loc_1F28				; CODE XREF: div_+A8j
		ADCS	R2, R2
		LSRS	R3, R0,	#6
		CMP	R3, R1
		BCC	loc_1F34
		LSLS	R3, R1,	#6
		SUBS	R0, R0,	R3

loc_1F34				; CODE XREF: div_+B4j
		ADCS	R2, R2
		LSRS	R3, R0,	#5
		CMP	R3, R1
		BCC	loc_1F40
		LSLS	R3, R1,	#5
		SUBS	R0, R0,	R3

loc_1F40				; CODE XREF: div_+C0j
		ADCS	R2, R2
		LSRS	R3, R0,	#4
		CMP	R3, R1
		BCC	loc_1F4C
		LSLS	R3, R1,	#4
		SUBS	R0, R0,	R3

loc_1F4C				; CODE XREF: div_+CCj
		ADCS	R2, R2

loc_1F4E				; CODE XREF: div_Other+6j div_+12j
		LSRS	R3, R0,	#3
		CMP	R3, R1
		BCC	loc_1F58
		LSLS	R3, R1,	#3
		SUBS	R0, R0,	R3

loc_1F58				; CODE XREF: div_+D8j
		ADCS	R2, R2
		LSRS	R3, R0,	#2
		CMP	R3, R1
		BCC	loc_1F64
		LSLS	R3, R1,	#2
		SUBS	R0, R0,	R3

loc_1F64				; CODE XREF: div_+E4j
		ADCS	R2, R2
		LSRS	R3, R0,	#1
		CMP	R3, R1
		BCC	loc_1F70
		LSLS	R3, R1,	#1
		SUBS	R0, R0,	R3

loc_1F70				; CODE XREF: div_+F0j
		ADCS	R2, R2

loc_1F72				; CODE XREF: div_+Cj
		SUBS	R1, R0,	R1
		BCS	loc_1F78
		MOV	R1, R0

loc_1F78				; CODE XREF: div_+FAj
		ADCS	R2, R2
		MOV	R0, R2
		BX	LR
; ---------------------------------------------------------------------------

loc_1F7E				; CODE XREF: div_+36j
		B	loc_203C
; ---------------------------------------------------------------------------

loc_1F80				; CODE XREF: div_+4j
		LSRS	R2, R1,	#0x1F
		BEQ	loc_1F86
		NEGS	R1, R1

loc_1F86				; CODE XREF: div_+108j
		ASRS	R3, R0,	#0x20
		BCC	loc_1F8C
		NEGS	R0, R0

loc_1F8C				; CODE XREF: div_+10Ej
		EORS	R3, R2
		MOVS	R2, #0
		MOV	R12, R3
		LSRS	R3, R0,	#4
		CMP	R3, R1
		BCC	loc_1FF4
		LSRS	R3, R0,	#8
		CMP	R3, R1
		BCC	loc_1FC4
		MOVS	R2, #0xFC ; 'ü'
		LSLS	R1, R1,	#6
		REV	R2, R2
		LSRS	R3, R0,	#8
		CMP	R3, R1
		BCC	loc_1FC4
		LSLS	R1, R1,	#6
		ASRS	R2, R2,	#6
		CMP	R3, R1
		BCC	loc_1FC4
		LSLS	R1, R1,	#6
		ASRS	R2, R2,	#6
		CMP	R3, R1
		BCC	loc_1FC4
		LSLS	R1, R1,	#6
		BEQ	loc_2034
		ASRS	R2, R2,	#6
		B	loc_1FC4
; ---------------------------------------------------------------------------

loc_1FC2				; CODE XREF: div_+192j
		LSRS	R1, R1,	#6

loc_1FC4				; CODE XREF: div_+122j	div_+12Ej ...
		LSRS	R3, R0,	#7
		CMP	R3, R1
		BCC	loc_1FCE
		LSLS	R3, R1,	#7
		SUBS	R0, R0,	R3

loc_1FCE				; CODE XREF: div_+14Ej
		ADCS	R2, R2
		LSRS	R3, R0,	#6
		CMP	R3, R1
		BCC	loc_1FDA
		LSLS	R3, R1,	#6
		SUBS	R0, R0,	R3

loc_1FDA				; CODE XREF: div_+15Aj
		ADCS	R2, R2
		LSRS	R3, R0,	#5
		CMP	R3, R1
		BCC	loc_1FE6
		LSLS	R3, R1,	#5
		SUBS	R0, R0,	R3

loc_1FE6				; CODE XREF: div_+166j
		ADCS	R2, R2
		LSRS	R3, R0,	#4
		CMP	R3, R1
		BCC	loc_1FF2
		LSLS	R3, R1,	#4
		SUBS	R0, R0,	R3

loc_1FF2				; CODE XREF: div_+172j
		ADCS	R2, R2

loc_1FF4				; CODE XREF: div_+11Cj
		LSRS	R3, R0,	#3
		CMP	R3, R1
		BCC	loc_1FFE
		LSLS	R3, R1,	#3
		SUBS	R0, R0,	R3

loc_1FFE				; CODE XREF: div_+17Ej
		ADCS	R2, R2
		LSRS	R3, R0,	#2
		CMP	R3, R1
		BCC	loc_200A
		LSLS	R3, R1,	#2
		SUBS	R0, R0,	R3

loc_200A				; CODE XREF: div_+18Aj
		ADCS	R2, R2
		BCS	loc_1FC2
		LSRS	R3, R0,	#1
		CMP	R3, R1
		BCC	loc_2018
		LSLS	R3, R1,	#1
		SUBS	R0, R0,	R3

loc_2018				; CODE XREF: div_+198j
		ADCS	R2, R2
		SUBS	R1, R0,	R1
		BCS	loc_2020
		MOV	R1, R0

loc_2020				; CODE XREF: div_+1A2j
		MOV	R3, R12
		ADCS	R2, R2
		ASRS	R3, R3,	#1
		MOV	R0, R2
		BCC	loc_202E
		NEGS	R0, R0
		CMP	R3, #0

loc_202E				; CODE XREF: div_+1AEj
		BPL	locret_2032
		NEGS	R1, R1

locret_2032				; CODE XREF: div_:loc_202Ej
		BX	LR
; ---------------------------------------------------------------------------

loc_2034				; CODE XREF: div_+142j
		MOV	R3, R12
		ASRS	R3, R3,	#1
		BCC	loc_203C
		NEGS	R0, R0

loc_203C				; CODE XREF: div_:loc_1F7Ej div_+1BEj
		PUSH	{R0,LR}
		MOVS	R0, #0
		NOP
		NOP
		POP	{R1,PC}
; End of function div_

; ---------------------------------------------------------------------------
		BX	LR
; ---------------------------------------------------------------------------
		BX	LR
; ---------------------------------------------------------------------------
		BX	LR

; =============== S U B	R O U T	I N E =======================================


sub_204C				; CODE XREF: sub_1AC0+54p

var_28		= -0x28
var_1C		= -0x1C
var_18		= -0x18

		PUSH	{R0-R7,LR}
		MOV	R4, R0
		MOV	R5, R1
		SUB	SP, SP,	#4
		ADDS	R0, #0x24 ; '$'
		STR	R0, [SP,#0x28+var_28]
		LDR	R1, [R4]
		LSLS	R0, R1,	#0x1A
		BPL	loc_2068
		MOVS	R2, #0x10
		LDR	R0, [R4,#0x1C]
		BICS	R1, R2
		STR	R1, [R4]
		B	loc_206A
; ---------------------------------------------------------------------------

loc_2068				; CODE XREF: sub_204C+10j
		MOVS	R0, #1

loc_206A				; CODE XREF: sub_204C+1Aj
		CMP	R0, R5
		BLE	loc_2072
		SUBS	R7, R0,	R5
		B	loc_2074
; ---------------------------------------------------------------------------

loc_2072				; CODE XREF: sub_204C+20j
		MOVS	R7, #0

loc_2074				; CODE XREF: sub_204C+24j
		LDR	R0, [SP,#0x28+var_18]
		LDR	R1, [R4,#0x18]
		ADDS	R2, R7,	R5
		ADDS	R0, R2,	R0
		SUBS	R0, R1,	R0
		STR	R0, [R4,#0x18]
		LDRB	R0, [R4]
		LSLS	R0, R0,	#0x1B
		BMI	loc_208C
		MOV	R0, R4
		BL	sub_1A20

loc_208C				; CODE XREF: sub_204C+38j
		MOVS	R6, #0
		B	loc_20A2
; ---------------------------------------------------------------------------

loc_2090				; CODE XREF: sub_204C+5Aj
		LDR	R0, [SP,#0x28+var_1C]
		LDR	R2, [R4,#4]
		LDR	R1, [R4,#8]
		LDRB	R0, [R0,R6]
		BLX	R2
		LDR	R0, [R4,#0x20]
		ADDS	R0, #1
		ADDS	R6, #1
		STR	R0, [R4,#0x20]

loc_20A2				; CODE XREF: sub_204C+42j
		LDR	R0, [SP,#0x28+var_18]
		CMP	R6, R0
		BLT	loc_2090
		LDRB	R0, [R4]
		LSLS	R0, R0,	#0x1B
		BPL	loc_20C4
		MOV	R0, R4
		BL	sub_1A20
		B	loc_20C4
; ---------------------------------------------------------------------------

loc_20B6				; CODE XREF: sub_204C+7Ej
		LDR	R2, [R4,#4]
		LDR	R1, [R4,#8]
		MOVS	R0, #0x30 ; '0'
		BLX	R2
		LDR	R0, [R4,#0x20]
		ADDS	R0, #1
		STR	R0, [R4,#0x20]

loc_20C4				; CODE XREF: sub_204C+60j sub_204C+68j
		MOV	R0, R7
		SUBS	R7, #1
		CMP	R0, #0
		BGT	loc_20B6
		B	loc_20DE
; ---------------------------------------------------------------------------

loc_20CE				; CODE XREF: sub_204C+98j
		LDR	R0, [SP,#0x28+var_28]
		LDR	R2, [R4,#4]
		LDR	R1, [R4,#8]
		LDRB	R0, [R0,R5]
		BLX	R2
		LDR	R0, [R4,#0x20]
		ADDS	R0, #1
		STR	R0, [R4,#0x20]

loc_20DE				; CODE XREF: sub_204C+80j
		MOV	R0, R5
		SUBS	R5, #1
		CMP	R0, #0
		BGT	loc_20CE
		MOV	R0, R4
		BL	sub_1A4C
		LDRB	R0, [R4]
		LSLS	R0, R0,	#0x18
		BPL	loc_20F8
		MOVS	R0, #2

loc_20F4				; CODE XREF: sub_204C+AEj
		ADD	SP, SP,	#0x14
		POP	{R4-R7,PC}
; ---------------------------------------------------------------------------

loc_20F8				; CODE XREF: sub_204C+A4j
		MOVS	R0, #1
		B	loc_20F4
; End of function sub_204C


; =============== S U B	R O U T	I N E =======================================


sub_20FC				; DATA XREF: someSprintfMethod+Eo
					; ROM:off_2128o
		LDR	R1, [R0,#0x10]
		ADDS	R2, R1,	#1
		STR	R2, [R0,#0x10]
		LDRB	R0, [R1]
		BX	LR
; End of function sub_20FC


; =============== S U B	R O U T	I N E =======================================


someSprintfMethod			; CODE XREF: sprintf+10p

var_3C		= -0x3C
var_38		= -0x38
var_34		= -0x34
var_30		= -0x30
var_2C		= -0x2C

		PUSH	{LR}
		SUB	SP, SP,	#0x3C
		STR	R1, [SP,#0x40+var_38]
		MOVS	R1, #0
		STR	R1, [SP,#0x40+var_2C]
		LDR	R1, =(sub_20FC+1 - 0x2118)
		STR	R3, [SP,#0x40+var_3C]
		ADD	R1, PC ; sub_20FC
		STR	R1, [SP,#0x40+var_34]
		MOV	R1, R2
		STR	R0, [SP,#0x40+var_30]
		MOV	R0, SP
		BL	sub_1B2C
		ADD	SP, SP,	#0x3C
		POP	{PC}
; End of function someSprintfMethod

; ---------------------------------------------------------------------------
		ALIGN 4
off_2128	DCD sub_20FC+1 - 0x2118	; DATA XREF: someSprintfMethod+Ar

; =============== S U B	R O U T	I N E =======================================


sub_212C				; CODE XREF: sprintf+18p
					; DATA XREF: sprintf+8o ...
		LDR	R2, [R1]
		STRB	R0, [R2]
		ADDS	R2, #1
		STR	R2, [R1]
		BX	LR
; End of function sub_212C


; =============== S U B	R O U T	I N E =======================================


sub_2136				; CODE XREF: ROM:0000215Aj sub_215C+6j
		PUSH	{R4,LR}
		LDR	R3, [R0,#0x14]
		CMP	R3, #0
		BEQ	loc_2144
		NOP
		NOP
		B	loc_2148
; ---------------------------------------------------------------------------

loc_2144				; CODE XREF: sub_2136+6j
		BL	sub_1A6E

loc_2148				; CODE XREF: sub_2136+Cj
		MOVS	R0, #1
		POP	{R4,PC}
; End of function sub_2136

; ---------------------------------------------------------------------------
		LDRB	R2, [R2]
		MOV	R1, R0
		ADDS	R1, #0x24 ; '$'
		STRB	R2, [R1]
		MOVS	R2, #0
		STRB	R2, [R1,#1]
		MOVS	R2, #1
		B	sub_2136

; =============== S U B	R O U T	I N E =======================================


sub_215C				; CODE XREF: sub_193C+1Ap
		LDR	R1, [R2]
		MOVS	R2, #0
		MVNS	R2, R2
		B	sub_2136
; End of function sub_215C


; =============== S U B	R O U T	I N E =======================================


; unsigned int __fastcall divBy10(unsigned int value)
divBy10					; CODE XREF: sub_1AC0:loc_1AFEp
		MOV	R1, R0
		LSRS	R0, R0,	#2
		SUBS	R0, R1,	R0
		LSRS	R2, R0,	#4
		ADDS	R0, R2,	R0
		LSRS	R2, R0,	#8
		ADDS	R0, R2,	R0
		LSRS	R2, R0,	#0x10
		ADDS	R0, R2,	R0
		LSRS	R0, R0,	#3
		LSLS	R2, R0,	#2
		ADDS	R2, R2,	R0
		LSLS	R2, R2,	#1
		SUBS	R1, R1,	R2
		B	loc_2186
; ---------------------------------------------------------------------------

loc_2182				; CODE XREF: divBy10+24j
		SUBS	R1, #0xA
		ADDS	R0, #1

loc_2186				; CODE XREF: divBy10+1Cj
		CMP	R1, #0xA
		BCS	loc_2182
		BX	LR
; End of function divBy10


; =============== S U B	R O U T	I N E =======================================


sub_218C				; CODE XREF: entryPoint:loc_196Cp
		MOV	R5, LR
		BL	sub_21D8
		MOV	LR, R5
		MOVS	R5, R0
		MOV	R1, SP
		MOV	R3, R10
		LSRS	R0, R0,	#3
		LSLS	R0, R0,	#3
		MOV	SP, R0
		ADD	SP, SP,	#0x60
		PUSH	{R5,LR}
		BL	get1FFFFE40
		POP	{R5,R6}
		MOVS	R7, #0
		LSRS	R1, R1,	#1
		MOV	LR, R6
		MOVS	R6, #0
		STMIA	R5!, {R6,R7}
		STMIA	R5!, {R6,R7}
		STMIA	R5!, {R6,R7}
		STMIA	R5!, {R6,R7}
		STMIA	R5!, {R6,R7}
		STMIA	R5!, {R6,R7}
		STMIA	R5!, {R6,R7}
		STMIA	R5!, {R6,R7}
		SUBS	R5, #0x40 ; '@'
		LSLS	R1, R1,	#1
		MOV	SP, R1
		BX	LR
; End of function sub_218C

; ---------------------------------------------------------------------------
		DCB    4
		DCB 0x46
		DCD 0x46C046C0,	0xF7FF4620, 0xFBD4

; =============== S U B	R O U T	I N E =======================================


sub_21D8				; CODE XREF: sub_218C+2p
		LDR	R0, =dword_1FFFFDE0
		BX	LR
; End of function sub_21D8

; ---------------------------------------------------------------------------
off_21DC	DCD dword_1FFFFDE0	; DATA XREF: sub_21D8r

; =============== S U B	R O U T	I N E =======================================

; Attributes: noreturn

sub_21E0
		LDR	R1, =0x20026
		MOVS	R0, #0x18
		BKPT	0xAB ; '«'

loc_21E6				; CODE XREF: sub_21E0:loc_21E6j
		B	loc_21E6
; End of function sub_21E0

; ---------------------------------------------------------------------------
dword_21E8	DCD 0x20026		; DATA XREF: sub_21E0r

; =============== S U B	R O U T	I N E =======================================


adc_setup
		PUSH	{R4-R7}
		LDR	R0, =adcFlag
		MOVS	R1, #1
		LDRB	R6, [R0]
		MOV	R3, R0
		MOV	R2, R6
		LDR	R3, [R3,#(adcChannelIndex - 0x20000164)]
		EORS	R2, R1
		MOVS	R7, #0
		LDR	R5, =ADC_Results ; results of ADC 7 items?
		LDR	R1, =0x4003B000
		LSLS	R4, R3,	#2
		CMP	R6, #0
		BEQ	loc_221A
		LDR	R5, [R5,R4]
		LDR	R6, [R1,#0x10]
		ADDS	R5, R5,	R6
		LSRS	R5, R5,	#1
		LDR	R6, =ch1_ADC_VAL
		CMP	R3, #7
		STR	R5, [R6,R4]
		BEQ	loc_2228
		B	loc_221E
; ---------------------------------------------------------------------------

loc_221A				; CODE XREF: adc_setup+1Aj
		LDR	R6, [R1,#0x10]
		STR	R6, [R5,R4]

loc_221E				; CODE XREF: adc_setup+2Cj
		CMP	R3, #7
		BCS	loc_223A
		ADDS	R3, #1
		STR	R3, [R0,#(adcChannelIndex - 0x20000164)]
		B	loc_223E
; ---------------------------------------------------------------------------

loc_2228				; CODE XREF: adc_setup+2Aj
		STR	R7, [R0,#(adcChannelIndex - 0x20000164)]
		STRB	R2, [R0]
		STRB	R7, [R0,#(byte_20000165	- 0x20000164)]
		LDR	R2, [R1]
		MOVS	R0, #0x40 ; '@'
		BICS	R2, R0
		STR	R2, [R1]
		POP	{R4-R7}
		BX	LR
; ---------------------------------------------------------------------------

loc_223A				; CODE XREF: adc_setup+34j
		STR	R7, [R0,#(adcChannelIndex - 0x20000164)]
		STRB	R2, [R0]

loc_223E				; CODE XREF: adc_setup+3Aj
		MOVS	R2, #1
		STRB	R2, [R0,#(byte_20000165	- 0x20000164)]
		LDR	R2, [R0,#(adcChannelIndex - 0x20000164)]
		MOVS	R0, #0x10
		LDR	R3, [R1,#0xC]
		CMP	R2, #5
		BEQ	loc_2260
		ORRS	R3, R0

loc_224E				; CODE XREF: adc_setup+76j
		STR	R3, [R1,#0xC]
		LSLS	R0, R2,	#2
		LDR	R2, =ADCH_Values
		LDR	R0, [R2,R0]
		MOVS	R2, #0x40 ; '@'
		ORRS	R0, R2
		STR	R0, [R1]
		POP	{R4-R7}
		BX	LR
; ---------------------------------------------------------------------------

loc_2260				; CODE XREF: adc_setup+5Ej
		BICS	R3, R0
		B	loc_224E
; End of function adc_setup

; ---------------------------------------------------------------------------
off_2264	DCD adcFlag		; DATA XREF: adc_setup+2r
off_2268	DCD ADC_Results		; DATA XREF: adc_setup+12r
					; results of ADC 7 items?
dword_226C	DCD 0x4003B000		; DATA XREF: adc_setup+14r
off_2270	DCD ch1_ADC_VAL		; DATA XREF: adc_setup+24r
off_2274	DCD ADCH_Values		; DATA XREF: adc_setup+66r

; =============== S U B	R O U T	I N E =======================================


calibrateADC				; CODE XREF: main_screen+B6p
		PUSH	{R4,R5}
		LDR	R0, =0x40048000
		LDR	R1, [R0,#0x3C]
		MOVS	R2, #0x8000000
		ORRS	R1, R2
		STR	R1, [R0,#0x3C]
		LDR	R0, =0x4004C000
		MOVS	R2, #0
		STR	R2, [R0,#0x18]
		STR	R2, [R0,#0x14]
		STR	R2, [R0,#4]
		LDR	R1, =0x4004B000
		STR	R2, [R1,#8]
		LDR	R0, =0x4004D040
		STR	R2, [R0,#0x18]
		STR	R2, [R0,#0x1C]
		STR	R2, [R0,#0x34]
		STR	R2, [R1]
		LDR	R0, =0x4003B000
		MOVS	R1, #0x34 ; '4'
		STR	R1, [R0,#8]
		MOVS	R1, #0x16
		STR	R1, [R0,#0xC]
		STR	R2, [R0,#0x20]
		MOVS	R1, #5
		STR	R1, [R0,#0x24]
		LDR	R1, [R0,#0x24]
		MOVS	R3, #0x80 ; ''
		ORRS	R1, R3
		STR	R1, [R0,#0x24]

loc_22B6				; CODE XREF: calibrateADC+42j
		LDR	R1, [R0,#0x24]
		LSLS	R1, R1,	#0x18
		BMI	loc_22B6
		LDR	R1, [R0,#0x24]
		LDR	R3, =loc_8000
		LSLS	R1, R1,	#0x19
		BMI	loc_22E2
		LDR	R1, =0x4003B040
		LDR	R4, [R1,#0xC]
		LDR	R5, [R1,#8]
		ADDS	R4, R4,	R5
		LDR	R5, [R1,#4]
		LDR	R1, [R1]
		ADDS	R1, R5,	R1
		ADDS	R1, R4,	R1
		LDR	R4, [R0,#0x3C]
		ADDS	R1, R1,	R4
		LDR	R4, [R0,#0x38]
		ADDS	R1, R1,	R4
		LSRS	R1, R1,	#1
		ORRS	R1, R3
		STR	R1, [R0,#0x2C]

loc_22E2				; CODE XREF: calibrateADC+4Aj
		LDR	R0, =0xE000E400
		LDR	R1, [R0,#0xC]
		LSLS	R4, R0,	#0x15
		LSLS	R1, R1,	#8
		LSRS	R1, R1,	#8
		ADDS	R1, R1,	R4
		STR	R1, [R0,#0xC]
		LDR	R0, =0xE000E100
		LDR	R1, [R0]
		ORRS	R1, R3
		STR	R1, [R0]
		LDR	R0, =adcFlag
		STR	R2, [R0,#(adcChannelIndex - 0x20000164)]
		STRB	R2, [R0]
		POP	{R4,R5}
		BX	LR
; End of function calibrateADC

; ---------------------------------------------------------------------------
		ALIGN 4
dword_2304	DCD 0x40048000		; DATA XREF: calibrateADC+2r
dword_2308	DCD 0x4004C000		; DATA XREF: calibrateADC+Er
dword_230C	DCD 0x4004B000		; DATA XREF: calibrateADC+18r
dword_2310	DCD 0x4004D040		; DATA XREF: calibrateADC+1Cr
dword_2314	DCD 0x4003B000		; DATA XREF: calibrateADC+26r
off_2318	DCD loc_8000		; DATA XREF: calibrateADC+46r
dword_231C	DCD 0x4003B040		; DATA XREF: calibrateADC+4Cr
dword_2320	DCD 0xE000E400		; DATA XREF: calibrateADC:loc_22E2r
dword_2324	DCD 0xE000E100		; DATA XREF: calibrateADC+78r
off_2328	DCD adcFlag		; DATA XREF: calibrateADC+80r
					; createRadioPacket:loc_A38Co ...

; =============== S U B	R O U T	I N E =======================================


sub_232C				; CODE XREF: startupWarning+10p
					; startupWarning:loc_7C28p ...
		LDR	R0, =adcFlag
		LDRB	R0, [R0,#(byte_20000165	- 0x20000164)]
		BX	LR
; End of function sub_232C

; ---------------------------------------------------------------------------
		ALIGN 4
off_2334	DCD adcFlag		; DATA XREF: sub_232Cr

; =============== S U B	R O U T	I N E =======================================


adcMethod2				; CODE XREF: startupWarning+4p
					; startupWarning+10Ep ...
		LDR	R2, =adcFlag
		MOVS	R1, #1
		STRB	R1, [R2,#(byte_20000165	- 0x20000164)]
		MOVS	R3, #0x10
		LDR	R1, =0x4003B000
		CMP	R0, #0
		BEQ	loc_234C
		MOVS	R0, #0
		STR	R0, [R2,#(adcChannelIndex - 0x20000164)]
		B	loc_2352
; ---------------------------------------------------------------------------

loc_234C				; CODE XREF: adcMethod2+Cj
		LDR	R0, [R2,#(adcChannelIndex - 0x20000164)]
		CMP	R0, #5
		BEQ	loc_2368

loc_2352				; CODE XREF: adcMethod2+12j
		LDR	R0, [R1,#0xC]
		ORRS	R0, R3

loc_2356				; CODE XREF: adcMethod2+34j
		STR	R0, [R1,#0xC]
		LDR	R0, [R2,#(adcChannelIndex - 0x20000164)]
		LDR	R2, =ADCH_Values
		LSLS	R0, R0,	#2
		LDR	R0, [R2,R0]
		MOVS	R2, #0x40 ; '@'
		ORRS	R0, R2
		STR	R0, [R1]
		BX	LR
; ---------------------------------------------------------------------------

loc_2368				; CODE XREF: adcMethod2+18j
		LDR	R0, [R1,#0xC]
		BICS	R0, R3
		B	loc_2356
; End of function adcMethod2

; ---------------------------------------------------------------------------
		ALIGN 0x10
off_2370	DCD adcFlag		; DATA XREF: adcMethod2r
dword_2374	DCD 0x4003B000		; DATA XREF: adcMethod2+8r
off_2378	DCD ADCH_Values		; DATA XREF: adcMethod2+22r

; =============== S U B	R O U T	I N E =======================================


sub_237C				; CODE XREF: createRadioPacket+47Cp
					; createRadioPacket+580p
		PUSH	{R4-R6,LR}
		MOV	R6, R0
		LDR	R0, =0xFFFFEC78
		MOV	R5, R1
		MOVS	R4, #0

loc_2386				; CODE XREF: sub_237C+5Ej
		LDR	R1, =(byte_DA0+0x5E8)
		MULS	R1, R4
		ADDS	R1, R1,	R0
		CMP	R1, R6
		BLT	loc_23D6
		BL	getInputStates
		LDR	R1, =usedModelPtr
		LDR	R1, [R1]
		ADDS	R1, #0x20 ; ' '
		LDRB	R2, [R1,#0xC]
		MOVS	R1, #1
		LSLS	R1, R2
		TST	R0, R1
		BEQ	loc_23A6
		ADDS	R5, #5

loc_23A6				; CODE XREF: sub_237C+26j
		LDR	R0, =(byte_DA0+0x5E8)
		LDR	R1, =dword_2710
		MULS	R0, R4
		SUBS	R0, R6,	R0
		ADDS	R1, R0,	R1
		ADDS	R0, R5,	R4
		LDRB	R0, [R0,#1]
		LDRB	R4, [R5,R4]
		SUBS	R0, R0,	R4
		MULS	R0, R1
		MOVS	R1, #0x19
		CMP	R0, #0
		BGE	loc_23C4
		SUBS	R0, #0xC
		B	loc_23C6
; ---------------------------------------------------------------------------

loc_23C4				; CODE XREF: sub_237C+42j
		ADDS	R0, #0xC

loc_23C6				; CODE XREF: sub_237C+46j
		BL	div_
		MOVS	R1, #0xC8 ; 'È'
		MULS	R4, R1
		LDR	R1, =0xFFFFD8F0
		ADDS	R0, R4,	R0
		ADDS	R0, R0,	R1
		POP	{R4-R6,PC}
; ---------------------------------------------------------------------------

loc_23D6				; CODE XREF: sub_237C+12j
		ADDS	R4, #1
		CMP	R4, #4
		BLT	loc_2386
		MOVS	R0, #0
		POP	{R4-R6,PC}
; End of function sub_237C

; ---------------------------------------------------------------------------
dword_23E0	DCD 0xFFFFEC78		; DATA XREF: sub_237C+4r
off_23E4	DCD byte_DA0+0x5E8	; DATA XREF: sub_237C:loc_2386r
					; sub_237C:loc_23A6r
off_23E8	DCD usedModelPtr	; DATA XREF: sub_237C+18r
off_23EC	DCD dword_2710		; DATA XREF: sub_237C+2Cr
dword_23F0	DCD 0xFFFFD8F0		; DATA XREF: sub_237C+52r

; =============== S U B	R O U T	I N E =======================================


sub_23F4				; CODE XREF: FactoryReset+66p
					; FirmwareUpdatePage+64p ...

var_18		= -0x18

		PUSH	{R3-R7,LR}
		MOVS	R6, #0x310
		MOVS	R5, #0
		MOVS	R1, #0x64 ; 'd'
		MOV	R0, R6
		BL	beep
		MOVS	R4, #1
		MOVS	R3, #0x3F ; '?'
		MOVS	R2, #0x7F ; ''
		MOVS	R1, #0x30 ; '0'
		MOVS	R0, #0
		STR	R4, [SP,#0x18+var_18]
		BL	fillRegion
		MOVS	R3, #0		; a4
		MOVS	R2, #0x30 ; '0'	; a3
		MOVS	R1, #0x40 ; '@'	; a2
		LDR	R0, =aAreYouSure ; text
		BL	displayTextAt2
		MOVS	R3, #0		; a4
		MOVS	R2, #0x38 ; '8'	; y
		MOVS	R1, #0x1C	; x
		LDR	R0, =aYes	; text
		BL	displayTextAt
		MOVS	R3, #0		; a4
		MOVS	R2, #0x38 ; '8'	; y
		MOVS	R1, #0x4C ; 'L'	; x
		LDR	R0, =aNo	; text
		BL	displayTextAt
		LDR	R7, =0x20B

loc_243A				; CODE XREF: sub_23F4+96j sub_23F4+ACj ...
		MOVS	R3, #0x3F ; '?'
		MOVS	R2, #0x1B
		MOVS	R1, #0x38 ; '8'
		MOVS	R0, #0x14
		STR	R4, [SP,#0x18+var_18]
		BL	fillRegion
		MOVS	R3, #0x3F ; '?'
		MOVS	R2, #0x4B ; 'K'
		MOVS	R1, #0x38 ; '8'
		MOVS	R0, #0x44 ; 'D'
		STR	R4, [SP,#0x18+var_18]
		BL	fillRegion
		CMP	R5, #0
		BEQ	loc_245E
		MOVS	R1, #0x14
		B	loc_2460
; ---------------------------------------------------------------------------

loc_245E				; CODE XREF: sub_23F4+64j
		MOVS	R1, #0x44 ; 'D'

loc_2460				; CODE XREF: sub_23F4+68j
		MOVS	R2, #0x38 ; '8'
		LDR	R0, =arrow_gfx
		BL	displayGFX
		BL	LCD_updateCALL
		BL	getKeyCode
		CMP	R0, #0x18
		BEQ	loc_2498
		CMP	R0, #0x17
		BEQ	loc_2498
		CMP	R0, #8
		BEQ	loc_2498
		CMP	R0, #9
		BEQ	loc_2498
		CMP	R0, #0xA
		BEQ	loc_24B4
		CMP	R0, #0x19
		BEQ	loc_24B4
		CMP	R0, #0xB
		BNE	loc_243A

loc_248C				; CODE XREF: sub_23F4+C2j
		MOVS	R1, #0x64 ; 'd'
		MOV	R0, R7
		BL	beep
		MOVS	R0, #0
		POP	{R3-R7,PC}
; ---------------------------------------------------------------------------

loc_2498				; CODE XREF: sub_23F4+7Ej sub_23F4+82j ...
		EORS	R5, R4
		BL	sub_9BC0
		CMP	R0, #2
		BCC	loc_243A
		MOVS	R1, #0xF
		MOV	R0, R6
		BL	beep
		MOVS	R1, #0xF
		MOVS	R0, #0
		BL	beep
		B	loc_243A
; ---------------------------------------------------------------------------

loc_24B4				; CODE XREF: sub_23F4+8Ej sub_23F4+92j
		CMP	R5, #0
		BEQ	loc_248C
		MOVS	R0, #1
		POP	{R3-R7,PC}
; End of function sub_23F4

; ---------------------------------------------------------------------------
; _BYTE	*off_24BC
off_24BC	DCD aAreYouSure		; DATA XREF: sub_23F4+26r
					; "Are you sure?"
; _BYTE	*off_24C0
off_24C0	DCD aYes		; DATA XREF: sub_23F4+32r
					; "Yes"
; _BYTE	*off_24C4
off_24C4	DCD aNo			; DATA XREF: sub_23F4+3Er
					; "No"
dword_24C8	DCD 0x20B		; DATA XREF: sub_23F4+44r
off_24CC	DCD arrow_gfx		; DATA XREF: sub_23F4+6Er

; =============== S U B	R O U T	I N E =======================================


sub_24D0				; CODE XREF: main:loc_2AC2p main+330p	...
		PUSH	{R4-R6,LR}
		LDR	R4, =byte_1FFFF894
		MOV	R5, R0
		STRB	R0, [R4,#(byte_1FFFF895	- 0x1FFFF894)]
		LDR	R0, =byte_1FFFF880
		LDRB	R1, [R0]
		LSLS	R0, R5,	#0x19
		LSRS	R0, R0,	#0x19
		SUBS	R0, #0x10
		CMP	R1, #0
		BEQ	loc_2512
		CMP	R0, #6
		BCC	loc_24F4
		MOVS	R0, #1
		BL	controlBackLight
		LDR	R0, [R4,#(timer	- 0x1FFFF894)]
		STR	R0, [R4,#(lastTimerCheck - 0x1FFFF894)]

loc_24F4				; CODE XREF: sub_24D0+18j sub_24D0+44j
		BL	sub_A320
		LDR	R1, [R4,#(dword_1FFFF8AC - 0x1FFFF894)]
		ADDS	R1, #1
		CMP	R1, #8
		BCC	loc_2502
		MOVS	R1, #0

loc_2502				; CODE XREF: sub_24D0+2Ej
		LDR	R0, [R4,#(dword_1FFFF8A8 - 0x1FFFF894)]
		CMP	R1, R0
		BEQ	locret_2510
		LDR	R0, =byte_1FFFF8B8
		LDR	R2, [R4,#(dword_1FFFF8AC - 0x1FFFF894)]
		STRB	R5, [R0,R2]
		STR	R1, [R4,#(dword_1FFFF8AC - 0x1FFFF894)]

locret_2510				; CODE XREF: sub_24D0+36j
		POP	{R4-R6,PC}
; ---------------------------------------------------------------------------

loc_2512				; CODE XREF: sub_24D0+14j
		CMP	R0, #6
		BCC	loc_24F4
		BL	sub_A320
		MOVS	R0, #1
		BL	controlBackLight
		LDR	R0, [R4,#(timer	- 0x1FFFF894)]
		STR	R0, [R4,#(lastTimerCheck - 0x1FFFF894)]
		POP	{R4-R6,PC}
; End of function sub_24D0

; ---------------------------------------------------------------------------
		ALIGN 4
off_2528	DCD byte_1FFFF894	; DATA XREF: sub_24D0+2r
off_252C	DCD byte_1FFFF880	; DATA XREF: sub_24D0+8r
off_2530	DCD byte_1FFFF8B8	; DATA XREF: sub_24D0+38r

; =============== S U B	R O U T	I N E =======================================


getKeyCode				; CODE XREF: sub_23F4+78p
					; SwashAFRPage+BCp ...
		PUSH	{R4,LR}
; 5:   while ( v1FFFF8A8 == v1FFFF8AC )
		LDR	R4, =byte_1FFFF894
		LDR	R0, [R4,#(dword_1FFFF8A8 - 0x1FFFF894)]
		LDR	R1, [R4,#(dword_1FFFF8AC - 0x1FFFF894)]
		CMP	R0, R1
		BNE	loc_254C
; 6:	 sub_9EFC();

loc_2540				; CODE XREF: getKeyCode+16j
		BL	sendPacketWithTimer
		LDR	R0, [R4,#(dword_1FFFF8A8 - 0x1FFFF894)]
		LDR	R1, [R4,#(dword_1FFFF8AC - 0x1FFFF894)]
		CMP	R0, R1
		BEQ	loc_2540
; 7:   result =	*(_BYTE	*)(v1FFFF8A8 + 536869048);

loc_254C				; CODE XREF: getKeyCode+Aj
		LDR	R1, [R4,#(dword_1FFFF8A8 - 0x1FFFF894)]
		LDR	R0, =byte_1FFFF8B8
		LDRB	R0, [R0,R1]
; 8:   v1 = v1FFFF8A8 +	1;
		ADDS	R1, #1
; 9:   if ( (unsigned int)(v1FFFF8A8 + 1) >= 8 )
		CMP	R1, #8
		BCC	loc_255A
; 10:	  v1 = 0;
		MOVS	R1, #0
; 11:	v1FFFF8A8 = v1;

loc_255A				; CODE XREF: getKeyCode+22j
		STR	R1, [R4,#(dword_1FFFF8A8 - 0x1FFFF894)]
		POP	{R4,PC}
; End of function getKeyCode

; ---------------------------------------------------------------------------
		ALIGN 0x10
off_2560	DCD byte_1FFFF894	; DATA XREF: getKeyCode+2r
off_2564	DCD byte_1FFFF8B8	; DATA XREF: getKeyCode+1Ar

; =============== S U B	R O U T	I N E =======================================


getInputStates				; CODE XREF: sub_237C+14p
					; DualRateExp:loc_31C2p ...
		LDR	R0, =byte_1FFFF894
		LDR	R0, [R0,#(inputStates -	0x1FFFF894)]
		BX	LR
; End of function getInputStates

; ---------------------------------------------------------------------------
		ALIGN 0x10
off_2570	DCD byte_1FFFF894	; DATA XREF: getInputStatesr

; =============== S U B	R O U T	I N E =======================================


sub_2574				; CODE XREF: DisplayChannels+A4p
					; SensorsList:loc_37E8p ...
		PUSH	{R4,LR}
		BL	sendPacketWithTimer
		LDR	R0, =byte_1FFFF894
		LDR	R1, [R0,#(dword_1FFFF8A8 - 0x1FFFF894)]
		LDR	R2, [R0,#(dword_1FFFF8AC - 0x1FFFF894)]
		CMP	R1, R2
		BNE	loc_2588
		MOVS	R0, #0xFF
		POP	{R4,PC}
; ---------------------------------------------------------------------------

loc_2588				; CODE XREF: sub_2574+Ej
		LDR	R1, =byte_1FFFF8B8
		LDR	R0, [R0,#(dword_1FFFF8A8 - 0x1FFFF894)]
		LDRB	R0, [R1,R0]
		POP	{R4,PC}
; End of function sub_2574

; ---------------------------------------------------------------------------
off_2590	DCD byte_1FFFF894	; DATA XREF: sub_2574+6r
off_2594	DCD byte_1FFFF8B8	; DATA XREF: sub_2574:loc_2588r

; =============== S U B	R O U T	I N E =======================================


rxBindingShow				; DATA XREF: ROM:0000D274o
		PUSH	{R4,LR}
		MOVS	R0, #1
		BL	rxBindingPage
		MOVS	R0, #1
		POP	{R4,PC}
; End of function rxBindingShow


; =============== S U B	R O U T	I N E =======================================


sub_25A4				; DATA XREF: readEeprom+16o
					; ROM:off_3E80o ...
		LDR	R1, =byte_20000114
		STRB	R0, [R1,#(byte_20000118	- 0x20000114)]
		MOVS	R0, #1
		STRB	R0, [R1,#(byte_20000117	- 0x20000114)]
		BX	LR
; End of function sub_25A4

; ---------------------------------------------------------------------------
		ALIGN 0x10
off_25B0	DCD byte_20000114	; DATA XREF: sub_25A4r

; =============== S U B	R O U T	I N E =======================================


callSetupDMAandSend			; CODE XREF: SwashAFRPage:loc_2D0Cp
					; ChooseSensors:loc_2F84p ...
		PUSH	{R4,LR}
		BL	setupDMAandSend
		POP	{R4,PC}
; End of function callSetupDMAandSend


; =============== S U B	R O U T	I N E =======================================


LCD_updateCALL				; CODE XREF: sub_23F4+74p
					; SwashAFRPage+B8p ...
		PUSH	{R4,LR}
		BL	LCD_update
		POP	{R4,PC}
; End of function LCD_updateCALL


; =============== S U B	R O U T	I N E =======================================


nullsub_2				; CODE XREF: entryPoint+2p
					; DATA XREF: entryPointo ...
		BX	LR
; End of function nullsub_2

; ---------------------------------------------------------------------------
		DCW 0
		DCD 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0
		DCD 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0
		DCD 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0
		DCD 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0
		DCD 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0
dword_2710	DCD 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0
					; DATA XREF: sub_237C+2Co
					; ROM:off_23ECo ...
		DCD 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0
signature1	DCD 0xC87251CC		; DATA XREF: BOOT:00000AB2o
					; BOOT:00000AB4r ...
signature2	DCD 0x92017EA0		; DATA XREF: BOOT:00000ABCr
CRC_SUB_1800	DCD 0xE560		; DATA XREF: BOOT:00000AC4o
					; BOOT:00000AC6r ...
dword_278C	DCD 0x1000A		; DATA XREF: BOOT:000004F2o
					; BOOT:000004F4r ...
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0

; =============== S U B	R O U T	I N E =======================================


; int __cdecl main(int argc, const char	**argv,	const char **envp)
main					; CODE XREF: sub_7A38+12p
		PUSH	{R3-R7,LR}
		LDR	R0, =0x40037100
		LDR	R1, [R0,#0xC]
		MOVS	R4, #1
		ORRS	R1, R4
		STR	R1, [R0,#0xC]
		LDR	R7, =byte_1FFFF894
		MOVS	R5, #0
		LDRB	R0, [R7,#(byte_1FFFF897	- 0x1FFFF894)]
		ADDS	R0, #1
		UXTB	R0, R0
		STRB	R0, [R7,#(byte_1FFFF897	- 0x1FFFF894)]
		CMP	R0, #4
		BCC	loc_2824
		STRB	R5, [R7,#(byte_1FFFF897	- 0x1FFFF894)]
		LDR	R0, [R7,#(timer	- 0x1FFFF894)]
		ADDS	R0, #1
		STR	R0, [R7,#(timer	- 0x1FFFF894)]

loc_2824				; CODE XREF: main+1Aj
		LDR	R1, =0x400FF040
		LDR	R2, [R1,#0x10]
		LDR	R0, =0xFFFFF
		BICS	R0, R2
		LSRS	R2, R0,	#0x10
		LDRB	R0, [R7]
		LSLS	R3, R0,	#2
		LSLS	R2, R3
		LDR	R3, [R7,#(tempInputs - 0x1FFFF894)]
		ADDS	R0, #1
		ORRS	R2, R3
		UXTB	R0, R0
		STR	R2, [R7,#(tempInputs - 0x1FFFF894)]
		STRB	R0, [R7]
		CMP	R0, #4
		BCC	loc_2846
		STRB	R5, [R7]

loc_2846				; CODE XREF: main+42j
		LDR	R2, [R1]
		MOVS	R0, #0xE
		BICS	R2, R0
		LDRB	R0, [R7]
		MOV	R6, R4
		ADDS	R3, R0,	#1
		LSLS	R6, R3
		MOVS	R3, #0xE
		EORS	R6, R3
		ORRS	R2, R6
		STR	R2, [R1]
		CMP	R0, #0
		BNE	locret_28F0
		LDR	R0, [R7,#(timer	- 0x1FFFF894)]
		LDR	R1, [R7,#(lastTimerCheck - 0x1FFFF894)]
		SUBS	R0, R0,	R1
		LDR	R1, =0x4E20
		CMP	R0, R1
		BLS	loc_2872
		MOVS	R0, #0
		BL	controlBackLight

loc_2872				; CODE XREF: main+6Aj
		LDR	R0, =0x400FF000
		LDR	R0, [R0,#0x10]
		LSLS	R0, R0,	#0x1A
		BMI	loc_2884
		MOVS	R1, #1
		LDR	R0, [R7,#(tempInputs - 0x1FFFF894)]
		LSLS	R1, R1,	#0xC
		ORRS	R0, R1
		STR	R0, [R7,#(tempInputs - 0x1FFFF894)]

loc_2884				; CODE XREF: main+78j
		LDR	R0, =0x400FF0C0
		LDR	R0, [R0,#0x10]
		LSLS	R1, R0,	#0x1F
		BNE	loc_2896
		MOVS	R2, #1
		LDR	R1, [R7,#(tempInputs - 0x1FFFF894)]
		LSLS	R2, R2,	#0x10
		ORRS	R1, R2
		STR	R1, [R7,#(tempInputs - 0x1FFFF894)]

loc_2896				; CODE XREF: main+8Aj
		LDR	R1, =0x400FF080
		LDR	R1, [R1,#0x10]
		LSLS	R1, R1,	#0x1E
		BPL	loc_28A8
		MOVS	R2, #1
		LDR	R1, [R7,#(tempInputs - 0x1FFFF894)]
		LSLS	R2, R2,	#0x11
		ORRS	R1, R2
		STR	R1, [R7,#(tempInputs - 0x1FFFF894)]

loc_28A8				; CODE XREF: main+9Cj
		LDR	R1, =ch1_ADC_VAL
		LDR	R2, =(byte_DA0+0x138)
		LDR	R1, [R1,#(SWC_ADC - 0x20000F00)]
		CMP	R1, R2
		BLS	loc_28BC
		MOVS	R3, #1
		LDR	R2, [R7,#(tempInputs - 0x1FFFF894)]
		LSLS	R3, R3,	#0x12
		ORRS	R2, R3
		STR	R2, [R7,#(tempInputs - 0x1FFFF894)]

loc_28BC				; CODE XREF: main+B0j
		MOVS	R2, #0x1F4
		CMP	R1, R2
		BCS	loc_28CE
		MOVS	R2, #1
		LDR	R1, [R7,#(tempInputs - 0x1FFFF894)]
		LSLS	R2, R2,	#0x14
		ORRS	R1, R2
		STR	R1, [R7,#(tempInputs - 0x1FFFF894)]

loc_28CE				; CODE XREF: main+C2j
		LSLS	R0, R0,	#0x1B
		LDR	R0, [R7,#(tempInputs - 0x1FFFF894)]
		BMI	loc_28DC
		MOVS	R1, #0x80000
		ORRS	R0, R1
		STR	R0, [R7,#(tempInputs - 0x1FFFF894)]

loc_28DC				; CODE XREF: main+D2j
		LDR	R2, [R7,#(inputStates -	0x1FFFF894)]
		CMP	R0, R2
		BEQ	loc_28F2
		LDR	R1, [R7,#(counterMain -	0x1FFFF894)]
		CMP	R1, #2
		BCC	loc_28EA
		STR	R2, [R7,#(inputStates2 - 0x1FFFF894)]

loc_28EA				; CODE XREF: main+E6j
		STR	R5, [R7,#(tempInputs - 0x1FFFF894)]
		STR	R5, [R7,#(counterMain -	0x1FFFF894)]
		STR	R0, [R7,#(inputStates -	0x1FFFF894)]

locret_28F0				; CODE XREF: main+5Ej main+FCj ...
		POP	{R3-R7,PC}
; ---------------------------------------------------------------------------

loc_28F2				; CODE XREF: main+E0j
		STR	R5, [R7,#(tempInputs - 0x1FFFF894)]
		LDR	R0, [R7,#(counterMain -	0x1FFFF894)]
		ADDS	R0, #1
		STR	R0, [R7,#(counterMain -	0x1FFFF894)]
		CMP	R0, #2
		BCC	locret_28F0
		STRB	R4, [R7,#(byte_1FFFF896	- 0x1FFFF894)]
		LDR	R1, =factoryMode
		MOVS	R5, #1
		LDRB	R1, [R1]
		LSLS	R5, R5,	#0xA
		LSLS	R6, R5,	#1
		CMP	R1, #0
		BNE	loc_2A0C
		LSLS	R1, R2,	#0x18
		LSRS	R1, R1,	#0x18
		BEQ	loc_2A0C
		MOVS	R0, #1
		BL	controlBackLight
		LDR	R0, [R7,#(timer	- 0x1FFFF894)]
		STR	R0, [R7,#(lastTimerCheck - 0x1FFFF894)]
		LDR	R0, [R7,#(counterMain -	0x1FFFF894)]
		SUBS	R0, #2
		CMP	R0, R5
		BCS	loc_2930
		LSLS	R0, R0,	#0x18
		LSRS	R0, R0,	#0x18
		BNE	locret_28F0
		MOVS	R0, #1
		B	loc_2956
; ---------------------------------------------------------------------------

loc_2930				; CODE XREF: main+124j
		CMP	R0, R6
		BCS	loc_2940
		LSLS	R1, R0,	#0x19
		BNE	locret_28F0
		SUBS	R0, R0,	R5
		LSRS	R0, R0,	#9
		ADDS	R0, #2
		B	loc_2952
; ---------------------------------------------------------------------------

loc_2940				; CODE XREF: main+132j
		LSLS	R1, R0,	#0x1A
		BNE	locret_28F0
		MOVS	R1, #0xC00
		CMP	R0, R1
		BCS	loc_2992
		SUBS	R0, R0,	R6
		LSRS	R0, R0,	#8
		ADDS	R0, #4

loc_2952				; CODE XREF: main+13Ej
		CMP	R0, #0
		BEQ	locret_28F0

loc_2956				; CODE XREF: main+12Ej	main+194j
		LDRH	R1, [R7,#(inputStates -	0x1FFFF894)]
		LDR	R2, =usedModelPtr
		UXTH	R1, R1
		CMP	R1, #2
		BEQ	loc_2996
		CMP	R1, #1
		BEQ	loc_299C
		CMP	R1, #8
		BEQ	loc_29A2
		CMP	R1, #4
		BEQ	loc_29AA
		CMP	R1, #0x20 ; ' '
		BEQ	loc_29B0
		CMP	R1, #0x10
		BEQ	loc_29B6
		CMP	R1, #0x80 ; ''
		BEQ	loc_29BC
		CMP	R1, #0x40 ; '@'
		BNE	locret_28F0
		LDR	R1, [R2]
		ADDS	R1, #0xD

loc_2980				; CODE XREF: main+1A0j	main+1A8j ...
		MOVS	R2, #0
		LDRSB	R2, [R1,R2]
		MOVS	R3, #0x77 ; 'w'
		ADDS	R0, R2,	R0
		MVNS	R3, R3
		CMP	R0, R3
		BGE	loc_29C2
		MOV	R0, R3
		B	loc_29E0
; ---------------------------------------------------------------------------

loc_2992				; CODE XREF: main+14Aj
		MOVS	R0, #8
		B	loc_2956
; ---------------------------------------------------------------------------

loc_2996				; CODE XREF: main+15Ej
		LDR	R1, [R2]
		ADDS	R1, #0xA
		B	loc_29A6
; ---------------------------------------------------------------------------

loc_299C				; CODE XREF: main+162j
		LDR	R1, [R2]
		ADDS	R1, #0xA
		B	loc_2980
; ---------------------------------------------------------------------------

loc_29A2				; CODE XREF: main+166j
		LDR	R1, [R2]
		ADDS	R1, #0xB

loc_29A6				; CODE XREF: main+19Aj	main+1B4j ...
		NEGS	R0, R0
		B	loc_2980
; ---------------------------------------------------------------------------

loc_29AA				; CODE XREF: main+16Aj
		LDR	R1, [R2]
		ADDS	R1, #0xB
		B	loc_2980
; ---------------------------------------------------------------------------

loc_29B0				; CODE XREF: main+16Ej
		LDR	R1, [R2]
		ADDS	R1, #0xC
		B	loc_29A6
; ---------------------------------------------------------------------------

loc_29B6				; CODE XREF: main+172j
		LDR	R1, [R2]
		ADDS	R1, #0xC
		B	loc_2980
; ---------------------------------------------------------------------------

loc_29BC				; CODE XREF: main+176j
		LDR	R1, [R2]
		ADDS	R1, #0xD
		B	loc_29A6
; ---------------------------------------------------------------------------

loc_29C2				; CODE XREF: main+18Cj
		CMP	R0, #0x78 ; 'x'
		BLE	loc_29CA
		MOVS	R0, #0x78 ; 'x'
		B	loc_29E0
; ---------------------------------------------------------------------------

loc_29CA				; CODE XREF: main+1C4j
		CMP	R0, #0
		BEQ	loc_29DA
		BLE	loc_29D6
		CMP	R2, #0
		BLT	loc_29DA
		B	loc_29E0
; ---------------------------------------------------------------------------

loc_29D6				; CODE XREF: main+1CEj
		CMP	R2, #0
		BLE	loc_29E0

loc_29DA				; CODE XREF: main+1CCj	main+1D2j
		MOVS	R0, #0
		MOVS	R2, #2
		STR	R2, [R7,#(counterMain -	0x1FFFF894)]

loc_29E0				; CODE XREF: main+190j	main+1C8j ...
		MOVS	R2, #0
		LDRSB	R2, [R1,R2]
		CMP	R2, R0
		BEQ	locret_28F0
		STRB	R0, [R1]
		MOVS	R1, #0x3840
		CMP	R0, #0
		BEQ	loc_2A20
		MOV	R2, R0
		ADDS	R2, #0x78 ; 'x'
		BEQ	loc_2A24
		CMP	R0, #0x78 ; 'x'
		BEQ	loc_2A28
		MOVS	R4, #0x14
		CMP	R0, #0
		BGE	loc_2A2A

loc_2A02				; CODE XREF: main+226j
		ADDS	R0, #0x78 ; 'x'
		MULS	R0, R0
		MOVS	R2, #0x14A
		B	loc_2A0E
; ---------------------------------------------------------------------------

loc_2A0C				; CODE XREF: main+10Cj	main+112j
		B	loc_2A40
; ---------------------------------------------------------------------------

loc_2A0E				; CODE XREF: main+20Aj
		MULS	R0, R2
		BL	div_
		ADDS	R0, #0xFF
		ADDS	R0, #0x4B ; 'K'
		MOV	R1, R4
		BL	beep
		POP	{R3-R7,PC}
; ---------------------------------------------------------------------------

loc_2A20				; CODE XREF: main+1F0j
		MOVS	R4, #0xC8 ; 'È'
		B	loc_2A2A
; ---------------------------------------------------------------------------

loc_2A24				; CODE XREF: main+1F6j
		MOVS	R4, #0x64 ; 'd'
		B	loc_2A02
; ---------------------------------------------------------------------------

loc_2A28				; CODE XREF: main+1FAj
		MOVS	R4, #0x64 ; 'd'

loc_2A2A				; CODE XREF: main+200j	main+222j
		LDR	R2, =0x293
		MULS	R0, R0
		MULS	R0, R2
		BL	div_
		LDR	R1, =0x293
		ADDS	R0, R0,	R1
		MOV	R1, R4
		BL	beep

locret_2A3E				; CODE XREF: main+254j
		POP	{R3-R7,PC}
; ---------------------------------------------------------------------------

loc_2A40				; CODE XREF: main:loc_2A0Cj
		MOVS	R3, #0x100
		CMP	R0, #2
		BEQ	loc_2A5A
		UXTH	R1, R2
		MOVS	R2, #0x1F6
		CMP	R1, R5
		BNE	loc_2B36
		CMP	R0, R2
		BNE	locret_2A3E
		MOVS	R0, #0x16
		B	loc_2BC2
; ---------------------------------------------------------------------------

loc_2A5A				; CODE XREF: main+246j
		LDR	R0, =byte_1FFFF894
		UXTH	R2, R2
		LDRH	R0, [R0,#(inputStates2 - 0x1FFFF894)]
		UXTH	R1, R0
		MOVS	R0, #0
		B	loc_2A76
; ---------------------------------------------------------------------------

loc_2A66				; CODE XREF: main+290j	main+2B6j ...
		CMP	R0, #0xA
		BEQ	loc_2A7C
		CMP	R0, #0xB
		BEQ	loc_2AA2
		CMP	R0, #9
		BEQ	loc_2ACC
		CMP	R0, #8
		BEQ	loc_2AFC

loc_2A76				; CODE XREF: main+264j
		CMP	R1, #0
		BEQ	loc_2B26
		B	loc_2B38
; ---------------------------------------------------------------------------

loc_2A7C				; CODE XREF: main+268j
		CMP	R1, #0
		BEQ	loc_2A8A
		CMP	R1, R5
		BNE	loc_2A8E
		CMP	R2, #0
		BEQ	loc_2A92
		B	loc_2A8E
; ---------------------------------------------------------------------------

loc_2A8A				; CODE XREF: main+27Ej
		CMP	R2, R5
		BEQ	loc_2B56

loc_2A8E				; CODE XREF: main+282j	main+288j
		MOVS	R0, #0xB
		B	loc_2A66
; ---------------------------------------------------------------------------

loc_2A92				; CODE XREF: main+286j
		LDR	R1, =byte_1FFFF894
		LDRB	R0, [R1,#(byte_1FFFF895	- 0x1FFFF894)]
		CMP	R0, #0x16
		BEQ	loc_2A9E
		MOVS	R0, #0xA
		B	loc_2AC2
; ---------------------------------------------------------------------------

loc_2A9E				; CODE XREF: main+298j
		MOVS	R0, #0x8A ; ''
		B	loc_2AF8
; ---------------------------------------------------------------------------

loc_2AA2				; CODE XREF: main+26Cj
		CMP	R1, #0
		BEQ	loc_2AB0
		CMP	R1, R6
		BNE	loc_2AB4
		CMP	R2, #0
		BEQ	loc_2AB8
		B	loc_2AB4
; ---------------------------------------------------------------------------

loc_2AB0				; CODE XREF: main+2A4j
		CMP	R2, R6
		BEQ	loc_2B56

loc_2AB4				; CODE XREF: main+2A8j	main+2AEj
		MOVS	R0, #0xC
		B	loc_2A66
; ---------------------------------------------------------------------------

loc_2AB8				; CODE XREF: main+2ACj
		LDR	R0, =byte_1FFFF894
		LDRB	R1, [R0,#(byte_1FFFF895	- 0x1FFFF894)]
		CMP	R1, #0x19
		BEQ	loc_2AC8
		MOVS	R0, #0xB

loc_2AC2				; CODE XREF: main+29Cj	main+2F2j ...
		BL	sub_24D0
		B	loc_2B56
; ---------------------------------------------------------------------------

loc_2AC8				; CODE XREF: main+2BEj
		MOVS	R1, #0x8B ; ''
		B	loc_2B22
; ---------------------------------------------------------------------------

loc_2ACC				; CODE XREF: main+270j	main+30Aj
		CMP	R1, #0
		BNE	loc_2AD8
		MOV	R7, R4
		LSLS	R7, R0
		CMP	R7, R2
		BEQ	loc_2B56

loc_2AD8				; CODE XREF: main+2CEj
		MOV	R7, R4
		LSLS	R7, R0
		CMP	R7, R1
		BNE	loc_2AE4
		CMP	R2, #0
		BEQ	loc_2AE8

loc_2AE4				; CODE XREF: main+2DEj
		ADDS	R0, #1
		B	loc_2A66
; ---------------------------------------------------------------------------

loc_2AE8				; CODE XREF: main+2E2j
		LDR	R1, =byte_1FFFF894
		LDRB	R2, [R1,#(byte_1FFFF895	- 0x1FFFF894)]
		CMP	R2, #0x17
		BEQ	loc_2AF4
		UXTB	R0, R0
		B	loc_2AC2
; ---------------------------------------------------------------------------

loc_2AF4				; CODE XREF: main+2EEj
		MOVS	R2, #0x80 ; ''
		ORRS	R0, R2

loc_2AF8				; CODE XREF: main+2A0j
		STRB	R0, [R1,#(byte_1FFFF895	- 0x1FFFF894)]
		B	loc_2B56
; ---------------------------------------------------------------------------

loc_2AFC				; CODE XREF: main+274j
		CMP	R1, #0
		BEQ	loc_2B0C
		CMP	R1, R3
		BNE	loc_2B10
		CMP	R2, #0
		BEQ	loc_2B14
		MOVS	R0, #9
		B	loc_2ACC
; ---------------------------------------------------------------------------

loc_2B0C				; CODE XREF: main+2FEj
		CMP	R2, R3
		BEQ	loc_2B56

loc_2B10				; CODE XREF: main+302j
		MOVS	R0, #9
		B	loc_2A66
; ---------------------------------------------------------------------------

loc_2B14				; CODE XREF: main+306j
		LDR	R0, =byte_1FFFF894
		LDRB	R1, [R0,#(byte_1FFFF895	- 0x1FFFF894)]
		CMP	R1, #0x18
		BEQ	loc_2B20
		MOVS	R0, #8
		B	loc_2AC2
; ---------------------------------------------------------------------------

loc_2B20				; CODE XREF: main+31Aj
		MOVS	R1, #0x88 ; ''

loc_2B22				; CODE XREF: main+2CAj
		STRB	R1, [R0,#(byte_1FFFF895	- 0x1FFFF894)]
		B	loc_2B56
; ---------------------------------------------------------------------------

loc_2B26				; CODE XREF: main+278j
		MOV	R7, R4
		LSLS	R7, R0
		CMP	R7, R2
		BNE	loc_2B38
		UXTB	R0, R0
		BL	sub_24D0
		B	loc_2B56
; ---------------------------------------------------------------------------

loc_2B36				; CODE XREF: main+250j
		B	loc_2B88
; ---------------------------------------------------------------------------

loc_2B38				; CODE XREF: main+27Aj	main+32Cj
		MOV	R7, R4
		LSLS	R7, R0
		CMP	R7, R1
		BNE	loc_2B44
		CMP	R2, #0
		BEQ	loc_2B4C

loc_2B44				; CODE XREF: main+33Ej
		ADDS	R0, #1
		CMP	R0, #0x10
		BCC	loc_2A66
		B	loc_2B56
; ---------------------------------------------------------------------------

loc_2B4C				; CODE XREF: main+342j
		MOVS	R1, #0x80 ; ''
		ORRS	R0, R1
		UXTB	R0, R0
		BL	sub_24D0

loc_2B56				; CODE XREF: main+28Cj	main+2B2j ...
		MOVS	R5, #0x10
		LDR	R6, =byte_1FFFF894
		MOVS	R7, #0x80 ; ''

loc_2B5C				; CODE XREF: main+384j
		MOV	R0, R4
		LDR	R1, [R6,#(inputStates2 - 0x1FFFF894)]
		LSLS	R0, R5
		TST	R0, R1
		LDR	R1, [R6,#(inputStates -	0x1FFFF894)]
		BEQ	loc_2B6E
		TST	R0, R1
		BEQ	loc_2B76
		B	loc_2B80
; ---------------------------------------------------------------------------

loc_2B6E				; CODE XREF: main+366j
		TST	R0, R1
		BEQ	loc_2B80
		UXTB	R0, R5
		B	loc_2B7C
; ---------------------------------------------------------------------------

loc_2B76				; CODE XREF: main+36Aj
		MOV	R0, R5
		ORRS	R0, R7
		UXTB	R0, R0

loc_2B7C				; CODE XREF: main+374j
		BL	sub_24D0

loc_2B80				; CODE XREF: main+36Cj	main+370j
		ADDS	R5, #1
		CMP	R5, #0x15
		BLS	loc_2B5C

locret_2B86				; CODE XREF: main+38Ej	main+39Aj ...
		POP	{R3-R7,PC}
; ---------------------------------------------------------------------------

loc_2B88				; CODE XREF: main:loc_2B36j
		CMP	R1, R6
		BNE	loc_2B94
		CMP	R0, R2
		BNE	locret_2B86
		MOVS	R0, #0x19
		B	loc_2BC2
; ---------------------------------------------------------------------------

loc_2B94				; CODE XREF: main+38Aj
		LDR	R2, =byte_20000002
		LDRB	R2, [R2]
		CMP	R2, #0
		BNE	locret_2B86
		SUBS	R2, R1,	#7
		SUBS	R2, #0xFF
		SUBS	R2, #0xFA ; 'ú'
		BNE	loc_2BB2
		MOVS	R1, #0x96 ; ''
		BL	div_Other
		CMP	R1, #0
		BNE	locret_2B86
		MOVS	R0, #0x17
		B	loc_2BC2
; ---------------------------------------------------------------------------

loc_2BB2				; CODE XREF: main+3A2j
		CMP	R1, R3
		BNE	locret_2B86
		MOVS	R1, #0x96 ; ''
		BL	div_Other
		CMP	R1, #0
		BNE	locret_2B86
		MOVS	R0, #0x18

loc_2BC2				; CODE XREF: main+258j	main+392j ...
		BL	sub_24D0
		POP	{R3-R7,PC}
; End of function main

; ---------------------------------------------------------------------------
TimerLoadValueRegister DCD 0x40037100	; DATA XREF: main+2r
off_2BCC	DCD byte_1FFFF894	; DATA XREF: main+Cr main:loc_2A5Ar ...
PortBDataOutputReg DCD 0x400FF040	; DATA XREF: main:loc_2824r
dword_2BD4	DCD 0xFFFFF		; DATA XREF: main+28r
dword_2BD8	DCD 0x4E20		; DATA XREF: main+66r
GPIOcontroller	DCD 0x400FF000		; DATA XREF: main:loc_2872r
PortDDataOutputReg DCD 0x400FF0C0	; DATA XREF: main:loc_2884r
PortCDataOutputReg DCD 0x400FF080	; DATA XREF: main:loc_2896r
off_2BE8	DCD ch1_ADC_VAL		; DATA XREF: main:loc_28A8r
off_2BEC	DCD byte_DA0+0x138	; DATA XREF: main+AAr
off_2BF0	DCD factoryMode		; DATA XREF: main+100r
off_2BF4	DCD usedModelPtr	; DATA XREF: main+158r
dword_2BF8	DCD 0x293		; DATA XREF: main:loc_2A2Ar main+234r
off_2BFC	DCD byte_20000002	; DATA XREF: main:loc_2B94r

; =============== S U B	R O U T	I N E =======================================


configurePINS				; CODE XREF: main_screen+BAp
		PUSH	{R4-R6,LR}
		MOVS	R0, #0xFF
		LDR	R1, =0x40049000
		ADDS	R0, #1
		STR	R0, [R1,#0x14]
		MOV	R1, R0
		LDR	R0, =0x4004A040
		STR	R1, [R0]
		ASRS	R1, R0,	#0x16
		STR	R1, [R0,#4]
		STR	R1, [R0,#8]
		STR	R1, [R0,#0xC]
		LDR	R0, =0x4004A000
		STR	R1, [R0,#4]
		STR	R1, [R0,#8]
		STR	R1, [R0,#0xC]
		LDR	R0, =0x4004C000
		STR	R1, [R0]
		STR	R1, [R0,#0x10]
		MOV	R0, R1
		LDR	R1, =0x4004B000
		STR	R0, [R1,#4]
		LDR	R0, =0x400FF080
		LDR	R2, [R0,#0x14]
		MOVS	R1, #2
		BICS	R2, R1
		STR	R2, [R0,#0x14]
		LDR	R0, =0x400FF000
		LDR	R2, [R0,#0x14]
		MOVS	R3, #0x20 ; ' '
		BICS	R2, R3
		STR	R2, [R0,#0x14]
		LDR	R0, =0x400FF040
		LDR	R2, [R0,#0x14]
		LDR	R3, =0xFFF0FFF1
		ANDS	R2, R3
		STR	R2, [R0,#0x14]
		LDR	R2, =0x400FF0C0
		LDR	R3, [R2,#0x14]
		LSRS	R3, R3,	#1
		LSLS	R3, R3,	#1
		STR	R3, [R2,#0x14]
		LDR	R2, [R0,#0x14]
		MOVS	R3, #0xE
		ORRS	R2, R3
		STR	R2, [R0,#0x14]
		LDR	R0, =0x40048000
		LDR	R3, [R0,#0x3C]
		LSLS	R2, R1,	#0x16
		ORRS	R3, R2
		STR	R3, [R0,#0x3C]
		LDR	R0, =0x40037000
		LDR	R3, [R0]
		BICS	R3, R1
		STR	R3, [R0]
		LDR	R0, =0x40037100
		LDR	R1, =(byte_1426+0x34A)
		STR	R1, [R0]
		LDR	R1, [R0,#8]
		MOVS	R3, #3
		ORRS	R1, R3
		STR	R1, [R0,#8]
		LDR	R0, =0xE000E400
		LDR	R1, [R0,#0x14]
		MOVS	R3, #0xFF0000
		BICS	R1, R3
		ADDS	R1, R1,	R2
		STR	R1, [R0,#0x14]
		LDR	R0, =0xE000E100
		LDR	R1, [R0]
		ASRS	R2, R2,	#1
		ORRS	R1, R2
		STR	R1, [R0]
		LDR	R4, =byte_1FFFF894
		MOVS	R5, #0
		STR	R5, [R4,#(dword_1FFFF8A8 - 0x1FFFF894)]
		STR	R5, [R4,#(dword_1FFFF8AC - 0x1FFFF894)]
		STRB	R5, [R4]
		STR	R5, [R4,#(tempInputs - 0x1FFFF894)]
		STR	R5, [R4,#(inputStates -	0x1FFFF894)]
		STR	R5, [R4,#(inputStates2 - 0x1FFFF894)]
		STR	R5, [R4,#(counterMain -	0x1FFFF894)]
		STRB	R5, [R4,#(byte_1FFFF895	- 0x1FFFF894)]
		STRB	R5, [R4,#(byte_1FFFF896	- 0x1FFFF894)]
		MOVS	R0, #1
		BL	controlBackLight
		LDR	R0, [R4,#(timer	- 0x1FFFF894)]
		STR	R0, [R4,#(lastTimerCheck - 0x1FFFF894)]
		STRB	R5, [R4,#(byte_1FFFF897	- 0x1FFFF894)]
		STR	R5, [R4,#(timer	- 0x1FFFF894)]
		POP	{R4-R6,PC}
; End of function configurePINS

; ---------------------------------------------------------------------------
		ALIGN 4
PortAmultiplexingControl DCD 0x40049000	; DATA XREF: configurePINS+4r
PORTB_PCR16	DCD 0x4004A040		; DATA XREF: configurePINS+Cr
PortBmultiplexingControl DCD 0x4004A000	; DATA XREF: configurePINS+18r
PortDmultiplexingControl DCD 0x4004C000	; DATA XREF: configurePINS+20r
PortCmultiplexingControl DCD 0x4004B000	; DATA XREF: configurePINS+28r
PortCDataOutputReg_0 DCD 0x400FF080	; DATA XREF: configurePINS+2Cr
PortADataOutputReg DCD 0x400FF000	; DATA XREF: configurePINS+36r
PortBDataOutputReg_0 DCD 0x400FF040	; DATA XREF: configurePINS+40r
dword_2CDC	DCD 0xFFF0FFF1		; DATA XREF: configurePINS+44r
PortDDataOutputReg_0 DCD 0x400FF0C0	; DATA XREF: configurePINS+4Ar
SMI		DCD 0x40048000		; DATA XREF: configurePINS+5Cr
PIT_MCR		DCD 0x40037000		; DATA XREF: configurePINS+66r
off_2CEC	DCD byte_1426+0x34A	; DATA XREF: configurePINS+70r
PIT_LDVAL0	DCD 0x40037100		; DATA XREF: configurePINS+6Er
dword_2CF4	DCD 0xE000E400		; DATA XREF: configurePINS+7Cr
dword_2CF8	DCD 0xE000E100		; DATA XREF: configurePINS+8Ar
off_2CFC	DCD byte_1FFFF894	; DATA XREF: configurePINS+94r

; =============== S U B	R O U T	I N E =======================================


SwashAFRPage				; DATA XREF: ROM:0000D464o

var_1C		= -0x1C

		PUSH	{R4-R7,LR}
		MOVS	R5, #0
		SUB	SP, SP,	#0xC
		MOV	R6, R5
		LDR	R7, =dword_200000D4
		LDR	R4, =byte_20000000

loc_2D0C				; CODE XREF: SwashAFRPage+DEj
					; SwashAFRPage+F0j ...
		BL	callSetupDMAandSend
		LDR	R0, =aSwashAfr_0 ; "Swash AFR"
		BL	displayPageHeader
		MOVS	R3, #0
		MOVS	R2, #0x10
		MOVS	R1, #0x54 ; 'T'
		LDR	R0, =aSwashType	; "Swash type"
		BL	displayTextFromRight
		LDR	R0, [R4,#(usedModelPtr - 0x20000000)]
		MOVS	R3, #0		; a4
		LDRB	R0, [R0,#9]
		MOVS	R2, #0x10	; y
		LSLS	R0, R0,	#2
		ADDS	R0, R0,	R7
		SUBS	R0, #0x40 ; '@'
		LDR	R0, [R0,#0x34]	; text
		MOVS	R1, #0x5C ; '\'	; x
		BL	displayTextAt
		MOVS	R3, #0		; a4
		MOVS	R2, #0x20 ; ' '	; y
		MOVS	R1, #0xC	; x
		LDR	R0, =aAileron	; "Aileron"
		BL	displayTextAt
		LDR	R1, [R4,#(usedModelPtr - 0x20000000)]
		MOVS	R0, #0x29 ; ')'
		LDRSB	R0, [R1,R0]	; sourceVal
		MOVS	R2, #4		; length
		MOV	R1, SP		; targetText
		BL	intToString
		MOV	R0, SP		; text
		STRB	R6, [R0,#0x20+var_1C]
		MOVS	R3, #0		; a4
		MOVS	R2, #0x20 ; ' '	; y
		MOVS	R1, #0x54 ; 'T'	; x
		BL	displayTextAt
		MOVS	R3, #0		; a4
		MOVS	R2, #0x28 ; '('	; y
		MOVS	R1, #0xC	; x
		LDR	R0, =aElevator	; text
		BL	displayTextAt
		LDR	R1, [R4,#(usedModelPtr - 0x20000000)]
		MOVS	R0, #0x2A ; '*'
		LDRSB	R0, [R1,R0]	; sourceVal
		MOVS	R2, #4		; length
		MOV	R1, SP		; targetText
		BL	intToString
		MOVS	R3, #0		; a4
		MOVS	R2, #0x28 ; '('	; y
		MOVS	R1, #0x54 ; 'T'	; x
		MOV	R0, SP		; text
		BL	displayTextAt
		MOVS	R3, #0		; a4
		MOVS	R2, #0x30 ; '0'	; y
		MOVS	R1, #0xC	; x
		LDR	R0, =aPitch	; text
		BL	displayTextAt
		LDR	R1, [R4,#(usedModelPtr - 0x20000000)]
		MOVS	R0, #0x2B ; '+'
		LDRSB	R0, [R1,R0]	; sourceVal
		MOVS	R2, #4		; length
		MOV	R1, SP		; targetText
		BL	intToString
		MOVS	R3, #0		; a4
		MOVS	R2, #0x30 ; '0'	; y
		MOVS	R1, #0x54 ; 'T'	; x
		MOV	R0, SP		; text
		BL	displayTextAt
		LSLS	R2, R5,	#3
		ADDS	R2, #0x20 ; ' '
		MOVS	R1, #4
		LDR	R0, =arrow_gfx
		BL	displayGFX
		BL	LCD_updateCALL
		BL	getKeyCode
		CMP	R0, #8
		BEQ	loc_2DE6
		CMP	R0, #0x18
		BEQ	loc_2DE6
		CMP	R0, #9
		BEQ	loc_2E60
		CMP	R0, #0x17
		BEQ	loc_2E60
		CMP	R0, #0x16
		BEQ	loc_2EC0
		CMP	R0, #0xA
		BEQ	loc_2EBC
		CMP	R0, #0x19
		BEQ	loc_2EBE
		CMP	R0, #0xB
		BNE	loc_2D0C
		MOVS	R0, #0
		ADD	SP, SP,	#0xC
		POP	{R4-R7,PC}
; ---------------------------------------------------------------------------

loc_2DE6				; CODE XREF: SwashAFRPage+C2j
					; SwashAFRPage+C6j
		CMP	R5, #0
		BEQ	loc_2E24
		CMP	R5, #1
		BEQ	loc_2E42
		CMP	R5, #2
		BNE	loc_2D0C
		LDR	R1, [R4,#0x2C]
		MOVS	R0, #0xB
		ADDS	R1, #0x20 ; ' '
		LDRSB	R0, [R1,R0]
		MOVS	R2, #0x63 ; 'c'
		MVNS	R2, R2
		CMP	R0, R2
		BLE	loc_2D0C
		SUBS	R0, #1
		STRB	R0, [R1,#0xB]
		BL	sub_9BC0
		CMP	R0, #2
		BCS	loc_2E10

loc_2E0E				; CODE XREF: SwashAFRPage+132j
					; SwashAFRPage+13Ej ...
		B	loc_2D0C
; ---------------------------------------------------------------------------

loc_2E10				; CODE XREF: SwashAFRPage+10Cj
					; SwashAFRPage+140j ...
		MOVS	R0, #0x31 ; '1'
		MOVS	R1, #0xF
		LSLS	R0, R0,	#4
		BL	beep
		MOVS	R1, #0xF
		MOVS	R0, #0
		BL	beep

loc_2E22				; CODE XREF: SwashAFRPage+206j
		B	loc_2D0C
; ---------------------------------------------------------------------------

loc_2E24				; CODE XREF: SwashAFRPage+E8j
		LDR	R1, [R4,#0x2C]
		MOVS	R0, #9
		ADDS	R1, #0x20 ; ' '
		LDRSB	R0, [R1,R0]
		MOVS	R2, #0x63 ; 'c'
		MVNS	R2, R2
		CMP	R0, R2
		BLE	loc_2E0E
		SUBS	R0, #1
		STRB	R0, [R1,#9]
		BL	sub_9BC0
		CMP	R0, #2
		BCC	loc_2E0E
		B	loc_2E10
; ---------------------------------------------------------------------------

loc_2E42				; CODE XREF: SwashAFRPage+ECj
		LDR	R0, [R4,#0x2C]
		MOVS	R1, #0xA
		ADDS	R0, #0x20 ; ' '
		LDRSB	R1, [R0,R1]
		MOVS	R2, #0x63 ; 'c'
		MVNS	R2, R2
		CMP	R1, R2
		BLE	loc_2E0E
		SUBS	R1, #1
		STRB	R1, [R0,#0xA]
		BL	sub_9BC0
		CMP	R0, #2
		BCC	loc_2E0E
		B	loc_2E10
; ---------------------------------------------------------------------------

loc_2E60				; CODE XREF: SwashAFRPage+CAj
					; SwashAFRPage+CEj
		CMP	R5, #0
		BEQ	loc_2E86
		CMP	R5, #1
		BEQ	loc_2EA0
		CMP	R5, #2
		BNE	loc_2E0E
		LDR	R1, [R4,#0x2C]
		MOVS	R0, #0xB
		ADDS	R1, #0x20 ; ' '
		LDRSB	R0, [R1,R0]
		CMP	R0, #0x64 ; 'd'
		BGE	loc_2E0E
		ADDS	R0, #1
		STRB	R0, [R1,#0xB]
		BL	sub_9BC0
		CMP	R0, #2
		BCC	loc_2E0E
		B	loc_2E10
; ---------------------------------------------------------------------------

loc_2E86				; CODE XREF: SwashAFRPage+162j
		LDR	R1, [R4,#0x2C]
		MOVS	R0, #9
		ADDS	R1, #0x20 ; ' '
		LDRSB	R0, [R1,R0]
		CMP	R0, #0x64 ; 'd'
		BGE	loc_2E0E
		ADDS	R0, #1
		STRB	R0, [R1,#9]
		BL	sub_9BC0
		CMP	R0, #2
		BCC	loc_2E0E
		B	loc_2E10
; ---------------------------------------------------------------------------

loc_2EA0				; CODE XREF: SwashAFRPage+166j
		LDR	R0, [R4,#0x2C]
		MOVS	R1, #0xA
		ADDS	R0, #0x20 ; ' '
		LDRSB	R1, [R0,R1]
		CMP	R1, #0x64 ; 'd'
		BGE	loc_2E0E
		ADDS	R1, #1
		STRB	R1, [R0,#0xA]
		BL	sub_9BC0
		CMP	R0, #2
		BCC	loc_2E0E
		B	loc_2E10
; ---------------------------------------------------------------------------
		B	loc_2EC0
; ---------------------------------------------------------------------------

loc_2EBC				; CODE XREF: SwashAFRPage+D6j
		B	loc_2EF4
; ---------------------------------------------------------------------------

loc_2EBE				; CODE XREF: SwashAFRPage+DAj
		B	loc_2F0A
; ---------------------------------------------------------------------------

loc_2EC0				; CODE XREF: SwashAFRPage+D2j
					; SwashAFRPage+1BAj
		CMP	R5, #0
		BEQ	loc_2ECE
		CMP	R5, #1
		BEQ	loc_2ED8
		CMP	R5, #2
		BNE	loc_2EEA
		B	loc_2EE2
; ---------------------------------------------------------------------------

loc_2ECE				; CODE XREF: SwashAFRPage+1C2j
		LDR	R1, [R4,#(usedModelPtr - 0x20000000)]
		MOVS	R0, #0x32 ; '2'
		ADDS	R1, #0x20 ; ' '
		STRB	R0, [R1,#9]
		B	loc_2EEA
; ---------------------------------------------------------------------------

loc_2ED8				; CODE XREF: SwashAFRPage+1C6j
		LDR	R1, [R4,#(usedModelPtr - 0x20000000)]
		MOVS	R0, #0x32 ; '2'
		ADDS	R1, #0x20 ; ' '
		STRB	R0, [R1,#0xA]
		B	loc_2EEA
; ---------------------------------------------------------------------------

loc_2EE2				; CODE XREF: SwashAFRPage+1CCj
		LDR	R1, [R4,#(usedModelPtr - 0x20000000)]
		MOVS	R0, #0x32 ; '2'
		ADDS	R1, #0x20 ; ' '
		STRB	R0, [R1,#0xB]

loc_2EEA				; CODE XREF: SwashAFRPage+1CAj
					; SwashAFRPage+1D6j ...
		BL	sub_9BC0
		CMP	R0, #2
		BCC	loc_2E0E
		B	loc_2E10
; ---------------------------------------------------------------------------

loc_2EF4				; CODE XREF: SwashAFRPage:loc_2EBCj
		CMP	R5, #2
		BCC	loc_2EFC
		MOVS	R5, #0
		B	loc_2F00
; ---------------------------------------------------------------------------

loc_2EFC				; CODE XREF: SwashAFRPage+1F6j
		ADDS	R5, #1
		UXTB	R5, R5

loc_2F00				; CODE XREF: SwashAFRPage+1FAj
		BL	sub_9BC0
		CMP	R0, #2
		BCC	loc_2E22
		B	loc_2E10
; ---------------------------------------------------------------------------

loc_2F0A				; CODE XREF: SwashAFRPage:loc_2EBEj
		MOVS	R0, #1
		ADD	SP, SP,	#0xC
		POP	{R4-R7,PC}
; End of function SwashAFRPage

; ---------------------------------------------------------------------------
off_2F10	DCD dword_200000D4	; DATA XREF: SwashAFRPage+8r
off_2F14	DCD byte_20000000	; DATA XREF: SwashAFRPage+Ar
off_2F18	DCD aSwashAfr_0		; DATA XREF: SwashAFRPage+10r
					; "Swash AFR"
off_2F1C	DCD aSwashType		; DATA XREF: SwashAFRPage+1Cr
					; "Swash type"
; _BYTE	*off_2F20
off_2F20	DCD aAileron		; DATA XREF: SwashAFRPage+3Er
					; "Aileron"
; _BYTE	*off_2F24
off_2F24	DCD aElevator		; DATA XREF: SwashAFRPage+66r
					; "Elevator"
; _BYTE	*off_2F28
off_2F28	DCD aPitch		; DATA XREF: SwashAFRPage+8Cr
					; "Pitch"
off_2F2C	DCD arrow_gfx		; DATA XREF: SwashAFRPage+B2r

; =============== S U B	R O U T	I N E =======================================


ChooseSensors

var_F0		= -0xF0
var_EC		= -0xEC
stringBuffer	= -0xE8
sensorsConfig	= -0x20

		PUSH	{R4-R7,LR}
		LDR	R4, =byte_20000000
		SUB	SP, SP,	#0xDC
		LDR	R1, [R4,#(usedModelPtr - 0x20000000)]
		MOVS	R7, #0
		ADDS	R1, #0x81 ; ''
		ADD	R0, SP,	#0xF0+sensorsConfig
		BL	copy6Bytes

loc_2F42				; CODE XREF: ChooseSensors:loc_3044j
					; ChooseSensors+190j ...
		LDR	R0, =byte_20000000
		MOVS	R2, #0xFF
		LDR	R1, [R0,#(activeSensors	- 0x20000000)]
		LDR	R0, =sensorsArrayInRam
		LSLS	R3, R1,	#3
		STRB	R2, [R0,R3]
		MOVS	R2, #0
		ADDS	R0, R3,	R0
		STRB	R2, [R0,#1]
		MOV	R0, R2
		STR	R2, [SP,#0xF0+var_EC]
		CMP	R1, #0
		BLS	loc_2F84
		ADD	R5, SP,	#0xF0+sensorsConfig
; ---------------------------------------------------------------------------
unk_2F5E	DCB 0x3C ; <
		DCB 0x1C
; ---------------------------------------------------------------------------
		LDRB	R3, [R5,R4]
		LDR	R2, =sensorsArrayInRam
		ADDS	R5, R4,	R5

loc_2F66				; CODE XREF: ChooseSensors+52j
		LSLS	R4, R0,	#3
		LDRB	R6, [R2,R4]
		CMP	R3, R6
		BNE	loc_2F7E
; ---------------------------------------------------------------------------
		DCB 0xC0 ; À
		DCB 0x46 ; F
		DCB 0xC0 ; À
		DCB 0x46 ; F
		DCB 0xC0 ; À
		DCB 0x46 ; F
		DCB 0xC0 ; À
		DCB 0x46 ; F
		DCB 0xC0 ; À
		DCB 0x46 ; F
; ---------------------------------------------------------------------------
		ADDS	R0, #1
		STR	R0, [SP,#0xF0+var_EC]
		B	loc_2F84
; ---------------------------------------------------------------------------

loc_2F7E				; CODE XREF: ChooseSensors+3Cj
		ADDS	R0, #1
		CMP	R0, R1
		BCC	loc_2F66

loc_2F84				; CODE XREF: ChooseSensors+2Aj
					; ChooseSensors+4Cj
		BL	callSetupDMAandSend
		ADR	R0, aChooseSensors ; "Choose sensors"
		BL	displayPageHeader
		MOVS	R4, #0
		ADD	R6, SP,	#0xF0+stringBuffer
		ADD	R5, SP,	#0xF0+sensorsConfig
; ---------------------------------------------------------------------------
unk_2F94	DCB 0x21 ; !		; CODE XREF: ChooseSensors+DAj
		DCB 0x1C
; ---------------------------------------------------------------------------
		LDRB	R0, [R5,R1]
		CMP	R0, #0xFF
		BEQ	NO_SENSORS
		PUSH	{R1}
		LDR	R1, =aIntv_0	; "IntV"
; ---------------------------------------------------------------------------
		DCB  0xC
		DCB 0xF0 ; ð
		DCB 0x3E ; >
		DCB 0xF8 ; ø
; ---------------------------------------------------------------------------
		POP	{R1}
		MOVS	R3, R0
		B	unk_2FD8
; ---------------------------------------------------------------------------
		DCB 0xC0 ; À
		DCB 0x46 ; F
		DCB 0xC0 ; À
		DCB 0x46 ; F
		DCB 0xC0 ; À
		DCB 0x46 ; F
		DCB 0xC0 ; À
		DCB 0x46 ; F
		DCB 0xC0 ; À
		DCB 0x46 ; F
NO_SENSORS				; CODE XREF: ChooseSensors+6Aj
		DCB 0x19
		DCB 0x20
; ---------------------------------------------------------------------------
		MULS	R0, R4
		ADDS	R0, R0,	R6
		ADR	R3, aNone	; "None"
		ADDS	R2, R4,	#1
		ADR	R1, aUS		; "%u: %s"
		BL	sprintf
		B	loc_2FF0
; ---------------------------------------------------------------------------
		DCB 0xC0 ; À
		DCB 0x46 ; F
		DCB 0xC0 ; À
		DCB 0x46 ; F
		DCB 0xC0 ; À
		DCB 0x46 ; F
		DCB 0xC0 ; À
		DCB 0x46 ; F
		DCB 0xC0 ; À
		DCB 0x46 ; F
		DCB 0xC0 ; À
		DCB 0x46 ; F
		DCB 0xC0 ; À
		DCB 0x46 ; F
		DCB 0xC0 ; À
		DCB 0x46 ; F
		DCB 0xC0 ; À
		DCB 0x46 ; F
unk_2FD8	DCB 0xC0 ; À		; CODE XREF: ChooseSensors+78j
		DCB 0x46 ; F
		DCB 0xC0 ; À
		DCB 0x46 ; F
		DCB 0x19
		DCB 0x21 ; !
		DCB 0xC0 ; À
		DCB 0x46 ; F
		DCB 0xC0 ; À
		DCB 0x46 ; F
; ---------------------------------------------------------------------------
		MOV	R0, R4
		MULS	R0, R1
		ADDS	R0, R0,	R6
		ADDS	R2, R4,	#1
		ADR	R1, aUSU	; "%u: %s"
		BL	sprintf

loc_2FF0				; CODE XREF: ChooseSensors+94j
		MOV	R2, R4
; ---------------------------------------------------------------------------
		DCB    8
		DCB 0x20
; ---------------------------------------------------------------------------
		MULS	R2, R0
; ---------------------------------------------------------------------------
		DCB 0x19
		DCB 0x20
; ---------------------------------------------------------------------------
		MULS	R0, R4
; ---------------------------------------------------------------------------
		DCB  0xA		; y
		DCB 0x32 ; 2
; ---------------------------------------------------------------------------
		ADDS	R0, R0,	R6	; text
		MOVS	R3, #0		; a4
		MOVS	R1, #0x19	; x
		BL	displayTextAt
		ADDS	R4, #1
; ---------------------------------------------------------------------------
		DCB    6
		DCB 0x2C ; ,
; ---------------------------------------------------------------------------
		BCC	unk_2F94
		MOV	R2, R7
; ---------------------------------------------------------------------------
		DCB    8
		DCB 0x20
; ---------------------------------------------------------------------------
		MULS	R2, R0
; ---------------------------------------------------------------------------
		DCB  0xA
		DCB 0x32 ; 2
; ---------------------------------------------------------------------------
		MOVS	R1, #0xD
		LDR	R0, =arrow_gfx
		BL	displayGFX
		BL	LCD_updateCALL
		BL	getKeyCode
		CMP	R0, #0xA
		BEQ	unk_3070
		CMP	R0, #8
		BEQ	loc_3086
		CMP	R0, #0x18
		BEQ	loc_3086
		CMP	R0, #9
		BEQ	loc_30DA
		CMP	R0, #0x17
		BEQ	loc_30DA
		CMP	R0, #0x16
		BEQ	loc_311E
		CMP	R0, #0x19
		BEQ	loc_311C
		CMP	R0, #0xB
		BEQ	loc_3046

loc_3044				; CODE XREF: ChooseSensors+152j
					; ChooseSensors+200j
		B	loc_2F42
; ---------------------------------------------------------------------------

loc_3046				; CODE XREF: ChooseSensors+112j
		MOVS	R0, #0
		ADD	SP, SP,	#0xDC
		POP	{R4-R7,PC}
; ---------------------------------------------------------------------------
		DCB 0xC0 ; À
		DCB 0x46 ; F
		DCB 0xC0 ; À
		DCB 0x46 ; F
		DCB 0xC0 ; À
		DCB 0x46 ; F
		DCB 0xC0 ; À
		DCB 0x46 ; F
		DCB 0xC0 ; À
		DCB 0x46 ; F
		DCB 0xC0 ; À
		DCB 0x46 ; F
		DCB 0xC0 ; À
		DCB 0x46 ; F
		DCB 0xC0 ; À
		DCB 0x46 ; F
		DCB 0xC0 ; À
		DCB 0x46 ; F
		DCB 0xC0 ; À
		DCB 0x46 ; F
; ---------------------------------------------------------------------------
		NOP
		NOP
		NOP
		NOP
		NOP
		NOP
		NOP
		NOP
; ---------------------------------------------------------------------------
unk_3070	DCB    5		; CODE XREF: ChooseSensors+F6j
		DCB 0x2F ; /
; ---------------------------------------------------------------------------
		BCC	loc_3078
		MOVS	R0, #0
		B	loc_307A
; ---------------------------------------------------------------------------

loc_3078				; CODE XREF: ChooseSensors+142j
		ADDS	R0, R7,	#1

loc_307A				; CODE XREF: ChooseSensors+146j
		MOV	R7, R0
		BL	sub_9BC0
		CMP	R0, #2
		BCC	loc_3044
		B	loc_3132
; ---------------------------------------------------------------------------

loc_3086				; CODE XREF: ChooseSensors+FAj
					; ChooseSensors+FEj
		LDR	R0, [SP,#0xF0+var_EC]
		CMP	R0, #0
		BEQ	loc_30C2
		SUBS	R4, R0,	#1
		BL	sub_9BC0
		CMP	R0, #2
		BCC	loc_30A8
		MOVS	R0, #0x31 ; '1'
		MOVS	R1, #0xF
		LSLS	R0, R0,	#4
		BL	beep
		MOVS	R1, #0xF
		MOVS	R0, #0
		BL	beep

loc_30A8				; CODE XREF: ChooseSensors+164j
		CMP	R4, #0
		BEQ	loc_30C2
		LDR	R0, =sensorsArrayInRam
		LSLS	R1, R4,	#3
		ADDS	R0, R1,	R0
		SUBS	R0, #0x20 ; ' '
		LDRB	R2, [R0,#0x18]
; ---------------------------------------------------------------------------
		DCB 0x39 ; 9
		DCB 0x1C
; ---------------------------------------------------------------------------
		STRB	R2, [R5,R1]
; ---------------------------------------------------------------------------
		DCB 0xC0 ; À
		DCB 0x46 ; F
		DCB 0xC0 ; À
		DCB 0x46 ; F
		DCB 0xC0 ; À
		DCB 0x46 ; F
; ---------------------------------------------------------------------------
		B	loc_2F42
; ---------------------------------------------------------------------------

loc_30C2				; CODE XREF: ChooseSensors+15Aj
					; ChooseSensors+17Aj
		LDR	R0, =byte_20000000
		LDR	R2, =sensorsArrayInRam
		LDR	R0, [R0,#(activeSensors	- 0x20000000)]
		LSLS	R1, R0,	#3
		ADDS	R0, R1,	R2
		LDRB	R3, [R0,#1]
; ---------------------------------------------------------------------------
		DCB 0x38 ; 8
		DCB 0x1C
; ---------------------------------------------------------------------------
		ADDS	R4, R0,	R5
; ---------------------------------------------------------------------------
		DCB 0xC0 ; À
		DCB 0x46 ; F
; ---------------------------------------------------------------------------
		LDRB	R1, [R2,R1]
		STRB	R1, [R5,R0]
		B	loc_2F42
; ---------------------------------------------------------------------------

loc_30DA				; CODE XREF: ChooseSensors+102j
					; ChooseSensors+106j
		LDR	R1, =byte_20000000
		LDR	R0, [SP,#0xF0+var_EC]
		LDR	R1, [R1,#(activeSensors	- 0x20000000)]
		CMP	R0, R1
		BCS	loc_3102
		ADDS	R0, #1
		STR	R0, [SP,#0xF0+var_EC]
		BL	sub_9BC0
		CMP	R0, #2
		BCC	loc_3102
		MOVS	R0, #0x31 ; '1'
		MOVS	R1, #0xF
		LSLS	R0, R0,	#4
		BL	beep
		MOVS	R1, #0xF
		MOVS	R0, #0
		BL	beep

loc_3102				; CODE XREF: ChooseSensors+1B2j
					; ChooseSensors+1BEj
		LDR	R0, [SP,#0xF0+var_EC]
		LSLS	R1, R0,	#3
		LDR	R0, =sensorsArrayInRam
		ADDS	R1, R1,	R0
		SUBS	R1, #0x20 ; ' '
		LDRB	R2, [R1,#0x18]
; ---------------------------------------------------------------------------
		DCB 0x38 ; 8
		DCB 0x1C
; ---------------------------------------------------------------------------
		STRB	R2, [R5,R0]
; ---------------------------------------------------------------------------
		DCB 0xC0 ; À
		DCB 0x46 ; F
		DCB 0xC0 ; À
		DCB 0x46 ; F
		DCB 0xC0 ; À
		DCB 0x46 ; F
; ---------------------------------------------------------------------------
		B	loc_2F42
; ---------------------------------------------------------------------------
		B	loc_311E
; ---------------------------------------------------------------------------

loc_311C				; CODE XREF: ChooseSensors+10Ej
		B	loc_3146
; ---------------------------------------------------------------------------

loc_311E				; CODE XREF: ChooseSensors+10Aj
					; ChooseSensors+1EAj
		MOVS	R1, #0xFF
; ---------------------------------------------------------------------------
		DCB 0x38 ; 8
		DCB 0x1C
; ---------------------------------------------------------------------------
		STRB	R1, [R5,R0]
; ---------------------------------------------------------------------------
		DCB 0xC0 ; À
		DCB 0x46 ; F
		DCB 0xC0 ; À
		DCB 0x46 ; F
		DCB 0xC0 ; À
		DCB 0x46 ; F
; ---------------------------------------------------------------------------
		BL	sub_9BC0
		CMP	R0, #2
		BCC	loc_3044

loc_3132				; CODE XREF: ChooseSensors+154j
		MOVS	R0, #0x31 ; '1'
		MOVS	R1, #0xF
		LSLS	R0, R0,	#4
		BL	beep
		MOVS	R1, #0xF
		MOVS	R0, #0
		BL	beep
		B	loc_2F42
; ---------------------------------------------------------------------------

loc_3146				; CODE XREF: ChooseSensors:loc_311Cj
		LDR	R0, =byte_20000000
		ADD	R1, SP,	#0xF0+sensorsConfig
		LDR	R0, [R0,#(usedModelPtr - 0x20000000)]
		ADDS	R0, #0x81 ; ''
		BL	copy6Bytes
		MOVS	R0, #1
		ADD	SP, SP,	#0xDC
		POP	{R4-R7,PC}
; End of function ChooseSensors

; ---------------------------------------------------------------------------
off_3158	DCD byte_20000000	; DATA XREF: ChooseSensors+2r
					; ChooseSensors:loc_2F42r ...
sensorsArray	DCD sensorsArrayInRam	; DATA XREF: ChooseSensors+18r
					; ChooseSensors+32r ...
aChooseSensors	DCB "Choose sensors",0  ; DATA XREF: ChooseSensors+58o
		DCB 0
aNone		DCB "None",0            ; DATA XREF: ChooseSensors+8Ao
		DCB 0, 0, 0
aUS		DCB "%u: %s",0          ; DATA XREF: ChooseSensors+8Eo
		DCB 0
sensorNames	DCD aIntv_0		; DATA XREF: ChooseSensors+6Er
					; "IntV"
aUSU		DCB "%u: %s",0,0,0,0    ; DATA XREF: ChooseSensors+BAo
		ALIGN 0x10
off_3190	DCD arrow_gfx		; DATA XREF: ChooseSensors+E6r
		DCD 0xFFFFFFFF
		DCD 0xFFFFFFFF
		DCD 0xFFFFFFFF
		DCD 0xFFFFFFFF
		DCD 0xFFFFFFFF
		DCD 0xFFFFFFFF
		DCD 0xFFFFFFFF
		DCD 0xFFFFFFFF
		DCD 0xFFFFFFFF

; =============== S U B	R O U T	I N E =======================================


DualRateExp				; DATA XREF: ROM:0000D334o
					; ROM:0000D394o ...

var_30		= -0x30
text		= -0x2C
var_29		= -0x29
var_28		= -0x28
var_24		= -0x24
var_20		= -0x20
var_1C		= -0x1C

		PUSH	{R4-R7,LR}
		MOVS	R0, #0
		SUB	SP, SP,	#0x1C
		MOV	R5, R0
		STR	R0, [SP,#0x30+var_24]

loc_31C2				; CODE XREF: DualRateExp:loc_3396j
					; DualRateExp:loc_33D6j
		BL	getInputStates
		LDR	R4, =byte_20000000
		LDR	R1, [R4,#(usedModelPtr - 0x20000000)]
		LDRB	R2, [R1,#0xE]
		MOVS	R1, #1
		LSLS	R1, R2
		TST	R0, R1
		BEQ	loc_32CE
		MOVS	R6, #1
		BL	callSetupDMAandSend
		LDR	R0, =aDualRateExp__0 ; "Dual rate/exp."
		BL	displayPageHeader
		LDR	R0, =aSport_0	; text

loc_31E2				; CODE XREF: DualRateExp+1F4j
		MOVS	R3, #0		; a4
		MOVS	R2, #0x14	; y
		MOVS	R1, #8		; x
		BL	displayTextAt
		MOV	R0, R5
		LDR	R1, =byte_20000005
		ADDS	R0, #0x31 ; '1'
		STRB	R0, [R1,#(byte_20000007	- 0x20000005)]
		MOVS	R3, #0		; a4
		MOVS	R2, #0x1C	; y
		MOVS	R1, #8		; x
		LDR	R0, =byte_20000005 ; text
		BL	displayTextAt
		MOVS	R3, #0		; a4
		MOVS	R2, #0x24 ; '$' ; y
		MOVS	R1, #8		; x
		LDR	R0, =aRate	; text
		BL	displayTextAt
		LSLS	R6, R6,	#2
		LDR	R7, =byte_20000000
		STR	R6, [SP,#0x30+var_20]
		LDR	R0, [R7,#(usedModelPtr - 0x20000000)]
		MOVS	R2, #3		; length
		ADDS	R0, R6,	R0
		ADDS	R0, R0,	R5
		LDRB	R0, [R0,#0xF]	; sourceVal
		ADD	R1, SP,	#0x30+text ; targetText
		BL	intToString
		MOVS	R4, #0
		MOV	R0, SP
		STRB	R4, [R0,#0x30+var_29]
		MOV	R3, R4		; a4
		MOVS	R2, #0x24 ; '$' ; y
		MOVS	R1, #0x30 ; '0'	; x
		ADD	R0, SP,	#0x30+text ; text
		BL	displayTextAt
		MOVS	R3, #0		; a4
		MOVS	R2, #0x2C ; ','	; y
		MOVS	R1, #8		; x
		LDR	R0, =aExp	; text
		BL	displayTextAt
		LDR	R0, [R7,#(usedModelPtr - 0x20000000)]
		MOVS	R1, #0x17
		ADDS	R0, R6,	R0
		ADDS	R0, R0,	R5
		LDRSB	R1, [R0,R1]
		MOVS	R2, #4		; length
		NEGS	R0, R1
		ADD	R1, SP,	#0x30+text ; targetText
		BL	intToString
		MOV	R0, SP
		STRB	R4, [R0,#0x30+var_28]
		MOVS	R3, #0		; a4
		MOVS	R2, #0x2C ; ','	; y
		MOVS	R1, #0x28 ; '('	; x
		ADD	R0, SP,	#0x30+text ; text
		BL	displayTextAt
		LDR	R0, [SP,#0x30+var_24]
		MOVS	R1, #0
		LSLS	R2, R0,	#3
		ADDS	R2, #0x1C
		LDR	R0, =arrow_gfx
		BL	displayGFX
		MOVS	R3, #8
		MOVS	R2, #0x7F ; ''
		MOV	R1, R3
		MOVS	R0, #0x49 ; 'I'
		STR	R4, [SP,#0x30+var_30]
		BL	sub_4E8C
		MOVS	R2, #0x7F ; ''
		MOVS	R3, #0x3E ; '>'
		MOVS	R1, #8
		MOV	R0, R2
		STR	R4, [SP,#0x30+var_30]
		BL	sub_4E8C
		MOVS	R3, #0x3C ; '<'
		MOVS	R2, #0x7F ; ''
		MOV	R1, R3
		MOVS	R0, #0x49 ; 'I'
		STR	R4, [SP,#0x30+var_30]
		BL	sub_4E8C
		MOVS	R2, #0x4B ; 'K'
		MOVS	R3, #0x3E ; '>'
		MOVS	R1, #8
		MOV	R0, R2
		STR	R4, [SP,#0x30+var_30]
		BL	sub_4E8C
		MOVS	R3, #0x22 ; '"'
		MOVS	R2, #0x7F ; ''
		MOV	R1, R3
		MOVS	R0, #0x49 ; 'I'
		STR	R4, [SP,#0x30+var_30]
		BL	sub_4E8C
		MOVS	R2, #0x65 ; 'e'
		MOVS	R3, #0x3E ; '>'
		MOVS	R1, #8
		MOV	R0, R2
		STR	R4, [SP,#0x30+var_30]
		BL	sub_4E8C
		MOVS	R2, #0
		MOVS	R1, #0x15
		MOVS	R0, #0x4A ; 'J'
		B	loc_32D0
; ---------------------------------------------------------------------------

loc_32CE				; CODE XREF: DualRateExp+1Aj
		B	loc_339E
; ---------------------------------------------------------------------------

loc_32D0				; CODE XREF: DualRateExp+114j
		BL	getGFX
		MOVS	R2, #0
		MOVS	R1, #0x2F ; '/'
		MOVS	R0, #0x4A ; 'J'
		BL	getGFX
		MOVS	R2, #0
		MOVS	R1, #0x3D ; '='
		MOVS	R0, #0x58 ; 'X'
		BL	getGFX
		MOVS	R2, #0
		MOVS	R1, #0x3D ; '='
		MOVS	R0, #0x72 ; 'r'
		BL	getGFX
		LDR	R0, [R7,#(usedModelPtr - 0x20000000)]
		ADDS	R0, R6,	R0
		ADDS	R1, R0,	R5
		MOVS	R0, #0x17
		LDRSB	R0, [R1,R0]
		MOVS	R1, #0x62 ; 'b'
		MULS	R0, R1
		MOVS	R1, #0x4000
		ADDS	R0, R0,	R1
		MOVS	R7, #0
		MOV	R4, R7
		STR	R0, [SP,#0x30+var_1C]

loc_330C				; CODE XREF: DualRateExp+1B4j
		LSLS	R0, R4,	#0xF
		MOVS	R1, #0x1A
		BL	div_Other
		LDR	R1, [SP,#0x30+var_1C]
		BL	dualRateExpFunction
		MOVS	R1, #0x1A
		LDR	R2, =byte_20000000
		MULS	R0, R1
		LDR	R1, [SP,#0x30+var_20]
		LDR	R2, [R2,#(usedModelPtr - 0x20000000)]
		ADDS	R1, R1,	R2
		ADDS	R1, R1,	R5
		LDRB	R1, [R1,#0xF]
		MULS	R0, R1
		MOVS	R1, #0x320000
		BL	div__0
		MOV	R6, R0
		CMP	R4, #0
		BEQ	loc_3366
		MOVS	R0, #0
		STR	R0, [SP,#0x30+var_30]
		MOVS	R0, #0x65 ; 'e'
		SUBS	R2, R0,	R4
		MOVS	R0, #0x66 ; 'f'
		MOV	R3, R6
		MOV	R1, R7
		SUBS	R0, R0,	R4
		ADDS	R3, #0x22 ; '"'
		ADDS	R1, #0x22 ; '"'
		BL	sub_4E8C
		MOVS	R0, #0
		STR	R0, [SP,#0x30+var_30]
		MOVS	R0, #0x22 ; '"'
		MOV	R2, R4
		SUBS	R3, R0,	R6
		SUBS	R1, R0,	R7
		ADDS	R2, #0x65 ; 'e'
		SUBS	R0, R2,	#1
		BL	sub_4E8C

loc_3366				; CODE XREF: DualRateExp+180j
		ADDS	R4, #1
		MOV	R7, R6
		CMP	R4, #0x1A
		BLS	loc_330C
		BL	LCD_updateCALL
		BL	getKeyCode
		CMP	R0, #0xA
		BEQ	loc_33AE
		CMP	R0, #8
		BEQ	loc_33D8
		CMP	R0, #0x18
		BEQ	loc_33D8
		CMP	R0, #9
		BEQ	loc_3444
		CMP	R0, #0x17
		BEQ	loc_3444
		CMP	R0, #0x16
		BEQ	loc_3476
		CMP	R0, #0x19
		BEQ	loc_3478
		CMP	R0, #0xB
		BEQ	loc_3398

loc_3396				; CODE XREF: DualRateExp+20Aj
					; DualRateExp+22Cj ...
		B	loc_31C2
; ---------------------------------------------------------------------------

loc_3398				; CODE XREF: DualRateExp+1DCj
		MOVS	R0, #0
		ADD	SP, SP,	#0x1C
		POP	{R4-R7,PC}
; ---------------------------------------------------------------------------

loc_339E				; CODE XREF: DualRateExp:loc_32CEj
		MOVS	R6, #0
		BL	callSetupDMAandSend
		LDR	R0, =aDualRateExp__0 ; "Dual rate/exp."
		BL	displayPageHeader
		LDR	R0, =0xCAF5
		B	loc_31E2
; ---------------------------------------------------------------------------

loc_33AE				; CODE XREF: DualRateExp+1C0j
		LDR	R0, [SP,#0x30+var_24]
		CMP	R0, #2
		BCC	loc_33B8
		MOVS	R0, #0
		B	loc_33BA
; ---------------------------------------------------------------------------

loc_33B8				; CODE XREF: DualRateExp+1FAj
		ADDS	R0, #1

loc_33BA				; CODE XREF: DualRateExp+1FEj
		STR	R0, [SP,#0x30+var_24]
		BL	sub_9BC0
		CMP	R0, #2
		BCC	loc_3396

loc_33C4				; CODE XREF: DualRateExp+24Cj
					; DualRateExp+260j ...
		MOVS	R0, #0x31 ; '1'
		MOVS	R1, #0xF
		LSLS	R0, R0,	#4
		BL	beep
		MOVS	R1, #0xF
		MOVS	R0, #0
		BL	beep

loc_33D6				; CODE XREF: DualRateExp+2DEj
					; DualRateExp+2F0j ...
		B	loc_31C2
; ---------------------------------------------------------------------------

loc_33D8				; CODE XREF: DualRateExp+1C4j
					; DualRateExp+1C8j
		LDR	R0, [SP,#0x30+var_24]
		CMP	R0, #0
		BEQ	loc_3406
		CMP	R0, #1
		BEQ	loc_3426
		CMP	R0, #2
		BNE	loc_3396
		LDR	R1, =byte_20000000
		LDR	R0, [SP,#0x30+var_20]
		LDR	R1, [R1,#(usedModelPtr - 0x20000000)]
		ADDS	R0, R0,	R1
		ADDS	R1, R0,	R5
		MOVS	R0, #0x17
		LDRSB	R0, [R1,R0]
		CMP	R0, #0x62 ; 'b'
		BGT	loc_3396
		ADDS	R0, #2
		STRB	R0, [R1,#0x17]
		BL	sub_9BC0
		CMP	R0, #2

loc_3402				; CODE XREF: DualRateExp+322j
					; DualRateExp+33Ej
		BCC	loc_3396
		B	loc_33C4
; ---------------------------------------------------------------------------

loc_3406				; CODE XREF: DualRateExp+224j
		CMP	R5, #3
		BEQ	loc_341A
		CMP	R5, #1
		BNE	loc_3396
		MOVS	R5, #0
		BL	sub_9BC0
		CMP	R0, #2
		BCC	loc_3396
		B	loc_33C4
; ---------------------------------------------------------------------------

loc_341A				; CODE XREF: DualRateExp+250j
		MOVS	R5, #1
		BL	sub_9BC0
		CMP	R0, #2
		BCC	loc_3396
		B	loc_33C4
; ---------------------------------------------------------------------------

loc_3426				; CODE XREF: DualRateExp+228j
		LDR	R0, =byte_20000000
		LDR	R1, [SP,#0x30+var_20]
		LDR	R0, [R0,#(usedModelPtr - 0x20000000)]
		ADDS	R0, R1,	R0
		ADDS	R0, R0,	R5
		LDRB	R1, [R0,#0xF]
		CMP	R1, #0
		BEQ	loc_3396
		SUBS	R1, #1
		STRB	R1, [R0,#0xF]
		BL	sub_9BC0
		CMP	R0, #2
		BCC	loc_3396
		B	loc_33C4
; ---------------------------------------------------------------------------

loc_3444				; CODE XREF: DualRateExp+1CCj
					; DualRateExp+1D0j
		LDR	R0, [SP,#0x30+var_24]
		CMP	R0, #0
		BEQ	loc_347A
		CMP	R0, #1
		BEQ	loc_349A
		CMP	R0, #2
		BNE	loc_3396
		LDR	R0, =byte_20000000
		LDR	R1, [SP,#0x30+var_20]
		LDR	R0, [R0,#(usedModelPtr - 0x20000000)]
		MOVS	R2, #0x61 ; 'a'
		ADDS	R0, R1,	R0
		ADDS	R0, R0,	R5
		MOVS	R1, #0x17
		LDRSB	R1, [R0,R1]
		MVNS	R2, R2
		CMP	R1, R2
		BLT	loc_3396
		SUBS	R1, #2
		STRB	R1, [R0,#0x17]
		BL	sub_9BC0
		CMP	R0, #2
		BCC	loc_3396
		B	loc_33C4
; ---------------------------------------------------------------------------

loc_3476				; CODE XREF: DualRateExp+1D4j
		B	loc_34B8
; ---------------------------------------------------------------------------

loc_3478				; CODE XREF: DualRateExp+1D8j
		B	loc_34FA
; ---------------------------------------------------------------------------

loc_347A				; CODE XREF: DualRateExp+290j
		CMP	R5, #0
		BEQ	loc_348E
		CMP	R5, #1
		BNE	loc_3396
		MOVS	R5, #3
		BL	sub_9BC0
		CMP	R0, #2
		BCC	loc_3396
		B	loc_33C4
; ---------------------------------------------------------------------------

loc_348E				; CODE XREF: DualRateExp+2C4j
		MOVS	R5, #1
		BL	sub_9BC0
		CMP	R0, #2
		BCC	loc_33D6
		B	loc_33C4
; ---------------------------------------------------------------------------

loc_349A				; CODE XREF: DualRateExp+294j
		LDR	R0, =byte_20000000
		LDR	R1, [SP,#0x30+var_20]
		LDR	R0, [R0,#(usedModelPtr - 0x20000000)]
		ADDS	R0, R1,	R0
		ADDS	R1, R0,	R5
		LDRB	R0, [R1,#0xF]
		CMP	R0, #0x64 ; 'd'
		BCS	loc_33D6
		ADDS	R0, #1
		STRB	R0, [R1,#0xF]
		BL	sub_9BC0
		CMP	R0, #2
		BCC	loc_33D6
		B	loc_33C4
; ---------------------------------------------------------------------------

loc_34B8				; CODE XREF: DualRateExp:loc_3476j
		LDR	R0, [SP,#0x30+var_24]
		CMP	R0, #1
		BEQ	loc_34DE
		CMP	R0, #2
		BNE	loc_33D6
		LDR	R0, =0xD179
		LDR	R1, [SP,#0x30+var_20]
		ADDS	R0, R0,	R5
		LDRB	R2, [R0,#(byte_D190 - 0xD179)]
		LDR	R0, =byte_20000000
		LDR	R0, [R0,#(usedModelPtr - 0x20000000)]
		ADDS	R0, R1,	R0
		ADDS	R0, R0,	R5
		STRB	R2, [R0,#0x17]
		BL	sub_9BC0
		CMP	R0, #2
		BCC	loc_3402
		B	loc_33C4
; ---------------------------------------------------------------------------

loc_34DE				; CODE XREF: DualRateExp+304j
		LDR	R0, =0xD179
		LDR	R1, [SP,#0x30+var_20]
		ADDS	R0, R0,	R5
		LDRB	R2, [R0,#(byte_D188 - 0xD179)]
		LDR	R0, =byte_20000000
		LDR	R0, [R0,#(usedModelPtr - 0x20000000)]
		ADDS	R0, R1,	R0
		ADDS	R0, R0,	R5
		STRB	R2, [R0,#0xF]
		BL	sub_9BC0
		CMP	R0, #2
		BCC	loc_3402
		B	loc_33C4
; ---------------------------------------------------------------------------

loc_34FA				; CODE XREF: DualRateExp:loc_3478j
		MOVS	R0, #1
		ADD	SP, SP,	#0x1C
		POP	{R4-R7,PC}
; End of function DualRateExp

; ---------------------------------------------------------------------------
off_3500	DCD byte_20000000	; DATA XREF: DualRateExp+Er
					; DualRateExp+56r ...
off_3504	DCD aDualRateExp__0	; DATA XREF: DualRateExp+22r
					; DualRateExp+1ECr
					; "Dual rate/exp."
; _BYTE	*off_3508
off_3508	DCD aSport_0		; DATA XREF: DualRateExp+28r
					; "Sport"
; _BYTE	*off_350C
off_350C	DCD byte_20000005	; DATA XREF: DualRateExp+36r
					; DualRateExp+42r
; _BYTE	*off_3510
off_3510	DCD aRate		; DATA XREF: DualRateExp+4Er
					; "Rate"
; _BYTE	*off_3514
off_3514	DCD aExp		; DATA XREF: DualRateExp+82r
					; "Exp"
off_3518	DCD arrow_gfx		; DATA XREF: DualRateExp+B4r
dword_351C	DCD 0xCAF5		; DATA XREF: DualRateExp+1F2r
dword_3520	DCD 0xD179		; DATA XREF: DualRateExp+30Ar
					; DualRateExp:loc_34DEr

; =============== S U B	R O U T	I N E =======================================


DisplayChannels				; DATA XREF: ROM:0000D37Co
					; ROM:0000D3D4o ...

var_20		= -0x20

		PUSH	{R4-R7,LR}
		SUB	SP, SP,	#0xC

loc_3528				; CODE XREF: DisplayChannels+AAj
					; DisplayChannels+CAj ...
		BL	callSetupDMAandSend
		MOVS	R6, #0

loc_352E				; CODE XREF: DisplayChannels+9Ej
		MOV	R0, R6
		LSLS	R4, R6,	#3
		SUBS	R4, R4,	R6
		SUBS	R4, R4,	R6
		MOV	R7, R4
		ADDS	R7, #2
		LSLS	R3, R4,	#1
		MOVS	R5, R4
		MOVS	R2, R7
		MOVS	R1, #2
		LDR	R0, =unk_E7A8
		ADDS	R0, R0,	R3
		BL	displayGFX
		MOVS	R0, #0
		ADDS	R5, #6
		STR	R0, [SP,#0x20+var_20]
		MOV	R1, R7
		MOV	R3, R5
		MOVS	R2, #0x7E ; '~'
		MOVS	R0, #0xA
		BL	drawLine
		MOVS	R0, #0
		MOVS	R2, #0x15
		STR	R0, [SP,#0x20+var_20]
		MOV	R3, R5
		MOV	R1, R7
		MOV	R0, R2
		BL	sub_4E8C
		MOVS	R0, #0
		MOVS	R2, #0x44 ; 'D'
		STR	R0, [SP,#0x20+var_20]
		MOV	R3, R5
		MOV	R1, R7
		MOV	R0, R2
		BL	sub_4E8C
		MOVS	R0, #0
		MOVS	R2, #0x73 ; 's'
		STR	R0, [SP,#0x20+var_20]
		MOV	R3, R5
		MOV	R1, R7
		MOV	R0, R2
		BL	sub_4E8C
		LDR	R5, =dword_1FFFFDE0
		LSLS	R7, R6,	#2
		LDR	R0, [R5,R7]
		MOVS	R1, #0x2F ; '/'
		MULS	R0, R1
		LDR	R1, =dword_2710
		BL	div__0
		LDR	R1, [R5,R7]
		ADDS	R0, #0x44 ; 'D'
		CMP	R1, #0
		BGE	loc_35AA
		MOV	R5, R0
		MOVS	R2, #0x44 ; 'D'
		B	loc_35AE
; ---------------------------------------------------------------------------

loc_35AA				; CODE XREF: DisplayChannels+7Ej
		MOVS	R5, #0x44 ; 'D'
		MOV	R2, R0

loc_35AE				; CODE XREF: DisplayChannels+84j
		MOVS	R0, #0
		MOV	R3, R4
		ADDS	R3, #5
		STR	R0, [SP,#0x20+var_20]
		SUBS	R1, R3,	#2
		MOV	R0, R5
		BL	fillRegion
		ADDS	R6, #1
		CMP	R6, #0xA
		BCC	loc_352E
		BL	LCD_updateCALL
		BL	sub_2574
		CMP	R0, #0xFF
		BEQ	loc_3528
		BL	getKeyCode
		CMP	R0, #9
		BEQ	loc_35FA
		CMP	R0, #0x17
		BEQ	loc_35FA
		CMP	R0, #8
		BEQ	loc_3616
		CMP	R0, #0x18
		BEQ	loc_3616
		CMP	R0, #0x19
		BEQ	loc_3620
		CMP	R0, #0xA
		BEQ	loc_35F0
		CMP	R0, #0xB
		BNE	loc_3528

loc_35F0				; CODE XREF: DisplayChannels+C6j
		LDR	R1, =byte_20000145
		MOVS	R0, #0
		STRB	R0, [R1]
		ADD	SP, SP,	#0xC
		POP	{R4-R7,PC}
; ---------------------------------------------------------------------------

loc_35FA				; CODE XREF: DisplayChannels+B2j
					; DisplayChannels+B6j
		BL	sub_9BC0
		CMP	R0, #2
		BCC	loc_3528

loc_3602				; CODE XREF: DisplayChannels+FAj
					; DisplayChannels+116j
		MOVS	R0, #0x31 ; '1'
		MOVS	R1, #0xF
		LSLS	R0, R0,	#4
		BL	beep
		MOVS	R1, #0xF
		MOVS	R0, #0
		BL	beep

loc_3614				; CODE XREF: DisplayChannels+F8j
					; DisplayChannels+114j
		B	loc_3528
; ---------------------------------------------------------------------------

loc_3616				; CODE XREF: DisplayChannels+BAj
					; DisplayChannels+BEj
		BL	sub_9BC0
		CMP	R0, #2
		BCC	loc_3614
		B	loc_3602
; ---------------------------------------------------------------------------

loc_3620				; CODE XREF: DisplayChannels+C2j
		LDR	R0, =timer
		LDR	R1, [R0]
		LDR	R0, =dword_20000150
		MOVS	R2, #1
		STR	R1, [R0]
		LDR	R0, =byte_20000145
		LDRB	R1, [R0]
		EORS	R1, R2
		STRB	R1, [R0]
		BL	sub_9BC0
		CMP	R0, #2
		BCC	loc_3614
		B	loc_3602
; End of function DisplayChannels

; ---------------------------------------------------------------------------
off_363C	DCD unk_E7A8		; DATA XREF: DisplayChannels+1Er
		DCB 0x44 ; D
		DCB 0xCB, 0, 0
off_3644	DCD dword_1FFFFDE0	; DATA XREF: DisplayChannels+68r
off_3648	DCD dword_2710		; DATA XREF: DisplayChannels+72r
off_364C	DCD byte_20000145	; DATA XREF: DisplayChannels:loc_35F0r
					; DisplayChannels+106r
off_3650	DCD timer		; DATA XREF: DisplayChannels:loc_3620r
off_3654	DCD dword_20000150	; DATA XREF: DisplayChannels+100r

; =============== S U B	R O U T	I N E =======================================


FirmwareVerPAge				; DATA XREF: ROM:0000D4E4o
		PUSH	{R4,LR}
		BL	callSetupDMAandSend
		LDR	R0, =0xCD47
		BL	displayPageHeader
		MOVS	R3, #0
		MOVS	R2, #0xC
		MOVS	R1, #1
		LDR	R0, =0xEE89
		BL	displaySmallTextAt
		MOVS	R3, #0		; a4
		MOVS	R2, #0x14	; a3
		MOVS	R1, #0x40 ; '@'	; a2
		LDR	R0, =aFlySkyFsI6 ; text
		BL	displayTextAt2
		MOVS	R3, #0		; a4
		MOVS	R2, #0x1C	; a3
		MOVS	R1, #0x40 ; '@'	; a2
		LDR	R0, =a1_125Nov2014 ; text
		BL	displayTextAt2
		MOVS	R3, #0
		MOVS	R2, #0x28 ; '('
		MOVS	R1, #1
		LDR	R0, =0xEE9F
		BL	displaySmallTextAt
		MOVS	R3, #0		; a4
		MOVS	R2, #0x30 ; '0'	; a3
		MOVS	R1, #0x40 ; '@'	; a2
		LDR	R0, =aFlyplusBeta ; text
		BL	displayTextAt2
		MOVS	R3, #0		; a4
		MOVS	R2, #0x38 ; '8'	; a3
		MOVS	R1, #0x40 ; '@'	; a2
		LDR	R0, =a200116827	; text
		BL	displayTextAt2
		BL	LCD_updateCALL

loc_36B0				; CODE XREF: FirmwareVerPAge+66j
		BL	getKeyCode
		CMP	R0, #0xA
		BEQ	loc_36C0
		CMP	R0, #0x19
		BEQ	loc_36C0
		CMP	R0, #0xB
		BNE	loc_36B0

loc_36C0				; CODE XREF: FirmwareVerPAge+5Ej
					; FirmwareVerPAge+62j
		MOVS	R0, #0
		POP	{R4,PC}
; End of function FirmwareVerPAge

; ---------------------------------------------------------------------------
dword_36C4	DCD 0xCD47		; DATA XREF: FirmwareVerPAge+6r
; _BYTE	*off_36C8
off_36C8	DCD aFlySkyFsI6		; DATA XREF: FirmwareVerPAge+1Er
					; "FLY SKY FS-i6"
; _BYTE	*off_36CC
off_36CC	DCD a1_125Nov2014	; DATA XREF: FirmwareVerPAge+2Ar
					; "1.1 25-NOV-2014"
dword_36D0	DCD 0xEE89		; DATA XREF: FirmwareVerPAge+12r
dword_36D4	DCD 0xEE9F		; DATA XREF: FirmwareVerPAge+36r
; _BYTE	*off_36D8
off_36D8	DCD aFlyplusBeta	; DATA XREF: FirmwareVerPAge+42r
					; "FlyPlus Beta"
; _BYTE	*off_36DC
off_36DC	DCD a200116827		; DATA XREF: FirmwareVerPAge+4Er
					; "20/01/16 8:27"

; =============== S U B	R O U T	I N E =======================================


SensorsList

var_210		= -0x210
var_204		= -0x204
var_200		= -0x200
var_1F8		= -0x1F8
var_1E8		= -0x1E8
var_1E4		= -0x1E4
var_1E0		= -0x1E0
text		= -0xE0
var_B0		= -0xB0
var_7C		= -0x7C

		PUSH	{R4-R7,LR}
		SUB	SP, SP,	#0x1FC
		LDR	R0, =byte_20000000
		SUB	SP, SP,	#8
		MOVS	R1, #1
		STRB	R1, [R0,#(byte_20000002	- 0x20000000)]
		ADD	R0, SP,	#0x218+var_B0
		ADD	R1, SP,	#0x218+var_7C
		ADDS	R0, #2
		MOVS	R6, #0
		STR	R1, [SP,#0x218+var_1E4]
		STR	R0, [SP,#0x218+var_1E8]

loc_36F8				; CODE XREF: SensorsList+106j
					; SensorsList+17Ej
		BL	callSetupDMAandSend
		ADR	R0, aSensorsList ; "Sensors list"
		BL	displayPageHeader
		BL	sub_A158
		LDR	R0, =byte_20000000
		MOVS	R1, #5
		LDR	R4, [R0,#(activeSensors	- 0x20000000)]
		ADDS	R0, R4,	#4
		BL	div_Other
		STR	R0, [SP,#0x218+var_210]
		SUBS	R0, #1
		STR	R0, [SP,#0x218+var_204]
		CMP	R6, R0
		BLS	loc_3720
		LDR	R6, [SP,#0x218+var_210]
		SUBS	R6, #1

loc_3720				; CODE XREF: SensorsList+3Aj
		CMP	R4, #5
		BHI	loc_3728
		MOVS	R6, #0
		B	loc_3736
; ---------------------------------------------------------------------------

loc_3728				; CODE XREF: SensorsList+42j
		CMP	R6, R0
		BNE	loc_3734
		LSLS	R0, R6,	#2
		ADDS	R0, R6,	R0
		SUBS	R4, R4,	R0
		B	loc_3736
; ---------------------------------------------------------------------------

loc_3734				; CODE XREF: SensorsList+4Aj
		MOVS	R4, #5

loc_3736				; CODE XREF: SensorsList+46j
					; SensorsList+52j
		MOVS	R2, #0x100	; len
		LDR	R1, =sensorsArrayInRam ; source
		ADD	R0, SP,	#0x218+var_1E0 ; target
		BL	strcpy
		BL	sub_A190
		MOVS	R5, #0
		CMP	R4, #0
		BLS	loc_37B8
		LSLS	R0, R6,	#2
		ADDS	R0, R6,	R0
		STR	R0, [SP,#0x218+var_200]

loc_3752				; CODE XREF: SensorsList+D6j
		ADDS	R0, R0,	R5
		LSLS	R1, R0,	#3
		ADD	R0, SP,	#0x218+var_1E0
		ADDS	R7, R1,	R0
		ADD	R0, SP,	#0x218+text
		STR	R0, [SP,#0x218+var_1F8]
		LDRB	R1, [R7,#1]
		LDRB	R0, [R7]
		LDR	R2, [SP,#0x218+var_1E4]
		BL	formatSensorData
		LDRB	R0, [R7]
		BL	GetSensorName
		MOV	R1, R0
		LDR	R0, [SP,#0x218+var_1F8]
		BL	sub_1C64
		LDRB	R2, [R7,#1]
		ADR	R1, aU_0	; "%u"
		ADDS	R2, #1
		LDR	R0, [SP,#0x218+var_1E8]
		BL	sprintf
		LSLS	R7, R5,	#3
		ADDS	R7, #0xC
		MOVS	R3, #0		; a4
		MOV	R2, R7		; y
		MOV	R1, R3		; x
		ADD	R0, SP,	#0x218+text ; text
		BL	displayTextAt
		MOVS	R3, #0		; a4
		MOV	R2, R7		; y
		MOVS	R1, #0x32 ; '2'	; x
		LDR	R0, [SP,#0x218+var_1E8]	; text
		BL	displayTextAt
		MOVS	R3, #0		; a4
		MOV	R2, R7		; y
		MOVS	R1, #0x42 ; 'B'	; x
		LDR	R0, [SP,#0x218+var_1E4]	; text
		BL	displayTextAt

loc_37AA				; CODE XREF: SensorsList+D2j
		ADDS	R5, #1
		CMP	R5, R4
		BCS	loc_37B8
		CMP	R5, #0xF
		BCS	loc_37AA
		LDR	R0, [SP,#0x218+var_200]
		B	loc_3752
; ---------------------------------------------------------------------------

loc_37B8				; CODE XREF: SensorsList+6Aj
					; SensorsList+CEj
		LDR	R0, [SP,#0x218+var_204]
		CMP	R6, R0
		BCS	loc_37C8
		MOVS	R3, #0
		MOVS	R2, #0x38 ; '8'
		MOVS	R1, #0x60 ; '`'
		ADR	R0, asc_388C	; "==>"
		B	loc_37D0
; ---------------------------------------------------------------------------

loc_37C8				; CODE XREF: SensorsList+DCj
		MOVS	R3, #0		; a4
		MOVS	R2, #0x38 ; '8'	; y
		MOVS	R1, #0x60 ; '`'	; x
		ADR	R0, asc_3890	; text

loc_37D0				; CODE XREF: SensorsList+E6j
		BL	displayTextAt
		BL	LCD_updateCALL
		LDR	R4, =timer
		LDR	R7, [R4]
		LDR	R0, [R4]
		MOVS	R5, #0x7D ; '}'
		SUBS	R0, R0,	R7
		LSLS	R5, R5,	#3
		CMP	R0, R5
		BCS	loc_36F8

loc_37E8				; CODE XREF: SensorsList+17Cj
		BL	sub_2574
		CMP	R0, #0xFF
		BEQ	loc_3856
		BL	getKeyCode
		CMP	R0, #9
		BEQ	loc_380A
		CMP	R0, #8
		BEQ	loc_3822
		CMP	R0, #0x19
		BEQ	loc_3860
		CMP	R0, #0xA
		BEQ	loc_3860
		CMP	R0, #0xB
		BEQ	loc_3860
		B	loc_3856
; ---------------------------------------------------------------------------

loc_380A				; CODE XREF: SensorsList+116j
		CMP	R6, #0
		BEQ	loc_3856
		LDR	R0, [SP,#0x218+var_210]
		SUBS	R6, #1
		CMP	R6, R0
		BLS	loc_3818
		MOV	R6, R0

loc_3818				; CODE XREF: SensorsList+134j
		BL	sub_9BC0
		CMP	R0, #2
		BCS	loc_3832
		B	loc_3856
; ---------------------------------------------------------------------------

loc_3822				; CODE XREF: SensorsList+11Aj
		LDR	R0, [SP,#0x218+var_204]
		CMP	R6, R0
		BCS	loc_3846
		ADDS	R6, #1
		BL	sub_9BC0
		CMP	R0, #2
		BCC	loc_3856

loc_3832				; CODE XREF: SensorsList+13Ej
					; SensorsList+174j
		MOVS	R0, #0x31 ; '1'
		MOVS	R1, #0xF
		LSLS	R0, R0,	#4
		BL	beep
		MOVS	R1, #0xF
		MOVS	R0, #0
		BL	beep
		B	loc_3856
; ---------------------------------------------------------------------------

loc_3846				; CODE XREF: SensorsList+146j
		LDR	R0, [SP,#0x218+var_210]
		CMP	R6, R0
		BLS	loc_3856
		MOV	R6, R0
		BL	sub_9BC0
		CMP	R0, #2
		BCS	loc_3832

loc_3856				; CODE XREF: SensorsList+10Ej
					; SensorsList+128j ...
		LDR	R0, [R4]
		SUBS	R0, R0,	R7
		CMP	R0, R5
		BCC	loc_37E8
		B	loc_36F8
; ---------------------------------------------------------------------------

loc_3860				; CODE XREF: SensorsList+11Ej
					; SensorsList+122j ...
		LDR	R0, =byte_20000000
		MOVS	R1, #0
		STRB	R1, [R0,#(byte_20000002	- 0x20000000)]
		ADD	SP, SP,	#0x1FC
		MOV	R0, R1
		ADD	SP, SP,	#8
		POP	{R4-R7,PC}
; End of function SensorsList

; ---------------------------------------------------------------------------
		ALIGN 0x10
off_3870	DCD byte_20000000	; DATA XREF: SensorsList+4r
					; SensorsList+26r ...
aSensorsList	DCB "Sensors list",0    ; DATA XREF: SensorsList+1Co
		DCB 0, 0, 0
; _BYTE	*sensorsList2
sensorsList2	DCD sensorsArrayInRam	; DATA XREF: SensorsList+5Ar
aU_0		DCB "%u",0              ; DATA XREF: SensorsList+98o
		DCB    0
asc_388C	DCB "==>",0             ; DATA XREF: SensorsList+E4o
asc_3890	DCB "   ",0             ; DATA XREF: SensorsList+EEo
off_3894	DCD timer		; DATA XREF: SensorsList+F8r

; =============== S U B	R O U T	I N E =======================================


ElevonPage				; DATA XREF: ROM:0000D34Co
		PUSH	{R3-R7,LR}
		LDR	R4, =byte_20000000
		LDR	R0, [R4,#(usedModelPtr - 0x20000000)]
		ADDS	R0, #0x20 ; ' '
		LDRB	R0, [R0,#0x17]
		LSLS	R0, R0,	#0x1E
		BPL	loc_38D2
		BL	callSetupDMAandSend
		LDR	R0, =aElevon_0	; "Elevon"
		BL	displayPageHeader
		MOVS	R3, #0		; a4
		MOVS	R2, #0x20 ; ' '	; a3
		MOVS	R1, #0x40 ; '@'	; a2
		LDR	R0, =aVTailEnabled ; text
		BL	displayTextAt2
		BL	LCD_updateCALL

loc_38C0				; CODE XREF: ElevonPage+36j
		BL	getKeyCode
		CMP	R0, #0xA
		BEQ	loc_39C2
		CMP	R0, #0x19
		BEQ	loc_39C2
		CMP	R0, #0xB
		BNE	loc_38C0
		B	loc_39C2
; ---------------------------------------------------------------------------

loc_38D2				; CODE XREF: ElevonPage+Cj
		MOVS	R7, #0x63 ; 'c'
		MOVS	R5, #0
		MVNS	R7, R7
		MOVS	R6, #4

loc_38DA				; CODE XREF: ElevonPage+128j
					; ElevonPage:loc_39DAj	...
		BL	callSetupDMAandSend
		LDR	R0, =aElevon_0	; "Elevon"
		BL	displayPageHeader
		MOVS	R3, #0		; a4
		MOVS	R2, #0x10	; y
		MOVS	R1, #0x1C	; x
		LDR	R0, =aElevon	; text
		BL	displayTextAt
		LDR	R0, [R4,#(usedModelPtr - 0x20000000)]
		ADDS	R0, #0x20 ; ' '
		LDRB	R0, [R0,#0x17]
		LSLS	R0, R0,	#0x1D
		BPL	loc_38FE
		LDR	R0, =0xCA77
		B	loc_3900
; ---------------------------------------------------------------------------

loc_38FE				; CODE XREF: ElevonPage+60j
		LDR	R0, =aOff_0	; text

loc_3900				; CODE XREF: ElevonPage+64j
		MOVS	R3, #0		; a4
		MOVS	R2, #0x10	; y
		MOVS	R1, #0x5C ; '\'	; x
		BL	displayTextAt
		MOVS	R3, #0		; a4
		MOVS	R2, #0x18	; y
		MOVS	R1, #0x1C	; x
		ADR	R0, unk_3AD8	; text
		BL	displayTextAt
		LDR	R1, [R4,#(usedModelPtr - 0x20000000)]
		MOVS	R0, #0x4A ; 'J'
		LDRSB	R0, [R1,R0]	; sourceVal
		MOVS	R2, #4		; length
		LDR	R1, =a100_1	; "-100%"
		BL	intToString
		MOVS	R3, #0		; a4
		MOVS	R2, #0x18	; y
		MOVS	R1, #0x3C ; '<'	; x
		LDR	R0, =a100_1	; text
		BL	displayTextAt
		MOVS	R3, #0		; a4
		MOVS	R2, #0x20 ; ' '	; y
		MOVS	R1, #0x1C	; x
		ADR	R0, unk_3AE0	; text
		BL	displayTextAt
		LDR	R1, [R4,#(usedModelPtr - 0x20000000)]
		MOVS	R0, #0x4B ; 'K'
		LDRSB	R0, [R1,R0]	; sourceVal
		MOVS	R2, #4		; length
		LDR	R1, =a100_1	; "-100%"
		BL	intToString
		MOVS	R3, #0		; a4
		MOVS	R2, #0x20 ; ' '	; y
		MOVS	R1, #0x3C ; '<'	; x
		LDR	R0, =a100_1	; text
		BL	displayTextAt
		LSLS	R2, R5,	#3
		ADDS	R2, #0x10
		MOVS	R1, #0x14
		LDR	R0, =arrow_gfx
		BL	displayGFX
		LDR	R0, [R4,#(usedModelPtr - 0x20000000)]
		ADDS	R0, #0x20 ; ' '
		LDRB	R0, [R0,#0x17]
		LSLS	R0, R0,	#0x1D
		BMI	loc_3982
		MOVS	R3, #0		; a4
		MOVS	R2, #0x30 ; '0'	; y
		MOVS	R1, #0x18	; x
		ADR	R0, aCh1Ch1	; "CH1 <= CH1"
		BL	displayTextAt
		MOVS	R3, #0
		MOVS	R2, #0x38 ; '8'
		MOVS	R1, #0x18
		ADR	R0, aCh2Ch2	; "CH2 <= CH2"
		B	loc_3996
; ---------------------------------------------------------------------------

loc_3982				; CODE XREF: ElevonPage+D2j
		MOVS	R3, #0		; a4
		MOVS	R2, #0x30 ; '0'	; y
		MOVS	R1, #8		; x
		ADR	R0, aCh1Ch2Ch1	; "CH1 <= CH2+CH1"
		BL	displayTextAt
		MOVS	R3, #0		; a4
		MOVS	R2, #0x38 ; '8'	; y
		MOVS	R1, #8		; x
		ADR	R0, aCh2Ch2Ch1	; "CH2 <= CH2-CH1"

loc_3996				; CODE XREF: ElevonPage+E8j
		BL	displayTextAt
		BL	LCD_updateCALL
		BL	getKeyCode
		CMP	R0, #8
		BEQ	loc_39C6
		CMP	R0, #0x18
		BEQ	loc_39C6
		CMP	R0, #9
		BEQ	loc_3A18
		CMP	R0, #0x17
		BEQ	loc_3A18
		CMP	R0, #0x16
		BEQ	loc_3A66
		CMP	R0, #0xA
		BEQ	loc_3A92
		CMP	R0, #0x19
		BEQ	loc_3ABA
		CMP	R0, #0xB
		BNE	loc_38DA

loc_39C2				; CODE XREF: ElevonPage+2Ej
					; ElevonPage+32j ...
		MOVS	R0, #0
		POP	{R3-R7,PC}
; ---------------------------------------------------------------------------

loc_39C6				; CODE XREF: ElevonPage+10Cj
					; ElevonPage+110j
		CMP	R5, #0
		BEQ	loc_39EA
		CMP	R5, #1
		BEQ	loc_39FE
		LDR	R1, [R4,#0x2C]
		MOVS	R0, #0xB
		ADDS	R1, #0x40 ; '@'
		LDRSB	R0, [R1,R0]
		CMP	R0, R7
		BGT	loc_39DC

loc_39DA				; CODE XREF: ElevonPage+14Ej
					; ElevonPage+162j ...
		B	loc_38DA
; ---------------------------------------------------------------------------

loc_39DC				; CODE XREF: ElevonPage+140j
		SUBS	R0, #1
		STRB	R0, [R1,#0xB]
		BL	sub_9BC0
		CMP	R0, #2
		BCC	loc_39DA
		B	loc_3AA4
; ---------------------------------------------------------------------------

loc_39EA				; CODE XREF: ElevonPage+130j
		LDR	R0, [R4,#0x2C]
		ADDS	R0, #0x20 ; ' '
		LDRB	R1, [R0,#0x17]
		EORS	R1, R6
		STRB	R1, [R0,#0x17]
		BL	sub_9BC0
		CMP	R0, #2
		BCC	loc_39DA
		B	loc_3AA4
; ---------------------------------------------------------------------------

loc_39FE				; CODE XREF: ElevonPage+134j
		LDR	R0, [R4,#0x2C]
		MOVS	R1, #0xA
		ADDS	R0, #0x40 ; '@'
		LDRSB	R1, [R0,R1]
		CMP	R1, R7
		BLE	loc_39DA
		SUBS	R1, #1
		STRB	R1, [R0,#0xA]
		BL	sub_9BC0
		CMP	R0, #2
		BCC	loc_39DA
		B	loc_3AA4
; ---------------------------------------------------------------------------

loc_3A18				; CODE XREF: ElevonPage+114j
					; ElevonPage+118j
		CMP	R5, #0
		BEQ	loc_3A3A
		LDR	R1, [R4,#0x2C]
		CMP	R5, #1
		BEQ	loc_3A4E
		ADDS	R1, #0x40 ; '@'
		MOVS	R0, #0xB
		LDRSB	R0, [R1,R0]
		CMP	R0, #0x64 ; 'd'
		BGE	loc_39DA
		ADDS	R0, #1
		STRB	R0, [R1,#0xB]
		BL	sub_9BC0
		CMP	R0, #2
		BCC	loc_39DA
		B	loc_3AA4
; ---------------------------------------------------------------------------

loc_3A3A				; CODE XREF: ElevonPage+182j
		LDR	R0, [R4,#0x2C]
		ADDS	R0, #0x20 ; ' '
		LDRB	R1, [R0,#0x17]
		EORS	R1, R6
		STRB	R1, [R0,#0x17]
		BL	sub_9BC0
		CMP	R0, #2
		BCC	loc_39DA
		B	loc_3AA4
; ---------------------------------------------------------------------------

loc_3A4E				; CODE XREF: ElevonPage+188j
		ADDS	R1, #0x40 ; '@'
		MOVS	R0, #0xA
		LDRSB	R0, [R1,R0]
		CMP	R0, #0x64 ; 'd'
		BGE	loc_39DA
		ADDS	R0, #1
		STRB	R0, [R1,#0xA]
		BL	sub_9BC0
		CMP	R0, #2
		BCC	loc_39DA
		B	loc_3AA4
; ---------------------------------------------------------------------------

loc_3A66				; CODE XREF: ElevonPage+11Cj
		CMP	R5, #1
		BEQ	loc_3A80
		CMP	R5, #2
		BNE	loc_39DA
		LDR	R1, [R4,#(usedModelPtr - 0x20000000)]
		MOVS	R0, #0x32 ; '2'
		ADDS	R1, #0x40 ; '@'
		STRB	R0, [R1,#0xB]
		BL	sub_9BC0
		CMP	R0, #2
		BCC	loc_39DA
		B	loc_3AA4
; ---------------------------------------------------------------------------

loc_3A80				; CODE XREF: ElevonPage+1D0j
		LDR	R1, [R4,#(usedModelPtr - 0x20000000)]
		MOVS	R0, #0x32 ; '2'
		ADDS	R1, #0x40 ; '@'
		STRB	R0, [R1,#0xA]
		BL	sub_9BC0
		CMP	R0, #2
		BCC	loc_39DA
		B	loc_3AA4
; ---------------------------------------------------------------------------

loc_3A92				; CODE XREF: ElevonPage+120j
		CMP	R5, #2
		BCC	loc_3A9A
		MOVS	R5, #0
		B	loc_3A9C
; ---------------------------------------------------------------------------

loc_3A9A				; CODE XREF: ElevonPage+1FCj
		ADDS	R5, #1

loc_3A9C				; CODE XREF: ElevonPage+200j
		BL	sub_9BC0
		CMP	R0, #2
		BCC	loc_39DA

loc_3AA4				; CODE XREF: ElevonPage+150j
					; ElevonPage+164j ...
		MOVS	R0, #0x31 ; '1'
		MOVS	R1, #0xF
		LSLS	R0, R0,	#4
		BL	beep
		MOVS	R1, #0xF
		MOVS	R0, #0
		BL	beep
		B	loc_38DA
; ---------------------------------------------------------------------------
		B	loc_3ABA
; ---------------------------------------------------------------------------

loc_3ABA				; CODE XREF: ElevonPage+124j
					; ElevonPage+220j
		MOVS	R0, #1
		POP	{R3-R7,PC}
; End of function ElevonPage

; ---------------------------------------------------------------------------
		ALIGN 0x10
off_3AC0	DCD byte_20000000	; DATA XREF: ElevonPage+2r
off_3AC4	DCD aElevon_0		; DATA XREF: ElevonPage+12r
					; ElevonPage+46r
					; "Elevon"
; _BYTE	*off_3AC8
off_3AC8	DCD aVTailEnabled	; DATA XREF: ElevonPage+1Er
					; "V tail enabled"
; _BYTE	*off_3ACC
off_3ACC	DCD aElevon		; DATA XREF: ElevonPage+52r
					; "Elevon"
dword_3AD0	DCD 0xCA77		; DATA XREF: ElevonPage+62r
; _BYTE	*off_3AD4
off_3AD4	DCD aOff_0		; DATA XREF: ElevonPage:loc_38FEr
					; "Off"
unk_3AD8	DCB 0x43 ; C		; DATA XREF: ElevonPage+78o
		DCB 0x48, 0x31,	0
; char *targetText
targetText	DCD a100_1		; DATA XREF: ElevonPage+86r
					; ElevonPage+92r ...
					; "-100%"
unk_3AE0	DCB 0x43 ; C		; DATA XREF: ElevonPage+9Eo
		DCB 0x48, 0x32,	0
off_3AE4	DCD arrow_gfx		; DATA XREF: ElevonPage+C4r
aCh1Ch1		DCB "CH1 <= CH1",0      ; DATA XREF: ElevonPage+DAo
		DCB 0
aCh2Ch2		DCB "CH2 <= CH2",0      ; DATA XREF: ElevonPage+E6o
		DCB 0
aCh1Ch2Ch1	DCB "CH1 <= CH2+CH1",0  ; DATA XREF: ElevonPage+F0o
		DCB 0
aCh2Ch2Ch1	DCB "CH2 <= CH2-CH1",0  ; DATA XREF: ElevonPage+FCo
		DCB 0

; =============== S U B	R O U T	I N E =======================================


endpointsPage				; DATA XREF: ROM:0000D374o
					; ROM:0000D3CCo ...

var_38		= -0x38
var_34		= -0x34
targetText	= -0x2C
var_28		= -0x28
var_24		= -0x24

		PUSH	{R4-R7,LR}
		ADR	R2, a100100	; "100% 100%"
		LDR	R1, [R2,#(a100100+4 - 0x3C8C)] ; " 100%"
		LDR	R0, [R2]	; "100% 100%"
		SUB	SP, SP,	#0x24
		LDR	R2, [R2,#(a100100+8 - 0x3C8C)] ; "%"
		STR	R1, [SP,#0x38+var_28]
		STR	R2, [SP,#0x38+var_24]
		STR	R0, [SP,#0x38+targetText]
		ADR	R1, aCh1	; "Ch1"
		LDR	R0, [R1]	; "Ch1"
		LDR	R1, [R1,#(dword_3C9C - 0x3C98)]
		MOVS	R5, #0
		LDR	R7, =byte_20000000
		STR	R1, [SP,#0x38+var_34]
		STR	R0, [SP,#0x38+var_38]

loc_3B40				; CODE XREF: endpointsPage+C2j
					; endpointsPage+100j ...
		BL	callSetupDMAandSend
		LDR	R0, =aEndPoints_0 ; "End points"
		BL	displayPageHeader
		MOVS	R4, #0

loc_3B4C				; CODE XREF: endpointsPage+46j
		MOV	R0, R4
		ADDS	R0, #0x31 ; '1'
		MOV	R1, SP
		STRB	R0, [R1,#0x38+var_38+2]
		LSLS	R2, R4,	#3
		ADDS	R2, #0x10	; y
		MOVS	R3, #0		; a4
		MOVS	R1, #0xC	; x
		MOV	R0, SP		; text
		BL	displayTextAt
		ADDS	R4, #1
		CMP	R4, #6
		BCC	loc_3B4C
		MOVS	R4, #0

loc_3B6A				; CODE XREF: endpointsPage+80j
		LDR	R0, [R7,#(usedModelPtr - 0x20000000)]
		LSLS	R6, R4,	#1
		ADDS	R0, R6,	R0
		ADDS	R0, #0x40 ; '@'
		LDRB	R0, [R0,#0x12]	; sourceVal
		MOVS	R2, #3		; length
		ADD	R1, SP,	#0x38+targetText ; targetText
		BL	intToString
		LDR	R0, [R7,#(usedModelPtr - 0x20000000)]
		ADD	R1, SP,	#0x38+var_28
		ADDS	R0, R6,	R0
		ADDS	R0, #0x40 ; '@'
		LDRB	R0, [R0,#0x13]	; sourceVal
		MOVS	R2, #3		; length
		ADDS	R1, #1		; targetText
		BL	intToString
		LSLS	R2, R4,	#3
		ADDS	R2, #0x10	; y
		MOVS	R3, #0		; a4
		MOVS	R1, #0x2C ; ','	; x
		ADD	R0, SP,	#0x38+targetText ; text
		BL	displayTextAt
		ADDS	R4, #1
		CMP	R4, #6
		BCC	loc_3B6A
		LSRS	R4, R5,	#1
		LSLS	R2, R4,	#3
		ADDS	R2, #0x10
		LSLS	R0, R5,	#0x1F
		BEQ	loc_3BB0
		MOVS	R1, #0x4C ; 'L'
		B	loc_3BB2
; ---------------------------------------------------------------------------

loc_3BB0				; CODE XREF: endpointsPage+8Aj
		MOVS	R1, #0x24 ; '$'

loc_3BB2				; CODE XREF: endpointsPage+8Ej
		LDR	R0, =arrow_gfx
		BL	displayGFX
		BL	LCD_updateCALL
		LDR	R0, =(dword_1FFFFD7C+8)
		LSLS	R1, R4,	#2
		LDR	R2, [R0,R1]
		LDR	R1, =0xFFFFEC78
		CMP	R2, R1
		BGE	loc_3BCC
		LSRS	R5, R5,	#1
		LSLS	R5, R5,	#1

loc_3BCC				; CODE XREF: endpointsPage+A6j
		LSRS	R1, R5,	#1
		LSLS	R1, R1,	#2
		LDR	R1, [R0,R1]
		LDR	R0, =(byte_DA0+0x5E8)
		CMP	R1, R0
		BLE	loc_3BDC
		MOVS	R0, #1
		ORRS	R5, R0

loc_3BDC				; CODE XREF: endpointsPage+B6j
		BL	sub_2574
		CMP	R0, #0xFF
		BEQ	loc_3B40
		BL	getKeyCode
		LSLS	R1, R5,	#0x1F
		BEQ	loc_3BF8
		LSRS	R2, R5,	#1
		LDR	R1, [R7,#(usedModelPtr - 0x20000000)]
		LSLS	R2, R2,	#1
		ADDS	R1, R2,	R1
		ADDS	R1, #0x53 ; 'S'
		B	loc_3C02
; ---------------------------------------------------------------------------

loc_3BF8				; CODE XREF: endpointsPage+CAj
		LSRS	R2, R5,	#1
		LDR	R1, [R7,#(usedModelPtr - 0x20000000)]
		LSLS	R2, R2,	#1
		ADDS	R1, R2,	R1
		ADDS	R1, #0x52 ; 'R'

loc_3C02				; CODE XREF: endpointsPage+D6j
		CMP	R0, #9
		BEQ	loc_3C28
		CMP	R0, #0x17
		BEQ	loc_3C28
		CMP	R0, #8
		BEQ	loc_3C4E
		CMP	R0, #0x18
		BEQ	loc_3C4E
		CMP	R0, #0x16
		BEQ	loc_3C62
		CMP	R0, #0xA
		BEQ	loc_3C70
		CMP	R0, #0x19
		BEQ	loc_3C84
		CMP	R0, #0xB
		BNE	loc_3B40
		MOVS	R0, #0
		ADD	SP, SP,	#0x24
		POP	{R4-R7,PC}
; ---------------------------------------------------------------------------

loc_3C28				; CODE XREF: endpointsPage+E4j
					; endpointsPage+E8j
		LDRB	R0, [R1]
		CMP	R0, #0x78 ; 'x'
		BCS	loc_3B40
		ADDS	R0, #1
		STRB	R0, [R1]
		BL	sub_9BC0
		CMP	R0, #2
		BCC	loc_3B40

loc_3C3A				; CODE XREF: endpointsPage+140j
					; endpointsPage+14Ej ...
		MOVS	R0, #0x31 ; '1'
		MOVS	R1, #0xF
		LSLS	R0, R0,	#4
		BL	beep
		MOVS	R1, #0xF
		MOVS	R0, #0
		BL	beep

loc_3C4C				; CODE XREF: endpointsPage+132j
					; endpointsPage+13Ej ...
		B	loc_3B40
; ---------------------------------------------------------------------------

loc_3C4E				; CODE XREF: endpointsPage+ECj
					; endpointsPage+F0j
		LDRB	R0, [R1]
		CMP	R0, #0
		BEQ	loc_3C4C
		SUBS	R0, #1
		STRB	R0, [R1]
		BL	sub_9BC0
		CMP	R0, #2
		BCC	loc_3C4C
		B	loc_3C3A
; ---------------------------------------------------------------------------

loc_3C62				; CODE XREF: endpointsPage+F4j
		MOVS	R0, #0x64 ; 'd'
		STRB	R0, [R1]
		BL	sub_9BC0
		CMP	R0, #2
		BCC	loc_3C4C
		B	loc_3C3A
; ---------------------------------------------------------------------------

loc_3C70				; CODE XREF: endpointsPage+F8j
		CMP	R5, #0xA
		BCC	loc_3C78
		SUBS	R5, #0xA
		B	loc_3C7A
; ---------------------------------------------------------------------------

loc_3C78				; CODE XREF: endpointsPage+152j
		ADDS	R5, #2

loc_3C7A				; CODE XREF: endpointsPage+156j
		BL	sub_9BC0
		CMP	R0, #2
		BCC	loc_3C4C
		B	loc_3C3A
; ---------------------------------------------------------------------------

loc_3C84				; CODE XREF: endpointsPage+FCj
		MOVS	R0, #1
		ADD	SP, SP,	#0x24
		POP	{R4-R7,PC}
; End of function endpointsPage

; ---------------------------------------------------------------------------
		ALIGN 4
a100100		DCB "100% 100%",0       ; DATA XREF: endpointsPage+2o
					; endpointsPage+6r ...
		ALIGN 4
aCh1		DCB "Ch1",0             ; DATA XREF: endpointsPage+12o
					; endpointsPage+14r
dword_3C9C	DCD 0			; DATA XREF: endpointsPage+16r
off_3CA0	DCD byte_20000000	; DATA XREF: endpointsPage+1Ar
off_3CA4	DCD aEndPoints_0	; DATA XREF: endpointsPage+24r
					; "End points"
off_3CA8	DCD arrow_gfx		; DATA XREF: endpointsPage:loc_3BB2r
off_3CAC	DCD dword_1FFFFD7C+8	; DATA XREF: endpointsPage+9Cr
dword_3CB0	DCD 0xFFFFEC78		; DATA XREF: endpointsPage+A2r
off_3CB4	DCD byte_DA0+0x5E8	; DATA XREF: endpointsPage+B2r

; =============== S U B	R O U T	I N E =======================================


i2cMethod				; CODE XREF: readEeprom+22p
					; readEeprom+4Cp ...

arg_0		=  0

		PUSH	{R3-R7,LR}
		MOV	R6, R0
		LDR	R4, =byte_20000114
		LDR	R0, [SP,#0x18+arg_0]
		STR	R6, [R4,#(dword_20000120 - 0x20000114)]
		STR	R1, [R4,#(dword_20000124 - 0x20000114)]
		STRB	R3, [R4,#(byte_20000115	- 0x20000114)]
		MOVS	R7, #1
		STR	R0, [R4,#(dword_2000011C - 0x20000114)]
		LDR	R5, =0x40066000
		STRB	R7, [R4,#(byte_20000116	- 0x20000114)]
		CMP	R2, #0
		BEQ	loc_3CD6
		STRB	R7, [R4]
		B	loc_3D06
; ---------------------------------------------------------------------------

loc_3CD6				; CODE XREF: i2cMethod+18j
		LDRB	R0, [R5,#3]
		LSLS	R0, R0,	#0x1A
		BPL	loc_3CE6

loc_3CDC				; CODE XREF: i2cMethod+2Cj
		BL	sendPacketWithTimer
		LDRB	R0, [R5,#3]
		LSLS	R0, R0,	#0x1A
		BMI	loc_3CDC

loc_3CE6				; CODE XREF: i2cMethod+22j
		LDRB	R0, [R5,#2]
		MOVS	R1, #0x30 ; '0'
		ORRS	R0, R1
		STRB	R0, [R5,#2]
		LDRB	R0, [R6]
		LSLS	R0, R0,	#0x1F
		BEQ	loc_3CFE
		MOVS	R0, #2
		STRB	R0, [R4]
		MOVS	R0, #0
		STR	R0, [R4,#(dword_20000128 - 0x20000114)]
		B	loc_3D08
; ---------------------------------------------------------------------------

loc_3CFE				; CODE XREF: i2cMethod+3Aj
		STRB	R7, [R4]
		LDR	R0, [R4,#(dword_20000124 - 0x20000114)]
		ADDS	R0, #1
		STR	R0, [R4,#(dword_20000124 - 0x20000114)]

loc_3D06				; CODE XREF: i2cMethod+1Cj
		STR	R7, [R4,#(dword_20000128 - 0x20000114)]

loc_3D08				; CODE XREF: i2cMethod+44j
		LDRB	R0, [R5,#2]
		MOVS	R1, #0xF7 ; '÷'
		ANDS	R0, R1
		STRB	R0, [R5,#2]
		LDRB	R0, [R6]
		STRB	R0, [R5,#4]
		POP	{R3-R7,PC}
; End of function i2cMethod

; ---------------------------------------------------------------------------
		ALIGN 4
off_3D18	DCD byte_20000114	; DATA XREF: i2cMethod+4r
dword_3D1C	DCD 0x40066000		; DATA XREF: i2cMethod+12r

; =============== S U B	R O U T	I N E =======================================


kindOfInit2				; CODE XREF: main_screen+14p
		LDR	R1, =byte_20000114
		MOVS	R0, #0
		STRB	R0, [R1]
		LDR	R0, =0x40048000
		LDR	R1, [R0,#0x34]
		MOVS	R2, #0x40 ; '@'
		ORRS	R1, R2
		STR	R1, [R0,#0x34]
		MOVS	R0, #5
		LDR	R1, =0x4004D040
		LSLS	R0, R0,	#8
		STR	R0, [R1,#0x20]
		STR	R0, [R1,#0x24]
		LDR	R0, =0x40066000
		MOVS	R1, #0x12
		STRB	R1, [R0,#1]
		MOVS	R1, #0xC0 ; 'À'
		STRB	R1, [R0,#2]
		LDR	R0, =0xE000E400
		LDR	R1, [R0,#8]
		LSRS	R1, R1,	#8
		LSLS	R1, R1,	#8
		ADDS	R1, #0x40 ; '@'
		STR	R1, [R0,#8]
		LDR	R0, =0xE000E100
		LDR	R1, [R0]
		LSLS	R2, R2,	#2
		ORRS	R1, R2
		STR	R1, [R0]
		BX	LR
; End of function kindOfInit2

; ---------------------------------------------------------------------------
off_3D5C	DCD byte_20000114	; DATA XREF: kindOfInit2r
dword_3D60	DCD 0x40048000		; DATA XREF: kindOfInit2+6r
dword_3D64	DCD 0x4004D040		; DATA XREF: kindOfInit2+12r
dword_3D68	DCD 0x40066000		; DATA XREF: kindOfInit2+1Ar
dword_3D6C	DCD 0xE000E400		; DATA XREF: kindOfInit2+24r
dword_3D70	DCD 0xE000E100		; DATA XREF: kindOfInit2+30r

; =============== S U B	R O U T	I N E =======================================


flashMethod				; CODE XREF: FirmwareUpdatePage+D2p
		PUSH	{R4-R7}
		MOV	R12, R1
		CMP	R1, #0
		BEQ	loc_3E06
		MOVS	R5, #0x71 ; 'q'

loc_3D7E				; CODE XREF: flashMethod+90j
		MOVS	R1, #0x6000000
		LDR	R6, =0x40020000
		ORRS	R1, R0
		STR	R1, [R6,#4]
		LDRB	R4, [R2]
		LDRB	R3, [R2,#3]
		MOV	R1, R4
		LDRB	R4, [R2,#1]
		LSLS	R4, R4,	#8
		ORRS	R1, R4
		LDRB	R4, [R2,#2]
		LSLS	R4, R4,	#0x10
		ORRS	R1, R4
		LSLS	R3, R3,	#0x18
		ORRS	R1, R3
		MOVS	R3, #0x70 ; 'p'
		STR	R1, [R6,#8]
		STRB	R3, [R6]
		MOVS	R4, #0x80 ; ''
		STRB	R4, [R6]

loc_3DA8				; CODE XREF: flashMethod+38j
		LDRB	R1, [R6]
		LSLS	R1, R1,	#0x18
		BPL	loc_3DA8
		LDRB	R1, [R6]
		TST	R1, R5
		BEQ	loc_3DBA
		POP	{R4-R7}
		MOVS	R0, #2
		BX	LR
; ---------------------------------------------------------------------------

loc_3DBA				; CODE XREF: flashMethod+3Ej
		MOVS	R1, #0x2000000
		LDR	R6, =0x40020000
		ORRS	R1, R0
		STR	R1, [R6,#4]
		LSLS	R1, R6,	#7
		STR	R1, [R6,#8]
		LDRB	R1, [R2]
		MOV	R6, R1
		LDRB	R1, [R2,#1]
		LSLS	R1, R1,	#8
		ORRS	R6, R1
		LDRB	R1, [R2,#2]
		LSLS	R1, R1,	#0x10
		ORRS	R6, R1
		LDRB	R1, [R2,#3]
		LSLS	R1, R1,	#0x18
		ORRS	R6, R1
		LDR	R1, =0x40020000
		STR	R6, [R1,#0xC]
		STRB	R3, [R1]
		STRB	R4, [R1]

loc_3DE6				; CODE XREF: flashMethod+76j
		LDRB	R3, [R1]
		LSLS	R3, R3,	#0x18
		BPL	loc_3DE6
		LDRB	R1, [R1]
		TST	R1, R5
		BEQ	loc_3DF8
		POP	{R4-R7}
		MOVS	R0, #3
		BX	LR
; ---------------------------------------------------------------------------

loc_3DF8				; CODE XREF: flashMethod+7Cj
		MOV	R1, R12
		SUBS	R1, #4
		ADDS	R2, #4
		ADDS	R0, #4
		MOV	R12, R1
		CMP	R1, #0
		BNE	loc_3D7E

loc_3E06				; CODE XREF: flashMethod+6j
		POP	{R4-R7}
		MOVS	R0, #0
		BX	LR
; End of function flashMethod

; ---------------------------------------------------------------------------
dword_3E0C	DCD 0x40020000		; DATA XREF: flashMethod+Er
					; flashMethod+4Ar ...

; =============== S U B	R O U T	I N E =======================================


; signed int __fastcall	readEeprom(int target, __int16 offset, int len)
readEeprom				; CODE XREF: settingsValidation+14p
					; settingsValidation+64p ...

var_28		= -0x28
length		= -0x18

		PUSH	{R0-R2,R4-R7,LR}
		MOV	R5, R0
		SUB	SP, SP,	#8
		MOVS	R0, #0xA0 ; ' '
		STRB	R0, [R5]
		LSRS	R0, R1,	#8
		STRB	R0, [R5,#1]
		LDR	R4, =byte_20000114
		STRB	R1, [R5,#2]
		MOVS	R6, #0
		STRB	R6, [R4,#(byte_20000117	- 0x20000114)]
		LDR	R7, =(sub_25A4+1)
		MOV	R3, R6
		MOV	R2, R6
		MOVS	R1, #2
		MOV	R0, R5
		STR	R7, [SP,#0x28+var_28]
		BL	i2cMethod
		LDRB	R0, [R4,#(byte_20000117	- 0x20000114)]
		CMP	R0, #0
		BNE	loc_3E46

loc_3E3C				; CODE XREF: readEeprom+34j
		BL	sendPacketWithTimer
		LDRB	R0, [R4,#(byte_20000117	- 0x20000114)]
		CMP	R0, #0
		BEQ	loc_3E3C

loc_3E46				; CODE XREF: readEeprom+2Aj
		LDRB	R0, [R4,#(byte_20000118	- 0x20000114)]
		CMP	R0, #0
		BEQ	loc_3E78
		STRB	R6, [R4,#(byte_20000117	- 0x20000114)]
		MOVS	R0, #0xA1 ; '¡'
		STRB	R0, [R5]
		MOVS	R3, #0
		MOV	R2, R3
		STR	R7, [SP,#0x28+var_28]
		MOV	R0, R5
		LDR	R1, [SP,#0x28+length]
		BL	i2cMethod
		LDRB	R0, [R4,#(byte_20000117	- 0x20000114)]
		CMP	R0, #0
		BNE	loc_3E70

loc_3E66				; CODE XREF: readEeprom+5Ej
		BL	sendPacketWithTimer
		LDRB	R0, [R4,#(byte_20000117	- 0x20000114)]
		CMP	R0, #0
		BEQ	loc_3E66

loc_3E70				; CODE XREF: readEeprom+54j
		LDRB	R0, [R4,#(byte_20000118	- 0x20000114)]
		CMP	R0, #0
		BEQ	loc_3E78
		MOVS	R0, #1

loc_3E78				; CODE XREF: readEeprom+3Aj
					; readEeprom+64j
		ADD	SP, SP,	#0x14
		POP	{R4-R7,PC}
; End of function readEeprom

; ---------------------------------------------------------------------------
off_3E7C	DCD byte_20000114	; DATA XREF: readEeprom+Er
off_3E80	DCD sub_25A4+1		; DATA XREF: readEeprom+16r

; =============== S U B	R O U T	I N E =======================================


saveEepromData				; CODE XREF: FactoryReset+A0p
					; FactResConfirm+A0p ...

var_28		= -0x28
var_24		= -0x24
var_23		= -0x23
var_22		= -0x22
var_20		= -0x20
var_18		= -0x18

		PUSH	{R0-R2,R4-R7,LR}
		SUB	SP, SP,	#8
		LDR	R0, [SP,#0x28+var_18]
		MOV	R5, R1
		CMP	R0, #0
		BEQ	loc_3F4C
		LDR	R4, =byte_20000114

loc_3E92				; CODE XREF: saveEepromData+C6j
		MOV	R0, R5
		ADDS	R0, #0x40 ; '@'
		LSRS	R0, R0,	#6
		LSLS	R0, R0,	#6
		SUBS	R6, R0,	R5
		LDR	R0, [SP,#0x28+var_18]
		CMP	R6, R0
		BLS	loc_3EA4
		MOV	R6, R0

loc_3EA4				; CODE XREF: saveEepromData+1Cj
		MOVS	R1, #0xA0 ; ' '
		MOV	R0, SP
		STRB	R1, [R0,#0x28+var_24]
		LSRS	R1, R5,	#8
		STRB	R1, [R0,#0x28+var_23]
		STRB	R5, [R0,#0x28+var_22]
		MOVS	R7, #0
		STRB	R7, [R4,#(byte_20000117	- 0x20000114)]
		LDR	R0, =(sub_25A4+1)
		STR	R0, [SP,#0x28+var_28]
		MOVS	R3, #1
		MOV	R2, R7
		MOVS	R1, #2
		ADD	R0, SP,	#0x28+var_24
		BL	i2cMethod
		LDRB	R0, [R4,#(byte_20000117	- 0x20000114)]
		CMP	R0, #0
		BNE	loc_3ED4

loc_3ECA				; CODE XREF: saveEepromData+4Ej
		BL	sendPacketWithTimer
		LDRB	R0, [R4,#(byte_20000117	- 0x20000114)]
		CMP	R0, #0
		BEQ	loc_3ECA

loc_3ED4				; CODE XREF: saveEepromData+44j
		LDRB	R0, [R4,#(byte_20000118	- 0x20000114)]
		CMP	R0, #0
		BEQ	loc_3F4E
		MOVS	R0, #0
		STRB	R0, [R4,#(byte_20000117	- 0x20000114)]
		LDR	R0, =(sub_25A4+1)
		STR	R0, [SP,#0x28+var_28]
		MOVS	R3, #0
		MOVS	R2, #1
		MOV	R1, R6
		LDR	R0, [SP,#0x28+var_20]
		BL	i2cMethod
		LDRB	R0, [R4,#(byte_20000117	- 0x20000114)]
		CMP	R0, #0
		BNE	loc_3EFE

loc_3EF4				; CODE XREF: saveEepromData+78j
		BL	sendPacketWithTimer
		LDRB	R0, [R4,#(byte_20000117	- 0x20000114)]
		CMP	R0, #0
		BEQ	loc_3EF4

loc_3EFE				; CODE XREF: saveEepromData+6Ej
		LDRB	R0, [R4,#(byte_20000118	- 0x20000114)]
		CMP	R0, #0
		BEQ	loc_3F4E
		LDR	R0, =0xE000E000
		LDR	R1, [R0,#0x18]
		LSLS	R7, R1,	#8

loc_3F0A				; CODE XREF: saveEepromData+E6j
		MOVS	R0, #0
		STRB	R0, [R4,#(byte_20000117	- 0x20000114)]
		LDR	R0, =(sub_25A4+1)
		MOVS	R3, #0
		STR	R0, [SP,#0x28+var_28]
		MOV	R2, R3
		MOVS	R1, #2
		ADD	R0, SP,	#0x28+var_24
		BL	i2cMethod
		LDRB	R0, [R4,#(byte_20000117	- 0x20000114)]
		CMP	R0, #0
		BNE	loc_3F2E

loc_3F24				; CODE XREF: saveEepromData+A8j
		BL	sendPacketWithTimer
		LDRB	R0, [R4,#(byte_20000117	- 0x20000114)]
		CMP	R0, #0
		BEQ	loc_3F24

loc_3F2E				; CODE XREF: saveEepromData+9Ej
		LDRB	R0, [R4,#(byte_20000118	- 0x20000114)]
		CMP	R0, #0
		BEQ	loc_3F52
		LDR	R0, [SP,#0x28+var_20]
		ADDS	R5, R5,	R6
		ADDS	R0, R0,	R6
		STR	R0, [SP,#0x28+var_20]
		LDR	R0, [SP,#0x28+var_18]
		SUBS	R0, R0,	R6
		STR	R0, [SP,#0x28+var_18]
		BL	sendPacketWithTimer
		LDR	R0, [SP,#0x28+var_18]
		CMP	R0, #0
		BNE	loc_3E92

loc_3F4C				; CODE XREF: saveEepromData+Aj
		MOVS	R0, #1

loc_3F4E				; CODE XREF: saveEepromData+54j
					; saveEepromData+7Ej
		ADD	SP, SP,	#0x14
		POP	{R4-R7,PC}
; ---------------------------------------------------------------------------

loc_3F52				; CODE XREF: saveEepromData+AEj
		LDR	R0, =0xE000E000
		LDR	R0, [R0,#0x18]
		LSLS	R0, R0,	#8
		SUBS	R1, R7,	R0
		LDR	R0, =0x3A9800
		CMP	R1, R0
		BLS	loc_3F66
		MOVS	R0, #0
		ADD	SP, SP,	#0x14
		POP	{R4-R7,PC}
; ---------------------------------------------------------------------------

loc_3F66				; CODE XREF: saveEepromData+DAj
		BL	sendPacketWithTimer
		B	loc_3F0A
; End of function saveEepromData

; ---------------------------------------------------------------------------
off_3F6C	DCD byte_20000114	; DATA XREF: saveEepromData+Cr
off_3F70	DCD sub_25A4+1		; DATA XREF: saveEepromData+30r
					; saveEepromData+5Ar ...
dword_3F74	DCD 0xE000E000		; DATA XREF: saveEepromData+80r
					; saveEepromData:loc_3F52r
dword_3F78	DCD 0x3A9800		; DATA XREF: saveEepromData+D6r

; =============== S U B	R O U T	I N E =======================================


FactoryReset				; DATA XREF: ROM:0000D4F4o
		PUSH	{R4-R7,LR}
		SUB	SP, SP,	#0x44
		BL	callSetupDMAandSend
		LDR	R0, =0xCCEB
		BL	displayPageHeader
		MOVS	R3, #0		; a4
		MOVS	R2, #0x10	; a3
		MOVS	R1, #0x40 ; '@'	; a2
		LDR	R0, =aThisWillRese_1 ; text
		BL	displayTextAt2
		MOVS	R3, #0		; a4
		MOVS	R2, #0x18	; a3
		MOVS	R1, #0x40 ; '@'	; a2
		LDR	R0, =aAllParameters ; text
		BL	displayTextAt2
		MOVS	R3, #0		; a4
		MOVS	R2, #0x20 ; ' '	; a3
		MOVS	R1, #0x40 ; '@'	; a2
		LDR	R0, =aToTheir_0	; text
		BL	displayTextAt2
		MOVS	R3, #0		; a4
		MOVS	R2, #0x28 ; '('	; a3
		MOVS	R1, #0x40 ; '@'	; a2
		LDR	R0, =aFactoryDefault ; text
		BL	displayTextAt2
		MOVS	R3, #0		; a4
		MOVS	R2, #0x30 ; '0'	; a3
		MOVS	R1, #0x40 ; '@'	; a2
		LDR	R0, =aPressOk_0	; text
		BL	displayTextAt2
		MOVS	R3, #0		; a4
		MOVS	R2, #0x38 ; '8'	; a3
		MOVS	R1, #0x40 ; '@'	; a2
		LDR	R0, =aToProceed	; text
		BL	displayTextAt2
		BL	LCD_updateCALL

loc_3FD6				; CODE XREF: FactoryReset+64j
		BL	getKeyCode
		CMP	R0, #0xB
		BEQ	loc_4038
		CMP	R0, #0xA
		BNE	loc_3FD6
		BL	sub_23F4
		CMP	R0, #0
		BEQ	loc_4034
		BL	setFactVal
		LDR	R0, =rxsettings
		MOVS	R2, #0x92 ; ''
		LDRB	R1, [R0,#(currentModel - 0x200002A4)]
		MULS	R1, R2
		ADDS	R0, R1,	R0
		LDR	R1, =byte_20000000
		ADDS	R0, #0xA
		STR	R0, [R1,#(usedModelPtr - 0x20000000)]
		MOVS	R2, #0xFF	; a3
		MOVS	R1, #0x40 ; '@'	; numbButesToSend
		MOV	R0, SP		; targetAddress
		BL	setupDMA
		BL	someSPImethod
		LDR	R7, =dword_B74
		MOVS	R6, #0

loc_4010				; CODE XREF: FactoryReset+B4j
		LSLS	R5, R6,	#0xC
		ADDS	R5, #0x40 ; '@'
		MOV	R4, R5

loc_4016				; CODE XREF: FactoryReset+AAj
		MOVS	R2, #0x40 ; '@'
		MOV	R1, R4
		MOV	R0, SP
		BL	saveEepromData
		ADDS	R4, #0x40 ; '@'
		SUBS	R0, R4,	R5
		CMP	R0, R7
		BCC	loc_4016
		BL	someSPImethod
		ADDS	R6, #1
		CMP	R6, #4
		BCC	loc_4010
		MOVS	R0, #1

loc_4034				; CODE XREF: FactoryReset+6Cj
		ADD	SP, SP,	#0x44
		POP	{R4-R7,PC}
; ---------------------------------------------------------------------------

loc_4038				; CODE XREF: FactoryReset+60j
		MOVS	R0, #0
		ADD	SP, SP,	#0x44
		POP	{R4-R7,PC}
; End of function FactoryReset

; ---------------------------------------------------------------------------
		ALIGN 0x10
dword_4040	DCD 0xCCEB		; DATA XREF: FactoryReset+8r
; _BYTE	*off_4044
off_4044	DCD aThisWillRese_1	; DATA XREF: FactoryReset+14r
					; "This will reset"
; _BYTE	*off_4048
off_4048	DCD aAllParameters	; DATA XREF: FactoryReset+20r
					; "all parameters"
; _BYTE	*off_404C
off_404C	DCD aToTheir_0		; DATA XREF: FactoryReset+2Cr
					; "to their"
; _BYTE	*off_4050
off_4050	DCD aFactoryDefault	; DATA XREF: FactoryReset+38r
					; "factory default"
; _BYTE	*off_4054
off_4054	DCD aPressOk_0		; DATA XREF: FactoryReset+44r
					; "Press \"OK\""
; _BYTE	*off_4058
off_4058	DCD aToProceed		; DATA XREF: FactoryReset+50r
					; "to proceed"
varRXsettings	DCD rxsettings		; DATA XREF: FactoryReset+72r
off_4060	DCD byte_20000000	; DATA XREF: FactoryReset+7Cr
off_4064	DCD dword_B74		; DATA XREF: FactoryReset+90r

; =============== S U B	R O U T	I N E =======================================


FailsafeMEnu

var_40		= -0x40
var_3C		= -0x3C
var_38		= -0x38
var_34		= -0x34
text		= -0x30
var_2C		= -0x2C

		PUSH	{R4-R7,LR}
		SUB	SP, SP,	#0x2C
		MOVS	R0, #0
		LDR	R5, =rxsettings
		STR	R0, [SP,#0x40+var_34]

loc_4072				; CODE XREF: FailsafeMEnu:loc_4234j
					; FailsafeMEnu+1F8j ...
		BL	callSetupDMAandSend
		ADR	R0, aFailsafe	; "Failsafe"
		BL	displayPageHeader
		MOVS	R7, #8
		MOVS	R4, #0

loc_4080				; CODE XREF: FailsafeMEnu+178j
		ADR	R2, aChannel1	; "Channel1"
		LDR	R1, [R2,#(aChannel1+4 -	0x43AC)] ; "nel1"
		LDR	R0, [R2]	; "Channel1"
		LDR	R2, [R2,#(aChannel1+8 -	0x43AC)] ; ""
		STR	R0, [SP,#0x40+var_40]
		STR	R2, [SP,#0x40+var_38]
		STR	R1, [SP,#0x40+var_3C]
		MOV	R0, R4
		ADDS	R0, #0x31 ; '1'
		MOV	R1, SP
		STRB	R0, [R1,#0x40+var_3C+3]
		MOVS	R3, #0		; a4
		MOV	R2, R7		; y
		MOVS	R1, #8		; x
		MOV	R0, SP		; text
		BL	displayTextAt
		LDRB	R0, [R5,#(currentModel - 0x200002A4)]
		MOVS	R1, #0x92 ; ''
		MULS	R0, R1
		ADDS	R0, R0,	R5
		LSLS	R1, R4,	#1
		ADDS	R0, R0,	R1
		ADDS	R0, #0x71 ; 'q'
		LDRB	R2, [R0,#3]
		LDRB	R1, [R0,#2]
		LSLS	R0, R2,	#0x18
		ASRS	R0, R0,	#0x10
		ORRS	R0, R1
		LDR	R1, =0x7FFF
		CMP	R0, R1
		BNE	loc_40CA
		MOVS	R3, #0
		MOV	R2, R7
		MOVS	R1, #0x58 ; 'X'
		ADR	R0, unk_43BC
		B	loc_41D4
; ---------------------------------------------------------------------------

loc_40CA				; CODE XREF: FailsafeMEnu+56j
		ADR	R2, a100	; "-100%"
		LDR	R1, [R2]	; "-100%"
		LDR	R2, [R2,#(a100+4 - 0x43C0)] ; "%"
		STR	R1, [SP,#0x40+text]
		STR	R2, [SP,#0x40+var_2C]
		MOVS	R1, #0x64 ; 'd'
		BL	div__0
		SXTH	R6, R0
		CMP	R6, #0
		BGE	loc_416E
		MOVS	R0, #0x2D ; '-'
		MOV	R1, SP
		STRB	R0, [R1,#0x40+text]
		NEGS	R0, R6
		SXTH	R6, R0
		MOV	R0, R6
		ADDS	R0, #0x63 ; 'c'
		CMP	R0, #0xC7 ; 'Ç'
		BCC	loc_4128
		MOVS	R1, #0x64 ; 'd'
		MOV	R0, R6
		BL	div_
		MOV	R1, R0
		ADDS	R1, #0x30 ; '0'
		MOV	R0, SP
		STRB	R1, [R0,#0x40+text+1]
		MOVS	R1, #0xA
		MOV	R0, R6
		BL	div_
		MOV	R6, R1
		MOVS	R1, #0xA
		BL	div_
		ADDS	R1, #0x30 ; '0'
		MOV	R0, SP
		STRB	R1, [R0,#0x40+text+2]
		MOV	R1, R6
		ADDS	R1, #0x30 ; '0'
		STRB	R1, [R0,#0x40+text+3]
		MOVS	R1, #0x25 ; '%'
		STRB	R1, [R0,#0x40+var_2C]
		MOVS	R1, #0
		STRB	R1, [R0,#0x40+var_2C+1]
		B	loc_41CC
; ---------------------------------------------------------------------------

loc_4128				; CODE XREF: FailsafeMEnu+88j
		MOV	R0, R6
		ADDS	R0, #9
		CMP	R0, #0x13
		BCC	loc_4156

loc_4130				; CODE XREF: FailsafeMEnu+11Ej
		MOVS	R1, #0xA
		MOV	R0, R6
		BL	div_
		MOV	R6, R1
		MOVS	R1, #0xA
		BL	div_
		ADDS	R1, #0x30 ; '0'
		MOV	R0, SP
		STRB	R1, [R0,#0x40+text+1]
		MOV	R1, R6
		ADDS	R1, #0x30 ; '0'
		STRB	R1, [R0,#0x40+text+2]
		MOVS	R1, #0x25 ; '%'
		STRB	R1, [R0,#0x40+text+3]
		MOVS	R1, #0
		STRB	R1, [R0,#0x40+var_2C]
		B	loc_41CC
; ---------------------------------------------------------------------------

loc_4156				; CODE XREF: FailsafeMEnu+C6j
		MOVS	R1, #0xA
		MOV	R0, R6
		BL	div_
		ADDS	R1, #0x30 ; '0'
		MOV	R0, SP
		STRB	R1, [R0,#0x40+text+1]
		MOVS	R1, #0x25 ; '%'
		STRB	R1, [R0,#0x40+text+2]
		MOVS	R1, #0
		STRB	R1, [R0,#0x40+text+3]
		B	loc_41CC
; ---------------------------------------------------------------------------

loc_416E				; CODE XREF: FailsafeMEnu+76j
		MOV	R0, R6
		ADDS	R0, #0x63 ; 'c'
		CMP	R0, #0xC7 ; 'Ç'
		BCC	loc_4188
		MOVS	R1, #0x64 ; 'd'
		MOV	R0, R6
		BL	div_
		MOV	R1, R0
		ADDS	R1, #0x30 ; '0'
		MOV	R0, SP
		STRB	R1, [R0,#0x40+text]
		B	loc_4130
; ---------------------------------------------------------------------------

loc_4188				; CODE XREF: FailsafeMEnu+10Cj
		MOV	R0, R6
		ADDS	R0, #9
		CMP	R0, #0x13
		BCC	loc_41B6
		MOVS	R1, #0xA
		MOV	R0, R6
		BL	div_
		MOV	R6, R1
		MOVS	R1, #0xA
		BL	div_
		ADDS	R1, #0x30 ; '0'
		MOV	R0, SP
		STRB	R1, [R0,#0x40+text]
		MOV	R1, R6
		ADDS	R1, #0x30 ; '0'
		STRB	R1, [R0,#0x40+text+1]
		MOVS	R1, #0x25 ; '%'
		STRB	R1, [R0,#0x40+text+2]
		MOVS	R1, #0
		STRB	R1, [R0,#0x40+text+3]
		B	loc_41CC
; ---------------------------------------------------------------------------

loc_41B6				; CODE XREF: FailsafeMEnu+126j
		MOVS	R1, #0xA
		MOV	R0, R6
		BL	div_
		ADDS	R1, #0x30 ; '0'
		MOV	R2, SP
		STRB	R1, [R2,#0x40+text]
		MOVS	R0, #0x25 ; '%'
		STRB	R0, [R2,#0x40+text+1]
		MOVS	R0, #0
		STRB	R0, [R2,#0x40+text+2]

loc_41CC				; CODE XREF: FailsafeMEnu+BEj
					; FailsafeMEnu+ECj ...
		MOVS	R3, #0		; a4
		MOV	R2, R7		; y
		MOVS	R1, #0x58 ; 'X'	; x
		ADD	R0, SP,	#0x40+text ; text

loc_41D4				; CODE XREF: FailsafeMEnu+60j
		BL	displayTextAt
		ADDS	R7, #8
		ADDS	R4, #1
		CMP	R4, #6
		BCS	loc_41E2
		B	loc_4080
; ---------------------------------------------------------------------------

loc_41E2				; CODE XREF: FailsafeMEnu+176j
		MOVS	R3, #0		; a4
		MOV	R2, R7		; y
		MOVS	R1, #8		; x
		ADR	R0, aAllChannels ; "All channels"
		BL	displayTextAt
		MOVS	R0, #1
		STR	R0, [SP,#0x40+var_40]
		MOVS	R3, #0x3F ; '?'
		MOVS	R2, #7
		MOVS	R1, #0xC
		MOVS	R0, #0
		BL	fillRegion
		LDR	R0, [SP,#0x40+var_34]
		MOVS	R1, #0
		LSLS	R2, R0,	#3
		ADDS	R2, #8
		LDR	R0, =arrow_gfx
		BL	displayGFX
		BL	LCD_updateCALL
		BL	getKeyCode
		CMP	R0, #9
		BEQ	loc_423C
		CMP	R0, #0x17
		BEQ	loc_423C
		CMP	R0, #8
		BEQ	loc_4262
		CMP	R0, #0x18
		BEQ	loc_4262
		CMP	R0, #0xA
		BEQ	loc_4276
		CMP	R0, #0x16
		BEQ	loc_4328
		CMP	R0, #0x19
		BEQ	loc_432A
		CMP	R0, #0xB
		BEQ	loc_4236

loc_4234				; CODE XREF: FailsafeMEnu+1D8j
					; FailsafeMEnu+1E4j ...
		B	loc_4072
; ---------------------------------------------------------------------------

loc_4236				; CODE XREF: FailsafeMEnu+1CAj
		MOVS	R0, #0
		ADD	SP, SP,	#0x2C
		POP	{R4-R7,PC}
; ---------------------------------------------------------------------------

loc_423C				; CODE XREF: FailsafeMEnu+1AEj
					; FailsafeMEnu+1B2j
		LDR	R0, [SP,#0x40+var_34]
		CMP	R0, #0
		BEQ	loc_4234
		SUBS	R0, #1
		STR	R0, [SP,#0x40+var_34]
		BL	sub_9BC0
		CMP	R0, #2
		BCC	loc_4234

loc_424E				; CODE XREF: FailsafeMEnu+20Cj
		MOVS	R0, #0x31 ; '1'
		MOVS	R1, #0xF
		LSLS	R0, R0,	#4
		BL	beep
		MOVS	R1, #0xF
		MOVS	R0, #0
		BL	beep
		B	loc_4072
; ---------------------------------------------------------------------------

loc_4262				; CODE XREF: FailsafeMEnu+1B6j
					; FailsafeMEnu+1BAj
		LDR	R0, [SP,#0x40+var_34]
		CMP	R0, #6
		BCS	loc_4234
		ADDS	R0, #1
		STR	R0, [SP,#0x40+var_34]
		BL	sub_9BC0
		CMP	R0, #2
		BCC	loc_4234
		B	loc_424E
; ---------------------------------------------------------------------------

loc_4276				; CODE XREF: FailsafeMEnu+1BEj
		BL	sub_9BC0
		CMP	R0, #2
		BCC	loc_4290
		MOVS	R0, #0x31 ; '1'
		MOVS	R1, #0xF
		LSLS	R0, R0,	#4
		BL	beep
		MOVS	R1, #0xF
		MOVS	R0, #0
		BL	beep

loc_4290				; CODE XREF: FailsafeMEnu+214j
		LDR	R0, [SP,#0x40+var_34]
		CMP	R0, #6
		BCS	loc_429C
		BL	failsafeOnOff

loc_429A				; CODE XREF: FailsafeMEnu+2FEj
		B	loc_4072
; ---------------------------------------------------------------------------

loc_429C				; CODE XREF: FailsafeMEnu+22Cj
		LDRB	R1, [R5,#(currentModel - 0x200002A4)]
		MOVS	R2, #0x92 ; ''
		MOV	R0, R5
		MULS	R1, R2
		ADDS	R2, R1,	R0
		ADDS	R2, #0x71 ; 'q'
		LDRB	R3, [R2,#3]
		LDRB	R1, [R2,#2]
		LSLS	R3, R3,	#0x18
		ASRS	R3, R3,	#0x10
		ORRS	R3, R1
		LDR	R1, =0x7FFF
		CMP	R3, R1
		BEQ	loc_42C2
		LDR	R3, =dword_1FFFFDE0
		LDR	R3, [R3]
		STRB	R3, [R2,#2]
		LSRS	R3, R3,	#8
		STRB	R3, [R2,#3]

loc_42C2				; CODE XREF: FailsafeMEnu+24Ej
		LDRB	R2, [R0,#(currentModel - 0x200002A4)]
		MOVS	R3, #0x92 ; ''
		MULS	R2, R3
		ADDS	R2, R2,	R0
		ADDS	R2, #0x71 ; 'q'
		LDRB	R3, [R2,#5]
		LDRB	R4, [R2,#4]
		LSLS	R3, R3,	#0x18
		ASRS	R3, R3,	#0x10
		ORRS	R3, R4
		CMP	R3, R1
		BEQ	loc_42E4
		LDR	R3, =dword_1FFFFDE0
		LDR	R3, [R3,#(dword_1FFFFDE4 - 0x1FFFFDE0)]
		STRB	R3, [R2,#4]
		LSRS	R3, R3,	#8
		STRB	R3, [R2,#5]

loc_42E4				; CODE XREF: FailsafeMEnu+270j
		LDRB	R2, [R0,#(currentModel - 0x200002A4)]
		MOVS	R3, #0x92 ; ''
		MULS	R2, R3
		ADDS	R2, R2,	R0
		ADDS	R2, #0x71 ; 'q'
		LDRB	R3, [R2,#7]
		LDRB	R4, [R2,#6]
		LSLS	R3, R3,	#0x18
		ASRS	R3, R3,	#0x10
		ORRS	R3, R4
		CMP	R3, R1
		BEQ	loc_4306
		LDR	R3, =dword_1FFFFDE0
		LDR	R3, [R3,#(dword_1FFFFDE8 - 0x1FFFFDE0)]
		STRB	R3, [R2,#6]
		LSRS	R3, R3,	#8
		STRB	R3, [R2,#7]

loc_4306				; CODE XREF: FailsafeMEnu+292j
		LDRB	R2, [R0,#(currentModel - 0x200002A4)]
		MOVS	R3, #0x92 ; ''
		MULS	R2, R3
		ADDS	R2, R2,	R0
		ADDS	R2, #0x71 ; 'q'
		LDRB	R3, [R2,#9]
		LDRB	R4, [R2,#8]
		LSLS	R3, R3,	#0x18
		ASRS	R3, R3,	#0x10
		ORRS	R3, R4
		CMP	R3, R1
		BEQ	loc_432E
		LDR	R3, =dword_1FFFFDE0
		LDR	R3, [R3,#(dword_1FFFFDEC - 0x1FFFFDE0)]
		STRB	R3, [R2,#8]
		LSRS	R3, R3,	#8
		B	loc_432C
; ---------------------------------------------------------------------------

loc_4328				; CODE XREF: FailsafeMEnu+1C2j
		B	loc_4374
; ---------------------------------------------------------------------------

loc_432A				; CODE XREF: FailsafeMEnu+1C6j
		B	loc_4394
; ---------------------------------------------------------------------------

loc_432C				; CODE XREF: FailsafeMEnu+2BEj
		STRB	R3, [R2,#9]

loc_432E				; CODE XREF: FailsafeMEnu+2B4j
		LDRB	R2, [R0,#(currentModel - 0x200002A4)]
		MOVS	R3, #0x92 ; ''
		MULS	R2, R3
		ADDS	R2, R2,	R0
		ADDS	R2, #0x71 ; 'q'
		LDRB	R3, [R2,#0xB]
		LDRB	R4, [R2,#0xA]
		LSLS	R3, R3,	#0x18
		ASRS	R3, R3,	#0x10
		ORRS	R3, R4
		CMP	R3, R1
		BEQ	loc_4350
		LDR	R3, =dword_1FFFFDE0
		LDR	R3, [R3,#(dword_1FFFFDF0 - 0x1FFFFDE0)]
		STRB	R3, [R2,#0xA]
		LSRS	R3, R3,	#8
		STRB	R3, [R2,#0xB]

loc_4350				; CODE XREF: FailsafeMEnu+2DCj
		LDRB	R2, [R0,#(currentModel - 0x200002A4)]
		MOVS	R3, #0x92 ; ''
		MULS	R2, R3
		ADDS	R0, R2,	R5
		ADDS	R0, #0x71 ; 'q'
		LDRB	R2, [R0,#0xD]
		LDRB	R3, [R0,#0xC]
		LSLS	R2, R2,	#0x18
		ASRS	R2, R2,	#0x10
		ORRS	R2, R3
		CMP	R2, R1
		BEQ	loc_429A
		LDR	R1, =dword_1FFFFDE0
		LDR	R1, [R1,#(dword_1FFFFDF4 - 0x1FFFFDE0)]
		STRB	R1, [R0,#0xC]
		LSRS	R1, R1,	#8
		STRB	R1, [R0,#0xD]
		B	loc_4072
; ---------------------------------------------------------------------------

loc_4374				; CODE XREF: FailsafeMEnu:loc_4328j
		BL	sub_9BC0
		CMP	R0, #2
		BCC	loc_438E
		MOVS	R0, #0x31 ; '1'
		MOVS	R1, #0xF
		LSLS	R0, R0,	#4
		BL	beep
		MOVS	R1, #0xF
		MOVS	R0, #0
		BL	beep

loc_438E				; CODE XREF: FailsafeMEnu+312j
		BL	FailsafeReset
		B	loc_4072
; ---------------------------------------------------------------------------

loc_4394				; CODE XREF: FailsafeMEnu:loc_432Aj
		MOVS	R0, #1
		ADD	SP, SP,	#0x2C
		POP	{R4-R7,PC}
; End of function FailsafeMEnu

; ---------------------------------------------------------------------------
		ALIGN 4
varrxsettings_1	DCD rxsettings		; DATA XREF: FailsafeMEnu+6r
aFailsafe	DCB "Failsafe",0        ; DATA XREF: FailsafeMEnu+Eo
		DCB 0, 0, 0
aChannel1	DCB "Channel1",0        ; DATA XREF: FailsafeMEnu:loc_4080o
					; FailsafeMEnu+1Cr ...
		DCB 0, 0, 0
dword_43B8	DCD 0x7FFF		; DATA XREF: FailsafeMEnu+52r
					; FailsafeMEnu+24Ar
unk_43BC	DCB 0x4F ; O		; DATA XREF: FailsafeMEnu+5Eo
		DCB 0x46, 0x46,	0
a100		DCB "-100%",0           ; DATA XREF: FailsafeMEnu:loc_40CAo
					; FailsafeMEnu+64r ...
		ALIGN 4
aAllChannels	DCB "All channels",0    ; DATA XREF: FailsafeMEnu+180o
		DCB 0, 0, 0
off_43D8	DCD arrow_gfx		; DATA XREF: FailsafeMEnu+19Er
off_43DC	DCD dword_1FFFFDE0	; DATA XREF: FailsafeMEnu+250r
					; FailsafeMEnu+272r ...

; =============== S U B	R O U T	I N E =======================================


FailsafeReset				; CODE XREF: FailsafeMEnu:loc_438Ep
		PUSH	{R3-R7,LR}
		MOVS	R7, #0x31 ; '1'
		MOVS	R4, #0
		LDR	R5, =0x20B
		MOVS	R6, #1
		LSLS	R7, R7,	#4

loc_43EC				; CODE XREF: FailsafeReset+8Ej
					; FailsafeReset+A2j ...
		BL	callSetupDMAandSend
		ADR	R0, aFailsafe_0	; "Failsafe"
		BL	displayPageHeader
		MOVS	R3, #0		; a4
		MOVS	R2, #0x10	; a3
		MOVS	R1, #0x40 ; '@'	; a2
		LDR	R0, =aThisWillRese_2 ; text
		BL	displayTextAt2
		MOVS	R3, #0		; a4
		MOVS	R2, #0x18	; a3
		MOVS	R1, #0x40 ; '@'	; a2
		LDR	R0, =aAllChannel ; "all Channel"
		BL	displayTextAt2
		MOVS	R3, #0		; a4
		MOVS	R2, #0x20 ; ' '	; a3
		MOVS	R1, #0x40 ; '@'	; a2
		LDR	R0, =aToTheir	; "to their"
		BL	displayTextAt2
		MOVS	R3, #0		; a4
		MOVS	R2, #0x28 ; '('	; a3
		MOVS	R1, #0x40 ; '@'	; a2
		LDR	R0, =aFactoryDefau_0 ; text
		BL	displayTextAt2
		MOVS	R3, #0		; a4
		MOVS	R2, #0x34 ; '4'	; y
		MOVS	R1, #0x1C	; x
		LDR	R0, =aYes_0	; text
		BL	displayTextAt
		MOVS	R3, #0		; a4
		MOVS	R2, #0x34 ; '4'	; y
		MOVS	R1, #0x4C ; 'L'	; x
		LDR	R0, =aNo_0	; text
		BL	displayTextAt
		CMP	R4, #0
		BEQ	loc_4446
		MOVS	R1, #0x14
		B	loc_4448
; ---------------------------------------------------------------------------

loc_4446				; CODE XREF: FailsafeReset+60j
		MOVS	R1, #0x44 ; 'D'

loc_4448				; CODE XREF: FailsafeReset+64j
		MOVS	R2, #0x34 ; '4'
		LDR	R0, =arrow_gfx
		BL	displayGFX
		BL	LCD_updateCALL
		BL	getKeyCode
		CMP	R0, #0x18
		BEQ	loc_447A
		CMP	R0, #0x17
		BEQ	loc_447A
		CMP	R0, #8
		BEQ	loc_447A
		CMP	R0, #9
		BEQ	loc_447A
		CMP	R0, #0xA
		BEQ	loc_4496
		CMP	R0, #0xB
		BNE	loc_43EC

loc_4470				; CODE XREF: FailsafeReset+B8j
					; FailsafeReset+11Ej
		MOVS	R1, #0x64 ; 'd'
		MOV	R0, R5
		BL	beep
		POP	{R3-R7,PC}
; ---------------------------------------------------------------------------

loc_447A				; CODE XREF: FailsafeReset+7Aj
					; FailsafeReset+7Ej ...
		EORS	R4, R6
		BL	sub_9BC0
		CMP	R0, #2
		BCC	loc_43EC
		MOVS	R1, #0xF
		MOV	R0, R7
		BL	beep
		MOVS	R1, #0xF
		MOVS	R0, #0
		BL	beep
		B	loc_43EC
; ---------------------------------------------------------------------------

loc_4496				; CODE XREF: FailsafeReset+8Aj
		CMP	R4, #1
		BNE	loc_4470
		LDR	R1, =rxsettings
		MOVS	R3, #0x92 ; ''
		LDRB	R2, [R1,#(currentModel - 0x200002A4)]
		LDR	R0, =0x7FFF
		MULS	R2, R3
		ADDS	R2, R2,	R1
		ADDS	R2, #0x71 ; 'q'
		STRB	R0, [R2,#2]
		LSRS	R3, R0,	#8
		STRB	R3, [R2,#3]
		LDRB	R2, [R1,#(currentModel - 0x200002A4)]
		MOVS	R3, #0x92 ; ''
		MULS	R2, R3
		ADDS	R2, R2,	R1
		ADDS	R2, #0x71 ; 'q'
		STRB	R0, [R2,#4]
		LSRS	R3, R0,	#8
		STRB	R3, [R2,#5]
		LDRB	R2, [R1,#(currentModel - 0x200002A4)]
		MOVS	R3, #0x92 ; ''
		MULS	R2, R3
		ADDS	R2, R2,	R1
		ADDS	R2, #0x71 ; 'q'
		STRB	R0, [R2,#6]
		LSRS	R3, R0,	#8
		STRB	R3, [R2,#7]
		LDRB	R2, [R1,#(currentModel - 0x200002A4)]
		MOVS	R3, #0x92 ; ''
		MULS	R2, R3
		ADDS	R2, R2,	R1
		ADDS	R2, #0x71 ; 'q'
		STRB	R0, [R2,#8]
		LSRS	R3, R0,	#8
		STRB	R3, [R2,#9]
		LDRB	R2, [R1,#(currentModel - 0x200002A4)]
		MOVS	R3, #0x92 ; ''
		MULS	R2, R3
		ADDS	R2, R2,	R1
		ADDS	R2, #0x71 ; 'q'
		STRB	R0, [R2,#0xA]
		LSRS	R3, R0,	#8
		STRB	R3, [R2,#0xB]
		LDRB	R2, [R1,#(currentModel - 0x200002A4)]
		MOVS	R3, #0x92 ; ''
		MULS	R2, R3
		ADDS	R1, R2,	R1
		ADDS	R1, #0x71 ; 'q'
		STRB	R0, [R1,#0xC]
		LSRS	R0, R0,	#8
		STRB	R0, [R1,#0xD]
		B	loc_4470
; End of function FailsafeReset

; ---------------------------------------------------------------------------
dword_4500	DCD 0x20B		; DATA XREF: FailsafeReset+6r
aFailsafe_0	DCB "Failsafe",0        ; DATA XREF: FailsafeReset+10o
		DCB 0, 0, 0
; _BYTE	*off_4510
off_4510	DCD aThisWillRese_2	; DATA XREF: FailsafeReset+1Cr
					; "This will reset"
; _BYTE	*off_4514
off_4514	DCD aAllChannel		; DATA XREF: FailsafeReset+28r
					; "all Channel"
; _BYTE	*off_4518
off_4518	DCD aToTheir		; DATA XREF: FailsafeReset+34r
					; "to their"
; _BYTE	*off_451C
off_451C	DCD aFactoryDefau_0	; DATA XREF: FailsafeReset+40r
					; "factory default"
; _BYTE	*off_4520
off_4520	DCD aYes_0		; DATA XREF: FailsafeReset+4Cr
					; "Yes"
; _BYTE	*off_4524
off_4524	DCD aNo_0		; DATA XREF: FailsafeReset+58r
					; "No"
off_4528	DCD arrow_gfx		; DATA XREF: FailsafeReset+6Ar
dword_452C	DCD 0x7FFF		; DATA XREF: FailsafeReset+C0r
varrxsettings_2	DCD rxsettings		; DATA XREF: FailsafeReset+BAr

; =============== S U B	R O U T	I N E =======================================


failsafeOnOff				; CODE XREF: FailsafeMEnu+22Ep

var_30		= -0x30
text		= -0x2C
var_28		= -0x28
var_24		= -0x24
var_20		= -0x20
var_1C		= -0x1C

		PUSH	{R4-R7,LR}
		ADR	R3, aChannel1_0	; "Channel1"
		LDR	R2, [R3,#(aChannel1_0+4	- 0x46B0)] ; "nel1"
		LDR	R1, [R3]	; "Channel1"
		SUB	SP, SP,	#0x1C
		LDR	R3, [R3,#(aChannel1_0+8	- 0x46B0)] ; ""
		STR	R1, [SP,#0x30+text]
		LDR	R1, =rxsettings
		STR	R3, [SP,#0x30+var_24]
		STR	R2, [SP,#0x30+var_28]
		LDRB	R2, [R1,#(currentModel - 0x200002A4)]
		MOVS	R3, #0x92 ; ''
		MULS	R2, R3
		ADDS	R2, R2,	R1
		LSLS	R1, R0,	#1
		STR	R1, [SP,#0x30+var_20]
		ADDS	R1, R2,	R1
		ADDS	R1, #0x71 ; 'q'
		LDRB	R2, [R1,#3]
		LDRB	R3, [R1,#2]
		LSLS	R1, R2,	#0x18
		ASRS	R1, R1,	#0x10
		LDR	R2, =0x7FFF
		ORRS	R1, R3
		CMP	R1, R2
		BEQ	loc_456C
		MOVS	R1, #1
		B	loc_456E
; ---------------------------------------------------------------------------

loc_456C				; CODE XREF: failsafeOnOff+32j
		MOVS	R1, #0

loc_456E				; CODE XREF: failsafeOnOff+36j
		LDR	R4, =byte_20000000
		LDR	R7, =dword_1FFFFDE0
		STRB	R1, [R4,#(byte_20000004	- 0x20000000)]
		MOV	R1, R0
		ADDS	R1, #0x31 ; '1'
		UXTB	R2, R1
		MOVS	R5, #0
		LSLS	R6, R0,	#2
		STR	R2, [SP,#0x30+var_1C]

loc_4580				; CODE XREF: failsafeOnOff+EEj
					; failsafeOnOff+10Ej ...
		BL	callSetupDMAandSend
		ADR	R0, aFailsafe_1	; "Failsafe"
		BL	displayPageHeader
		LDRB	R0, [R4,#(byte_20000004	- 0x20000000)]
		CMP	R0, #0
		BEQ	loc_459A
		MOVS	R3, #0
		MOVS	R2, #0x10
		MOVS	R1, #0x38 ; '8'
		ADR	R0, aOn		; "ON"
		B	loc_45A2
; ---------------------------------------------------------------------------

loc_459A				; CODE XREF: failsafeOnOff+5Aj
		MOVS	R3, #0		; a4
		MOVS	R2, #0x10	; y
		MOVS	R1, #0x34 ; '4'	; x
		ADR	R0, aOff	; "OFF"

loc_45A2				; CODE XREF: failsafeOnOff+64j
		BL	displayTextAt
		MOV	R1, SP
		LDR	R0, [SP,#0x30+var_1C]
		STRB	R0, [R1,#0x30+var_28+3]
		MOVS	R3, #0		; a4
		MOVS	R2, #0x28 ; '('	; y
		MOVS	R1, #0x20 ; ' '	; x
		ADD	R0, SP,	#0x30+text ; text
		BL	displayTextAt
		MOVS	R3, #0x36 ; '6'
		MOVS	R2, #0x72 ; 'r'
		MOVS	R1, #0x30 ; '0'
		MOVS	R0, #0xE
		STR	R5, [SP,#0x30+var_30]
		BL	drawLine
		MOVS	R2, #0x18
		MOVS	R3, #0x36 ; '6'
		MOVS	R1, #0x30 ; '0'
		MOV	R0, R2
		STR	R5, [SP,#0x30+var_30]
		BL	sub_4E8C
		MOVS	R2, #0x40 ; '@'
		MOVS	R3, #0x36 ; '6'
		MOVS	R1, #0x30 ; '0'
		MOV	R0, R2
		STR	R5, [SP,#0x30+var_30]
		BL	sub_4E8C
		MOVS	R2, #0x68 ; 'h'
		MOVS	R3, #0x36 ; '6'
		MOVS	R1, #0x30 ; '0'
		MOV	R0, R2
		STR	R5, [SP,#0x30+var_30]
		BL	sub_4E8C
		LDR	R0, [R7,R6]
		MOVS	R1, #0x28 ; '('
		MULS	R0, R1
		LDR	R1, =dword_2710
		BL	div__0
		MOV	R2, R0
		LDR	R0, [R7,R6]
		ADDS	R2, #0x40 ; '@'
		CMP	R0, #0
		BGE	loc_460C
		MOV	R0, R2
		MOVS	R2, #0x40 ; '@'
		B	loc_460E
; ---------------------------------------------------------------------------

loc_460C				; CODE XREF: failsafeOnOff+D0j
		MOVS	R0, #0x40 ; '@'

loc_460E				; CODE XREF: failsafeOnOff+D6j
		MOVS	R3, #0x34 ; '4'
		MOVS	R1, #0x32 ; '2'
		STR	R5, [SP,#0x30+var_30]
		BL	fillRegion
		BL	LCD_updateCALL
		BL	sub_2574
		CMP	R0, #0xFF
		BEQ	loc_4580
		BL	getKeyCode
		CMP	R0, #9
		BEQ	loc_4650
		CMP	R0, #0x17
		BEQ	loc_4650
		CMP	R0, #8
		BEQ	loc_4650
		CMP	R0, #0x18
		BEQ	loc_4650
		CMP	R0, #0xA
		BEQ	loc_4674
		CMP	R0, #0x19
		BEQ	loc_4674
		CMP	R0, #0xB
		BNE	loc_4580

loc_4644				; CODE XREF: failsafeOnOff+15Ej
					; failsafeOnOff+178j
		MOVS	R1, #0x64 ; 'd'
		LDR	R0, =0x20B
		BL	beep
		ADD	SP, SP,	#0x1C
		POP	{R4-R7,PC}
; ---------------------------------------------------------------------------

loc_4650				; CODE XREF: failsafeOnOff+F6j
					; failsafeOnOff+FAj ...
		LDRB	R0, [R4,#4]
		MOVS	R1, #1
		EORS	R0, R1
		STRB	R0, [R4,#4]
		BL	sub_9BC0
		CMP	R0, #2
		BCC	loc_4580
		MOVS	R0, #0x31 ; '1'
		MOVS	R1, #0xF
		LSLS	R0, R0,	#4
		BL	beep
		MOVS	R1, #0xF
		MOVS	R0, #0
		BL	beep
		B	loc_4580
; ---------------------------------------------------------------------------

loc_4674				; CODE XREF: failsafeOnOff+106j
					; failsafeOnOff+10Aj
		LDRB	R0, [R4,#4]
		CMP	R0, #0
		BEQ	loc_4694
		LDR	R0, [R7,R6]
		LDR	R1, =rxsettings
		MOVS	R3, #0x92 ; ''
		LDRB	R2, [R1,#(currentModel - 0x200002A4)]
		MULS	R2, R3
		ADDS	R2, R2,	R1
		LDR	R1, [SP,#0x30+var_20]
		ADDS	R1, R2,	R1
		ADDS	R1, #0x71 ; 'q'
		STRB	R0, [R1,#2]
		LSRS	R0, R0,	#8
		STRB	R0, [R1,#3]
		B	loc_4644
; ---------------------------------------------------------------------------

loc_4694				; CODE XREF: failsafeOnOff+144j
		LDR	R0, =rxsettings
		MOVS	R3, #0x92 ; ''
		LDRB	R2, [R0,#(currentModel - 0x200002A4)]
		LDR	R1, =0x7FFF
		MULS	R2, R3
		ADDS	R2, R2,	R0
		LDR	R0, [SP,#0x30+var_20]
		ADDS	R0, R2,	R0
		ADDS	R0, #0x71 ; 'q'
		STRB	R1, [R0,#2]
		LSRS	R1, R1,	#8
		STRB	R1, [R0,#3]
		B	loc_4644
; End of function failsafeOnOff

; ---------------------------------------------------------------------------
		ALIGN 0x10
aChannel1_0	DCB "Channel1",0        ; DATA XREF: failsafeOnOff+2o
					; failsafeOnOff+6r ...
		DCB 0, 0, 0
varrxsettings_3	DCD rxsettings		; DATA XREF: failsafeOnOff+Er
					; failsafeOnOff+148r ...
dword_46C0	DCD 0x7FFF		; DATA XREF: failsafeOnOff+2Cr
					; failsafeOnOff+166r
off_46C4	DCD byte_20000000	; DATA XREF: failsafeOnOff:loc_456Er
off_46C8	DCD dword_1FFFFDE0	; DATA XREF: failsafeOnOff+3Cr
aFailsafe_1	DCB "Failsafe",0        ; DATA XREF: failsafeOnOff+50o
		DCB 0, 0, 0
aOn		DCB "ON",0              ; DATA XREF: failsafeOnOff+62o
		DCB 0
aOff		DCB "OFF",0             ; DATA XREF: failsafeOnOff+6Co
off_46E0	DCD dword_2710		; DATA XREF: failsafeOnOff+C2r
dword_46E4	DCD 0x20B		; DATA XREF: failsafeOnOff+112r

; =============== S U B	R O U T	I N E =======================================


FirmwareUpdatePage			; DATA XREF: ROM:0000D28Co
					; ROM:0000D4ECo

var_10		= -0x10

		PUSH	{R3-R5,LR}
		BL	callSetupDMAandSend
		LDR	R0, =0xCD73
		BL	displayPageHeader
		MOVS	R3, #0		; a4
		MOVS	R2, #0x10	; a3
		MOVS	R1, #0x40 ; '@'	; a2
		LDR	R0, =aThisWillEnter ; text
		BL	displayTextAt2
		MOVS	R3, #0		; a4
		MOVS	R2, #0x18	; a3
		MOVS	R1, #0x40 ; '@'	; a2
		LDR	R0, =aFirmwareUpda_0 ; text
		BL	displayTextAt2
		MOVS	R3, #0		; a4
		MOVS	R2, #0x20 ; ' '	; a3
		MOVS	R1, #0x40 ; '@'	; a2
		LDR	R0, =aModeAndHalt ; text
		BL	displayTextAt2
		MOVS	R3, #0		; a4
		MOVS	R2, #0x28 ; '('	; a3
		MOVS	R1, #0x40 ; '@'	; a2
		LDR	R0, =aOtherFunctions ; text
		BL	displayTextAt2
		MOVS	R3, #0		; a4
		MOVS	R2, #0x30 ; '0'	; a3
		MOVS	R1, #0x40 ; '@'	; a2
		LDR	R0, =aPressOk_1	; text
		BL	displayTextAt2
		MOVS	R3, #0		; a4
		MOVS	R2, #0x38 ; '8'	; a3
		MOVS	R1, #0x40 ; '@'	; a2
		LDR	R0, =aToProceed_0 ; text
		BL	displayTextAt2
		BL	LCD_updateCALL

loc_4740				; CODE XREF: FirmwareUpdatePage+62j
		BL	getKeyCode
		CMP	R0, #0xB
		BEQ	loc_47CE
		CMP	R0, #0xA
		BNE	loc_4740
		BL	sub_23F4
		CMP	R0, #0
		BEQ	locret_47D0
		BL	callSetupDMAandSend
		LDR	R0, =0xCD73
		BL	displayPageHeader
		MOVS	R3, #0		; a4
		MOVS	R2, #0x10	; a3
		MOVS	R1, #0x40 ; '@'	; a2
		LDR	R0, =aUpdateModeOn ; text
		BL	displayTextAt2
		MOVS	R3, #0		; a4
		MOVS	R2, #0x20 ; ' '	; a3
		MOVS	R1, #0x40 ; '@'	; a2
		LDR	R0, =aSwitchOffAnd ; text
		BL	displayTextAt2
		MOVS	R3, #0		; a4
		MOVS	R2, #0x28 ; '('	; a3
		MOVS	R1, #0x40 ; '@'	; a2
		LDR	R0, =aBackOnToExit ; text
		BL	displayTextAt2
		BL	LCD_updateCALL
		LDR	R0, =dword_1FFFF800
		LDR	R1, =0x1AE811C9
		STR	R1, [R0]
		LDR	R1, =0x7F5594AC
		STR	R1, [R0,#(dword_1FFFF804 - 0x1FFFF800)]
		LDR	R4, =CRC_SUB_1800
		MOVS	R5, #dword_1800
		MOV	R0, R5		; startPTR
		LDR	R1, [R4]	; length
		BL	crcCheck
		LDR	R1, =0x55550000
		ADDS	R1, R0,	R1
		STR	R1, [SP,#0x10+var_10]
		LDR	R1, [R4]
		ADDS	R3, R1,	R5
		LDRB	R1, [R3,#1]
		LDRB	R2, [R3]
		LSLS	R1, R1,	#8
		ORRS	R1, R2
		CMP	R1, R0
		BEQ	word_47BE
		MOV	R2, SP
		MOVS	R1, #4
		MOV	R0, R3
		BL	flashMethod
; ---------------------------------------------------------------------------
word_47BE	DCW 0xF3BF		; CODE XREF: FirmwareUpdatePage+CAj
; ---------------------------------------------------------------------------
		LDRH	R7, [R1,#0x3A]
		LDR	R1, =0xE000ED00
		LDR	R0, =0x5FA0004
		STR	R0, [R1,#0xC]
; ---------------------------------------------------------------------------
		DCW 0xF3BF
; ---------------------------------------------------------------------------
		LDRH	R7, [R1,#0x3A]

loc_47CC				; CODE XREF: FirmwareUpdatePage:loc_47CCj
		B	loc_47CC
; ---------------------------------------------------------------------------

loc_47CE				; CODE XREF: FirmwareUpdatePage+5Ej
		MOVS	R0, #0

locret_47D0				; CODE XREF: FirmwareUpdatePage+6Aj
		POP	{R3-R5,PC}
; End of function FirmwareUpdatePage

; ---------------------------------------------------------------------------
		ALIGN 4
dword_47D4	DCD 0xCD73		; DATA XREF: FirmwareUpdatePage+6r
					; FirmwareUpdatePage+70r
; _BYTE	*off_47D8
off_47D8	DCD aThisWillEnter	; DATA XREF: FirmwareUpdatePage+12r
					; "This will enter"
; _BYTE	*off_47DC
off_47DC	DCD aFirmwareUpda_0	; DATA XREF: FirmwareUpdatePage+1Er
					; "firmware update"
; _BYTE	*off_47E0
off_47E0	DCD aModeAndHalt	; DATA XREF: FirmwareUpdatePage+2Ar
					; "mode and halt"
; _BYTE	*off_47E4
off_47E4	DCD aOtherFunctions	; DATA XREF: FirmwareUpdatePage+36r
					; "other functions"
; _BYTE	*off_47E8
off_47E8	DCD aPressOk_1		; DATA XREF: FirmwareUpdatePage+42r
					; "Press \"OK\""
; _BYTE	*off_47EC
off_47EC	DCD aToProceed_0	; DATA XREF: FirmwareUpdatePage+4Er
					; "to proceed"
; _BYTE	*off_47F0
off_47F0	DCD aUpdateModeOn	; DATA XREF: FirmwareUpdatePage+7Cr
					; "Update mode on"
; _BYTE	*off_47F4
off_47F4	DCD aSwitchOffAnd	; DATA XREF: FirmwareUpdatePage+88r
					; "switch off and"
; _BYTE	*off_47F8
off_47F8	DCD aBackOnToExit	; DATA XREF: FirmwareUpdatePage+94r
					; "back on to exit"
dword_47FC	DCD 0x1AE811C9		; DATA XREF: FirmwareUpdatePage+A0r
off_4800	DCD dword_1FFFF800	; DATA XREF: FirmwareUpdatePage+9Er
dword_4804	DCD 0x7F5594AC		; DATA XREF: FirmwareUpdatePage+A4r
crcOffset	DCD CRC_SUB_1800	; DATA XREF: FirmwareUpdatePage+A8r
dword_480C	DCD 0x55550000		; DATA XREF: FirmwareUpdatePage+B6r
dword_4810	DCD 0x5FA0004		; DATA XREF: FirmwareUpdatePage+DCr
dword_4814	DCD 0xE000ED00		; DATA XREF: FirmwareUpdatePage+DAr

; =============== S U B	R O U T	I N E =======================================


FactResConfirm				; DATA XREF: ROM:0000D29Co
		PUSH	{R4-R7,LR}
		SUB	SP, SP,	#0x44
		BL	callSetupDMAandSend
		LDR	R0, =0xCCEB
		BL	displayPageHeader
		MOVS	R3, #0		; a4
		MOVS	R2, #0x10	; a3
		MOVS	R1, #0x40 ; '@'	; a2
		LDR	R0, =aThisWillRese_1 ; text
		BL	displayTextAt2
		MOVS	R3, #0		; a4
		MOVS	R2, #0x18	; a3
		MOVS	R1, #0x40 ; '@'	; a2
		LDR	R0, =aAllParameters ; text
		BL	displayTextAt2
		MOVS	R3, #0		; a4
		MOVS	R2, #0x20 ; ' '	; a3
		MOVS	R1, #0x40 ; '@'	; a2
		LDR	R0, =aToTheir_0	; text
		BL	displayTextAt2
		MOVS	R3, #0		; a4
		MOVS	R2, #0x28 ; '('	; a3
		MOVS	R1, #0x40 ; '@'	; a2
		LDR	R0, =aFactoryDefault ; text
		BL	displayTextAt2
		MOVS	R3, #0		; a4
		MOVS	R2, #0x30 ; '0'	; a3
		MOVS	R1, #0x40 ; '@'	; a2
		LDR	R0, =aPressOk_0	; text
		BL	displayTextAt2
		MOVS	R3, #0		; a4
		MOVS	R2, #0x38 ; '8'	; a3
		MOVS	R1, #0x40 ; '@'	; a2
		LDR	R0, =aToProceed	; text
		BL	displayTextAt2
		BL	LCD_updateCALL

loc_4872				; CODE XREF: FactResConfirm+64j
		BL	getKeyCode
		CMP	R0, #0xB
		BEQ	loc_48F6
		CMP	R0, #0xA
		BNE	loc_4872
		BL	sub_23F4
		CMP	R0, #0
		BEQ	loc_48F2
		BL	setFactVal
		LDR	R0, =rxsettings
		MOVS	R2, #0x92 ; ''
		LDRB	R1, [R0,#(currentModel - 0x200002A4)]
		MULS	R1, R2
		ADDS	R0, R1,	R0
		LDR	R1, =byte_20000000
		ADDS	R0, #0xA
		STR	R0, [R1,#(usedModelPtr - 0x20000000)]
		MOVS	R2, #0xFF	; a3
		MOVS	R1, #0x40 ; '@'	; numbButesToSend
		MOV	R0, SP		; targetAddress
		BL	setupDMA
		BL	someSPImethod
		LDR	R7, =dword_B74
		MOVS	R6, #0

loc_48AC				; CODE XREF: FactResConfirm+B4j
		LSLS	R5, R6,	#0xC
		ADDS	R5, #0x40 ; '@'
		MOV	R4, R5

loc_48B2				; CODE XREF: FactResConfirm+AAj
		MOVS	R2, #0x40 ; '@'
		MOV	R1, R4
		MOV	R0, SP
		BL	saveEepromData
		ADDS	R4, #0x40 ; '@'
		SUBS	R0, R4,	R5
		CMP	R0, R7
		BCC	loc_48B2
		BL	someSPImethod
		ADDS	R6, #1
		CMP	R6, #4
		BCC	loc_48AC
		MOVS	R5, #0

loc_48D0				; CODE XREF: FactResConfirm+D6j
		LSLS	R6, R5,	#0xC
		MOV	R4, R6

loc_48D4				; CODE XREF: FactResConfirm+CCj
		MOVS	R2, #0x40 ; '@'
		MOV	R1, R4
		MOV	R0, SP
		BL	saveEepromData
		ADDS	R4, #0x40 ; '@'
		SUBS	R0, R4,	R6
		CMP	R0, #0x2A ; '*'
		BCC	loc_48D4
		BL	someSPImethod
		ADDS	R5, #1
		CMP	R5, #4
		BCC	loc_48D0
		MOVS	R0, #1

loc_48F2				; CODE XREF: FactResConfirm+6Cj
		ADD	SP, SP,	#0x44
		POP	{R4-R7,PC}
; ---------------------------------------------------------------------------

loc_48F6				; CODE XREF: FactResConfirm+60j
		MOVS	R0, #0
		ADD	SP, SP,	#0x44
		POP	{R4-R7,PC}
; End of function FactResConfirm

; ---------------------------------------------------------------------------
dword_48FC	DCD 0xCCEB		; DATA XREF: FactResConfirm+8r
; _BYTE	*off_4900
off_4900	DCD aThisWillRese_1	; DATA XREF: FactResConfirm+14r
					; "This will reset"
; _BYTE	*off_4904
off_4904	DCD aAllParameters	; DATA XREF: FactResConfirm+20r
					; "all parameters"
; _BYTE	*off_4908
off_4908	DCD aToTheir_0		; DATA XREF: FactResConfirm+2Cr
					; "to their"
; _BYTE	*off_490C
off_490C	DCD aFactoryDefault	; DATA XREF: FactResConfirm+38r
					; "factory default"
; _BYTE	*off_4910
off_4910	DCD aPressOk_0		; DATA XREF: FactResConfirm+44r
					; "Press \"OK\""
; _BYTE	*off_4914
off_4914	DCD aToProceed		; DATA XREF: FactResConfirm+50r
					; "to proceed"
varrxsettings_4	DCD rxsettings		; DATA XREF: FactResConfirm+72r
off_491C	DCD byte_20000000	; DATA XREF: FactResConfirm+7Cr
off_4920	DCD dword_B74		; DATA XREF: FactResConfirm+90r

; =============== S U B	R O U T	I N E =======================================


; signed int __fastcall	showSingleValuePage(_BYTE *namePtr, int	a2, int	a3)
showSingleValuePage			; CODE XREF: sub_7B14+Cp
					; ThrottleCurvePage+Cp

var_38		= -0x38
text		= -0x34
var_33		= -0x33
var_30		= -0x30
var_2C		= -0x2C
var_28		= -0x28
var_20		= -0x20
var_1C		= -0x1C
var_18		= -0x18

		PUSH	{R0-R2,R4-R7,LR}
		SUB	SP, SP,	#0x18
		MOVS	R0, #0
		STR	R0, [SP,#0x38+var_2C]
		STR	R0, [SP,#0x38+var_30]

loc_492E				; CODE XREF: showSingleValuePage:loc_4ACEj
					; showSingleValuePage+24Aj
		BL	callSetupDMAandSend
		LDR	R0, [SP,#0x38+var_20]
		BL	displayPageHeader
		BL	getInputStates
		LDR	R1, =byte_20000000
		LDR	R1, [R1,#(usedModelPtr - 0x20000000)]
		ADDS	R1, #0x20 ; ' '
		LDRB	R2, [R1,#0xC]
		MOVS	R1, #1
		LSLS	R1, R2
		TST	R0, R1
		BEQ	loc_4A48
		MOVS	R3, #0		; a4
		MOVS	R2, #0xC	; y
		MOV	R1, R3		; x
		LDR	R0, =aIdleUp	; "Idle up"
		BL	displayTextAt
		LDR	R4, [SP,#0x38+var_1C]
		ADDS	R4, #5

loc_495C				; CODE XREF: showSingleValuePage+19Aj
		LDR	R7, =aL100_0	; "L 100%"
		MOVS	R5, #0

loc_4960				; CODE XREF: showSingleValuePage+5Ej
		LDR	R0, =0x20000065
		MOVS	R2, #3		; length
		LDRB	R0, [R0,R5]
		STRB	R0, [R7]	; "L 100%"
		LDRB	R0, [R4,R5]	; sourceVal
		ADDS	R1, R7,	#2	; targetText
		BL	intToString
		LSLS	R2, R5,	#3
		MOVS	R3, #0		; a4
		ADDS	R2, #0x14	; y
		MOV	R1, R3		; x
		LDR	R0, =aL100_0	; "L 100%"
		BL	displayTextAt
		ADDS	R5, #1
		CMP	R5, #5
		BCC	loc_4960
		LDR	R0, [SP,#0x38+var_30]
		MOVS	R1, #8
		LSLS	R2, R0,	#3
		ADDS	R2, #0x14
		LDR	R0, =arrow_gfx
		BL	displayGFX
		MOVS	R7, #0
		MOVS	R3, #0x34 ; '4'
		MOVS	R2, #0x7B ; '{'
		MOVS	R1, #8
		MOVS	R0, #0x37 ; '7'
		STR	R7, [SP,#0x38+var_38]
		BL	drawLine
		MOVS	R3, #8
		MOVS	R2, #0x36 ; '6'
		MOV	R1, R3
		MOVS	R0, #0x35 ; '5'
		STR	R7, [SP,#0x38+var_38]
		BL	sub_4E8C
		MOVS	R2, #0
		MOVS	R1, #0x13
		MOVS	R0, #0x36 ; '6'
		BL	getGFX
		MOVS	R3, #0x1E
		MOVS	R2, #0x7B ; '{'
		MOV	R1, R3
		MOVS	R0, #0x35 ; '5'
		STR	R7, [SP,#0x38+var_38]
		BL	sub_4E8C
		MOVS	R2, #0
		MOVS	R1, #0x29 ; ')'
		MOVS	R0, #0x36 ; '6'
		BL	getGFX
		MOVS	R3, #0x34 ; '4'
		MOVS	R2, #0x36 ; '6'
		MOV	R1, R3
		MOVS	R0, #0x35 ; '5'
		STR	R7, [SP,#0x38+var_38]
		BL	sub_4E8C
		MOVS	R2, #0x37 ; '7'
		MOVS	R3, #0x36 ; '6'
		MOVS	R1, #0x35 ; '5'
		MOV	R0, R2
		STR	R7, [SP,#0x38+var_38]
		BL	sub_4E8C
		MOVS	R2, #0
		MOVS	R1, #0x35 ; '5'
		MOVS	R0, #0x48 ; 'H'
		BL	getGFX
		MOVS	R2, #0x59 ; 'Y'
		MOVS	R3, #0x36 ; '6'
		MOVS	R1, #0x35 ; '5'
		MOV	R0, R2
		STR	R7, [SP,#0x38+var_38]
		BL	sub_4E8C
		MOVS	R2, #0
		MOVS	R1, #0x35 ; '5'
		MOVS	R0, #0x6A ; 'j'
		BL	getGFX
		MOVS	R2, #0x7B ; '{'
		MOVS	R3, #0x36 ; '6'
		MOVS	R1, #0x35 ; '5'
		MOV	R0, R2
		STR	R7, [SP,#0x38+var_38]
		BL	sub_4E8C
		LDR	R6, =unk_200000E0
		MOVS	R5, #0

loc_4A22				; CODE XREF: showSingleValuePage+13Aj
		ADDS	R0, R4,	R5
		LDRB	R0, [R0,#1]
		MOVS	R1, #0x2C ; ','
		MULS	R0, R1
		MOVS	R1, #0x64 ; 'd'
		BL	div__0
		MOVS	R7, #0x34 ; '4'
		SUBS	R0, R7,	R0
		STR	R0, [SP,#0x38+var_28]
		LDRB	R0, [R4,R5]
		MOVS	R1, #0x2C ; ','
		MULS	R0, R1
		MOVS	R1, #0x64 ; 'd'
		BL	div__0
		SUBS	R1, R7,	R0
		MOVS	R7, #0
		B	loc_4A4A
; ---------------------------------------------------------------------------

loc_4A48				; CODE XREF: showSingleValuePage+26j
		B	loc_4AB0
; ---------------------------------------------------------------------------

loc_4A4A				; CODE XREF: showSingleValuePage+122j
		LSLS	R0, R5,	#2
		ADDS	R2, R0,	R6
		STR	R7, [SP,#0x38+var_38]
		LDR	R2, [R2,#(dword_200000E4 - 0x200000E0)]
		LDR	R0, [R6,R0]
		LDR	R3, [SP,#0x38+var_28]
		BL	sub_4E8C
		ADDS	R5, #1
		CMP	R5, #4
		BCC	loc_4A22
		MOVS	R5, #0

loc_4A62				; CODE XREF: showSingleValuePage+15Cj
		LDR	R0, =0x20000065
		MOVS	R3, #0		; a4
		LDRB	R1, [R0,R5]
		MOV	R0, SP
		STRB	R1, [R0,#0x38+text]
		STRB	R7, [R0,#0x38+var_33]
		LSLS	R0, R5,	#2
		LDR	R1, [R6,R0]
		MOVS	R2, #0x38 ; '8'	; y
		SUBS	R1, #3		; x
		ADD	R0, SP,	#0x38+text ; text
		BL	displayTextAt
		ADDS	R5, #1
		CMP	R5, #5
		BCC	loc_4A62
		LDR	R2, [SP,#0x38+var_2C]
		MOVS	R3, #0x34 ; '4'
		ADDS	R2, #0x37 ; '7'
		STR	R7, [SP,#0x38+var_38]
		MOV	R0, R2
		MOVS	R1, #8
		BL	sub_4E8C
		BL	LCD_updateCALL
		LDR	R0, =(dword_1FFFFD7C+8)
		LDR	R1, [R0,#(dword_1FFFFD7C+0x10 -	0x1FFFFD84)]
		LDR	R0, =dword_2710
		ADDS	R0, R1,	R0
		MOVS	R1, #0x44 ; 'D'
		MULS	R0, R1
		LDR	R1, =0x4E20
		BL	div__0
		CMP	R0, #0
		BGE	loc_4AC0
		MOVS	R0, #0
		B	loc_4AC6
; ---------------------------------------------------------------------------

loc_4AB0				; CODE XREF: showSingleValuePage:loc_4A48j
		MOVS	R3, #0		; a4
		MOVS	R2, #0xC	; y
		MOV	R1, R3		; x
		LDR	R0, =aNormal_0	; text
		BL	displayTextAt
		LDR	R4, [SP,#0x38+var_1C]
		B	loc_495C
; ---------------------------------------------------------------------------

loc_4AC0				; CODE XREF: showSingleValuePage+186j
		CMP	R0, #0x44 ; 'D'
		BLE	loc_4AC6
		MOVS	R0, #0x44 ; 'D'

loc_4AC6				; CODE XREF: showSingleValuePage+18Aj
					; showSingleValuePage+19Ej
		LDR	R1, [SP,#0x38+var_2C]
		CMP	R1, R0
		BEQ	loc_4AD0
		STR	R0, [SP,#0x38+var_2C]

loc_4ACE				; CODE XREF: showSingleValuePage+1B2j
					; showSingleValuePage+1D6j ...
		B	loc_492E
; ---------------------------------------------------------------------------

loc_4AD0				; CODE XREF: showSingleValuePage+1A6j
		BL	sub_2574
		CMP	R0, #0xFF
		BEQ	loc_4ACE
		BL	getKeyCode
		CMP	R0, #0xA
		BEQ	loc_4B02
		CMP	R0, #8
		BEQ	loc_4B1A
		CMP	R0, #0x18
		BEQ	loc_4B1A
		CMP	R0, #9
		BEQ	loc_4B32
		CMP	R0, #0x17
		BEQ	loc_4B32
		CMP	R0, #0x16
		BEQ	loc_4B4A
		CMP	R0, #0x19
		BEQ	loc_4B70
		CMP	R0, #0xB
		BNE	loc_4ACE
		MOVS	R0, #0
		ADD	SP, SP,	#0x24
		POP	{R4-R7,PC}
; ---------------------------------------------------------------------------

loc_4B02				; CODE XREF: showSingleValuePage+1BAj
		LDR	R0, [SP,#0x38+var_30]
		CMP	R0, #4
		BCC	loc_4B0C
		MOVS	R0, #0
		B	loc_4B0E
; ---------------------------------------------------------------------------

loc_4B0C				; CODE XREF: showSingleValuePage+1E2j
		ADDS	R0, #1

loc_4B0E				; CODE XREF: showSingleValuePage+1E6j
		STR	R0, [SP,#0x38+var_30]
		BL	sub_9BC0
		CMP	R0, #2
		BCC	loc_4ACE
		B	loc_4B5C
; ---------------------------------------------------------------------------

loc_4B1A				; CODE XREF: showSingleValuePage+1BEj
					; showSingleValuePage+1C2j
		LDR	R0, [SP,#0x38+var_30]
		LDRB	R0, [R4,R0]
		CMP	R0, #0
		BEQ	loc_4ACE
		LDR	R1, [SP,#0x38+var_30]
		SUBS	R0, #1
		STRB	R0, [R4,R1]
		BL	sub_9BC0
		CMP	R0, #2
		BCC	loc_4ACE
		B	loc_4B5C
; ---------------------------------------------------------------------------

loc_4B32				; CODE XREF: showSingleValuePage+1C6j
					; showSingleValuePage+1CAj
		LDR	R0, [SP,#0x38+var_30]
		LDRB	R0, [R4,R0]
		CMP	R0, #0x64 ; 'd'
		BCS	loc_4ACE
		LDR	R1, [SP,#0x38+var_30]
		ADDS	R0, #1
		STRB	R0, [R4,R1]
		BL	sub_9BC0
		CMP	R0, #2
		BCC	loc_4ACE
		B	loc_4B5C
; ---------------------------------------------------------------------------

loc_4B4A				; CODE XREF: showSingleValuePage+1CEj
		LDR	R1, [SP,#0x38+var_30]
		LDR	R0, [SP,#0x38+var_18]
		LDRB	R1, [R0,R1]
		LDR	R0, [SP,#0x38+var_30]
		STRB	R1, [R4,R0]
		BL	sub_9BC0
		CMP	R0, #2
		BCC	loc_4ACE

loc_4B5C				; CODE XREF: showSingleValuePage+1F4j
					; showSingleValuePage+20Cj ...
		MOVS	R0, #0x31 ; '1'
		MOVS	R1, #0xF
		LSLS	R0, R0,	#4
		BL	beep
		MOVS	R1, #0xF
		MOVS	R0, #0
		BL	beep
		B	loc_492E
; ---------------------------------------------------------------------------

loc_4B70				; CODE XREF: showSingleValuePage+1D2j
		MOVS	R0, #1
		ADD	SP, SP,	#0x24
		POP	{R4-R7,PC}
; End of function showSingleValuePage

; ---------------------------------------------------------------------------
		ALIGN 4
off_4B78	DCD byte_20000000	; DATA XREF: showSingleValuePage+18r
; _BYTE	*off_4B7C
off_4B7C	DCD aIdleUp		; DATA XREF: showSingleValuePage+2Er
					; "Idle up"
; _BYTE	*off_4B80
off_4B80	DCD aL100_0		; DATA XREF: showSingleValuePage:loc_495Cr
					; showSingleValuePage+54r
					; "L 100%"
dword_4B84	DCD 0x20000065		; DATA XREF: showSingleValuePage:loc_4960r
					; showSingleValuePage:loc_4A62r
off_4B88	DCD arrow_gfx		; DATA XREF: showSingleValuePage+68r
off_4B8C	DCD unk_200000E0	; DATA XREF: showSingleValuePage+FAr
off_4B90	DCD dword_1FFFFD7C+8	; DATA XREF: showSingleValuePage+172r
off_4B94	DCD dword_2710		; DATA XREF: showSingleValuePage+176r
dword_4B98	DCD 0x4E20		; DATA XREF: showSingleValuePage+17Er
; _BYTE	*off_4B9C
off_4B9C	DCD aNormal_0		; DATA XREF: showSingleValuePage+192r
					; "Normal"

; =============== S U B	R O U T	I N E =======================================


displayGFX				; CODE XREF: sub_23F4+70p
					; SwashAFRPage+B4p ...

var_48		= -0x48
var_44		= -0x44
var_3C		= -0x3C
var_38		= -0x38
var_2C		= -0x2C
var_20		= -0x20
var_1C		= -0x1C

		PUSH	{R0-R2,R4-R7,LR}
		ASRS	R0, R2,	#0x1F
		LSRS	R0, R0,	#0x1D
		ADDS	R0, R0,	R2
		LSRS	R1, R0,	#3
		LSLS	R1, R1,	#3
		SUBS	R5, R2,	R1
		MOVS	R2, #1
		LSLS	R2, R5
		SUB	SP, SP,	#0x28
		SUBS	R2, #1
		STR	R2, [SP,#0x48+var_38]
		MVNS	R2, R2
		STR	R2, [SP,#0x48+var_2C]
		LDR	R2, [SP,#0x48+var_20]
		ASRS	R3, R0,	#3
		LDR	R7, [R2,#8]
		LDR	R2, [R2,#4]
		ASRS	R0, R0,	#3
		ADDS	R2, #7
		LSRS	R2, R2,	#3
		ADDS	R2, R3,	R2
		SUBS	R2, #1
		STR	R2, [SP,#0x48+var_44]
		STR	R0, [SP,#0x48+var_48]
		CMP	R0, R2
		BHI	loc_4C66
		MOVS	R0, #8
		SUBS	R0, R0,	R5
		STR	R0, [SP,#0x48+var_3C]

loc_4BDC				; CODE XREF: displayGFX+C4j
		LDR	R1, [SP,#0x48+var_44]
		LDR	R0, [SP,#0x48+var_48]
		CMP	R0, R1
		BNE	loc_4C04
		LDR	R0, [SP,#0x48+var_20]
		LDR	R0, [R0,#4]
		LSLS	R1, R0,	#0x1D
		BEQ	loc_4C04
		LSLS	R0, R0,	#0x1D
		LSRS	R0, R0,	#0x1D
		ADDS	R0, R0,	R5
		MOVS	R1, #1
		LSLS	R1, R0
		LDR	R0, [SP,#0x48+var_38]
		SUBS	R1, #1
		EORS	R1, R0
		MVNS	R0, R1
		STR	R0, [SP,#0x48+var_38]
		LSRS	R0, R0,	#8
		STR	R0, [SP,#0x48+var_2C]

loc_4C04				; CODE XREF: displayGFX+42j
					; displayGFX+4Aj
		LDR	R0, [SP,#0x48+var_48]
		MOVS	R6, #0
		LSLS	R1, R0,	#7
		LDR	R0, =GFX_ARRAY
		ADDS	R1, R1,	R0
		LDR	R0, [SP,#0x48+var_1C]
		ADDS	R4, R1,	R0
		LDR	R0, [SP,#0x48+var_20]
		LDR	R0, [R0]
		CMP	R0, #0
		BLS	loc_4C56

loc_4C1A				; CODE XREF: displayGFX+B4j
		LDRB	R0, [R4]
		LDR	R1, [SP,#0x48+var_38]
		ANDS	R0, R1
		LDRB	R1, [R7]
		LSLS	R1, R5
		ORRS	R0, R1
		STRB	R0, [R4]
		CMP	R5, #0
		BEQ	loc_4C40
		LDRB	R1, [R7]
		LDR	R0, [SP,#0x48+var_3C]
		LDR	R3, [SP,#0x48+var_2C]
		LSRS	R1, R0
		MOV	R0, R4
		ADDS	R0, #0x80 ; ''
		LDRB	R2, [R0]
		ANDS	R2, R3
		ORRS	R1, R2
		STRB	R1, [R0]

loc_4C40				; CODE XREF: displayGFX+8Aj
		ADDS	R7, #1
		ADDS	R4, #1
		LSLS	R0, R6,	#0x1D
		BNE	loc_4C4C
		BL	sendPacketWithTimer

loc_4C4C				; CODE XREF: displayGFX+A6j
		LDR	R0, [SP,#0x48+var_20]
		ADDS	R6, #1
		LDR	R0, [R0]
		CMP	R0, R6
		BHI	loc_4C1A

loc_4C56				; CODE XREF: displayGFX+78j
		BL	sendPacketWithTimer
		LDR	R0, [SP,#0x48+var_48]
		LDR	R1, [SP,#0x48+var_44]
		ADDS	R0, #1
		STR	R0, [SP,#0x48+var_48]
		CMP	R0, R1
		BLS	loc_4BDC

loc_4C66				; CODE XREF: displayGFX+34j
		ADD	SP, SP,	#0x34
		POP	{R4-R7,PC}
; End of function displayGFX

; ---------------------------------------------------------------------------
		ALIGN 4
off_4C6C	DCD GFX_ARRAY		; DATA XREF: displayGFX+6Ar

; =============== S U B	R O U T	I N E =======================================


fillRegion				; CODE XREF: sub_23F4+1Cp sub_23F4+50p ...

var_38		= -0x38
var_34		= -0x34
var_30		= -0x30
var_2C		= -0x2C
var_24		= -0x24
var_18		= -0x18
arg_0		=  0

		PUSH	{R0-R7,LR}
		ASRS	R0, R1,	#0x1F
		MOV	R5, R1
		LSRS	R0, R0,	#0x1D
		ADDS	R1, R0,	R5
		LSRS	R0, R1,	#3
		SUB	SP, SP,	#0x14
		LSLS	R0, R0,	#3
		LDR	R3, [SP,#0x38+var_18]
		SUBS	R0, R5,	R0
		ADDS	R3, R0,	R3
		SUBS	R7, R3,	R5
		ASRS	R1, R1,	#3
		LDR	R3, =GFX_ARRAY
		LSLS	R1, R1,	#7
		ADDS	R1, R1,	R3
		LDR	R3, [SP,#0x38+var_24]
		LDR	R4, [SP,#0x38+arg_0]
		ADDS	R6, R1,	R3
		MOVS	R3, #1
		LDR	R1, [SP,#0x38+var_24]
		LSLS	R3, R0
		SUBS	R1, R2,	R1
		STR	R1, [SP,#0x38+var_34]
		ADDS	R1, #1
		STR	R1, [SP,#0x38+var_38]
		CMP	R7, #8
		BGE	loc_4D58
		LDR	R7, [SP,#0x38+var_18]
		MOVS	R1, #0
		SUBS	R5, R7,	R5
		ADDS	R7, R5,	#1
		MOV	R12, R7
		CMP	R7, #0
		BLE	loc_4CE2
		MOVS	R7, #1
		LSLS	R5, R5,	#0x1F
		LSLS	R7, R7,	#0x1F
		ADDS	R5, R5,	R7
		BEQ	loc_4CC4
		UXTB	R1, R3
		ADDS	R0, #1

loc_4CC4				; CODE XREF: fillRegion+4Ej
		MOV	R3, R12
		ASRS	R7, R3,	#1
		BEQ	loc_4CE2
		MOVS	R3, #1

loc_4CCC				; CODE XREF: fillRegion+70j
		MOV	R5, R3
		LSLS	R5, R0
		ORRS	R5, R1
		ADDS	R0, #1
		MOV	R1, R3
		LSLS	R1, R0
		ORRS	R1, R5
		ADDS	R0, #1
		UXTB	R1, R1
		SUBS	R7, #1
		BNE	loc_4CCC

loc_4CE2				; CODE XREF: fillRegion+44j
					; fillRegion+58j
		LDR	R0, [SP,#0x38+var_24]
		SUBS	R0, R2,	R0
		MOVS	R2, #1
		LSLS	R0, R0,	#0x1F
		LSLS	R2, R2,	#0x1F
		ADDS	R0, R0,	R2
		CMP	R4, #0
		BEQ	loc_4CF8
		CMP	R4, #1
		BEQ	loc_4D26
		B	loc_4E6E
; ---------------------------------------------------------------------------

loc_4CF8				; CODE XREF: fillRegion+80j
		LDR	R2, [SP,#0x38+var_38]
		CMP	R2, #0
		BLE	loc_4DFC
		SUBS	R6, #1
		CMP	R0, #0
		BEQ	loc_4D0C
		LDRB	R0, [R6,#1]
		ORRS	R0, R1
		STRB	R0, [R6,#1]
		ADDS	R6, #1

loc_4D0C				; CODE XREF: fillRegion+92j
		LDR	R0, [SP,#0x38+var_38]
		ASRS	R0, R0,	#1
		BEQ	loc_4DFC

loc_4D12				; CODE XREF: fillRegion+B2j
		LDRB	R2, [R6,#1]
		ORRS	R2, R1
		STRB	R2, [R6,#1]
		LDRB	R2, [R6,#2]
		ORRS	R2, R1
		STRB	R2, [R6,#2]
		ADDS	R6, #2
		SUBS	R0, #1
		BNE	loc_4D12
		B	loc_4E6E
; ---------------------------------------------------------------------------

loc_4D26				; CODE XREF: fillRegion+84j
		MVNS	R1, R1
		LDR	R2, [SP,#0x38+var_38]
		UXTB	R1, R1
		CMP	R2, #0
		BLE	loc_4DFC
		SUBS	R6, #1
		CMP	R0, #0
		BEQ	loc_4D3E
		LDRB	R0, [R6,#1]
		ANDS	R0, R1
		STRB	R0, [R6,#1]
		ADDS	R6, #1

loc_4D3E				; CODE XREF: fillRegion+C4j
		LDR	R0, [SP,#0x38+var_38]
		ASRS	R0, R0,	#1
		BEQ	loc_4DFC

loc_4D44				; CODE XREF: fillRegion+E4j
		LDRB	R2, [R6,#1]
		ANDS	R2, R1
		STRB	R2, [R6,#1]
		LDRB	R2, [R6,#2]
		ANDS	R2, R1
		STRB	R2, [R6,#2]
		ADDS	R6, #2
		SUBS	R0, #1
		BNE	loc_4D44
		B	loc_4E6E
; ---------------------------------------------------------------------------

loc_4D58				; CODE XREF: fillRegion+36j
		LSLS	R0, R5,	#0x1D
		BEQ	loc_4D86
		SUBS	R3, #1
		MVNS	R0, R3
		UXTB	R0, R0
		CMP	R4, #1
		BNE	loc_4D6A
		MVNS	R0, R0
		UXTB	R0, R0

loc_4D6A				; CODE XREF: fillRegion+F4j
		CMP	R1, #0
		BLE	loc_4D86
		LDR	R1, [SP,#0x38+var_34]
		ADDS	R1, #1

loc_4D72				; CODE XREF: fillRegion+114j
		CMP	R4, #0
		BEQ	loc_4DB8
		LDRB	R2, [R6]
		CMP	R4, #1
		BEQ	loc_4DC0
		EORS	R2, R0

loc_4D7E				; CODE XREF: fillRegion+152j
		STRB	R2, [R6]

loc_4D80				; CODE XREF: fillRegion+14Ej
		ADDS	R6, #1
		SUBS	R1, #1
		BNE	loc_4D72

loc_4D86				; CODE XREF: fillRegion+EAj
					; fillRegion+FCj
		BL	sendPacketWithTimer
		MOVS	R0, #0
		MOV	LR, R0
		MOV	R12, R0
		ADDS	R5, #7
		ASRS	R0, R5,	#0x1F
		LSRS	R0, R0,	#0x1D
		ADDS	R0, R0,	R5
		ASRS	R3, R0,	#3
		LDR	R0, [SP,#0x38+var_24]
		LSLS	R1, R3,	#7
		ADDS	R0, R1,	R0
		STR	R0, [SP,#0x38+var_2C]
		LDR	R0, [SP,#0x38+var_18]
		MOVS	R2, #0xFF
		ADDS	R0, #1
		ASRS	R1, R0,	#0x1F
		LSRS	R1, R1,	#0x1D
		ADDS	R0, R1,	R0
		ASRS	R0, R0,	#3
		SUBS	R0, R0,	R3
		LDR	R5, =GFX_ARRAY
		STR	R0, [SP,#0x38+var_30]
		B	loc_4DFA
; ---------------------------------------------------------------------------

loc_4DB8				; CODE XREF: fillRegion+104j
		LDRB	R2, [R6]
		ORRS	R2, R0
		STRB	R2, [R6]
		B	loc_4D80
; ---------------------------------------------------------------------------

loc_4DC0				; CODE XREF: fillRegion+10Aj
		ANDS	R2, R0
		B	loc_4D7E
; ---------------------------------------------------------------------------

loc_4DC4				; CODE XREF: fillRegion+190j
		LDR	R0, [SP,#0x38+var_38]
		CMP	R0, #0
		BLE	loc_4DEC
		LDR	R1, [SP,#0x38+var_34]
		LDR	R3, [SP,#0x38+var_2C]
		MOVS	R0, #0
		ADDS	R1, #1
		ADD	R3, LR

loc_4DD4				; CODE XREF: fillRegion+17Aj
		CMP	R4, #1
		BEQ	loc_4E3A
		CMP	R4, #0
		BEQ	loc_4E44
		ADDS	R6, R3,	R0
		ADDS	R6, R6,	R5
		LDRB	R7, [R6]
		EORS	R7, R2
		STRB	R7, [R6]

loc_4DE6				; CODE XREF: fillRegion+1D2j
					; fillRegion+1DAj
		ADDS	R0, #1
		SUBS	R1, #1
		BNE	loc_4DD4

loc_4DEC				; CODE XREF: fillRegion+158j
		MOV	R0, LR
		ADDS	R0, #0x80 ; ''
		MOV	LR, R0
		MOV	R0, R12
		ADDS	R0, #1
		MOV	R12, R0
		LDR	R0, [SP,#0x38+var_30]

loc_4DFA				; CODE XREF: fillRegion+146j
		B	loc_4DFE
; ---------------------------------------------------------------------------

loc_4DFC				; CODE XREF: fillRegion+8Cj
					; fillRegion+A0j ...
		B	loc_4E6E
; ---------------------------------------------------------------------------

loc_4DFE				; CODE XREF: fillRegion:loc_4DFAj
		CMP	R0, R12
		BGT	loc_4DC4
		BL	sendPacketWithTimer
		LDR	R1, =0x80000007
		LDR	R0, [SP,#0x38+var_18]
		ANDS	R0, R1
		CMP	R0, #7
		BEQ	loc_4E6E
		LDR	R0, [SP,#0x38+var_18]
		ASRS	R1, R0,	#0x1F
		LSRS	R1, R1,	#0x1D
		ADDS	R2, R1,	R0
		ASRS	R0, R2,	#3
		LSLS	R0, R0,	#7
		ADDS	R1, R0,	R5
		LDR	R0, [SP,#0x38+var_24]

loc_4E20
		LSRS	R2, R2,	#3
		ADDS	R0, R1,	R0
		LDR	R1, [SP,#0x38+var_18]
		LSLS	R2, R2,	#3
		SUBS	R2, R1,	R2
		ADDS	R2, #1
		MOVS	R1, #1
		LSLS	R1, R2
		SUBS	R1, #1
		UXTB	R1, R1
		CMP	R4, #1
		BEQ	loc_4E4C
		B	loc_4E50
; ---------------------------------------------------------------------------

loc_4E3A				; CODE XREF: fillRegion+166j
		MOVS	R6, #0
		ADDS	R7, R3,	R0
		ADDS	R7, R7,	R5
		STRB	R6, [R7]
		B	loc_4DE6
; ---------------------------------------------------------------------------

loc_4E44				; CODE XREF: fillRegion+16Aj
		ADDS	R6, R3,	R0
		ADDS	R6, R6,	R5
		STRB	R2, [R6]
		B	loc_4DE6
; ---------------------------------------------------------------------------

loc_4E4C				; CODE XREF: fillRegion+1C6j
		MVNS	R1, R1
		UXTB	R1, R1

loc_4E50				; CODE XREF: fillRegion+1C8j
		LDR	R2, [SP,#0x38+var_38]
		CMP	R2, #0
		BLE	loc_4E6E
		LDR	R2, [SP,#0x38+var_34]
		ADDS	R2, #1

loc_4E5A				; CODE XREF: fillRegion+1FCj
		CMP	R4, #0
		BEQ	loc_4E76
		LDRB	R3, [R0]
		CMP	R4, #1
		BEQ	loc_4E7E
		EORS	R3, R1

loc_4E66				; CODE XREF: fillRegion+210j
		STRB	R3, [R0]

loc_4E68				; CODE XREF: fillRegion+20Cj
		ADDS	R0, #1
		SUBS	R2, #1
		BNE	loc_4E5A

loc_4E6E				; CODE XREF: fillRegion+86j
					; fillRegion+B4j ...
		BL	sendPacketWithTimer
		ADD	SP, SP,	#0x24
		POP	{R4-R7,PC}
; ---------------------------------------------------------------------------

loc_4E76				; CODE XREF: fillRegion+1ECj
		LDRB	R3, [R0]
		ORRS	R3, R1
		STRB	R3, [R0]
		B	loc_4E68
; ---------------------------------------------------------------------------

loc_4E7E				; CODE XREF: fillRegion+1F2j
		ANDS	R3, R1
		B	loc_4E66
; End of function fillRegion

; ---------------------------------------------------------------------------
		ALIGN 4
off_4E84	DCD GFX_ARRAY		; DATA XREF: fillRegion+1Ar
					; fillRegion+142r
dword_4E88	DCD 0x80000007		; DATA XREF: fillRegion+196r

; =============== S U B	R O U T	I N E =======================================


sub_4E8C				; CODE XREF: DualRateExp+C4p
					; DualRateExp+D2p ...

var_30		= -0x30
var_2C		= -0x2C
var_24		= -0x24
var_20		= -0x20
arg_0		=  0

		PUSH	{R0-R7,LR}
		SUB	SP, SP,	#0xC
		LDR	R0, [SP,#0x30+var_24]
		MOV	R5, R2
		MOV	R4, R3
		CMP	R0, R5
		BLE	loc_4EA2
		LDR	R4, [SP,#0x30+var_20]
		MOV	R5, R0
		STR	R2, [SP,#0x30+var_24]
		STR	R3, [SP,#0x30+var_20]

loc_4EA2				; CODE XREF: sub_4E8C+Cj
		LDR	R0, [SP,#0x30+var_20]
		CMP	R0, R4
		BNE	loc_4EC0
		LDR	R4, [SP,#0x30+var_24]
		CMP	R4, R5
		BGT	loc_4EE8

loc_4EAE				; CODE XREF: sub_4E8C+30j
		MOV	R0, R4
		LDR	R2, [SP,#0x30+arg_0]
		LDR	R1, [SP,#0x30+var_20]
		BL	getGFX
		ADDS	R4, #1
		CMP	R4, R5
		BLE	loc_4EAE
		B	loc_4EE8
; ---------------------------------------------------------------------------

loc_4EC0				; CODE XREF: sub_4E8C+1Aj
		LDR	R0, [SP,#0x30+var_24]
		CMP	R0, R5
		LDR	R0, [SP,#0x30+var_20]
		BNE	loc_4EF0
		CMP	R0, R4
		BGE	loc_4ED0
		MOV	R5, R0
		B	loc_4ED4
; ---------------------------------------------------------------------------

loc_4ED0				; CODE XREF: sub_4E8C+3Ej
		MOV	R5, R4
		MOV	R4, R0

loc_4ED4				; CODE XREF: sub_4E8C+42j
		CMP	R5, R4
		BGT	loc_4EE8

loc_4ED8				; CODE XREF: sub_4E8C+5Aj
		MOV	R1, R5
		LDR	R2, [SP,#0x30+arg_0]
		LDR	R0, [SP,#0x30+var_24]
		BL	getGFX
		ADDS	R5, #1
		CMP	R5, R4
		BLE	loc_4ED8

loc_4EE8				; CODE XREF: sub_4E8C+20j sub_4E8C+32j ...
		BL	sendPacketWithTimer
		ADD	SP, SP,	#0x1C
		POP	{R4-R7,PC}
; ---------------------------------------------------------------------------

loc_4EF0				; CODE XREF: sub_4E8C+3Aj
		CMP	R0, R4
		LDR	R0, [SP,#0x30+var_24]
		BGE	loc_4F62
		LSLS	R7, R0,	#0x10
		LDR	R0, [SP,#0x30+var_20]
		LSLS	R6, R0,	#0x10
		LDR	R0, [SP,#0x30+var_24]
		SUBS	R2, R5,	R0
		LDR	R0, [SP,#0x30+var_20]
		SUBS	R1, R4,	R0
		CMP	R2, R1
		BGE	loc_4F18
		LSLS	R0, R2,	#0x10
		BL	div_
		ADDS	R0, #1
		STR	R0, [SP,#0x30+var_2C]
		MOVS	R0, #0x10000
		B	loc_4F28
; ---------------------------------------------------------------------------

loc_4F18				; CODE XREF: sub_4E8C+7Aj
		MOVS	R0, #0x10000
		STR	R0, [SP,#0x30+var_2C]
		LSLS	R0, R1,	#0x10
		MOV	R1, R2
		BL	div_
		ADDS	R0, #1

loc_4F28				; CODE XREF: sub_4E8C+8Aj
		STR	R0, [SP,#0x30+var_30]
		ASRS	R1, R6,	#0x10
		ASRS	R0, R7,	#0x10
		LDR	R2, [SP,#0x30+arg_0]
		BL	getGFX

loc_4F34				; CODE XREF: sub_4E8C+CAj sub_4E8C+D0j
		LDR	R0, [SP,#0x30+var_2C]
		LDR	R2, [SP,#0x30+arg_0]
		ADDS	R7, R7,	R0
		LDR	R0, [SP,#0x30+var_30]
		ADDS	R6, R6,	R0
		MOVS	R0, #0x8000
		ADDS	R1, R6,	R0
		ADDS	R0, R7,	R0
		ASRS	R1, R1,	#0x10
		ASRS	R0, R0,	#0x10
		BL	getGFX
		BL	sendPacketWithTimer
		ASRS	R0, R7,	#0x10
		CMP	R0, R5
		BLT	loc_4F34
		ASRS	R0, R6,	#0x10
		CMP	R0, R4
		BLT	loc_4F34
		ADD	SP, SP,	#0x1C
		POP	{R4-R7,PC}
; ---------------------------------------------------------------------------

loc_4F62				; CODE XREF: sub_4E8C+68j
		LSLS	R7, R0,	#0x10
		LDR	R0, [SP,#0x30+var_20]
		LDR	R1, =0xFFFF
		LSLS	R0, R0,	#0x10
		ADDS	R6, R0,	R1
		LDR	R0, [SP,#0x30+var_24]
		SUBS	R2, R5,	R0
		LDR	R0, [SP,#0x30+var_20]
		SUBS	R1, R0,	R4
		CMP	R2, R1
		BGE	loc_4F88
		LSLS	R0, R2,	#0x10
		BL	div_
		ADDS	R0, #1
		STR	R0, [SP,#0x30+var_2C]
		MOVS	R0, #0x10000
		B	loc_4F98
; ---------------------------------------------------------------------------

loc_4F88				; CODE XREF: sub_4E8C+EAj
		MOVS	R0, #0x10000
		STR	R0, [SP,#0x30+var_2C]
		LSLS	R0, R1,	#0x10
		MOV	R1, R2
		BL	div_
		ADDS	R0, #1

loc_4F98				; CODE XREF: sub_4E8C+FAj
		STR	R0, [SP,#0x30+var_30]
		ASRS	R1, R6,	#0x10
		ASRS	R0, R7,	#0x10
		LDR	R2, [SP,#0x30+arg_0]
		BL	getGFX

loc_4FA4				; CODE XREF: sub_4E8C+13Aj
					; sub_4E8C+140j
		LDR	R0, [SP,#0x30+var_2C]
		LDR	R2, [SP,#0x30+arg_0]
		ADDS	R7, R7,	R0
		LDR	R0, [SP,#0x30+var_30]
		SUBS	R6, R6,	R0
		MOVS	R0, #0x8000
		SUBS	R1, R6,	R0
		ADDS	R0, R7,	R0
		ASRS	R1, R1,	#0x10
		ASRS	R0, R0,	#0x10
		BL	getGFX
		BL	sendPacketWithTimer
		ASRS	R0, R7,	#0x10
		CMP	R0, R5
		BLT	loc_4FA4
		ASRS	R0, R6,	#0x10
		CMP	R0, R4
		BGT	loc_4FA4
		ADD	SP, SP,	#0x1C
		POP	{R4-R7,PC}
; End of function sub_4E8C

; ---------------------------------------------------------------------------
		ALIGN 4
dword_4FD4	DCD 0xFFFF		; DATA XREF: sub_4E8C+DAr

; =============== S U B	R O U T	I N E =======================================


getGFX					; CODE XREF: DualRateExp:loc_32D0p
					; DualRateExp+122p ...
		PUSH	{R4,R5}
		ASRS	R3, R1,	#0x1F
		LSRS	R3, R3,	#0x1D
		ADDS	R3, R3,	R1
		LSRS	R5, R3,	#3
		LSLS	R5, R5,	#3
		SUBS	R5, R1,	R5
		MOVS	R1, #1
		LSLS	R1, R5
		ASRS	R3, R3,	#3
		LDR	R4, =GFX_ARRAY
		LSLS	R3, R3,	#7
		ADDS	R0, R3,	R0
		ADDS	R3, R0,	R4
		LDRB	R0, [R3]
		CMP	R2, #0
		BEQ	loc_5006
		CMP	R2, #1
		BEQ	loc_500A
		EORS	R0, R1

loc_5000				; CODE XREF: getGFX+30j
		STRB	R0, [R3]
		POP	{R4,R5}
		BX	LR
; ---------------------------------------------------------------------------

loc_5006				; CODE XREF: getGFX+20j
		ORRS	R0, R1
		B	loc_5000
; ---------------------------------------------------------------------------

loc_500A				; CODE XREF: getGFX+24j
		BICS	R0, R1
		STRB	R0, [R3]
		POP	{R4,R5}
		BX	LR
; End of function getGFX

; ---------------------------------------------------------------------------
		ALIGN 4
off_5014	DCD GFX_ARRAY		; DATA XREF: getGFX+14r

; =============== S U B	R O U T	I N E =======================================


drawLine				; CODE XREF: DisplayChannels+34p
					; failsafeOnOff+8Ep ...

var_28		= -0x28
var_24		= -0x24
arg_0		=  0

		PUSH	{R0-R7,LR}
		SUB	SP, SP,	#4
		MOV	R5, R3
		LDR	R4, [SP,#0x28+arg_0]
		MOV	R6, R2
		MOV	R7, R1
		MOV	R3, R1
		STR	R4, [SP,#0x28+var_28]
		LDR	R0, [SP,#0x28+var_24]
		BL	sub_4E8C
		MOV	R2, R6
		MOV	R3, R5
		MOV	R1, R7
		MOV	R0, R2
		STR	R4, [SP,#0x28+var_28]
		BL	sub_4E8C
		MOV	R3, R5
		STR	R4, [SP,#0x28+var_28]
		MOV	R1, R3
		MOV	R0, R6
		LDR	R2, [SP,#0x28+var_24]
		BL	sub_4E8C
		LDR	R2, [SP,#0x28+var_24]
		MOV	R3, R7
		STR	R4, [SP,#0x28+var_28]
		MOV	R1, R5
		MOV	R0, R2
		BL	sub_4E8C
		ADD	SP, SP,	#0x14
		POP	{R4-R7,PC}
; End of function drawLine


; =============== S U B	R O U T	I N E =======================================


; int __fastcall displayTextAt(_BYTE *text, int	x, signed int y, int a4)
displayTextAt				; CODE XREF: sub_23F4+34p sub_23F4+40p ...

var_38		= -0x38
var_34		= -0x34
var_30		= -0x30
var_2C		= -0x2C
var_24		= -0x24

		PUSH	{R0-R7,LR}
		ASRS	R0, R2,	#0x1F
		LSRS	R0, R0,	#0x1D
		MOV	R5, R3
		ADDS	R0, R0,	R2
		ASRS	R3, R0,	#3
		LDR	R4, =GFX_ARRAY
		LSLS	R3, R3,	#7
		ADDS	R3, R3,	R4
		LSRS	R0, R0,	#3
		ADDS	R1, R3,	R1
		LSLS	R0, R0,	#3
		SUBS	R4, R2,	R0
		MOVS	R0, #1
		LSLS	R0, R4
		SUB	SP, SP,	#0x14
		SUBS	R0, #1
		STR	R0, [SP,#0x38+var_38]
		MVNS	R0, R0
		STR	R0, [SP,#0x38+var_2C]
		LDR	R0, [SP,#0x38+var_24]
		STR	R1, [SP,#0x38+var_30]
		LDRB	R0, [R0]
		CMP	R0, #0
		BEQ	loc_50E8
		MOVS	R0, #8
		SUBS	R0, R0,	R4
		STR	R0, [SP,#0x38+var_34]

loc_5094				; CODE XREF: displayTextAt+8Aj
		LDR	R0, [SP,#0x38+var_24]
		LDRB	R0, [R0]
		LSLS	R1, R0,	#3
		LDR	R0, =0xDD31
		ADDS	R1, R1,	R0
		LDR	R0, [SP,#0x38+var_30]
		MOVS	R2, #8

loc_50A2				; CODE XREF: displayTextAt+72j
		CMP	R5, #0
		BEQ	loc_50EC
		LDRB	R3, [R0]
		CMP	R5, #1
		BEQ	loc_5118
		LDRB	R6, [R1]
		LSLS	R6, R4
		EORS	R3, R6
		STRB	R3, [R0]
		CMP	R4, #0
		BEQ	loc_50C8
		LDRB	R6, [R1]
		LDR	R3, [SP,#0x38+var_34]
		LSRS	R6, R3
		MOV	R3, R0
		ADDS	R3, #0x80 ; ''
		LDRB	R7, [R3]
		EORS	R6, R7
		STRB	R6, [R3]

loc_50C8				; CODE XREF: displayTextAt+5Aj
					; displayTextAt+A0j ...
		ADDS	R0, #1
		ADDS	R1, #1
		SUBS	R2, #1
		BNE	loc_50A2
		LDR	R0, [SP,#0x38+var_30]
		ADDS	R0, #8
		STR	R0, [SP,#0x38+var_30]
		LDR	R0, [SP,#0x38+var_24]
		ADDS	R0, #1
		STR	R0, [SP,#0x38+var_24]
		BL	sendPacketWithTimer
		LDR	R0, [SP,#0x38+var_24]
		LDRB	R0, [R0]
		CMP	R0, #0
		BNE	loc_5094

loc_50E8				; CODE XREF: displayTextAt+30j
		ADD	SP, SP,	#0x24
		POP	{R4-R7,PC}
; ---------------------------------------------------------------------------

loc_50EC				; CODE XREF: displayTextAt+48j
		LDRB	R3, [R0]
		LDR	R6, [SP,#0x38+var_38]
		ANDS	R3, R6
		LDRB	R6, [R1]
		LSLS	R6, R4
		ORRS	R3, R6
		STRB	R3, [R0]
		CMP	R4, #0
		BEQ	loc_50C8
		LDRB	R3, [R1]
		LDR	R6, [SP,#0x38+var_34]
		LDR	R7, [SP,#0x38+var_2C]
		LSRS	R3, R6
		MOV	R6, R0
		ADDS	R6, #0x80 ; ''
		MOV	R12, R6
		LDRB	R6, [R6]
		ANDS	R6, R7
		ORRS	R3, R6
		MOV	R6, R12
		STRB	R3, [R6]
		B	loc_50C8
; ---------------------------------------------------------------------------

loc_5118				; CODE XREF: displayTextAt+4Ej
		LDR	R6, [SP,#0x38+var_38]
		ANDS	R3, R6
		LDRB	R6, [R1]
		MVNS	R6, R6
		LSLS	R6, R4
		ORRS	R3, R6
		STRB	R3, [R0]
		CMP	R4, #0
		BEQ	loc_50C8
		LDRB	R3, [R1]
		LDR	R6, [SP,#0x38+var_34]
		MVNS	R3, R3
		ASRS	R3, R6
		LDR	R6, [SP,#0x38+var_38]
		LDR	R7, [SP,#0x38+var_2C]
		ANDS	R3, R6
		MOV	R6, R0
		ADDS	R6, #0x80 ; ''
		MOV	R12, R6
		LDRB	R6, [R6]
		ANDS	R6, R7
		ORRS	R3, R6
		MOV	R6, R12
		STRB	R3, [R6]
		B	loc_50C8
; End of function displayTextAt

; ---------------------------------------------------------------------------
		ALIGN 4
off_514C	DCD GFX_ARRAY		; DATA XREF: displayTextAt+Cr
dword_5150	DCD 0xDD31		; DATA XREF: displayTextAt+3Er

; =============== S U B	R O U T	I N E =======================================


; int __fastcall displayTextAt2(_BYTE *text, int a2, signed int	a3, int	a4)
displayTextAt2				; CODE XREF: sub_23F4+28p
					; FirmwareVerPAge+20p ...
		PUSH	{R3-R7,LR}
		MOV	R5, R3
		MOV	R6, R2
		MOV	R4, R1
		MOV	R7, R0
		BL	strLength
		LSLS	R0, R0,	#2
		SUBS	R1, R4,	R0	; x
		MOV	R3, R5		; a4
		MOV	R2, R6		; y
		MOV	R0, R7		; text
		BL	displayTextAt
		POP	{R3-R7,PC}
; End of function displayTextAt2

; ---------------------------------------------------------------------------
		ALIGN 4

; =============== S U B	R O U T	I N E =======================================


displaySmallTextAt			; CODE XREF: FirmwareVerPAge+14p
					; FirmwareVerPAge+38p ...

var_30		= -0x30
var_2C		= -0x2C
var_28		= -0x28
var_20		= -0x20
var_1C		= -0x1C

		PUSH	{R0-R2,R4-R7,LR}
		SUB	SP, SP,	#0x10
		LDR	R0, [SP,#0x30+var_20]
		LDRB	R0, [R0]
		CMP	R0, #0
		BEQ	loc_5276
		ASRS	R0, R2,	#0x1F
		LSRS	R0, R0,	#0x1D
		ADDS	R0, R0,	R2
		LSRS	R1, R0,	#3
		LSLS	R1, R1,	#3
		SUBS	R1, R2,	R1
		STR	R1, [SP,#0x30+var_30]
		ASRS	R0, R0,	#3
		LDR	R1, =GFX_ARRAY
		LSLS	R0, R0,	#7
		ADDS	R0, R0,	R1
		LDR	R1, [SP,#0x30+var_30]
		STR	R0, [SP,#0x30+var_28]
		UXTB	R0, R1
		ADDS	R0, #1
		STR	R0, [SP,#0x30+var_2C]

loc_51A0				; CODE XREF: displaySmallTextAt+152j
		LDR	R0, [SP,#0x30+var_20]
		MOVS	R1, #6
		LDRB	R0, [R0]
		LDR	R2, =0xE531
		MULS	R1, R0
		ADDS	R3, R1,	R2
		LDR	R4, [SP,#0x30+var_1C]
		LDR	R2, [SP,#0x30+var_28]
		LDR	R1, [SP,#0x30+var_30]
		SUBS	R3, #0xC0 ; 'À'
		ADDS	R2, R2,	R4
		UXTB	R1, R1
		CMP	R0, #0x79 ; 'y'
		BNE	loc_51C0
		LDR	R0, [SP,#0x30+var_2C]
		UXTB	R1, R0

loc_51C0				; CODE XREF: displaySmallTextAt+46j
		MOVS	R5, #0

loc_51C2				; CODE XREF: displaySmallTextAt+11Cj
		LDRB	R6, [R3]
		MOVS	R4, #1
		MOVS	R7, #0x20 ; ' '
		MOV	R0, R2
		TST	R6, R7
		BEQ	loc_51DA
		LDRB	R6, [R0]
		MOV	R7, R4
		LSLS	R7, R1
		ORRS	R6, R7
		STRB	R6, [R0]
		B	loc_51E4
; ---------------------------------------------------------------------------

loc_51DA				; CODE XREF: displaySmallTextAt+58j
		LDRB	R7, [R0]
		MOV	R6, R4
		LSLS	R6, R1
		BICS	R7, R6
		STRB	R7, [R0]

loc_51E4				; CODE XREF: displaySmallTextAt+64j
		LDRB	R6, [R3]
		ADDS	R0, R2,	#1
		MOVS	R7, #0x10
		TST	R6, R7
		BEQ	loc_51FA
		LDRB	R6, [R0]
		MOV	R7, R4
		LSLS	R7, R1
		ORRS	R6, R7
		STRB	R6, [R0]
		B	loc_5204
; ---------------------------------------------------------------------------

loc_51FA				; CODE XREF: displaySmallTextAt+78j
		LDRB	R7, [R0]
		MOV	R6, R4
		LSLS	R6, R1
		BICS	R7, R6
		STRB	R7, [R0]

loc_5204				; CODE XREF: displaySmallTextAt+84j
		LDRB	R6, [R3]
		ADDS	R0, #1
		MOVS	R7, #8
		TST	R6, R7
		BEQ	loc_521A
		LDRB	R6, [R0]
		MOV	R7, R4
		LSLS	R7, R1
		ORRS	R6, R7
		STRB	R6, [R0]
		B	loc_5224
; ---------------------------------------------------------------------------

loc_521A				; CODE XREF: displaySmallTextAt+98j
		LDRB	R7, [R0]
		MOV	R6, R4
		LSLS	R6, R1
		BICS	R7, R6
		STRB	R7, [R0]

loc_5224				; CODE XREF: displaySmallTextAt+A4j
		LDRB	R6, [R3]
		ADDS	R0, #1
		MOVS	R7, #4
		TST	R6, R7
		BEQ	loc_523A
		LDRB	R6, [R0]
		MOV	R7, R4
		LSLS	R7, R1
		ORRS	R6, R7
		STRB	R6, [R0]
		B	loc_5244
; ---------------------------------------------------------------------------

loc_523A				; CODE XREF: displaySmallTextAt+B8j
		LDRB	R7, [R0]
		MOV	R6, R4
		LSLS	R6, R1
		BICS	R7, R6
		STRB	R7, [R0]

loc_5244				; CODE XREF: displaySmallTextAt+C4j
		LDRB	R6, [R3]
		ADDS	R0, #1
		MOVS	R7, #2
		TST	R6, R7
		BEQ	loc_525A
		LDRB	R6, [R0]
		MOV	R7, R4
		LSLS	R7, R1
		ORRS	R6, R7
		STRB	R6, [R0]
		B	loc_5264
; ---------------------------------------------------------------------------

loc_525A				; CODE XREF: displaySmallTextAt+D8j
		LDRB	R7, [R0]
		MOV	R6, R4
		LSLS	R6, R1
		BICS	R7, R6
		STRB	R7, [R0]

loc_5264				; CODE XREF: displaySmallTextAt+E4j
		LDRB	R6, [R3]
		ADDS	R0, #1
		LSLS	R6, R6,	#0x1F
		LSRS	R6, R6,	#0x1F
		LDRB	R6, [R0]
		BEQ	loc_5278
		LSLS	R4, R1
		ORRS	R6, R4
		B	loc_527C
; ---------------------------------------------------------------------------

loc_5276				; CODE XREF: displaySmallTextAt+Aj
		B	loc_52C8
; ---------------------------------------------------------------------------

loc_5278				; CODE XREF: displaySmallTextAt+FAj
		LSLS	R4, R1
		BICS	R6, R4

loc_527C				; CODE XREF: displaySmallTextAt+100j
		ADDS	R1, #1
		ADDS	R3, #1
		UXTB	R1, R1
		STRB	R6, [R0]
		CMP	R1, #8
		BCC	loc_528C
		MOVS	R1, #0
		ADDS	R2, #0x80 ; ''

loc_528C				; CODE XREF: displaySmallTextAt+112j
		ADDS	R5, #1
		CMP	R5, #6
		BLT	loc_51C2
		LDR	R0, [SP,#0x30+var_20]
		LDRB	R0, [R0]
		SUBS	R0, #0x41 ; 'A'
		CMP	R0, #0x19
		BHI	loc_52A6
		LDR	R0, [SP,#0x30+var_20]
		LDRB	R0, [R0,#1]
		SUBS	R0, #0x41 ; 'A'
		CMP	R0, #0x19
		BLS	loc_52CC

loc_52A6				; CODE XREF: displaySmallTextAt+126j
		LDR	R0, [SP,#0x30+var_20]
		LDRB	R0, [R0,#1]
		CMP	R0, #0x25 ; '%'
		BEQ	loc_52CC
		LDR	R0, [SP,#0x30+var_1C]
		ADDS	R0, #6

loc_52B2				; CODE XREF: displaySmallTextAt+15Cj
		STR	R0, [SP,#0x30+var_1C]
		LDR	R0, [SP,#0x30+var_20]
		ADDS	R0, #1
		STR	R0, [SP,#0x30+var_20]
		BL	sendPacketWithTimer
		LDR	R0, [SP,#0x30+var_20]
		LDRB	R0, [R0]
		CMP	R0, #0
		BEQ	loc_52C8
		B	loc_51A0
; ---------------------------------------------------------------------------

loc_52C8				; CODE XREF: displaySmallTextAt:loc_5276j
					; displaySmallTextAt+150j
		ADD	SP, SP,	#0x1C
		POP	{R4-R7,PC}
; ---------------------------------------------------------------------------

loc_52CC				; CODE XREF: displaySmallTextAt+130j
					; displaySmallTextAt+138j
		LDR	R0, [SP,#0x30+var_1C]
		ADDS	R0, #7
		B	loc_52B2
; End of function displaySmallTextAt

; ---------------------------------------------------------------------------
		ALIGN 4
off_52D4	DCD GFX_ARRAY		; DATA XREF: displaySmallTextAt+1Cr
dword_52D8	DCD 0xE531		; DATA XREF: displaySmallTextAt+32r

; =============== S U B	R O U T	I N E =======================================


displayTextFromRight			; CODE XREF: SwashAFRPage+1Ep
		PUSH	{R3-R7,LR}
		MOV	R5, R3
		MOV	R6, R2
		MOV	R4, R1
		MOV	R7, R0
		BL	strLength
		LSLS	R0, R0,	#3
		SUBS	R1, R4,	R0	; x
		MOV	R3, R5		; a4
		MOV	R2, R6		; y
		MOV	R0, R7		; text
		BL	displayTextAt
		POP	{R3-R7,PC}
; End of function displayTextFromRight

; ---------------------------------------------------------------------------
		ALIGN 4

; =============== S U B	R O U T	I N E =======================================


getSensorNameObsolet
		CMP	R0, #0x7C ; '|'
		BEQ	loc_533C
		BGT	loc_5314
		CMP	R0, #0
		BEQ	loc_5330
		CMP	R0, #1
		BEQ	loc_532C
		CMP	R0, #2
		BEQ	loc_5328
		CMP	R0, #3
		BNE	loc_5324
		B	loc_5334
; ---------------------------------------------------------------------------

loc_5314				; CODE XREF: getSensorNameObsolet+4j
		CMP	R0, #0x7D ; '}'
		BEQ	loc_5338
		CMP	R0, #0x7E ; '~'
		BEQ	loc_5340
		CMP	R0, #0x7F ; ''
		BEQ	loc_5344
		CMP	R0, #0xFE ; 'þ'
		BEQ	loc_5348

loc_5324				; CODE XREF: getSensorNameObsolet+14j
		LDR	R0, =dword_D554
		BX	LR
; ---------------------------------------------------------------------------

loc_5328				; CODE XREF: getSensorNameObsolet+10j
		LDR	R0, =aMot	; " Mot"
		BX	LR
; ---------------------------------------------------------------------------

loc_532C				; CODE XREF: getSensorNameObsolet+Cj
		LDR	R0, =aTem	; " Tem"
		BX	LR
; ---------------------------------------------------------------------------

loc_5330				; CODE XREF: getSensorNameObsolet+8j
		LDR	R0, =aIntv	; "IntV"
		BX	LR
; ---------------------------------------------------------------------------

loc_5334				; CODE XREF: getSensorNameObsolet+16j
		LDR	R0, =aExtv	; "ExtV"
		BX	LR
; ---------------------------------------------------------------------------

loc_5338				; CODE XREF: getSensorNameObsolet+1Aj
		LDR	R0, =aOdo2	; "Odo2"
		BX	LR
; ---------------------------------------------------------------------------

loc_533C				; CODE XREF: getSensorNameObsolet+2j
		LDR	R0, =aOdo1	; "Odo1"
		BX	LR
; ---------------------------------------------------------------------------

loc_5340				; CODE XREF: getSensorNameObsolet+1Ej
		LDR	R0, =aSpe	; " Spe"
		BX	LR
; ---------------------------------------------------------------------------

loc_5344				; CODE XREF: getSensorNameObsolet+22j
		LDR	R0, =aTx_v	; "Tx.V"
		BX	LR
; ---------------------------------------------------------------------------

loc_5348				; CODE XREF: getSensorNameObsolet+26j
		LDR	R0, =aErr	; " Err"
		BX	LR
; End of function getSensorNameObsolet

; ---------------------------------------------------------------------------
off_534C	DCD dword_D554		; DATA XREF: getSensorNameObsolet:loc_5324r
off_5350	DCD aMot		; DATA XREF: getSensorNameObsolet:loc_5328r
					; " Mot"
off_5354	DCD aTem		; DATA XREF: getSensorNameObsolet:loc_532Cr
					; " Tem"
off_5358	DCD aIntv		; DATA XREF: getSensorNameObsolet:loc_5330r
					; "IntV"
off_535C	DCD aExtv		; DATA XREF: getSensorNameObsolet:loc_5334r
					; "ExtV"
off_5360	DCD aOdo2		; DATA XREF: getSensorNameObsolet:loc_5338r
					; "Odo2"
off_5364	DCD aOdo1		; DATA XREF: getSensorNameObsolet:loc_533Cr
					; "Odo1"
off_5368	DCD aSpe		; DATA XREF: getSensorNameObsolet:loc_5340r
					; " Spe"
off_536C	DCD aTx_v		; DATA XREF: getSensorNameObsolet:loc_5344r
					; "Tx.V"
off_5370	DCD aErr		; DATA XREF: getSensorNameObsolet:loc_5348r
					; " Err"

; =============== S U B	R O U T	I N E =======================================


; signed int __fastcall	sensorsFunction(int sensorID, int index, _DWORD	*a3)
sensorsFunction				; CODE XREF: formatSensorData+8p
					; sub_61EC:loc_629Cp ...

var_18		= -0x18

		PUSH	{R0-R2,R4-R7,LR}
		MOV	R7, R1
		MOV	R6, R0
		BL	sub_A158
		LDR	R0, =byte_20000000
		MOVS	R4, #0
		LDR	R0, [R0,#(activeSensors	- 0x20000000)]
		CMP	R0, #0
		BLS	loc_53B6
		LDR	R5, =sensorsArrayInRam

loc_538A				; CODE XREF: sensorsFunction+40j
		LSLS	R1, R4,	#3
		LDRB	R2, [R5,R1]
		CMP	R2, R6
		BNE	loc_53B0
; ---------------------------------------------------------------------------
unk_5392	DCB 0xC0 ; À
		DCB 0x46 ; F
		DCB 0xC0 ; À
		DCB 0x46 ; F
		DCB 0xC0 ; À
		DCB 0x46 ; F
		DCB 0xC0 ; À
		DCB 0x46 ; F
; ---------------------------------------------------------------------------
		LDR	R0, [SP,#0x20+var_18]
		CMP	R0, #0
		BEQ	loc_53A2
		STR	R4, [R0]

loc_53A2				; CODE XREF: sensorsFunction+2Aj
		BL	sub_A190
		LSLS	R0, R4,	#3
		ADDS	R0, R0,	R5
		LDRH	R0, [R0,#(sensorsArrayInRam+2 -	0x200001A4)]
		ADD	SP, SP,	#0xC
		POP	{R4-R7,PC}
; ---------------------------------------------------------------------------

loc_53B0				; CODE XREF: sensorsFunction+1Cj
		ADDS	R4, #1
		CMP	R4, R0
		BCC	loc_538A

loc_53B6				; CODE XREF: sensorsFunction+12j
		BL	sub_A190
		MOVS	R0, #0x8000
		ADD	SP, SP,	#0xC
		POP	{R4-R7,PC}
; End of function sensorsFunction

; ---------------------------------------------------------------------------
		ALIGN 4
off_53C4	DCD byte_20000000	; DATA XREF: sensorsFunction+Ar
sensorList3	DCD sensorsArrayInRam	; DATA XREF: sensorsFunction+14r

; =============== S U B	R O U T	I N E =======================================


formatSensorData			; CODE XREF: SensorsList+84p
					; sensorsListMainScreen+16Ep ...
		PUSH	{R4-R6,LR}
		MOV	R5, R2
		MOV	R6, R0
		MOVS	R2, #0		; a3
		BL	sensorsFunction
		MOV	R4, R0
		MOVS	R0, #0x8000
		CMP	R4, R0
		BNE	loc_53E8
		MOVS	R0, #0
		STRB	R0, [R5]
		POP	{R4-R6,PC}
; ---------------------------------------------------------------------------

loc_53E8				; CODE XREF: formatSensorData+14j
		LDR	R0, =byte_20000000
		CMP	R6, #0x7C ; '|'
		BEQ	loc_54E6
		BGT	loc_5402
		CMP	R6, #0
		BEQ	loc_5472
		CMP	R6, #1
		BEQ	loc_542A
		CMP	R6, #2
		BEQ	loc_541E
		CMP	R6, #3
		BNE	loc_5412
		B	loc_5472
; ---------------------------------------------------------------------------

loc_5402				; CODE XREF: formatSensorData+22j
		CMP	R6, #0x7D ; '}'
		BEQ	loc_54A4
		CMP	R6, #0x7E ; '~'
		BEQ	loc_54E2
		CMP	R6, #0x7F ; ''
		BEQ	loc_5472
		CMP	R6, #0xFE ; 'þ'
		BEQ	loc_54E4

loc_5412				; CODE XREF: formatSensorData+32j
		MOV	R2, R4
		MOV	R1, R6
		MOV	R0, R5
		BL	formatSensorValue
		POP	{R4-R6,PC}
; ---------------------------------------------------------------------------

loc_541E				; CODE XREF: formatSensorData+2Ej
		MOV	R2, R4
		ADR	R1, aUrpm	; "%uRPM"
		MOV	R0, R5
		BL	sprintf
		POP	{R4-R6,PC}
; ---------------------------------------------------------------------------

loc_542A				; CODE XREF: formatSensorData+2Aj
		MOVS	R0, #0x190
		CMP	R4, R0
		BCS	loc_544E
		MOV	R0, R4
		MOVS	R1, #0xA
		ADDS	R0, #9
		BL	div_Other
		MOVS	R2, #9
		SUBS	R3, R2,	R1
		MOV	R2, R0
		SUBS	R2, #0x28 ; '('
		ADR	R1, aD_UC	; "%d.%u C"
		MOV	R0, R5
		BL	sprintf
		POP	{R4-R6,PC}
; ---------------------------------------------------------------------------

loc_544E				; CODE XREF: formatSensorData+64j
		MOVS	R1, #0xA
		MOV	R0, R4
		BL	div_Other
		MOV	R0, R4
		MOV	R6, R1
		SUBS	R0, #0xFF
		MOVS	R1, #0xA
		SUBS	R0, #0x91 ; ''
		BL	div_
		MOV	R2, R0
		MOV	R3, R6
		ADR	R1, aD_UC	; "%d.%u C"
		MOV	R0, R5
		BL	sprintf
		POP	{R4-R6,PC}
; ---------------------------------------------------------------------------

loc_5472				; CODE XREF: formatSensorData+26j
					; formatSensorData+34j	...
		SXTH	R0, R4
		CMP	R0, #0
		BGE	loc_5490
		NEGS	R0, R0
		SXTH	R0, R0
		MOVS	R1, #0x64 ; 'd'
		BL	div_
		MOV	R3, R1
		MOV	R2, R0
		ADR	R1, aU_02uv	; "-%u.%02uV"
		MOV	R0, R5
		BL	sprintf
		POP	{R4-R6,PC}
; ---------------------------------------------------------------------------

loc_5490				; CODE XREF: formatSensorData+AAj
		MOVS	R1, #0x64 ; 'd'
		BL	div_
		MOV	R3, R1
		MOV	R2, R0
		ADR	R1, aU_02uv_0	; "%u.%02uV"
		MOV	R0, R5
		BL	sprintf
		POP	{R4-R6,PC}
; ---------------------------------------------------------------------------

loc_54A4				; CODE XREF: formatSensorData+38j
		CMP	R6, #0x7C ; '|'
		BEQ	loc_54E6
		LDR	R0, [R0,#(usedModelPtr - 0x20000000)]
		MOVS	R1, #0xC
		ADDS	R0, #0x82 ; ''
		ADDS	R1, R0,	R1
		LDRB	R2, [R1]
		MOV	R0, R2
		LDRB	R2, [R1,#1]
		LSLS	R2, R2,	#8
		ORRS	R0, R2
		LDRB	R2, [R1,#2]
		LSLS	R2, R2,	#0x10
		ORRS	R0, R2

loc_54C0				; CODE XREF: formatSensorData+132j
		LDR	R1, =dword_2710
		BL	div_Other
		MOV	R4, R0
		MOV	R0, R1
		MOVS	R1, #0x3E8
		BL	div_Other
		MOV	R3, R0
		MOV	R2, R4
		ADR	R1, aU_Ukm	; "%u.%uKm"
		MOV	R0, R5
		BL	sprintf
		POP	{R4-R6,PC}
; ---------------------------------------------------------------------------
		B	loc_54E6
; ---------------------------------------------------------------------------

loc_54E2				; CODE XREF: formatSensorData+3Cj
		B	loc_5500
; ---------------------------------------------------------------------------

loc_54E4				; CODE XREF: formatSensorData+44j
		B	loc_5514
; ---------------------------------------------------------------------------

loc_54E6				; CODE XREF: formatSensorData+20j
					; formatSensorData+DAj	...
		LDR	R0, [R0,#0x2C]
		MOVS	R1, #8
		ADDS	R0, #0x82 ; ''
		ADDS	R1, R0,	R1
		LDRB	R2, [R1]
		MOV	R0, R2
		LDRB	R2, [R1,#1]
		LSLS	R2, R2,	#8
		ORRS	R0, R2
		LDRB	R2, [R1,#2]
		LSLS	R2, R2,	#0x10
		ORRS	R0, R2
		B	loc_54C0
; ---------------------------------------------------------------------------

loc_5500				; CODE XREF: formatSensorData:loc_54E2j
		MOVS	R1, #0xA
		MOV	R0, R4
		BL	div_Other
		MOV	R2, R0
		ADR	R1, aUkmH	; "%uKm/h"
		MOV	R0, R5
		BL	sprintf
		POP	{R4-R6,PC}
; ---------------------------------------------------------------------------

loc_5514				; CODE XREF: formatSensorData:loc_54E4j
		MOV	R2, R4
		ADR	R1, aU		; "%u%%"
		MOV	R0, R5
		BL	sprintf
		POP	{R4-R6,PC}
; End of function formatSensorData

; ---------------------------------------------------------------------------
off_5520	DCD byte_20000000	; DATA XREF: formatSensorData:loc_53E8r
		DCB 0x25 ; %
		DCB 0x75, 0, 0
aUrpm		DCB "%uRPM",0           ; DATA XREF: formatSensorData+54o
		ALIGN 0x10
aD_UC		DCB "%d.%u C",0         ; DATA XREF: formatSensorData+78o
					; formatSensorData+9Co
aU_02uv		DCB "-%u.%02uV",0       ; DATA XREF: formatSensorData+BAo
		ALIGN 4
aU_02uv_0	DCB "%u.%02uV",0        ; DATA XREF: formatSensorData+CEo
		DCB 0, 0, 0
off_5550	DCD dword_2710		; DATA XREF: formatSensorData:loc_54C0r
aU_Ukm		DCB "%u.%uKm",0         ; DATA XREF: formatSensorData+10Ao
aUkmH		DCB "%uKm/h",0          ; DATA XREF: formatSensorData+13Eo
		DCB 0
aU		DCB "%u%%",0            ; DATA XREF: formatSensorData+14Ao
		DCB 0, 0, 0

; =============== S U B	R O U T	I N E =======================================


GyroscopePAge				; DATA XREF: ROM:0000D3ACo
					; ROM:0000D474o
		PUSH	{R3-R7,LR}
		MOVS	R6, #0
		LDR	R4, =byte_20000000
		MOVS	R7, #1

loc_5574				; CODE XREF: GyroscopePAge+C8j
					; GyroscopePAge+DCj ...
		BL	callSetupDMAandSend
		MOVS	R5, #0
		BL	getInputStates
		LDR	R1, [R4,#(usedModelPtr - 0x20000000)]
		ADDS	R1, #0x20 ; ' '
		LDRB	R2, [R1,#0xC]
		MOV	R1, R7
		LSLS	R1, R2
		TST	R0, R1
		BEQ	loc_558E
		MOVS	R5, #1

loc_558E				; CODE XREF: GyroscopePAge+1Ej
		LDR	R0, =0xCE05
		BL	displayPageHeader
		MOVS	R3, #0		; a4
		MOVS	R2, #0x18	; y
		MOVS	R1, #0x10	; x
		LDR	R0, =aGyro	; text
		BL	displayTextAt
		LDR	R0, [R4,#(usedModelPtr - 0x20000000)]
		ADDS	R0, #0x20 ; ' '
		LDRB	R0, [R0,#0x17]
		LSLS	R0, R0,	#0x1C
		BPL	loc_55AE
		LDR	R0, =0xCA77
		B	loc_55B0
; ---------------------------------------------------------------------------

loc_55AE				; CODE XREF: GyroscopePAge+3Cj
		LDR	R0, =aOff_0	; text

loc_55B0				; CODE XREF: GyroscopePAge+40j
		MOVS	R3, #0		; a4
		MOVS	R2, #0x18	; y
		MOVS	R1, #0x40 ; '@'	; x
		BL	displayTextAt
		MOVS	R3, #0		; a4
		MOVS	R2, #0x20 ; ' '	; y
		MOVS	R1, #0x10	; x
		LDR	R0, =aMode_0	; text
		BL	displayTextAt
		CMP	R5, #0
		BEQ	loc_55CE
		LDR	R0, =aIdleUp	; "Idle up"
		B	loc_55D0
; ---------------------------------------------------------------------------

loc_55CE				; CODE XREF: GyroscopePAge+5Cj
		LDR	R0, =aNormal_0	; text

loc_55D0				; CODE XREF: GyroscopePAge+60j
		MOVS	R3, #0		; a4
		MOVS	R2, #0x20 ; ' '	; y
		MOVS	R1, #0x40 ; '@'	; x
		BL	displayTextAt
		MOVS	R3, #0		; a4
		MOVS	R2, #0x28 ; '('	; y
		MOVS	R1, #0x10	; x
		LDR	R0, =aValue	; text
		BL	displayTextAt
		LDR	R0, [R4,#(usedModelPtr - 0x20000000)]
		MOVS	R2, #3		; length
		ADDS	R0, R0,	R5
		ADDS	R0, #0x20 ; ' '
		LDRB	R0, [R0,#0x1A]	; sourceVal
		LDR	R1, =a100_0	; "100%"
		BL	intToString
		MOVS	R3, #0		; a4
		MOVS	R2, #0x28 ; '('	; y
		MOVS	R1, #0x40 ; '@'	; x
		LDR	R0, =a100_0	; "100%"
		BL	displayTextAt
		LSLS	R2, R6,	#4
		ADDS	R2, #0x18
		MOVS	R1, #8
		LDR	R0, =arrow_gfx
		BL	displayGFX
		BL	LCD_updateCALL
		BL	getKeyCode
		CMP	R0, #8
		BEQ	loc_563A
		CMP	R0, #0x18
		BEQ	loc_563A
		CMP	R0, #9
		BEQ	loc_567E
		CMP	R0, #0x17
		BEQ	loc_567E
		CMP	R0, #0x16
		BEQ	loc_56B0
		CMP	R0, #0xA
		BEQ	loc_56CE
		CMP	R0, #0x19
		BEQ	loc_56DA
		CMP	R0, #0xB
		BNE	loc_5574
		MOVS	R0, #0
		POP	{R3-R7,PC}
; ---------------------------------------------------------------------------

loc_563A				; CODE XREF: GyroscopePAge+ACj
					; GyroscopePAge+B0j
		LDR	R0, [R4,#0x2C]
		CMP	R6, #0
		BEQ	loc_5658
		ADDS	R1, R0,	R5
		ADDS	R1, #0x20 ; ' '
		LDRB	R0, [R1,#0x1A]
		CMP	R0, #0
		BEQ	loc_5574
		SUBS	R0, #1
		STRB	R0, [R1,#0x1A]
		BL	sub_9BC0
		CMP	R0, #2
		BCC	loc_5574
		B	loc_566A
; ---------------------------------------------------------------------------

loc_5658				; CODE XREF: GyroscopePAge+D2j
		ADDS	R0, #0x20 ; ' '
		LDRB	R1, [R0,#0x17]
		MOVS	R2, #8
		EORS	R1, R2
		STRB	R1, [R0,#0x17]
		BL	sub_9BC0
		CMP	R0, #2
		BCC	loc_5574

loc_566A				; CODE XREF: GyroscopePAge+EAj
					; GyroscopePAge+12Ej ...
		MOVS	R0, #0x31 ; '1'
		MOVS	R1, #0xF
		LSLS	R0, R0,	#4
		BL	beep
		MOVS	R1, #0xF
		MOVS	R0, #0
		BL	beep

loc_567C				; CODE XREF: GyroscopePAge+120j
					; GyroscopePAge+12Cj ...
		B	loc_5574
; ---------------------------------------------------------------------------

loc_567E				; CODE XREF: GyroscopePAge+B4j
					; GyroscopePAge+B8j
		LDR	R0, [R4,#0x2C]
		CMP	R6, #0
		BEQ	loc_569C
		ADDS	R1, R0,	R5
		ADDS	R1, #0x20 ; ' '
		LDRB	R0, [R1,#0x1A]
		CMP	R0, #0x64 ; 'd'
		BCS	loc_567C
		ADDS	R0, #1
		STRB	R0, [R1,#0x1A]
		BL	sub_9BC0
		CMP	R0, #2
		BCC	loc_567C
		B	loc_566A
; ---------------------------------------------------------------------------

loc_569C				; CODE XREF: GyroscopePAge+116j
		ADDS	R0, #0x20 ; ' '
		LDRB	R1, [R0,#0x17]
		MOVS	R2, #8
		EORS	R1, R2
		STRB	R1, [R0,#0x17]
		BL	sub_9BC0
		CMP	R0, #2
		BCC	loc_567C
		B	loc_566A
; ---------------------------------------------------------------------------

loc_56B0				; CODE XREF: GyroscopePAge+BCj
		CMP	R6, #1
		BNE	loc_567C
		LDR	R0, =0xD179
		LDR	R1, [R4,#(usedModelPtr - 0x20000000)]
		ADDS	R0, R0,	R5
		ADDS	R0, #0x20 ; ' '
		ADDS	R1, R1,	R5
		LDRB	R0, [R0,#0x1A]
		ADDS	R1, #0x20 ; ' '
		STRB	R0, [R1,#0x1A]
		BL	sub_9BC0
		CMP	R0, #2
		BCC	loc_567C
		B	loc_566A
; ---------------------------------------------------------------------------

loc_56CE				; CODE XREF: GyroscopePAge+C0j
		EORS	R6, R7
		BL	sub_9BC0
		CMP	R0, #2
		BCC	loc_567C
		B	loc_566A
; ---------------------------------------------------------------------------

loc_56DA				; CODE XREF: GyroscopePAge+C4j
		MOVS	R0, #1
		POP	{R3-R7,PC}
; End of function GyroscopePAge

; ---------------------------------------------------------------------------
		ALIGN 0x10
off_56E0	DCD byte_20000000	; DATA XREF: GyroscopePAge+4r
dword_56E4	DCD 0xCE05		; DATA XREF: GyroscopePAge:loc_558Er
; _BYTE	*off_56E8
off_56E8	DCD aGyro		; DATA XREF: GyroscopePAge+2Er
					; "Gyro"
dword_56EC	DCD 0xCA77		; DATA XREF: GyroscopePAge+3Er
; _BYTE	*off_56F0
off_56F0	DCD aOff_0		; DATA XREF: GyroscopePAge:loc_55AEr
					; "Off"
; _BYTE	*off_56F4
off_56F4	DCD aMode_0		; DATA XREF: GyroscopePAge+54r
					; "Mode"
off_56F8	DCD aIdleUp		; DATA XREF: GyroscopePAge+5Er
					; "Idle up"
; _BYTE	*off_56FC
off_56FC	DCD aNormal_0		; DATA XREF: GyroscopePAge:loc_55CEr
					; "Normal"
; _BYTE	*off_5700
off_5700	DCD aValue		; DATA XREF: GyroscopePAge+74r
					; "Value"
; char *off_5704
off_5704	DCD a100_0		; DATA XREF: GyroscopePAge+84r
					; GyroscopePAge+90r
					; "100%"
off_5708	DCD arrow_gfx		; DATA XREF: GyroscopePAge+9Cr
dword_570C	DCD 0xD179		; DATA XREF: GyroscopePAge+148r

; =============== S U B	R O U T	I N E =======================================


i2cInterrupt
		PUSH	{R4-R7}
		LDR	R0, =0x40066000
		LDRB	R1, [R0,#3]
		MOVS	R2, #2
		ORRS	R1, R2
		STRB	R1, [R0,#3]
		LDR	R1, =byte_20000114
		MOV	R2, R1
		LDR	R3, [R2,#(dword_20000124 - 0x20000114)]
		LDRB	R7, [R1]
		LDRB	R5, [R2,#(byte_20000115	- 0x20000114)]
		LDR	R6, [R2,#(dword_20000120 - 0x20000114)]
		SUBS	R4, R3,	#1
		LDR	R2, [R2,#(dword_20000128 - 0x20000114)]
		CMP	R7, #1
		BEQ	loc_5742
		CMP	R7, #2
		BEQ	loc_5788
		SUBS	R3, #2
		CMP	R2, R3
		BNE	loc_579A
		LDRB	R3, [R0,#2]
		MOVS	R4, #8
		ORRS	R3, R4
		B	loc_57AC
; ---------------------------------------------------------------------------

loc_5742				; CODE XREF: i2cInterrupt+1Ej
		LDRB	R7, [R0,#3]
		LSLS	R7, R7,	#0x1F
		BEQ	loc_5758
		LDRB	R3, [R0,#2]
		MOVS	R4, #0xDF ; 'ß'
		ANDS	R3, R4
		STRB	R3, [R0,#2]
		MOVS	R0, #0
		STRB	R0, [R1,#(byte_20000116	- 0x20000114)]
		STRB	R0, [R1]
		B	loc_5782
; ---------------------------------------------------------------------------

loc_5758				; CODE XREF: i2cInterrupt+36j
		CMP	R2, R3
		BCS	loc_576E
		CMP	R2, R4
		BNE	loc_5768
		LDRB	R3, [R0,#2]
		MOVS	R4, #8
		ORRS	R3, R4
		STRB	R3, [R0,#2]

loc_5768				; CODE XREF: i2cInterrupt+4Ej
		LDRB	R3, [R6,R2]
		STRB	R3, [R0,#4]
		B	loc_5782
; ---------------------------------------------------------------------------

loc_576E				; CODE XREF: i2cInterrupt+4Aj
		CMP	R2, R3
		BNE	loc_5782
		MOVS	R3, #0
		STRB	R3, [R1]
		CMP	R5, #0
		BNE	loc_5782
		LDRB	R3, [R0,#2]
		MOVS	R4, #0xDF ; 'ß'
		ANDS	R3, R4
		STRB	R3, [R0,#2]

loc_5782				; CODE XREF: i2cInterrupt+46j
					; i2cInterrupt+5Cj ...
		ADDS	R2, #1
		STR	R2, [R1,#(dword_20000128 - 0x20000114)]
		B	loc_57B8
; ---------------------------------------------------------------------------

loc_5788				; CODE XREF: i2cInterrupt+22j
		LDRB	R2, [R0,#2]
		MOVS	R3, #0xEF ; 'ï'
		ANDS	R2, R3
		STRB	R2, [R0,#2]
		LDRB	R0, [R0,#4]
		MOVS	R0, #3
		STRB	R0, [R1]

loc_5796				; CODE XREF: i2cInterrupt+ACj
					; i2cInterrupt+B2j
		POP	{R4-R7}
		BX	LR
; ---------------------------------------------------------------------------

loc_579A				; CODE XREF: i2cInterrupt+28j
		CMP	R2, R4
		BNE	loc_57AE
		MOVS	R3, #0
		STRB	R3, [R1]
		CMP	R5, #0
		BNE	loc_57AE
		LDRB	R3, [R0,#2]
		MOVS	R4, #0xDF ; 'ß'
		ANDS	R3, R4

loc_57AC				; CODE XREF: i2cInterrupt+30j
		STRB	R3, [R0,#2]

loc_57AE				; CODE XREF: i2cInterrupt+8Cj
					; i2cInterrupt+94j
		LDRB	R0, [R0,#4]
		STRB	R0, [R6,R2]
		LDR	R0, [R1,#(dword_20000128 - 0x20000114)]
		ADDS	R0, #1
		STR	R0, [R1,#(dword_20000128 - 0x20000114)]

loc_57B8				; CODE XREF: i2cInterrupt+76j
		LDRB	R0, [R1]
		CMP	R0, #0
		BNE	loc_5796
		LDR	R2, [R1,#(dword_2000011C - 0x20000114)]
		CMP	R2, #0
		BEQ	loc_5796
		LDRB	R0, [R1,#(byte_20000116	- 0x20000114)]
		POP	{R4-R7}
		BX	R2
; End of function i2cInterrupt

; ---------------------------------------------------------------------------
		ALIGN 4
dword_57CC	DCD 0x40066000		; DATA XREF: i2cInterrupt+2r
off_57D0	DCD byte_20000114	; DATA XREF: i2cInterrupt+Cr

; =============== S U B	R O U T	I N E =======================================


setSensorValue				; CODE XREF: sub_618C+44p
					; rxpacketHandle+114p ...
		PUSH	{R3-R7,LR}
		MOV	R4, R0
		LDRB	R0, [R0]

loc_57DA
		CMP	R0, #0xFE ; 'þ'
		BLE	loc_57FE
		NOP
		NOP
		NOP
		NOP
		NOP
		NOP
		NOP
		NOP
		NOP
		NOP
		NOP
		NOP
		NOP
		NOP
		NOP
		B	loc_58E6
; ---------------------------------------------------------------------------

loc_57FE				; CODE XREF: setSensorValue+8j
		LDR	R5, =byte_20000000
		LDRB	R2, [R4,#1]
		LDR	R1, [R5,#(usedModelPtr - 0x20000000)]
		ADDS	R1, #0x80 ; ''
		LDRB	R3, [R1,#7]
		CMP	R2, R3
		BNE	loc_5880
		CMP	R0, #2
		BNE	loc_5880
		LDR	R7, =timer
		LDR	R0, [R7]
		LDR	R2, [R5,#(dword_20000028 - 0x20000000)]
		SUBS	R6, R0,	R2
		LDRB	R0, [R4,#3]
		LDRB	R2, [R4,#2]
		LSLS	R0, R0,	#8
		ORRS	R0, R2
		LDRB	R2, [R1,#9]
		LDRB	R1, [R1,#8]
		LSLS	R2, R2,	#8
		ORRS	R2, R1
		MULS	R0, R2
		MOVS	R1, #0x64 ; 'd'
		BL	div_
		MULS	R0, R6
		LDR	R1, =unk_EA60
		BL	div__0
		MOV	R1, R0
		LDR	R0, [R5,#(usedModelPtr - 0x20000000)]
		MOVS	R2, #8
		ADDS	R0, #0x82 ; ''
		ADDS	R3, R0,	R2
		LDRB	R6, [R3]
		MOV	R2, R6
		LDRB	R6, [R3,#1]
		LSLS	R6, R6,	#8
		ORRS	R2, R6
		LDRB	R6, [R3,#2]
		ORRS	R2, R6
		ADDS	R2, R2,	R1
		STRB	R2, [R0,#8]
		LSRS	R3, R2,	#8
		STRB	R3, [R0,#9]
		LSRS	R3, R2,	#0x10
		STRB	R3, [R0,#0xA]
		MOVS	R2, #0xC
		ADDS	R3, R0,	R2
		LDRB	R6, [R3]
		MOV	R2, R6
		LDRB	R6, [R3,#1]
		LSLS	R6, R6,	#8
		ORRS	R2, R6
		LDRB	R6, [R3,#2]
		LSLS	R6, R6,	#0x10
		ORRS	R2, R6
		ADDS	R1, R2,	R1
		STRB	R1, [R0,#0xC]
		LSRS	R2, R1,	#8
		STRB	R2, [R0,#0xD]
		LSRS	R2, R1,	#0x10
		STRB	R2, [R0,#0xE]
		LDR	R0, [R7]
		STR	R0, [R5,#(dword_20000028 - 0x20000000)]

loc_5880				; CODE XREF: setSensorValue+36j
					; setSensorValue+3Aj
		LDR	R1, =byte_20000000
		MOVS	R0, #0
		LDR	R2, [R1,#(activeSensors	- 0x20000000)]
		LDR	R1, =sensorsArrayInRam
		CMP	R2, #0
		BEQ	loc_58EC
		LSLS	R7, R2,	#0x1F
		LSRS	R7, R7,	#0x1F
		CMP	R7, #0
		BLS	loc_58B2
		LDRB	R3, [R4]

loc_5896				; CODE XREF: setSensorValue+DCj
		LSLS	R6, R0,	#3
		LDRB	R5, [R1,R6]
		CMP	R3, R5
		BCC	loc_58F6
		CMP	R3, R5
		BNE	loc_58AC
		ADDS	R6, R6,	R1
		LDRB	R5, [R4,#1]
		LDRB	R6, [R6,#(sensorsArrayInRam+1 -	0x200001A4)]
		CMP	R5, R6
		BLS	loc_58F6

loc_58AC				; CODE XREF: setSensorValue+CCj
		ADDS	R0, #1
		CMP	R0, R7
		BCC	loc_5896

loc_58B2				; CODE XREF: setSensorValue+BEj
					; setSensorValue+11Aj
		MOV	R0, R7
		CMP	R7, R2
		BCS	loc_58F6
		LDRB	R3, [R4]

loc_58BA				; CODE XREF: setSensorValue+120j
		LSLS	R5, R0,	#3
		LDRB	R6, [R1,R5]
		CMP	R3, R6
		BCC	loc_58F6
		CMP	R3, R6
		BNE	loc_58D0
		ADDS	R7, R5,	R1
		LDRB	R6, [R4,#1]
		LDRB	R7, [R7,#1]
		CMP	R6, R7
		BLS	loc_58F6

loc_58D0				; CODE XREF: setSensorValue+F0j
		ADDS	R6, R5,	R1
		LDRB	R5, [R6,#8]
		CMP	R3, R5
		BCC	loc_58E4
		CMP	R3, R5
		BNE	loc_58F0
		LDRB	R5, [R4,#1]
		LDRB	R6, [R6,#9]
		CMP	R5, R6
		BHI	loc_58F0

loc_58E4				; CODE XREF: setSensorValue+102j
		B	loc_58E8
; ---------------------------------------------------------------------------

loc_58E6				; CODE XREF: setSensorValue+28j
		B	locret_594A
; ---------------------------------------------------------------------------

loc_58E8				; CODE XREF: setSensorValue:loc_58E4j
		ADDS	R0, #1
		B	loc_58F6
; ---------------------------------------------------------------------------

loc_58EC				; CODE XREF: setSensorValue+B6j
		MOVS	R7, #0
		B	loc_58B2
; ---------------------------------------------------------------------------

loc_58F0				; CODE XREF: setSensorValue+106j
					; setSensorValue+10Ej
		ADDS	R0, #2
		CMP	R0, R2
		BCC	loc_58BA

loc_58F6				; CODE XREF: setSensorValue+C8j
					; setSensorValue+D6j ...
		LSLS	R3, R0,	#3
		ADDS	R5, R3,	R1
		CMP	R0, #0x20 ; ' '
		BCS	locret_594A
		LDR	R6, =byte_20000000
		CMP	R0, R2
		BCC	loc_590A
		ADDS	R2, #1
		STR	R2, [R6,#(activeSensors	- 0x20000000)]
		B	loc_5932
; ---------------------------------------------------------------------------

loc_590A				; CODE XREF: setSensorValue+12Ej
		LDRB	R1, [R4]
		LDRB	R3, [R5]
		CMP	R1, R3
		BNE	loc_591A
		LDRB	R1, [R4,#1]
		LDRB	R3, [R5,#1]
		CMP	R1, R3
		BEQ	loc_5932

loc_591A				; CODE XREF: setSensorValue+13Cj
		CMP	R2, #0x20 ; ' '
		BCS	locret_594A
		SUBS	R0, R2,	R0
		LSLS	R2, R0,	#3
		MOV	R0, R5
		MOV	R1, R5
		ADDS	R0, #8
		BL	sub_1D76
		LDR	R0, [R6,#(activeSensors	- 0x20000000)]
		ADDS	R0, #1
		STR	R0, [R6,#(activeSensors	- 0x20000000)]

loc_5932				; CODE XREF: setSensorValue+134j
					; setSensorValue+144j
		LDRB	R0, [R4,#1]
		STRB	R0, [R5,#1]
		LDRB	R0, [R4]
		STRB	R0, [R5]
		LDRB	R0, [R4,#3]
		LDRB	R1, [R4,#2]
		LSLS	R0, R0,	#8
		ORRS	R0, R1
		STRH	R0, [R5,#2]
		LDR	R0, =timer
		LDR	R0, [R0]
		STR	R0, [R5,#4]

locret_594A				; CODE XREF: setSensorValue:loc_58E6j
					; setSensorValue+128j ...
		POP	{R3-R7,PC}
; End of function setSensorValue

; ---------------------------------------------------------------------------
off_594C	DCD byte_20000000	; DATA XREF: setSensorValue:loc_57FEr
					; setSensorValue:loc_5880r ...
off_5950	DCD timer		; DATA XREF: setSensorValue+3Cr
					; setSensorValue+170r
off_5954	DCD unk_EA60		; DATA XREF: setSensorValue+5Er
sensorsList4	DCD sensorsArrayInRam	; DATA XREF: setSensorValue+B2r

; =============== S U B	R O U T	I N E =======================================


keyTestPage				; DATA XREF: ROM:0000D25Co
		PUSH	{R3-R7,LR}
		LDR	R0, =byte_20000000
		MOVS	R5, #1
		MOVS	R4, #0
		STRB	R5, [R0,#(byte_20000002	- 0x20000000)]
		MOVS	R7, #0x80 ; ''
		LDR	R6, =0x24F1FFF

loc_596A				; CODE XREF: keyTestPage+140j
					; keyTestPage+154j
		BL	callSetupDMAandSend
		LDR	R0, =0xCE0F
		BL	displayPageHeader
		LSLS	R0, R4,	#0xF
		LSRS	R3, R0,	#0x1F
		MOVS	R2, #0xC	; y
		MOVS	R1, #4		; x
		ADR	R0, aSwa	; text
		BL	displayTextAt
		LSLS	R0, R4,	#0xE
		LSRS	R3, R0,	#0x1F
		MOVS	R2, #0xC	; y
		MOVS	R1, #0x24 ; '$' ; x
		ADR	R0, aSwb	; text
		BL	displayTextAt
		LSLS	R0, R4,	#0xD
		LSRS	R3, R0,	#0x1F
		MOVS	R2, #0xC	; y
		MOVS	R1, #0x44 ; 'D'	; x
		ADR	R0, aSwc	; text
		BL	displayTextAt
		LSLS	R0, R4,	#0xC
		LSRS	R3, R0,	#0x1F
		MOVS	R2, #0xC	; y
		MOVS	R1, #0x64 ; 'd'	; x
		ADR	R0, aSwd	; text
		BL	displayTextAt
		LSLS	R0, R4,	#0x1A
		LSRS	R3, R0,	#0x1F
		MOVS	R2, #0x17	; y
		MOVS	R1, #4		; x
		ADR	R0, aTr5	; text
		BL	displayTextAt
		LSLS	R0, R4,	#0x1B
		LSRS	R3, R0,	#0x1F
		MOVS	R2, #0x17	; y
		MOVS	R1, #0x24 ; '$' ; x
		ADR	R0, aTr6	; text
		BL	displayTextAt
		LSLS	R0, R4,	#0x1C
		LSRS	R3, R0,	#0x1F
		MOVS	R2, #0x17	; y
		MOVS	R1, #0x44 ; 'D'	; x
		ADR	R0, aTr3	; text
		BL	displayTextAt
		LSLS	R0, R4,	#0x1D
		LSRS	R3, R0,	#0x1F
		MOVS	R2, #0x17	; y
		MOVS	R1, #0x64 ; 'd'	; x
		ADR	R0, aTr4	; text
		BL	displayTextAt
		LSLS	R0, R4,	#0x18
		LSRS	R3, R0,	#0x1F
		MOVS	R2, #0x22 ; '"' ; y
		MOVS	R1, #4		; x
		ADR	R0, aTr7	; text
		BL	displayTextAt
		LSLS	R0, R4,	#0x19
		LSRS	R3, R0,	#0x1F
		MOVS	R2, #0x22 ; '"' ; y
		MOVS	R1, #0x24 ; '$' ; x
		ADR	R0, aTr8	; text
		BL	displayTextAt
		LSLS	R0, R4,	#0x1E
		LSRS	R3, R0,	#0x1F
		MOVS	R2, #0x22 ; '"' ; y
		MOVS	R1, #0x44 ; 'D'	; x
		ADR	R0, aTr1	; text
		BL	displayTextAt
		LSLS	R3, R4,	#0x1F
		LSRS	R3, R3,	#0x1F
		MOVS	R2, #0x22 ; '"' ; y
		MOVS	R1, #0x64 ; 'd'	; x
		ADR	R0, aTr2	; text
		BL	displayTextAt
		LSLS	R0, R4,	#0x16
		LSRS	R3, R0,	#0x1F
		MOVS	R2, #0x2D ; '-'	; y
		MOVS	R1, #4		; x
		ADR	R0, aUp		; text
		BL	displayTextAt
		LSLS	R0, R4,	#0x17
		LSRS	R3, R0,	#0x1F
		MOVS	R2, #0x2D ; '-'	; y
		MOVS	R1, #0x1C	; x
		ADR	R0, aDown	; "DOWN"
		BL	displayTextAt
		LSLS	R0, R4,	#0x15
		LSRS	R3, R0,	#0x1F
		MOVS	R2, #0x2D ; '-'	; y
		MOVS	R1, #0x44 ; 'D'	; x
		ADR	R0, aOk		; "OK"
		BL	displayTextAt
		LSLS	R0, R4,	#9
		LSRS	R3, R0,	#0x1F
		MOVS	R2, #0x2D ; '-'	; y
		MOVS	R1, #0x5C ; '\'	; x
		ADR	R0, aMenu	; "MENU"
		BL	displayTextAt
		LSLS	R0, R4,	#0x13
		LSRS	R3, R0,	#0x1F
		MOVS	R2, #0x38 ; '8'	; y
		MOVS	R1, #2		; x
		ADR	R0, aBind	; "BIND"
		BL	displayTextAt
		LSLS	R0, R4,	#0x14
		LSRS	R3, R0,	#0x1F
		MOVS	R2, #0x38 ; '8'	; y
		MOVS	R1, #0x25 ; '%'	; x
		ADR	R0, aCancel	; "CANCEL"
		BL	displayTextAt
		LSLS	R0, R4,	#6
		LSRS	R3, R0,	#0x1F
		MOVS	R2, #0x38 ; '8'	; y
		MOVS	R1, #0x57 ; 'W'	; x
		ADR	R0, aEnter	; "ENTER"
		BL	displayTextAt
		BL	LCD_updateCALL
		BL	getKeyCode
		BICS	R0, R7
		MOV	R1, R5
		LSLS	R1, R0
		ORRS	R4, R1
		MOV	R0, R6
		BICS	R0, R4
		BEQ	loc_5AB2
		BL	sub_9BC0
		CMP	R0, #2
		BCS	loc_5A9E
		B	loc_596A
; ---------------------------------------------------------------------------

loc_5A9E				; CODE XREF: keyTestPage+13Ej
		MOVS	R0, #0x31 ; '1'
		MOVS	R1, #0xF
		LSLS	R0, R0,	#4
		BL	beep
		MOVS	R1, #0xF
		MOVS	R0, #0
		BL	beep
		B	loc_596A
; ---------------------------------------------------------------------------

loc_5AB2				; CODE XREF: keyTestPage+136j
		LDR	R0, =byte_20000000
		MOVS	R1, #0
		STRB	R1, [R0,#(byte_20000002	- 0x20000000)]
		MOVS	R0, #1
		POP	{R3-R7,PC}
; End of function keyTestPage

; ---------------------------------------------------------------------------
off_5ABC	DCD byte_20000000	; DATA XREF: keyTestPage+2r
					; keyTestPage:loc_5AB2r
dword_5AC0	DCD 0x24F1FFF		; DATA XREF: keyTestPage+Cr
dword_5AC4	DCD 0xCE0F		; DATA XREF: keyTestPage+12r
aSwa		DCB "SWA",0             ; DATA XREF: keyTestPage+20o
aSwb		DCB "SWB",0             ; DATA XREF: keyTestPage+2Eo
aSwc		DCB "SWC",0             ; DATA XREF: keyTestPage+3Co
aSwd		DCB "SWD",0             ; DATA XREF: keyTestPage+4Ao
aTr5		DCB "TR5",0             ; DATA XREF: keyTestPage+58o
aTr6		DCB "TR6",0             ; DATA XREF: keyTestPage+66o
aTr3		DCB "TR3",0             ; DATA XREF: keyTestPage+74o
aTr4		DCB "TR4",0             ; DATA XREF: keyTestPage+82o
aTr7		DCB "TR7",0             ; DATA XREF: keyTestPage+90o
aTr8		DCB "TR8",0             ; DATA XREF: keyTestPage+9Eo
aTr1		DCB "TR1",0             ; DATA XREF: keyTestPage+ACo
aTr2		DCB "TR2",0             ; DATA XREF: keyTestPage+BAo
aUp		DCB "UP",0              ; DATA XREF: keyTestPage+C8o
		DCB    0
aDown		DCB "DOWN",0            ; DATA XREF: keyTestPage+D6o
		DCB 0, 0, 0
aOk		DCB "OK",0              ; DATA XREF: keyTestPage+E4o
		DCB 0
aMenu		DCB "MENU",0            ; DATA XREF: keyTestPage+F2o
		DCB 0, 0, 0
aBind		DCB "BIND",0            ; DATA XREF: keyTestPage+100o
		DCB 0, 0, 0
aCancel		DCB "CANCEL",0          ; DATA XREF: keyTestPage+10Eo
		DCB 0
aEnter		DCB "ENTER",0           ; DATA XREF: keyTestPage+11Co
		ALIGN 4

; =============== S U B	R O U T	I N E =======================================


LCDBrightM				; DATA XREF: ROM:0000D26Co
					; ROM:0000D4DCo

var_20		= -0x20
text		= -0x1C
var_1A		= -0x1A

		PUSH	{R4-R7,LR}
		LDR	R4, =rxsettings
		SUB	SP, SP,	#0xC
		LDRB	R7, [R4,#(lcdBrightnes - 0x200002A4)]
		MOVS	R6, #1
		MOVS	R5, #0

loc_5B34				; CODE XREF: LCDBrightM+A4j
					; LCDBrightM+B8j ...
		BL	callSetupDMAandSend
		LDR	R0, =aLcdBrightnes_0 ; "LCD brightness"
		BL	displayPageHeader
		MOVS	R3, #0x1E
		MOVS	R2, #0x54 ; 'T'
		MOVS	R1, #0x19
		MOVS	R0, #0x2B ; '+'
		STR	R5, [SP,#0x20+var_20]
		BL	drawLine
		MOVS	R2, #0x30 ; '0'
		MOVS	R1, #4
		LDR	R0, =plain_img
		BL	displayGFX
		MOVS	R2, #0x30 ; '0'
		MOVS	R1, #0x44 ; 'D'
		LDR	R0, =heli_img
		BL	displayGFX
		LDRB	R0, [R4,#(lcdBrightnes - 0x200002A4)]
		BL	setLCDBrightnes
		LDRB	R0, [R4,#(lcdBrightnes - 0x200002A4)]
		MOVS	R2, #2		; length
		SUBS	R0, #0x1E	; sourceVal
		ADD	R1, SP,	#0x20+text ; targetText
		BL	intToString
		MOV	R0, SP
		STRB	R5, [R0,#0x20+var_1A]
		MOVS	R3, #0		; a4
		MOVS	R2, #0x10	; y
		MOVS	R1, #0x38 ; '8'	; x
		ADD	R0, SP,	#0x20+text ; text
		BL	displayTextAt
		MOVS	R3, #0x1D
		MOVS	R2, #0x53 ; 'S'
		MOVS	R1, #0x1A
		MOVS	R0, #0x2C ; ','
		STR	R6, [SP,#0x20+var_20]
		BL	fillRegion
		LDRB	R0, [R4,#(lcdBrightnes - 0x200002A4)]
		CMP	R0, #0x1E
		BLS	loc_5BA6
		LSLS	R2, R0,	#1
		SUBS	R2, #0x11
		MOVS	R3, #0x1D
		MOVS	R1, #0x1A
		MOVS	R0, #0x2C ; ','
		STR	R5, [SP,#0x20+var_20]
		BL	fillRegion

loc_5BA6				; CODE XREF: LCDBrightM+6Cj
		BL	LCD_updateCALL
		BL	getKeyCode
		CMP	R0, #8
		BEQ	loc_5BDC
		CMP	R0, #0x18
		BEQ	loc_5BDC
		CMP	R0, #9
		BEQ	loc_5C02
		CMP	R0, #0x17
		BEQ	loc_5C02
		CMP	R0, #0x16
		BEQ	loc_5C16
		CMP	R0, #0xA
		BEQ	loc_5C24
		CMP	R0, #0x19
		BEQ	loc_5C24
		CMP	R0, #0xB
		BNE	loc_5B34
		MOV	R0, R7
		STRB	R7, [R4,#(lcdBrightnes - 0x200002A4)]
		BL	setLCDBrightnes
		MOVS	R0, #0
		ADD	SP, SP,	#0xC
		POP	{R4-R7,PC}
; ---------------------------------------------------------------------------

loc_5BDC				; CODE XREF: LCDBrightM+88j
					; LCDBrightM+8Cj
		LDRB	R0, [R4,#8]
		CMP	R0, #0x1E
		BLS	loc_5B34
		SUBS	R0, #1
		STRB	R0, [R4,#8]
		BL	sub_9BC0
		CMP	R0, #2
		BCC	loc_5B34

loc_5BEE				; CODE XREF: LCDBrightM+ECj
					; LCDBrightM+FAj
		MOVS	R0, #0x31 ; '1'
		MOVS	R1, #0xF
		LSLS	R0, R0,	#4
		BL	beep
		MOVS	R1, #0xF
		MOVS	R0, #0
		BL	beep
		B	loc_5B34
; ---------------------------------------------------------------------------

loc_5C02				; CODE XREF: LCDBrightM+90j
					; LCDBrightM+94j
		LDRB	R0, [R4,#8]
		CMP	R0, #0x32 ; '2'
		BCS	loc_5B34
		ADDS	R0, #1
		STRB	R0, [R4,#8]
		BL	sub_9BC0
		CMP	R0, #2
		BCC	loc_5B34
		B	loc_5BEE
; ---------------------------------------------------------------------------

loc_5C16				; CODE XREF: LCDBrightM+98j
		MOVS	R0, #0x28 ; '('
		STRB	R0, [R4,#(lcdBrightnes - 0x200002A4)]
		BL	sub_9BC0
		CMP	R0, #2
		BCC	loc_5B34
		B	loc_5BEE
; ---------------------------------------------------------------------------

loc_5C24				; CODE XREF: LCDBrightM+9Cj
					; LCDBrightM+A0j
		MOVS	R0, #1
		ADD	SP, SP,	#0xC
		POP	{R4-R7,PC}
; End of function LCDBrightM

; ---------------------------------------------------------------------------
		ALIGN 4
varrxsettings_5	DCD rxsettings		; DATA XREF: LCDBrightM+2r
off_5C30	DCD aLcdBrightnes_0	; DATA XREF: LCDBrightM+10r
					; "LCD brightness"
off_5C34	DCD plain_img		; DATA XREF: LCDBrightM+28r
off_5C38	DCD heli_img		; DATA XREF: LCDBrightM+32r

; =============== S U B	R O U T	I N E =======================================


sub_5C3C				; DATA XREF: ROM:0000D264o

var_8		= -8

		PUSH	{R3,LR}
		MOVS	R0, #0
		MOVS	R3, #0x3F ; '?'
		MOVS	R2, #0x7F ; ''
		MOV	R1, R0
		STR	R0, [SP,#8+var_8]
		BL	fillRegion
		BL	LCD_updateCALL

loc_5C50				; CODE XREF: sub_5C3C+22j
		BL	getKeyCode
		CMP	R0, #0xA
		BEQ	loc_5C60
		CMP	R0, #0x19
		BEQ	loc_5C60
		CMP	R0, #0xB
		BNE	loc_5C50

loc_5C60				; CODE XREF: sub_5C3C+1Aj sub_5C3C+1Ej
		MOVS	R1, #0x64 ; 'd'
		LDR	R0, =0x417
		BL	beep
		MOVS	R0, #1
		MOVS	R1, #0
		STR	R0, [SP,#8+var_8]
		MOVS	R3, #0x3F ; '?'
		MOVS	R2, #0x7F ; ''
		MOV	R0, R1
		BL	fillRegion
		BL	LCD_updateCALL

loc_5C7C				; CODE XREF: sub_5C3C+4Ej
		BL	getKeyCode
		CMP	R0, #0xA
		BEQ	loc_5C8C
		CMP	R0, #0x19
		BEQ	loc_5C8C
		CMP	R0, #0xB
		BNE	loc_5C7C

loc_5C8C				; CODE XREF: sub_5C3C+46j sub_5C3C+4Aj
		MOVS	R0, #1
		POP	{R3,PC}
; End of function sub_5C3C

; ---------------------------------------------------------------------------
dword_5C90	DCD 0x417		; DATA XREF: sub_5C3C+26r

; =============== S U B	R O U T	I N E =======================================


controlBackLight			; CODE XREF: sub_24D0+1Cp sub_24D0+4Cp ...
		PUSH	{R4-R6,LR}
		MOV	R4, R0
		LDR	R0, =(stickAdjustData+0x20) ; 40 items
		LDR	R2, =dword_2710
		LDRB	R1, [R0,#(stickAdjustData+0x27 - 0x20000E38)] ;	40 items
		LDRB	R0, [R0,#(stickAdjustData+0x26 - 0x20000E38)] ;	40 items
		LSLS	R1, R1,	#8
		ORRS	R1, R0
		LDR	R0, =ch1_ADC_VAL
		LDR	R0, [R0,#(voltageADC - 0x20000F00)]
		MULS	R0, R2
		BL	div_Other
		LDR	R5, =byte_BB8
		MOVS	R1, #1
		LDR	R2, =0x400FF040
		LDR	R3, =byte_1FFFF880
		CMP	R0, R5
		BCC	loc_5CC4
		CMP	R4, #0
		BEQ	loc_5CC4
		STR	R1, [R2,#4]
		STRB	R1, [R3]
		POP	{R4-R6,PC}
; ---------------------------------------------------------------------------

loc_5CC4				; CODE XREF: controlBackLight+24j
					; controlBackLight+28j
		STR	R1, [R2,#8]
		MOVS	R0, #0
		STRB	R0, [R3]
		POP	{R4-R6,PC}
; End of function controlBackLight

; ---------------------------------------------------------------------------
off_5CCC	DCD stickAdjustData+0x20 ; DATA	XREF: controlBackLight+4r
					; 40 items
off_5CD0	DCD ch1_ADC_VAL		; DATA XREF: controlBackLight+10r
off_5CD4	DCD dword_2710		; DATA XREF: controlBackLight+6r
off_5CD8	DCD byte_BB8		; DATA XREF: controlBackLight+1Ar
dword_5CDC	DCD 0x400FF040		; DATA XREF: controlBackLight+1Er
off_5CE0	DCD byte_1FFFF880	; DATA XREF: controlBackLight+20r

; =============== S U B	R O U T	I N E =======================================


setupDMAandSend				; CODE XREF: callSetupDMAandSend+2p
		PUSH	{R4,LR}
		MOVS	R1, #0x400
		LDR	R0, =GFX_ARRAY
		BL	callSetupDMA
		BL	sendPacketWithTimer
		POP	{R4,PC}
; End of function setupDMAandSend

; ---------------------------------------------------------------------------
		ALIGN 4
off_5CF8	DCD GFX_ARRAY		; DATA XREF: setupDMAandSend+6r

; =============== S U B	R O U T	I N E =======================================


LCD_clear				; CODE XREF: main_screen+5Cp
		PUSH	{R3-R7,LR}
		LDR	R1, =0x40049000
		LDR	R2, [R1,#0x10]
		LDR	R0, =0xFFFFF8F8
		ANDS	R2, R0
		ADDS	R2, #0xFF
		ADDS	R2, #1
		STR	R2, [R1,#0x10]
		LDR	R2, =0x4004C000
		LDR	R2, [R2,#0x1C]
		LDR	R3, =0x4004C000
		ANDS	R2, R0
		ADDS	R2, #0xFF
		ADDS	R2, #1
		STR	R2, [R3,#0x1C]
		LDR	R2, [R1,#0x34]
		ANDS	R2, R0
		ADDS	R2, #0xFF
		ADDS	R2, #1
		STR	R2, [R1,#0x34]
		LDR	R1, =0x4004D040
		LDR	R1, [R1,#0x3C]
		LDR	R2, =0x4004D040
		ANDS	R1, R0
		ADDS	R1, #0xFF
		ADDS	R1, #1
		STR	R1, [R2,#0x3C]
		LDR	R1, [R2,#0x38]
		ANDS	R1, R0
		ADDS	R1, #0xFF
		ADDS	R1, #1
		STR	R1, [R2,#0x38]
		LDR	R1, [R2,#8]
		ANDS	R1, R0
		ADDS	R1, #0xFF
		ADDS	R1, #1
		STR	R1, [R2,#8]
		LDR	R1, [R2,#0xC]
		ANDS	R1, R0
		ADDS	R1, #0xFF
		ADDS	R1, #1
		STR	R1, [R2,#0xC]
		LDR	R1, [R2,#0x10]
		ANDS	R1, R0
		ADDS	R1, #0xFF
		ADDS	R1, #1
		STR	R1, [R2,#0x10]
		LDR	R1, [R2,#0x14]
		ANDS	R1, R0
		ADDS	R1, #0xFF
		ADDS	R1, #1
		STR	R1, [R2,#0x14]
		LDR	R1, =0x4004B000
		LDR	R2, [R1,#0x20]
		ANDS	R2, R0
		ADDS	R2, #0xFF
		ADDS	R2, #1
		STR	R2, [R1,#0x20]
		LDR	R2, [R1,#0x24]
		ANDS	R2, R0
		ADDS	R2, #0xFF
		ADDS	R2, #1
		STR	R2, [R1,#0x24]
		LDR	R2, [R1,#0x28]
		ANDS	R2, R0
		ADDS	R2, #0xFF
		ADDS	R2, #1
		STR	R2, [R1,#0x28]
		LDR	R2, [R1,#0x2C]
		ANDS	R2, R0
		ADDS	R2, #0xFF
		ADDS	R2, #1
		STR	R2, [R1,#0x2C]
		LDR	R6, =0x400FF000
		LDR	R0, [R6,#0x14]
		LDR	R1, =0x2010
		ORRS	R0, R1
		STR	R0, [R6,#0x14]
		LDR	R4, =0x400FF0C0
		LDR	R0, [R4,#0x14]
		MOVS	R1, #0x80 ; ''
		ORRS	R0, R1
		STR	R0, [R4,#0x14]
		LDR	R5, =0x400FF100
		LDR	R0, [R5,#0x14]
		LSLS	R7, R3,	#0x10
		ORRS	R0, R7
		STR	R0, [R5,#0x14]
		LDR	R0, =0x400FF080
		LDR	R1, [R0,#0x14]
		MOVS	R2, #0xF00
		ORRS	R1, R2
		STR	R1, [R0,#0x14]
		LDR	R0, [R5,#0x14]
		LSLS	R1, R2,	#0xA
		ORRS	R0, R1
		STR	R0, [R5,#0x14]
		LDR	R0, =(stickAdjustData+0x20) ; 40 items
		LDR	R2, =dword_2710
		LDRB	R1, [R0,#(stickAdjustData+0x27 - 0x20000E38)] ;	40 items
		LDRB	R0, [R0,#(stickAdjustData+0x26 - 0x20000E38)] ;	40 items
		LSLS	R1, R1,	#8
		ORRS	R1, R0
		LDR	R0, =ch1_ADC_VAL
		LDR	R0, [R0,#(voltageADC - 0x20000F00)]
		MULS	R0, R2
		BL	div_Other
		LDR	R2, =byte_BB8
		LDR	R1, =byte_1FFFF880
		CMP	R0, R2
		BCS	loc_5DE8
		LDR	R2, =0x400FF040
		MOVS	R0, #1
		STR	R0, [R2,#8]
		MOVS	R0, #0
		B	loc_5DEE
; ---------------------------------------------------------------------------

loc_5DE8				; CODE XREF: LCD_clear+E0j
		LDR	R2, =0x400FF040
		MOVS	R0, #1
		STR	R0, [R2,#4]

loc_5DEE				; CODE XREF: LCD_clear+EAj
		STRB	R0, [R1]
		LDR	R0, =0x2010
		STR	R0, [R6,#8]
		MOVS	R6, #0x80 ; ''
		STR	R6, [R4,#8]
		STR	R7, [R5,#8]
		MOVS	R0, #5
		BL	timerSendPacket
		STR	R6, [R4,#4]
		MOVS	R0, #5
		BL	timerSendPacket
		MOVS	R1, #0
		MOVS	R0, #0xE2 ; 'â'
		BL	send_to_lcd
		MOVS	R1, #0
		MOVS	R0, #0xAE ; '®'
		BL	send_to_lcd
		MOVS	R1, #0
		MOVS	R0, #0xA1 ; '¡'
		BL	send_to_lcd
		MOVS	R1, #0
		MOVS	R0, #0xA6 ; '¦'
		BL	send_to_lcd
		MOVS	R1, #0
		MOVS	R0, #0xA4 ; '¤'
		BL	send_to_lcd
		MOVS	R1, #0
		MOVS	R0, #0xA2 ; '¢'
		BL	send_to_lcd
		MOVS	R1, #0
		MOVS	R0, #0xC0 ; 'À'
		BL	send_to_lcd
		MOVS	R1, #0
		MOVS	R0, #0x2F ; '/'
		BL	send_to_lcd
		MOVS	R1, #0
		MOVS	R0, #0x24 ; '$'
		BL	send_to_lcd
		MOVS	R4, #0x28 ; '('
		MOVS	R1, #0
		MOVS	R0, #0x81 ; ''
		BL	send_to_lcd
		MOVS	R1, #0
		MOV	R0, R4
		BL	send_to_lcd
		MOVS	R1, #0
		MOVS	R0, #0xAF ; '¯'
		BL	send_to_lcd
		LSLS	R1, R6,	#3
		LDR	R0, =GFX_ARRAY
		BL	callSetupDMA
		BL	sendPacketWithTimer
		LDR	R7, =GFX_ARRAY
		MOVS	R6, #0

loc_5E7A				; CODE XREF: LCD_clear+1BCj
		MOVS	R0, #0xB0 ; '°'
		ORRS	R0, R6
		UXTB	R0, R0
		MOVS	R1, #0
		BL	send_to_lcd
		LSLS	R0, R6,	#7
		ADDS	R5, R0,	R7
		MOVS	R1, #0
		MOVS	R0, #4
		BL	send_to_lcd
		MOVS	R1, #0
		MOVS	R0, #0x10
		BL	send_to_lcd
		MOVS	R4, #4

loc_5E9C				; CODE XREF: LCD_clear+1B6j
		LDRB	R0, [R5]
		MOVS	R1, #1
		BL	send_to_lcd
		ADDS	R5, #1
		LSLS	R0, R4,	#0x1C
		BNE	loc_5EAE
		BL	sendPacketWithTimer

loc_5EAE				; CODE XREF: LCD_clear+1ACj
		ADDS	R4, #1
		CMP	R4, #0x84 ; ''
		BLT	loc_5E9C
		ADDS	R6, #1
		CMP	R6, #8
		BLT	loc_5E7A
		BL	sendPacketWithTimer
		LDR	R1, =0x4004A000
		LDR	R0, [R1]
		MOVS	R2, #0x700
		BICS	R0, R2
		ADDS	R0, #0xFF
		ADDS	R0, #1
		STR	R0, [R1]
		LDR	R0, =0x400FF040
		LDR	R1, [R0,#0x14]
		MOVS	R2, #1
		ORRS	R1, R2
		STR	R1, [R0,#0x14]
		MOV	R0, R2
		POP	{R3-R7,PC}
; End of function LCD_clear

; ---------------------------------------------------------------------------
dword_5EDC	DCD 0x40049000		; DATA XREF: LCD_clear+2r
dword_5EE0	DCD 0xFFFFF8F8		; DATA XREF: LCD_clear+6r
dword_5EE4	DCD 0x4004C000		; DATA XREF: LCD_clear+10r
					; LCD_clear+14r
dword_5EE8	DCD 0x4004D040		; DATA XREF: LCD_clear+28r
					; LCD_clear+2Cr
dword_5EEC	DCD 0x4004B000		; DATA XREF: LCD_clear+68r
dword_5EF0	DCD 0x400FF000		; DATA XREF: LCD_clear+92r
dword_5EF4	DCD 0x2010		; DATA XREF: LCD_clear+96r
					; LCD_clear+F4r
dword_5EF8	DCD 0x400FF0C0		; DATA XREF: LCD_clear+9Cr
dword_5EFC	DCD 0x400FF100		; DATA XREF: LCD_clear+A6r
dword_5F00	DCD 0x400FF080		; DATA XREF: LCD_clear+B0r
off_5F04	DCD stickAdjustData+0x20 ; DATA	XREF: LCD_clear+C4r
					; 40 items
off_5F08	DCD ch1_ADC_VAL		; DATA XREF: LCD_clear+D0r
off_5F0C	DCD dword_2710		; DATA XREF: LCD_clear+C6r
off_5F10	DCD byte_BB8		; DATA XREF: LCD_clear+DAr
off_5F14	DCD byte_1FFFF880	; DATA XREF: LCD_clear+DCr
dword_5F18	DCD 0x400FF040		; DATA XREF: LCD_clear+E2r
					; LCD_clear:loc_5DE8r ...
off_5F1C	DCD GFX_ARRAY		; DATA XREF: LCD_clear+170r
					; LCD_clear+17Ar
dword_5F20	DCD 0x4004A000		; DATA XREF: LCD_clear+1C2r

; =============== S U B	R O U T	I N E =======================================


setLCDBrightnes				; CODE XREF: LCDBrightM+3Ap
					; LCDBrightM+AAp ...
		PUSH	{R4,LR}
		MOV	R4, R0
		MOVS	R1, #0
		MOVS	R0, #0x81 ; ''
		BL	send_to_lcd
		MOVS	R1, #0
		MOV	R0, R4
		BL	send_to_lcd
		POP	{R4,PC}
; End of function setLCDBrightnes

; ---------------------------------------------------------------------------
		ALIGN 4

; =============== S U B	R O U T	I N E =======================================


LCD_update				; CODE XREF: LCD_updateCALL+2p
		PUSH	{R3-R7,LR}
		MOVS	R6, #0
		MOVS	R7, #0xB0 ; '°'

loc_5F42				; CODE XREF: LCD_update+46j
		MOV	R0, R6
		ORRS	R0, R7
		UXTB	R0, R0
		MOVS	R1, #0
		BL	send_to_lcd
		LDR	R0, =GFX_ARRAY
		LSLS	R1, R6,	#7
		ADDS	R5, R1,	R0
		MOVS	R1, #0
		MOVS	R0, #4
		BL	send_to_lcd
		MOVS	R1, #0
		MOVS	R0, #0x10
		BL	send_to_lcd
		MOVS	R4, #4

loc_5F66				; CODE XREF: LCD_update+40j
		LDRB	R0, [R5]
		MOVS	R1, #1
		BL	send_to_lcd
		ADDS	R5, #1
		LSLS	R0, R4,	#0x1C
		BNE	loc_5F78
		BL	sendPacketWithTimer

loc_5F78				; CODE XREF: LCD_update+36j
		ADDS	R4, #1
		CMP	R4, #0x84 ; ''
		BLT	loc_5F66
		ADDS	R6, #1
		CMP	R6, #8
		BLT	loc_5F42
		BL	sendPacketWithTimer
		POP	{R3-R7,PC}
; End of function LCD_update

; ---------------------------------------------------------------------------
		ALIGN 4
off_5F8C	DCD GFX_ARRAY		; DATA XREF: LCD_update+12r

; =============== S U B	R O U T	I N E =======================================


send_to_lcd				; CODE XREF: LCD_clear+110p
					; LCD_clear+118p ...

var_18		= -0x18

		PUSH	{R3-R7,LR}
		MOV	R7, R0
		MOVS	R0, #0x2000
		LDR	R5, =0x400FF000
		CMP	R1, #0
		BEQ	loc_5FA2
		STR	R0, [R5,#4]
		B	loc_5FA4
; ---------------------------------------------------------------------------

loc_5FA2				; CODE XREF: send_to_lcd+Cj
		STR	R0, [R5,#8]

loc_5FA4				; CODE XREF: send_to_lcd+10j
		MOVS	R0, #1
		LDR	R4, =0x400FF100
		LSLS	R0, R0,	#0x1F
		STR	R0, [R4,#8]
		MOVS	R6, #0x10
		STR	R6, [R5,#8]
		BL	sub_A158
		LDR	R0, [R4]
		MOVS	R1, #0x3C0000
		BICS	R0, R1
		LSLS	R1, R7,	#0x1C
		LSRS	R1, R1,	#0xA
		ORRS	R0, R1
		STR	R0, [R4]
		BL	sub_A190
		BL	sub_A158
		LDR	R1, =0x400FF080
		LDR	R0, [R1]
		MOVS	R2, #0xF00
		BICS	R0, R2
		LSRS	R2, R7,	#4
		LSLS	R2, R2,	#8
		ORRS	R0, R2
		STR	R0, [R1]
		BL	sub_A190
		LSLS	R1, R4,	#0x16
		STR	R1, [R4,#4]
		MOVS	R0, #0
		STR	R0, [SP,#0x18+var_18]

loc_5FEA				; CODE XREF: send_to_lcd+5Ej
		ADDS	R0, #1
		STR	R0, [SP,#0x18+var_18]
		BEQ	loc_5FEA
		STR	R1, [R4,#8]
		STR	R6, [R5,#4]
		POP	{R3-R7,PC}
; End of function send_to_lcd

; ---------------------------------------------------------------------------
		ALIGN 4
GPIOcontroller_0 DCD 0x400FF000		; DATA XREF: send_to_lcd+8r
PortEDataOutputReg DCD 0x400FF100	; DATA XREF: send_to_lcd+16r
PortCDataOutputReg_1 DCD 0x400FF080	; DATA XREF: send_to_lcd+3Cr

; =============== S U B	R O U T	I N E =======================================


settingsValidation			; CODE XREF: loadTimerSettingsFromEeprom+2p

var_18		= -0x18

		PUSH	{R3-R7,LR}
		MOVS	R5, #0
		LDR	R6, =(aFlysky02+0xAD4) ; ""
		LDR	R7, =settingRelatedValue
		MOV	R4, R5
		STR	R5, [SP,#0x18+var_18]

loc_6010				; CODE XREF: settingsValidation+54j
		LSLS	R1, R4,	#0xC
		ADDS	R1, #0x40 ; '@'	; offset
		LDR	R2, =dword_B74	; len
		LDR	R0, =rxsettings	; target
		BL	readEeprom
		CMP	R0, #0
		BEQ	loc_6048
		LDR	R1, =0xB72	; length
		LDR	R0, =rxsettings	; startPTR
		BL	crcCheck
		LDRH	R1, [R6,#(settingsCRC -	0x20000E14)]
		CMP	R0, R1
		BNE	loc_6048
		LDR	R0, =rxsettings
		MOVS	R1, #1
		LDR	R0, [R0]
		LSLS	R1, R1,	#0x1F
		CMP	R0, R1
		BCS	loc_6048
		LSLS	R1, R4,	#2
		STR	R0, [R7,R1]
		CMP	R0, R5
		BLS	loc_6050
		MOV	R5, R0
		STR	R4, [SP,#0x18+var_18]
		B	loc_6050
; ---------------------------------------------------------------------------

loc_6048				; CODE XREF: settingsValidation+1Aj
					; settingsValidation+28j ...
		MOVS	R0, #0
		MVNS	R0, R0
		LSLS	R1, R4,	#2
		STR	R0, [R7,R1]

loc_6050				; CODE XREF: settingsValidation+3Cj
					; settingsValidation+42j
		BL	someSPImethod
		ADDS	R4, #1
		CMP	R4, #4
		BCC	loc_6010
		CMP	R5, #0
		BEQ	loc_608A
		LDR	R0, [SP,#0x18+var_18]
		LDR	R2, =dword_B74	; len
		LSLS	R1, R0,	#0xC
		ADDS	R1, #0x40 ; '@'	; offset
		LDR	R0, =rxsettings	; target
		BL	readEeprom
		CMP	R0, #0
		BEQ	loc_608A
		LDR	R1, =0xB72	; length
		LDR	R0, =rxsettings	; startPTR
		BL	crcCheck
		LDRH	R1, [R6,#2]
		CMP	R0, R1
		BNE	loc_608A
		LDR	R0, =rxsettings
		LDR	R1, [R0]
		MOVS	R0, #0x80000000
		CMP	R1, R0
		BCC	loc_608E

loc_608A				; CODE XREF: settingsValidation+58j
					; settingsValidation+6Aj ...
		BL	setFactVal

loc_608E				; CODE XREF: settingsValidation+84j
		LDR	R0, =rxsettings
		MOVS	R2, #0x92 ; ''
		LDRB	R1, [R0,#(currentModel - 0x200002A4)]
		MULS	R1, R2
		ADDS	R0, R1,	R0
		LDR	R1, =byte_20000000
		ADDS	R0, #0xA
		STR	R0, [R1,#(usedModelPtr - 0x20000000)]
		BL	someSPImethod
		POP	{R3-R7,PC}
; End of function settingsValidation

; ---------------------------------------------------------------------------
off_60A4	DCD aFlysky02+0xAD4	; DATA XREF: settingsValidation+4r
					; ""
off_60A8	DCD settingRelatedValue	; DATA XREF: settingsValidation+6r
; int len
len		DCD dword_B74		; DATA XREF: settingsValidation+10r
					; settingsValidation+5Cr
; _BYTE	*varrxsettings8
varrxsettings8	DCD rxsettings		; DATA XREF: settingsValidation+12r
					; settingsValidation+1Er ...
; signed int length
length		DCD 0xB72		; DATA XREF: settingsValidation+1Cr
					; settingsValidation+6Cr
off_60B8	DCD byte_20000000	; DATA XREF: settingsValidation+94r

; =============== S U B	R O U T	I N E =======================================


afhd2Init				; CODE XREF: main_screen+E4p

var_38		= -0x38
var_37		= -0x37
var_36		= -0x36
var_35		= -0x35
var_34		= -0x34

		PUSH	{R4-R7,LR}
		LDR	R0, =dword_20000140
		SUB	SP, SP,	#0x24
		MOVS	R5, #0
		STR	R5, [R0]
		LDR	R1, =dword_1FFFF884
		SUBS	R0, R5,	#1
		STR	R0, [R1]
		LDR	R0, =byte_2000013C
		LDRB	R0, [R0]
		CMP	R0, #0
		BEQ	loc_6168
		LDR	R7, =sendingPacket
		MOVS	R6, #1
		STRB	R6, [R7]
		MOVS	R0, #0x9B ; ''
		MOV	R1, SP
		LDR	R4, =rxsettings
		STRB	R0, [R1,#0x38+var_38]
		LDRB	R0, [R4,#(currentModel - 0x200002A4)]
		MOVS	R1, #0x92 ; ''
		MULS	R0, R1
		ADDS	R0, R0,	R4
		ADDS	R0, #0x61 ; 'a'
		MOVS	R1, #0xC
		ADDS	R1, R0,	R1
		LDRB	R2, [R1]
		MOV	R0, R2
		LDRB	R2, [R1,#1]
		LSLS	R2, R2,	#8
		ORRS	R0, R2
		LDRB	R2, [R1,#2]
		LDRB	R1, [R1,#3]
		LSLS	R2, R2,	#0x10
		ORRS	R0, R2
		LSLS	R1, R1,	#0x18
		ORRS	R0, R1
		MOV	R1, SP		; a2
		STRB	R0, [R1,#0x38+var_37]
		LSRS	R2, R0,	#8
		STRB	R2, [R1,#0x38+var_36]
		LSRS	R2, R0,	#0x10
		STRB	R2, [R1,#0x38+var_35]
		LSRS	R0, R0,	#0x18
		STRB	R0, [R1,#0x38+var_34]
		MOV	R0, SP		; targetAddress
		BL	sendPacketToRadio
		MOVS	R0, #0x9A ; ''
		BL	addPacketToResend1FFFFCF5When2000013C
		STRB	R5, [R7]
		LDR	R7, =byte_2000013F
		LDRB	R0, [R7]
		CMP	R0, #1
		BNE	loc_6168
		LDR	R0, =byte_20000000
		STR	R5, [R0,#(dword_20000054 - 0x20000000)]
		LDRB	R2, [R4,#(currentModel - 0x200002A4)]
		MOVS	R3, #0x92 ; ''
		MULS	R2, R3
		MOVS	R1, #0
		ADDS	R6, R2,	R4
		LDR	R3, =timer
		ADDS	R6, #0x71 ; 'q'

loc_613E				; CODE XREF: afhd2Init+AAj
		MOVS	R2, #1
		STRB	R2, [R7]
		LDR	R4, [R3]
		LDR	R2, [R3]
		SUBS	R2, R2,	R4
		CMP	R2, #0x32 ; '2'
		BCS	loc_6162
		LDRB	R2, [R6,#1]
		LDRB	R5, [R6]
		LSLS	R2, R2,	#8
		ORRS	R2, R5

loc_6154				; CODE XREF: afhd2Init+A4j
		LDR	R5, [R0,#(dword_20000054 - 0x20000000)]
		CMP	R2, R5
		BEQ	loc_6168
		LDR	R5, [R3]
		SUBS	R5, R5,	R4
		CMP	R5, #0x32 ; '2'
		BCC	loc_6154

loc_6162				; CODE XREF: afhd2Init+8Ej
		ADDS	R1, #1
		CMP	R1, #5
		BCC	loc_613E

loc_6168				; CODE XREF: afhd2Init+16j
					; afhd2Init+6Ej ...
		ADD	SP, SP,	#0x24
		POP	{R4-R7,PC}
; End of function afhd2Init

; ---------------------------------------------------------------------------
off_616C	DCD dword_20000140	; DATA XREF: afhd2Init+2r
off_6170	DCD dword_1FFFF884	; DATA XREF: afhd2Init+Ar
off_6174	DCD byte_2000013C	; DATA XREF: afhd2Init+10r
off_6178	DCD sendingPacket	; DATA XREF: afhd2Init+18r
off_617C	DCD rxsettings		; DATA XREF: afhd2Init+22r
off_6180	DCD byte_2000013F	; DATA XREF: afhd2Init+68r
off_6184	DCD byte_20000000	; DATA XREF: afhd2Init+70r
off_6188	DCD timer		; DATA XREF: afhd2Init+7Er

; =============== S U B	R O U T	I N E =======================================


sub_618C				; CODE XREF: sendPacketWithTimer+5Ap
					; timerSendPacket+6Ep

var_8		= -8
var_7		= -7
var_6		= -6

		LDR	R0, =timer
		LDR	R2, [R0]
		LDR	R1, =byte_20000000
		CMP	R2, #0x14
		BLS	loc_61A4
		LDR	R2, [R0]
		LDR	R3, [R1,#(dword_20000040 - 0x20000000)]
		SUBS	R2, R2,	R3
		MOVS	R3, #0x7D0
		CMP	R2, R3
		BCC	locret_61D6

loc_61A4				; CODE XREF: sub_618C+8j
		PUSH	{R3,LR}
		LDR	R0, [R0]
		STR	R0, [R1,#(dword_20000040 - 0x20000000)]
		LDR	R0, =stickAdjustData ; 40 items
		LDR	R2, =dword_2710
		LDRH	R1, [R0,#(stickAdjustData+0x26 - 0x20000E18)] ;	40 items
		LDR	R0, =ch1_ADC_VAL
		LDR	R0, [R0,#(voltageADC - 0x20000F00)]
		MULS	R0, R2
		BL	div__0
		MOVS	R2, #0x7F ; ''
		MOV	R1, SP
		STRB	R2, [R1,#8+var_8]
		MOVS	R2, #0
		STRB	R2, [R1,#8+var_7]
		MOVS	R1, #0xA
		BL	div__0
		MOV	R1, SP
		STRH	R0, [R1,#8+var_6]
		MOV	R0, SP
		BL	setSensorValue
		POP	{R3,PC}
; ---------------------------------------------------------------------------

locret_61D6				; CODE XREF: sub_618C+16j
		BX	LR
; End of function sub_618C

; ---------------------------------------------------------------------------
off_61D8	DCD timer		; DATA XREF: sub_618Cr
off_61DC	DCD byte_20000000	; DATA XREF: sub_618C+4r
off_61E0	DCD stickAdjustData	; DATA XREF: sub_618C+1Er
					; 40 items
off_61E4	DCD ch1_ADC_VAL		; DATA XREF: sub_618C+24r
off_61E8	DCD dword_2710		; DATA XREF: sub_618C+20r

; =============== S U B	R O U T	I N E =======================================


sub_61EC				; CODE XREF: sendPacketWithTimer:loc_9F52p
					; timerSendPacket:loc_A126p
		PUSH	{R3-R7,LR}
		LDR	R4, =timer
		LDR	R0, [R4]
		CMP	R0, #0x64 ; 'd'
		BCC	loc_62DA
		LDR	R0, =stickAdjustData ; 40 items
		LDR	R2, =dword_2710
		LDRH	R1, [R0,#(stickAdjustData+0x26 - 0x20000E18)] ;	40 items
		LDR	R0, =ch1_ADC_VAL
		LDR	R0, [R0,#(voltageADC - 0x20000F00)]
		MULS	R0, R2
		BL	div__0
		MOVS	R1, #0xFA0
		ASRS	R7, R1,	#3
		LDR	R5, =byte_20000000
		CMP	R0, R1
		BCS	loc_6240
		BL	sub_9BC0
		CMP	R0, #0xF
		BNE	loc_626A
		LDR	R0, [R4]
		LDR	R1, [R5,#(dword_20000038 - 0x20000000)]
		SUBS	R0, R0,	R1
		CMP	R0, R7
		BCC	loc_626A
		LDR	R0, [R4]
		STR	R0, [R5,#(dword_20000038 - 0x20000000)]
		BL	sub_9BC0
		CMP	R0, #2
		BCC	loc_626A
		MOVS	R1, #0xFA ; 'ú'
		LDR	R0, =0x417
		BL	beep
		MOVS	R1, #0xFA ; 'ú'
		MOVS	R0, #0x620
		B	loc_6266
; ---------------------------------------------------------------------------

loc_6240				; CODE XREF: sub_61EC+24j
		LDR	R1, =(byte_DA0+0x2C8)
		CMP	R0, R1
		BCS	loc_626A
		LDR	R0, [R4]
		LDR	R1, [R5,#(dword_20000038 - 0x20000000)]
		SUBS	R1, R0,	R1
		MOVS	R0, #0x7D0
		CMP	R1, R0
		BCC	loc_626A
		LDR	R0, [R4]
		STR	R0, [R5,#(dword_20000038 - 0x20000000)]
		MOVS	R1, #0x64 ; 'd'
		LDR	R0, =0x20B
		BL	beep
		MOVS	R0, #0xFF
		MOVS	R1, #0xFA ; 'ú'
		ADDS	R0, #0x73 ; 's'

loc_6266				; CODE XREF: sub_61EC+52j
		BL	beep

loc_626A				; CODE XREF: sub_61EC+2Cj sub_61EC+36j ...
		LDR	R6, =usedModelPtr
		LDR	R6, [R6]
		ADDS	R6, #0x60 ; '`'
		LDRB	R0, [R6]
		CMP	R0, #0
		BEQ	locret_6328
		LDR	R0, [R4]
		CODE32

loc_6278
		LDR	R1, [R5,#(dword_2000001C - 0x20000000)]
		CODE16
		SUBS	R0, R0,	R1
		MOVS	R1, #0x3E8
		CMP	R0, R1
		BCS	locret_6328
		LDRB	R0, [R6,#2]
		LSLS	R0, R0,	#0x1E
		LSRS	R0, R0,	#0x1F
		CMP	R0, #0
		BEQ	loc_6296
		MOVS	R2, #0
		MOVS	R1, #1
		MOVS	R0, #3
		B	loc_629C
; ---------------------------------------------------------------------------

loc_6296				; CODE XREF: sub_61EC+A0j
		MOVS	R2, #0		; a3
		MOV	R1, R2		; index
		MOV	R0, R2		; sensorID

loc_629C				; CODE XREF: sub_61EC+A8j
		BL	sensorsFunction
		SXTH	R0, R0
		LDRH	R1, [R6,#0x16]
		CMP	R0, R1
		BCS	loc_62DC
		CMP	R0, #0
		BEQ	loc_62DC
		BL	sub_9BC0
		CMP	R0, #0xF
		BNE	locret_6328
		LDR	R0, [R4]
		LDR	R1, [R5,#(dword_2000003C - 0x20000000)]
		SUBS	R0, R0,	R1
		CMP	R0, R7
		BCC	locret_6328
		LDR	R0, [R4]
		STR	R0, [R5,#(dword_2000003C - 0x20000000)]
		BL	sub_9BC0
		CMP	R0, #2
		BCC	locret_6328
		MOVS	R1, #0xFA ; 'ú'
		LDR	R0, =0x417
		BL	beep
		MOVS	R1, #0xFA ; 'ú'
		MOVS	R0, #0x620
		B	loc_6324
; ---------------------------------------------------------------------------

loc_62DA				; CODE XREF: sub_61EC+8j
		B	locret_6328
; ---------------------------------------------------------------------------

loc_62DC				; CODE XREF: sub_61EC+BAj sub_61EC+BEj
		LDRB	R0, [R6,#2]
		LSLS	R0, R0,	#0x1E
		LSRS	R0, R0,	#0x1F
		CMP	R0, #0
		BEQ	loc_62EE
		MOVS	R2, #0
		MOVS	R1, #1
		MOVS	R0, #3
		B	loc_62F4
; ---------------------------------------------------------------------------

loc_62EE				; CODE XREF: sub_61EC+F8j
		MOVS	R2, #0		; a3
		MOV	R1, R2		; index
		MOV	R0, R2		; sensorID

loc_62F4				; CODE XREF: sub_61EC+100j
		BL	sensorsFunction
		SXTH	R0, R0
		LDRH	R1, [R6,#0x18]
		CMP	R0, R1
		BCS	locret_6328
		CMP	R0, #0
		BEQ	locret_6328
		LDR	R0, [R4]
		LDR	R1, [R5,#0x3C]
		SUBS	R1, R0,	R1
		MOVS	R0, #0x7D0
		CMP	R1, R0
		BCC	locret_6328
		LDR	R0, [R4]
		STR	R0, [R5,#0x3C]
		MOVS	R1, #0x64 ; 'd'
		LDR	R0, =0x20B
		BL	beep
		MOVS	R0, #0xFF
		MOVS	R1, #0xFA ; 'ú'
		ADDS	R0, #0x73 ; 's'

loc_6324				; CODE XREF: sub_61EC+ECj
		BL	beep

locret_6328				; CODE XREF: sub_61EC+88j sub_61EC+96j ...
		POP	{R3-R7,PC}
; End of function sub_61EC

; ---------------------------------------------------------------------------
		ALIGN 4
off_632C	DCD timer		; DATA XREF: sub_61EC+2r
off_6330	DCD stickAdjustData	; DATA XREF: sub_61EC+Ar
					; 40 items
off_6334	DCD ch1_ADC_VAL		; DATA XREF: sub_61EC+10r
off_6338	DCD dword_2710		; DATA XREF: sub_61EC+Cr
off_633C	DCD byte_20000000	; DATA XREF: sub_61EC+20r
dword_6340	DCD 0x417		; DATA XREF: sub_61EC+46r sub_61EC+E0r
off_6344	DCD byte_DA0+0x2C8	; DATA XREF: sub_61EC:loc_6240r
dword_6348	DCD 0x20B		; DATA XREF: sub_61EC+6Er
					; sub_61EC+12Cr
off_634C	DCD usedModelPtr	; DATA XREF: sub_61EC:loc_626Ar

; =============== S U B	R O U T	I N E =======================================


sensorsFunction4			; CODE XREF: trySendSettingsPacket+2p
		PUSH	{R3-R7,LR}
		LDR	R5, =byte_20000000
		MOVS	R4, #0
		LDR	R0, [R5,#(activeSensors	- 0x20000000)]
		CMP	R0, #0
		BLS	locret_6390
		LDR	R7, =timer
		LDR	R6, =sensorsArrayInRam

loc_6360				; CODE XREF: sensorsFunction4+3Ej
		LSLS	R0, R4,	#3
		ADDS	R0, R0,	R6
		LDR	R1, [R0,#(sensorsArrayInRam+4 -	0x200001A4)]
		LDR	R2, [R7]
		SUBS	R2, R2,	R1
		MOVS	R1, #0x7D0
		CMP	R2, R1
		BLS	loc_6388
		LDR	R1, [R5,#(activeSensors	- 0x20000000)]
		SUBS	R1, R1,	R4
		LSLS	R2, R1,	#3
		MOV	R1, R0
		SUBS	R2, #8
		ADDS	R1, #8
		BL	sub_1D76
		LDR	R0, [R5,#(activeSensors	- 0x20000000)]
		SUBS	R0, #1
		STR	R0, [R5,#(activeSensors	- 0x20000000)]

loc_6388				; CODE XREF: sensorsFunction4+20j
		LDR	R0, [R5,#(activeSensors	- 0x20000000)]
		ADDS	R4, #1
		CMP	R4, R0
		BCC	loc_6360

locret_6390				; CODE XREF: sensorsFunction4+Aj
		POP	{R3-R7,PC}
; End of function sensorsFunction4

; ---------------------------------------------------------------------------
		ALIGN 4
off_6394	DCD byte_20000000	; DATA XREF: sensorsFunction4+2r
off_6398	DCD timer		; DATA XREF: sensorsFunction4+Cr
sensorsList5	DCD sensorsArrayInRam	; DATA XREF: sensorsFunction4+Er

; =============== S U B	R O U T	I N E =======================================


rxpacketHandle				; CODE XREF: callRxpacketHandle+2p

sensorIdPRT	= -0x28
fakeByte1	= -0x24
fakebyte2	= -0x23
fakebate4	= -0x22

		PUSH	{R4-R7,LR}
		MOV	R4, R0
		LDR	R0, =timer
		SUB	SP, SP,	#0x14
		LDR	R1, [R0]
		LDR	R0, =byte_20000000
		MOVS	R2, #1
		STR	R1, [R0,#(dword_20000014 - 0x20000000)]
		LDRB	R1, [R4]
		ADDS	R0, R4,	#1
		CMP	R1, #0xA5 ; '¥'
		BEQ	loc_63BE
		CMP	R1, #0xAA ; 'ª'
		BEQ	loc_63E0
		B	loc_6572
; ---------------------------------------------------------------------------

loc_63BE				; CODE XREF: rxpacketHandle+16j
		LDR	R1, =byte_20000000
		STRB	R2, [R1,#(byte_20000003	- 0x20000000)]
		ADDS	R1, R0,	#4
		LDRB	R2, [R1]
		MOV	R0, R2
		LDRB	R2, [R1,#1]
		LSLS	R2, R2,	#8
		ORRS	R0, R2
		LDRB	R2, [R1,#2]
		LDRB	R1, [R1,#3]
		LSLS	R2, R2,	#0x10
		ORRS	R0, R2
		LSLS	R1, R1,	#0x18
		ORRS	R0, R1
		LDR	R1, =dword_1FFFF884
		STR	R0, [R1]
		B	loc_656C
; ---------------------------------------------------------------------------

loc_63E0				; CODE XREF: rxpacketHandle+1Aj
		LDRB	R1, [R0,#1]
		LDRB	R3, [R0]
		LSLS	R1, R1,	#8
		ORRS	R1, R3
		LDR	R3, =dword_FFFC
		CMP	R1, R3
		BNE	loc_63F4
		LDR	R0, =byte_2000013F
		STRB	R2, [R0]
		B	loc_656C
; ---------------------------------------------------------------------------

loc_63F4				; CODE XREF: rxpacketHandle+4Cj
		LDR	R2, =(dword_FFFC+1)
		CMP	R1, R2
		BNE	loc_6408
		LDRB	R1, [R0,#3]
		LDRB	R2, [R0,#2]
		LSLS	R0, R1,	#8
		LDR	R1, =byte_20000000
		ORRS	R0, R2
		STR	R0, [R1,#(dword_20000054 - 0x20000000)]
		B	loc_656C
; ---------------------------------------------------------------------------

loc_6408				; CODE XREF: rxpacketHandle+58j
		LDR	R2, =0xFFFE
		CMP	R1, R2
		BNE	loc_6426
		LDRB	R1, [R0,#3]
		LDRB	R2, [R0,#2]
		LSLS	R3, R1,	#8
		LDR	R1, =byte_20000000
		ORRS	R3, R2
		STR	R3, [R1,#(dword_20000030 - 0x20000000)]
		LDRB	R2, [R0,#5]
		LDRB	R3, [R0,#4]
		LSLS	R0, R2,	#8
		ORRS	R0, R3
		STR	R0, [R1,#(dword_20000034 - 0x20000000)]
		B	loc_656C
; ---------------------------------------------------------------------------

loc_6426				; CODE XREF: rxpacketHandle+6Cj
		LDR	R7, =RX_BUFFER
		LDRB	R2, [R4,#2]
		SUBS	R0, R7,	#4
		ADDS	R1, R4,	#2
		CMP	R2, #0xFF
		BEQ	loc_6442
		LDRB	R2, [R4,#1]
		STRB	R2, [R0,#(RX_BUFFER - 0x20000EE0)]
		LDRB	R2, [R4,#2]
		STRB	R2, [R0,#(byte_20000EE5	- 0x20000EE0)]
		LDRB	R2, [R4,#3]
		STRB	R2, [R0,#(byte_20000EE6	- 0x20000EE0)]
		LDRB	R2, [R4,#4]
		STRB	R2, [R0,#(byte_20000EE7	- 0x20000EE0)]

loc_6442				; CODE XREF: rxpacketHandle+90j
		ADDS	R0, #4
		MOVS	R2, #1
		MOVS	R5, #3

loc_6448				; CODE XREF: rxpacketHandle+E4j
		LDRB	R3, [R1,#4]
		CMP	R3, #0xFF
		BEQ	loc_6462
		LSLS	R3, R2,	#2
		ADDS	R3, R3,	R4
		LDRB	R6, [R3,#1]
		STRB	R6, [R0,#(byte_20000EE8	- 0x20000EE4)]
		LDRB	R6, [R3,#2]
		STRB	R6, [R0,#(byte_20000EE9	- 0x20000EE4)]
		LDRB	R6, [R3,#3]
		STRB	R6, [R0,#(byte_20000EEA	- 0x20000EE4)]
		LDRB	R3, [R3,#4]
		STRB	R3, [R0,#(byte_20000EEB	- 0x20000EE4)]

loc_6462				; CODE XREF: rxpacketHandle+ACj
		ADDS	R1, #8
		LDRB	R3, [R1]
		CMP	R3, #0xFF
		BEQ	loc_647E
		LSLS	R3, R2,	#2
		ADDS	R3, R3,	R4
		LDRB	R6, [R3,#5]
		STRB	R6, [R0,#(byte_20000EEC	- 0x20000EE4)]
		LDRB	R6, [R3,#6]
		STRB	R6, [R0,#(byte_20000EED	- 0x20000EE4)]
		LDRB	R6, [R3,#7]
		STRB	R6, [R0,#(byte_20000EEE	- 0x20000EE4)]
		LDRB	R3, [R3,#8]
		STRB	R3, [R0,#(byte_20000EEF	- 0x20000EE4)]

loc_647E				; CODE XREF: rxpacketHandle+C8j
		ADDS	R0, #8
		ADDS	R2, #2
		SUBS	R5, #1
		BNE	loc_6448
		LDR	R0, =byte_20000000
		LDR	R1, [R0,#(dword_20000020 - 0x20000000)]
		CMP	R1, #0
		BEQ	loc_649A
		LDR	R2, =timer
		LDR	R2, [R2]
		SUBS	R1, R2,	R1
		LDR	R2, =unk_5DC
		CMP	R1, R2
		BLS	loc_656C

loc_649A				; CODE XREF: rxpacketHandle+ECj
		LDR	R1, [R0,#(dword_20000050 - 0x20000000)]
		ADDS	R1, #1
		STR	R1, [R0,#(dword_20000050 - 0x20000000)]
		CMP	R1, #8
		BCC	loc_64AE
		MOVS	R1, #0
		STR	R1, [R0,#(dword_20000050 - 0x20000000)]
		LDR	R1, =timer
		LDR	R1, [R1]
		STR	R1, [R0,#(dword_20000020 - 0x20000000)]

loc_64AE				; CODE XREF: rxpacketHandle+102j
					; rxpacketHandle+1C0j
		LSLS	R6, R5,	#2
		ADDS	R0, R6,	R7
		STR	R0, [SP,#0x28+sensorIdPRT]
		BL	setSensorValue
		LDR	R0, =byte_20000000
		MOVS	R2, #0x87 ; ''
		LDR	R1, [R0,#(usedModelPtr - 0x20000000)]
		LDRB	R2, [R2,R1]
		CMP	R2, #0xFF
		BEQ	loc_655C
		LDRB	R3, [R7,R6]
		CMP	R3, #2
		BNE	loc_655C
		LDR	R3, [SP,#0x28+sensorIdPRT]
		LDRB	R3, [R3,#1]
		CMP	R3, R2
		BNE	loc_655C
		MOVS	R6, #0x7C ; '|'
		MOV	R2, SP
		STRB	R6, [R2,#0x28+fakeByte1]
		MOV	R6, R0
		ADDS	R1, #0x82 ; ''
		MOVS	R0, #8
		STRB	R3, [R2,#0x28+fakebyte2]
		ADDS	R1, R1,	R0
		LDRB	R2, [R1]
		MOV	R0, R2
		LDRB	R2, [R1,#1]
		LSLS	R2, R2,	#8
		ORRS	R0, R2
		LDRB	R2, [R1,#2]
		LDRB	R1, [R1,#3]
		LSLS	R2, R2,	#0x10
		ORRS	R0, R2
		LSLS	R1, R1,	#0x18
		ORRS	R0, R1
		MOV	R2, SP
		STRH	R0, [R2,#0x28+fakebate4]
		ADD	R0, SP,	#0x28+fakeByte1
		BL	setSensorValue
		MOVS	R0, #0x7D ; '}'
		MOV	R2, SP
		STRB	R0, [R2,#0x28+fakeByte1]
		LDR	R0, [R6,#(usedModelPtr - 0x20000000)]
		MOVS	R1, #0xC
		ADDS	R0, #0x82 ; ''
		ADDS	R1, R0,	R1
		LDRB	R2, [R1]
		MOV	R0, R2
		LDRB	R2, [R1,#1]
		LSLS	R2, R2,	#8
		ORRS	R0, R2
		LDRB	R2, [R1,#2]
		LDRB	R1, [R1,#3]
		LSLS	R2, R2,	#0x10
		ORRS	R0, R2
		LSLS	R1, R1,	#0x18
		ORRS	R0, R1
		MOV	R2, SP
		STRH	R0, [R2,#0x28+fakebate4]
		ADD	R0, SP,	#0x28+fakeByte1
		BL	setSensorValue
		MOVS	R0, #0x7E ; '~'
		MOV	R2, SP
		STRB	R0, [R2,#0x28+fakeByte1]
		LDR	R1, [R6,#(usedModelPtr - 0x20000000)]
		LDR	R0, [SP,#0x28+sensorIdPRT]
		ADDS	R1, #0x80 ; ''
		LDRB	R2, [R1,#9]
		LDRB	R3, [R1,#8]
		LDRH	R0, [R0,#2]
		LSLS	R1, R2,	#8
		ORRS	R1, R3
		MULS	R0, R1
		MOVS	R1, #6
		MULS	R0, R1
		LDR	R1, =dword_2710
		BL	div__0
		MOV	R2, SP
		STRH	R0, [R2,#0x28+fakebate4]
		ADD	R0, SP,	#0x28+fakeByte1
		BL	setSensorValue

loc_655C				; CODE XREF: rxpacketHandle+122j
					; rxpacketHandle+128j ...
		ADDS	R5, #1
		CMP	R5, #7
		BCC	loc_64AE
		MOVS	R2, #0xFF	; a3
		MOVS	R1, #0x1C	; numbButesToSend
		LDR	R0, =RX_BUFFER	; targetAddress
		BL	setupDMA

loc_656C				; CODE XREF: rxpacketHandle+3Ej
					; rxpacketHandle+52j ...
		LDRB	R0, [R4]
		CMP	R0, #0xA5 ; '¥'
		BEQ	loc_657C

loc_6572				; CODE XREF: rxpacketHandle+1Cj
		LDR	R0, =timer
		LDR	R0, [R0]
		LDR	R1, =byte_20000000
		SUBS	R0, #1
		STR	R0, [R1,#(dword_2000001C - 0x20000000)]

loc_657C				; CODE XREF: rxpacketHandle+1D0j
		ADD	SP, SP,	#0x14
		POP	{R4-R7,PC}
; End of function rxpacketHandle

; ---------------------------------------------------------------------------
off_6580	DCD timer		; DATA XREF: rxpacketHandle+4r
					; rxpacketHandle+EEr ...
off_6584	DCD byte_20000000	; DATA XREF: rxpacketHandle+Ar
					; rxpacketHandle:loc_63BEr ...
off_6588	DCD dword_1FFFF884	; DATA XREF: rxpacketHandle+3Ar
off_658C	DCD dword_FFFC		; DATA XREF: rxpacketHandle+48r
off_6590	DCD byte_2000013F	; DATA XREF: rxpacketHandle+4Er
off_6594	DCD dword_FFFC+1	; DATA XREF: rxpacketHandle:loc_63F4r
dword_6598	DCD 0xFFFE		; DATA XREF: rxpacketHandle:loc_6408r
; _WORD	*targetAddress
targetAddress	DCD RX_BUFFER		; DATA XREF: rxpacketHandle:loc_6426r
					; rxpacketHandle+1C6r
off_65A0	DCD unk_5DC		; DATA XREF: rxpacketHandle+F4r
off_65A4	DCD dword_2710		; DATA XREF: rxpacketHandle+1ACr

; =============== S U B	R O U T	I N E =======================================


sensorsListMainScreen			; CODE XREF: main_screen+5BEp

var_F0		= -0xF0
text		= -0xEC
var_E8		= -0xE8
var_E0		= -0xE0
var_B0		= -0xB0
var_7C		= -0x7C

		PUSH	{R4-R7,LR}
		LDR	R6, =usedModelPtr
		LDR	R6, [R6]
		ADDS	R6, #0x60 ; '`'
		SUB	SP, SP,	#0xDC
		LDRB	R0, [R6]
		CMP	R0, #0
		BEQ	loc_664C
		LDR	R0, =timer
		LDR	R0, [R0]
		LDR	R5, =byte_20000000
		MOVS	R7, #0
		LDR	R1, [R5,#(dword_2000001C - 0x20000000)]
		SUBS	R1, R0,	R1
		MOVS	R0, #0x3E8
		CMP	R1, R0
		BCS	loc_664E
		LDRB	R4, [R6,#2]
		LSLS	R4, R4,	#0x1E
		LSRS	R4, R4,	#0x1F
		CMP	R4, #0
		BEQ	unk_6614
; ---------------------------------------------------------------------------
unk_65D6	DCB    2
		DCB 0x22 ; "
		DCB 0x3B ; ;
		DCB 0x21 ; !
; ---------------------------------------------------------------------------
		ADR	R0, unk_686C
		BL	displaySmallTextAt
		MOVS	R2, #0		; a3
		MOVS	R1, #1		; index
		MOVS	R0, #3		; sensorID
		BL	sensorsFunction
		SXTH	R0, R0
		LDRH	R4, [R6,#0x1A]
		CMP	R0, R4
		BGT	loc_6650
		MOVS	R2, #0		; a3
		MOVS	R1, #1		; index
		MOVS	R0, #3		; sensorID
		BL	sensorsFunction
		SXTH	R0, R0
		LDRH	R4, [R6,#0x16]
		CMP	R0, R4
		BLT	loc_6650
		MOVS	R2, #0		; a3
		MOVS	R1, #1		; index
		MOVS	R0, #3		; sensorID
		BL	sensorsFunction
		SXTH	R0, R0
		MOV	R4, R0
		B	loc_6650
; ---------------------------------------------------------------------------
unk_6614	DCB    2		; CODE XREF: sensorsListMainScreen+2Cj
		DCB 0x22 ; "
		DCB 0x3B ; ;
		DCB 0x21 ; !
; ---------------------------------------------------------------------------
		ADR	R0, unk_6870
		BL	displaySmallTextAt
		MOVS	R2, #0		; a3
		MOV	R1, R2		; index
		MOV	R0, R2		; sensorID
		BL	sensorsFunction
		LDRH	R4, [R6,#0x1A]
		CMP	R0, R4
		BHI	loc_6650
		MOVS	R2, #0		; a3
		MOV	R1, R2		; index
		MOV	R0, R2		; sensorID
		BL	sensorsFunction
		LDRH	R4, [R6,#0x16]
		CMP	R0, R4
		BCC	loc_6650
		MOVS	R2, #0		; a3
		MOV	R1, R2		; index
		MOV	R0, R2		; sensorID
		BL	sensorsFunction
		MOV	R4, R0
		B	loc_6650
; ---------------------------------------------------------------------------

loc_664C				; CODE XREF: sensorsListMainScreen+Ej
		B	loc_677E
; ---------------------------------------------------------------------------

loc_664E				; CODE XREF: sensorsListMainScreen+22j
		B	loc_66CE
; ---------------------------------------------------------------------------

loc_6650				; CODE XREF: sensorsListMainScreen+48j
					; sensorsListMainScreen+5Aj ...
		LDRH	R0, [R6,#0x18]
		CMP	R0, R4
		BCC	unk_666A
		LDR	R0, =timer
		MOVS	R1, #0x7D0
		LDR	R0, [R0]
		BL	div_Other
		MOVS	R0, #0x3E8
		CMP	R1, R0
		BCS	loc_66CE
; ---------------------------------------------------------------------------
unk_666A	DCB    1		; CODE XREF: sensorsListMainScreen+ACj
		DCB 0x22 ; "
		DCB 0x42 ; B
		DCB 0x21 ; !
; ---------------------------------------------------------------------------
		LDR	R0, =unk_CBB0
		BL	displayGFX
		LDRH	R1, [R6,#0x1A]
		LDRH	R0, [R6,#0x16]
		MOVS	R2, #0x13
		SUBS	R1, R1,	R0
		SUBS	R0, R4,	R0
		MULS	R0, R2
		BL	div_
		MOV	R2, R0
; ---------------------------------------------------------------------------
		DCB 0x42 ; B
		DCB 0x32 ; 2
		DCB    7
		DCB 0x23 ; #
		DCB    2
		DCB 0x21 ; !
		DCB 0x43 ; C
		DCB 0x20
; ---------------------------------------------------------------------------
		STR	R7, [SP,#0xF0+var_F0]
		BL	fillRegion
		MOVS	R4, #1
; ---------------------------------------------------------------------------
		DCB 0x46 ; F
		DCB 0x22 ; "
		DCB    6
		DCB 0x23 ; #
		DCB    2
		DCB 0x21 ; !
; ---------------------------------------------------------------------------
		MOV	R0, R2
		STR	R4, [SP,#0xF0+var_F0]
		BL	fillRegion
; ---------------------------------------------------------------------------
		DCB 0x4B ; K
		DCB 0x22 ; "
		DCB    6
		DCB 0x23 ; #
		DCB    2
		DCB 0x21 ; !
; ---------------------------------------------------------------------------
		MOV	R0, R2
		STR	R4, [SP,#0xF0+var_F0]
		BL	fillRegion
; ---------------------------------------------------------------------------
		DCB 0x50 ; P
		DCB 0x22 ; "
		DCB    6
		DCB 0x23 ; #
		DCB    2
		DCB 0x21 ; !
; ---------------------------------------------------------------------------
		MOV	R0, R2
		STR	R4, [SP,#0xF0+var_F0]
		BL	fillRegion
; ---------------------------------------------------------------------------
		DCB 0x55 ; U
		DCB 0x22 ; "
		DCB    6
		DCB 0x23 ; #
		DCB    2
		DCB 0x21 ; !
; ---------------------------------------------------------------------------
		MOV	R0, R2
		STR	R4, [SP,#0xF0+var_F0]
		BL	fillRegion

loc_66CE				; CODE XREF: sensorsListMainScreen:loc_664Ej
					; sensorsListMainScreen+C0j
		LDR	R1, [R5,#0x2C]
		MOVS	R0, #1
		ADDS	R1, #0x80 ; ''
		LDRB	R2, [R1,#1]
		CMP	R2, #0xFF
		BEQ	loc_66DC
		MOVS	R0, #0

loc_66DC				; CODE XREF: sensorsListMainScreen+130j
		LDRB	R2, [R1,#3]
		CMP	R2, #0xFF
		BEQ	loc_66E4
		MOVS	R0, #0

loc_66E4				; CODE XREF: sensorsListMainScreen+138j
		LDRB	R1, [R1,#5]
		ADD	R6, SP,	#0xF0+var_B0
		ADDS	R6, #2
		CMP	R1, #0xFF
		BNE	loc_678E
		CMP	R0, #0
		BEQ	loc_678E
		MOVS	R4, #0
		ADD	R1, SP,	#0xF0+var_7C
		ADDS	R1, #1
		ADD	R0, SP,	#0xF0+var_7C
		STR	R1, [SP,#0xF0+var_E8]
		STR	R0, [SP,#0xF0+text]

loc_66FE				; CODE XREF: sensorsListMainScreen+1D4j
		LDR	R0, =byte_20000000
		LDR	R0, [R0,#(activeSensors	- 0x20000000)]
		CMP	R4, R0
		BCS	loc_6778
		LDR	R0, =sensorsArrayInRam
		LSLS	R5, R4,	#3
		ADDS	R7, R5,	R0
		ADD	R0, SP,	#0xF0+var_E0
		STR	R0, [SP,#0xF0+var_F0]
		MOV	R2, R6
		LDRB	R1, [R7,#(sensorsArrayInRam+1 -	0x200001A4)]
		LDRB	R0, [R7]
		BL	formatSensorData
		LDRB	R0, [R7]
		BL	GetSensorName
		MOV	R1, R0
		LDR	R0, [SP,#0xF0+var_F0]
		BL	sub_1C64
		STR	R6, [SP,#0xF0+var_F0]
		LDRB	R3, [R7,#(sensorsArrayInRam+1 -	0x200001A4)]
		ADD	R2, SP,	#0xF0+var_E0
		ADDS	R3, #1
		ADR	R1, aSUS	; "%s:%s"
		LDR	R0, [SP,#0xF0+text]
		BL	sprintf
		LDR	R0, [SP,#0xF0+text]
		BL	strLength
		CMP	R0, #0xD
		BLS	loc_6782
		LDR	R0, =sensorsArrayInRam
		LDRB	R0, [R0,R5]
		CMP	R0, #2
		BEQ	loc_676A
		MOV	R2, R5
		ADDS	R2, #0x23 ; '#'	; y
		MOVS	R3, #0		; a4
		MOVS	R1, #0xC	; x
		LDR	R0, [SP,#0xF0+text] ; text
		BL	displayTextAt
		MOVS	R0, #0
		MOVS	R2, #0x7A ; 'z'
		STR	R0, [SP,#0xF0+var_F0]
		MOVS	R3, #0x39 ; '9'
		MOVS	R1, #0x21 ; '!'
		MOV	R0, R2
		BL	drawLine
		B	loc_6778
; ---------------------------------------------------------------------------

loc_676A				; CODE XREF: sensorsListMainScreen+1A0j
		MOV	R2, R5
		ADDS	R2, #0x23 ; '#'	; y
		MOVS	R3, #0		; a4
		MOVS	R1, #0x10	; x
		LDR	R0, [SP,#0xF0+var_E8] ;	text

loc_6774				; CODE XREF: sensorsListMainScreen+1E4j
		BL	displayTextAt

loc_6778				; CODE XREF: sensorsListMainScreen+15Cj
					; sensorsListMainScreen+1C0j
		ADDS	R4, #1
		CMP	R4, #3
		BCC	loc_66FE

loc_677E				; CODE XREF: sensorsListMainScreen:loc_664Cj
		ADD	SP, SP,	#0xDC
		POP	{R4-R7,PC}
; ---------------------------------------------------------------------------

loc_6782				; CODE XREF: sensorsListMainScreen+198j
		MOV	R2, R5
		ADDS	R2, #0x23 ; '#'
		MOVS	R3, #0
		MOVS	R1, #0x10
		LDR	R0, [SP,#0xF0+text]
		B	loc_6774
; ---------------------------------------------------------------------------

loc_678E				; CODE XREF: sensorsListMainScreen+144j
					; sensorsListMainScreen+148j
		MOVS	R4, #0

loc_6790				; CODE XREF: sensorsListMainScreen+2A0j
		LDR	R0, [R5,#0x2C]
; ---------------------------------------------------------------------------
unk_6792	DCB 0xC0 ; À
		DCB 0x46 ; F
		DCB 0x27 ; '
		DCB 0x18
; ---------------------------------------------------------------------------
		ADDS	R7, #0x81 ; ''
		LDRB	R0, [R7]
		CMP	R0, #0xFF
		BEQ	loc_6844
; ---------------------------------------------------------------------------
		DCB 0xC0 ; À
		DCB 0x46 ; F
; ---------------------------------------------------------------------------
		MOV	R2, R6
		BL	formatSensorData
		LDRB	R0, [R7]
; ---------------------------------------------------------------------------
		DCB 0xC0 ; À
		DCB 0x46 ; F
; ---------------------------------------------------------------------------
		LDR	R1, =aIntv_0	; "IntV"
		BL	RemapSensorIndex
		NOP
		MOVS	R2, R0
		B	loc_67D2
; ---------------------------------------------------------------------------
		DCB 0xC0 ; À
		DCB 0x46 ; F
		DCB 0xC0 ; À
		DCB 0x46 ; F
		DCB 0xC0 ; À
		DCB 0x46 ; F
		DCB 0xC0 ; À
		DCB 0x46 ; F
		DCB 0xC0 ; À
		DCB 0x46 ; F
		DCB 0xC0 ; À
		DCB 0x46 ; F
		DCB 0xC0 ; À
		DCB 0x46 ; F
		DCB 0xC0 ; À
		DCB 0x46 ; F
		DCB 0xC0 ; À
		DCB 0x46 ; F
		DCB 0xC0 ; À
		DCB 0x46 ; F
		DCB 0xC0 ; À
		DCB 0x46 ; F
		DCB 0xC0 ; À
		DCB 0x46 ; F
		DCB 0xC0 ; À
		DCB 0x46 ; F
		DCB 0xC0 ; À
		DCB 0x46 ; F
; ---------------------------------------------------------------------------

loc_67D2				; CODE XREF: sensorsListMainScreen+20Cj
		STR	R6, [SP,#0xF0+var_F0]
		MOVS	R3, R6
		ADR	R1, aSUS	; "%s:%s"
		NOP
		ADD	R0, SP,	#0xF0+var_E0
		BL	sprintf
		ADD	R0, SP,	#0xF0+var_E0
		BL	strLength
		CMP	R0, #0xD
		BLS	loc_684E
		LDRB	R0, [R7]
		CMP	R0, #2
		BEQ	loc_6834
		LSLS	R2, R4,	#3
		ADDS	R2, #0xB	; y
		MOVS	R3, #0		; a4
		MOVS	R1, #9		; x
		ADD	R0, SP,	#0xF0+var_E0 ; text
		BL	displaySmallTextAt
		MOVS	R0, #0
		MOVS	R2, #0x7A ; 'z'
		STR	R0, [SP,#0xF0+var_F0]
		MOVS	R3, #0x39 ; '9'
		MOVS	R1, #0x21 ; '!'
		MOV	R0, R2
		BL	drawLine
		B	loc_6844
; ---------------------------------------------------------------------------
		DCB 0xC0 ; À
		DCB 0x46 ; F
		DCB 0xC0 ; À
		DCB 0x46 ; F
		DCB 0xC0 ; À
		DCB 0x46 ; F
		DCB 0xC0 ; À
		DCB 0x46 ; F
		DCB 0xC0 ; À
		DCB 0x46 ; F
		DCB 0xC0 ; À
		DCB 0x46 ; F
		DCB 0xC0 ; À
		DCB 0x46 ; F
		DCB 0xC0 ; À
		DCB 0x46 ; F
		DCB 0xC0 ; À
		DCB 0x46 ; F
		DCB 0xC0 ; À
		DCB 0x46 ; F
; ---------------------------------------------------------------------------
		NOP
		NOP
		NOP
		NOP
		NOP
		NOP
		NOP
		NOP

loc_6834				; CODE XREF: sensorsListMainScreen+246j
		LSLS	R2, R4,	#3
		ADD	R0, SP,	#0x10
		ADDS	R2, #0xB	; y
		MOVS	R3, #0		; a4
		MOVS	R1, #9		; x
		ADDS	R0, #1		; text

loc_6840				; CODE XREF: sensorsListMainScreen+2B0j
		BL	displaySmallTextAt

loc_6844				; CODE XREF: sensorsListMainScreen+1F4j
					; sensorsListMainScreen+266j
		ADDS	R4, #1
		CMP	R4, #6
		BCC	loc_6790
		ADD	SP, SP,	#0xDC
		POP	{R4-R7,PC}
; ---------------------------------------------------------------------------

loc_684E				; CODE XREF: sensorsListMainScreen+240j
		LSLS	R2, R4,	#3
		ADDS	R2, #0xB
		MOVS	R3, #0
		MOVS	R1, #9
		ADD	R0, SP,	#0xF0+var_E0
		B	loc_6840
; End of function sensorsListMainScreen

; ---------------------------------------------------------------------------
		ALIGN 4
off_685C	DCD usedModelPtr	; DATA XREF: sensorsListMainScreen+2r
off_6860	DCD timer		; DATA XREF: sensorsListMainScreen+10r
					; sensorsListMainScreen+AEr
off_6864	DCD byte_20000000	; DATA XREF: sensorsListMainScreen+14r
					; sensorsListMainScreen:loc_66FEr
off_6868	DCD unk_CBB0		; DATA XREF: sensorsListMainScreen+C6r
unk_686C	DCB 0x45 ; E		; DATA XREF: sensorsListMainScreen+32o
		DCB 0x58, 0, 0
unk_6870	DCB 0x52 ; R		; DATA XREF: sensorsListMainScreen+70o
		DCB 0, 0, 0
sensorsList6	DCD sensorsArrayInRam	; DATA XREF: sensorsListMainScreen+15Er
					; sensorsListMainScreen+19Ar
aSUS		DCB "%s:%s",0,0,0       ; DATA XREF: sensorsListMainScreen+188o
					; sensorsListMainScreen+22Eo
off_6880	DCD aIntv_0		; DATA XREF: sensorsListMainScreen+202r
					; "IntV"
		DCD 0xFFFFFFFF
		DCD 0xFFFFFFFF
		DCD 0xFFFFFFFF
		DCD 0xFFFFFFFF
		DCD 0xFFFFFFFF
		DCD 0xFFFFFFFF
		DCD 0xFFFFFFFF
		DCD 0xFFFFFFFF
		DCD 0xFFFFFFFF

; =============== S U B	R O U T	I N E =======================================


sub_68A8				; CODE XREF: main_screen+8E8p

var_20		= -0x20
var_1C		= -0x1C

		PUSH	{R4-R7,LR}
		LDR	R1, =dword_CBBC
		MOVS	R0, #0x7C ; '|'
		LDR	R1, [R1]
		MOVS	R4, #0
		SUBS	R0, R0,	R1
		LSRS	R5, R0,	#1
		ADDS	R0, R5,	#4
		SUB	SP, SP,	#0xC
		MOV	R6, R4
		ADDS	R7, R1,	R0

loc_68BE				; CODE XREF: sub_68A8:loc_69C4j
					; sub_68A8+154j ...
		BL	callSetupDMAandSend
		BL	callSetupDMAandSend
		LDR	R0, =dword_CBBC
		STR	R0, [SP,#0x20+var_1C]
		MOVS	R3, #2
		SUBS	R2, R5,	#1
		MOVS	R1, #1
		STR	R6, [SP,#0x20+var_20]
		MOVS	R0, #0
		BL	fillRegion
		MOVS	R3, #6
		SUBS	R2, R5,	#1
		MOVS	R1, #5
		MOVS	R0, #0
		STR	R6, [SP,#0x20+var_20]
		BL	fillRegion
		MOVS	R3, #0xA
		SUBS	R2, R5,	#1
		MOVS	R1, #9
		MOVS	R0, #0
		STR	R6, [SP,#0x20+var_20]
		BL	fillRegion
		MOVS	R2, #0
		ADDS	R1, R5,	#2
		LDR	R0, [SP,#0x20+var_1C]
		BL	displayGFX
		MOVS	R3, #2
		MOVS	R2, #0x7F ; ''
		MOVS	R1, #1
		MOV	R0, R7
		STR	R6, [SP,#0x20+var_20]
		BL	fillRegion
		MOVS	R3, #6
		MOVS	R2, #0x7F ; ''
		MOVS	R1, #5
		MOV	R0, R7
		STR	R6, [SP,#0x20+var_20]
		BL	fillRegion
		MOVS	R3, #0xA
		MOVS	R2, #0x7F ; ''
		MOVS	R1, #9
		MOV	R0, R7
		STR	R6, [SP,#0x20+var_20]
		BL	fillRegion
		MOVS	R2, #0x12
		MOVS	R1, #0x1A
		LDR	R0, =unk_CBD4
		BL	displayGFX
		MOVS	R2, #0x12
		MOVS	R1, #0x48 ; 'H'
		LDR	R0, =unk_CBEC
		BL	displayGFX
		CMP	R4, #0
		BEQ	loc_6944
		MOVS	R0, #1
		B	loc_6946
; ---------------------------------------------------------------------------

loc_6944				; CODE XREF: sub_68A8+96j
		MOVS	R0, #0

loc_6946				; CODE XREF: sub_68A8+9Aj
		STR	R0, [SP,#0x20+var_20]
		MOVS	R3, #0x35 ; '5'
		MOVS	R2, #0x3B ; ';'
		MOVS	R1, #0xE
		MOVS	R0, #0x16
		BL	drawLine
		CMP	R4, #0
		BEQ	loc_695C
		MOVS	R0, #1
		B	loc_695E
; ---------------------------------------------------------------------------

loc_695C				; CODE XREF: sub_68A8+AEj
		MOVS	R0, #0

loc_695E				; CODE XREF: sub_68A8+B2j
		STR	R0, [SP,#0x20+var_20]
		MOVS	R3, #0x34 ; '4'
		MOVS	R2, #0x3A ; ':'
		MOVS	R1, #0xF
		MOVS	R0, #0x17
		BL	drawLine
		CMP	R4, #1
		BEQ	loc_6974
		MOVS	R0, #1
		B	loc_6976
; ---------------------------------------------------------------------------

loc_6974				; CODE XREF: sub_68A8+C6j
		MOVS	R0, #0

loc_6976				; CODE XREF: sub_68A8+CAj
		STR	R0, [SP,#0x20+var_20]
		MOVS	R3, #0x35 ; '5'
		MOVS	R2, #0x69 ; 'i'
		MOVS	R1, #0xE
		MOVS	R0, #0x44 ; 'D'
		BL	drawLine
		CMP	R4, #1
		BEQ	loc_698C
		MOVS	R0, #1
		B	loc_698E
; ---------------------------------------------------------------------------

loc_698C				; CODE XREF: sub_68A8+DEj
		MOVS	R0, #0

loc_698E				; CODE XREF: sub_68A8+E2j
		STR	R0, [SP,#0x20+var_20]
		MOVS	R3, #0x34 ; '4'
		MOVS	R2, #0x68 ; 'h'
		MOVS	R1, #0xF
		MOVS	R0, #0x45 ; 'E'
		BL	drawLine
		CMP	R4, #0
		BEQ	loc_69FE
		MOVS	R3, #0		; a4
		MOVS	R2, #0x38 ; '8'	; a3
		MOVS	R1, #0x40 ; '@'	; a2
		LDR	R0, =aFunctionsSetup ; "Functions setup"

loc_69A8				; CODE XREF: sub_68A8+15Ej
		BL	displayTextAt2
		BL	LCD_updateCALL
		BL	getKeyCode
		CMP	R0, #0xB
		BEQ	loc_6A08
		CMP	R0, #9
		BEQ	loc_6A1E
		CMP	R0, #8
		BEQ	loc_6A1E
		CMP	R0, #0xA
		BEQ	loc_69C6

loc_69C4				; CODE XREF: sub_68A8+180j
		B	loc_68BE
; ---------------------------------------------------------------------------

loc_69C6				; CODE XREF: sub_68A8+11Aj
		BL	sub_9BC0
		CMP	R0, #2
		BCC	loc_69E0
		MOVS	R0, #0x31 ; '1'
		MOVS	R1, #0xF
		LSLS	R0, R0,	#4
		BL	beep
		MOVS	R1, #0xF
		MOVS	R0, #0
		BL	beep

loc_69E0				; CODE XREF: sub_68A8+124j
		CMP	R4, #0
		BEQ	loc_6A3E
		LDR	R0, =byte_20000000
		LDR	R0, [R0,#(usedModelPtr - 0x20000000)]
		LDRB	R0, [R0,#9]
		CMP	R0, #0
		BEQ	loc_6A46
		CMP	R0, #1
		BHI	loc_6A52
		LDR	R2, =unk_D368
		MOVS	R1, #0xB
		LDR	R0, =unk_CBE0
		BL	factoryModeMenu
		B	loc_68BE
; ---------------------------------------------------------------------------

loc_69FE				; CODE XREF: sub_68A8+F6j
		MOVS	R3, #0
		MOVS	R2, #0x38 ; '8'
		MOVS	R1, #0x40 ; '@'
		LDR	R0, =0xCE27
		B	loc_69A8
; ---------------------------------------------------------------------------

loc_6A08				; CODE XREF: sub_68A8+10Ej
		MOVS	R0, #0x31 ; '1'
		MOVS	R1, #0x4B ; 'K'
		LSLS	R0, R0,	#4
		BL	beep
		MOVS	R1, #0x4B ; 'K'
		LDR	R0, =0x20B
		BL	beep
		ADD	SP, SP,	#0xC
		POP	{R4-R7,PC}
; ---------------------------------------------------------------------------

loc_6A1E				; CODE XREF: sub_68A8+112j
					; sub_68A8+116j
		MOVS	R0, #1
		EORS	R4, R0
		BL	sub_9BC0
		CMP	R0, #2
		BCC	loc_69C4
		MOVS	R0, #0x31 ; '1'
		MOVS	R1, #0xF
		LSLS	R0, R0,	#4
		BL	beep
		MOVS	R1, #0xF
		MOVS	R0, #0
		BL	beep
		B	loc_68BE
; ---------------------------------------------------------------------------

loc_6A3E				; CODE XREF: sub_68A8+13Aj
		LDR	R2, =unk_D488
		MOVS	R1, #0xE
		LDR	R0, =off_CBC8
		B	loc_6A4C
; ---------------------------------------------------------------------------

loc_6A46				; CODE XREF: sub_68A8+144j
		LDR	R2, =unk_D308
		MOVS	R1, #0xC
		LDR	R0, =unk_CBE0

loc_6A4C				; CODE XREF: sub_68A8+19Cj
		BL	factoryModeMenu
		B	loc_68BE
; ---------------------------------------------------------------------------

loc_6A52				; CODE XREF: sub_68A8+148j
		CMP	R0, #2
		BHI	loc_6A62
		LDR	R2, =unk_D3C0
		MOVS	R1, #0xC
		LDR	R0, =unk_CBE0
		BL	factoryModeMenu
		B	loc_68BE
; ---------------------------------------------------------------------------

loc_6A62				; CODE XREF: sub_68A8+1ACj
		LDR	R2, =unk_D420
		MOVS	R1, #0xD
		LDR	R0, =unk_CBE0
		BL	factoryModeMenu
		B	loc_68BE
; End of function sub_68A8

; ---------------------------------------------------------------------------
		ALIGN 0x10
off_6A70	DCD dword_CBBC		; DATA XREF: sub_68A8+2r sub_68A8+1Er
off_6A74	DCD unk_CBD4		; DATA XREF: sub_68A8+84r
off_6A78	DCD unk_CBEC		; DATA XREF: sub_68A8+8Er
; _BYTE	*off_6A7C
off_6A7C	DCD aFunctionsSetup	; DATA XREF: sub_68A8+FEr
					; "Functions setup"
off_6A80	DCD byte_20000000	; DATA XREF: sub_68A8+13Cr
off_6A84	DCD unk_D368		; DATA XREF: sub_68A8+14Ar
off_6A88	DCD unk_CBE0		; DATA XREF: sub_68A8+14Er
					; sub_68A8+1A2r ...
dword_6A8C	DCD 0xCE27		; DATA XREF: sub_68A8+15Cr
dword_6A90	DCD 0x20B		; DATA XREF: sub_68A8+16Cr
off_6A94	DCD unk_D488		; DATA XREF: sub_68A8:loc_6A3Er
off_6A98	DCD off_CBC8		; DATA XREF: sub_68A8+19Ar
off_6A9C	DCD unk_D308		; DATA XREF: sub_68A8:loc_6A46r
off_6AA0	DCD unk_D3C0		; DATA XREF: sub_68A8+1AEr
off_6AA4	DCD unk_D420		; DATA XREF: sub_68A8:loc_6A62r

; =============== S U B	R O U T	I N E =======================================


factoryModeMenu				; CODE XREF: sub_68A8+150p
					; sub_68A8:loc_6A4Cp ...

var_30		= -0x30
var_2C		= -0x2C
var_28		= -0x28
var_24		= -0x24
var_20		= -0x20
var_1C		= -0x1C

		PUSH	{R0-R2,R4-R7,LR}
		SUB	SP, SP,	#0x10
		MOVS	R0, #0
		STR	R0, [SP,#0x30+var_2C]
		LDR	R0, [SP,#0x30+var_1C]
		MOV	R6, R2
		SUBS	R0, #1
		STR	R0, [SP,#0x30+var_24]

loc_6AB8				; CODE XREF: factoryModeMenu+FEj
					; factoryModeMenu:loc_6BC2j ...
		LDR	R0, =byte_20000000
		MOVS	R5, #0
		STRB	R5, [R0,#(byte_20000002	- 0x20000000)]
		BL	callSetupDMAandSend
		LDR	R7, [SP,#0x30+var_20]
		MOVS	R0, #0x7C ; '|'
		LDR	R1, [R7]
		MOVS	R3, #2
		SUBS	R0, R0,	R1
		LSRS	R4, R0,	#1
		SUBS	R2, R4,	#1
		MOVS	R1, #1
		MOVS	R0, #0
		STR	R5, [SP,#0x30+var_30]
		BL	fillRegion
		MOVS	R3, #6
		SUBS	R2, R4,	#1
		MOVS	R1, #5
		MOVS	R0, #0
		STR	R5, [SP,#0x30+var_30]
		BL	fillRegion
		MOVS	R3, #0xA
		SUBS	R2, R4,	#1
		MOVS	R1, #9
		MOVS	R0, #0
		STR	R5, [SP,#0x30+var_30]
		BL	fillRegion
		MOVS	R2, #0
		ADDS	R1, R4,	#2
		MOV	R0, R7
		BL	displayGFX
		LDR	R0, [R7]
		ADDS	R4, #4
		ADDS	R4, R0,	R4
		MOVS	R3, #2
		MOVS	R2, #0x7F ; ''
		MOVS	R1, #1
		MOV	R0, R4
		STR	R5, [SP,#0x30+var_30]
		BL	fillRegion
		MOVS	R3, #6
		MOVS	R2, #0x7F ; ''
		MOVS	R1, #5
		MOV	R0, R4
		STR	R5, [SP,#0x30+var_30]
		BL	fillRegion
		MOVS	R3, #0xA
		MOVS	R2, #0x7F ; ''
		MOVS	R1, #9
		MOV	R0, R4
		STR	R5, [SP,#0x30+var_30]
		BL	fillRegion
		MOVS	R1, #6
		LDR	R0, [SP,#0x30+var_2C]
		BL	div_Other
		MOVS	R1, #6
		MULS	R0, R1
		ADDS	R4, R0,	#5
		STR	R0, [SP,#0x30+var_28]
		LDR	R0, [SP,#0x30+var_1C]
		CMP	R4, R0
		BCC	loc_6B48
		SUBS	R4, R0,	#1

loc_6B48				; CODE XREF: factoryModeMenu+9Cj
		LDR	R5, [SP,#0x30+var_28]
		MOVS	R7, #0x10
		CMP	R5, R4
		BHI	loc_6B66

loc_6B50				; CODE XREF: factoryModeMenu+BCj
		LSLS	R0, R5,	#3
		LDR	R0, [R6,R0]	; text
		MOVS	R3, #0		; a4
		MOV	R2, R7		; y
		MOVS	R1, #8		; x
		BL	displayTextAt
		ADDS	R7, #8
		ADDS	R5, #1
		CMP	R5, R4
		BLS	loc_6B50

loc_6B66				; CODE XREF: factoryModeMenu+A6j
		MOVS	R0, #1
		STR	R0, [SP,#0x30+var_30]
		MOVS	R3, #0x3F ; '?'
		MOVS	R2, #7
		MOVS	R1, #0x10
		MOVS	R0, #0
		BL	fillRegion
		LDR	R1, [SP,#0x30+var_28]
		LDR	R0, [SP,#0x30+var_2C]
		SUBS	R0, R0,	R1
		LSLS	R2, R0,	#3
		ADDS	R2, #0x10
		MOVS	R1, #0
		LDR	R0, =arrow_gfx
		BL	displayGFX
		BL	LCD_updateCALL
		BL	getKeyCode
		CMP	R0, #8
		BEQ	loc_6BBA
		CMP	R0, #0x18
		BEQ	loc_6BBA
		CMP	R0, #9
		BEQ	loc_6BE0
		CMP	R0, #0x17
		BEQ	loc_6BE0
		CMP	R0, #0xA
		BEQ	loc_6BF4
		CMP	R0, #0xB
		BNE	loc_6AB8
		LDR	R1, =byte_20000000
		MOVS	R0, #1
		STRB	R0, [R1,#(byte_20000002	- 0x20000000)]
		MOVS	R1, #0x64 ; 'd'
		LDR	R0, =0x20B
		BL	beep
		ADD	SP, SP,	#0x1C
		POP	{R4-R7,PC}
; ---------------------------------------------------------------------------

loc_6BBA				; CODE XREF: factoryModeMenu+EAj
					; factoryModeMenu+EEj
		LDR	R1, [SP,#0x30+var_24]
		LDR	R0, [SP,#0x30+var_2C]
		CMP	R0, R1
		BCC	loc_6BC4

loc_6BC2				; CODE XREF: factoryModeMenu+126j
					; factoryModeMenu+13Cj	...
		B	loc_6AB8
; ---------------------------------------------------------------------------

loc_6BC4				; CODE XREF: factoryModeMenu+118j
		ADDS	R0, #1
		STR	R0, [SP,#0x30+var_2C]
		BL	sub_9BC0
		CMP	R0, #2
		BCC	loc_6BC2

loc_6BD0				; CODE XREF: factoryModeMenu+14Aj
		MOVS	R0, #0x31 ; '1'
		MOVS	R1, #0xF
		LSLS	R0, R0,	#4
		BL	beep
		MOVS	R1, #0xF
		MOVS	R0, #0
		B	loc_6CF6
; ---------------------------------------------------------------------------

loc_6BE0				; CODE XREF: factoryModeMenu+F2j
					; factoryModeMenu+F6j
		LDR	R0, [SP,#0x30+var_2C]
		CMP	R0, #0
		BEQ	loc_6BC2
		SUBS	R0, #1
		STR	R0, [SP,#0x30+var_2C]
		BL	sub_9BC0
		CMP	R0, #2
		BCC	loc_6BC2
		B	loc_6BD0
; ---------------------------------------------------------------------------

loc_6BF4				; CODE XREF: factoryModeMenu+FAj
		BL	sub_9BC0
		CMP	R0, #2
		BCC	loc_6C0E
		MOVS	R0, #0x31 ; '1'
		MOVS	R1, #0xF
		LSLS	R0, R0,	#4
		BL	beep
		MOVS	R1, #0xF
		MOVS	R0, #0
		BL	beep

loc_6C0E				; CODE XREF: factoryModeMenu+152j
		LDR	R0, [SP,#0x30+var_2C]
		CMP	R0, #0
		BNE	loc_6CA4
		LDR	R0, =unk_D488
		CMP	R6, R0
		BNE	loc_6CA4
		LDR	R0, =rxsettings
		MOVS	R2, #0x92 ; ''
		LDRB	R1, [R0,#(currentModel - 0x200002A4)]
		MULS	R1, R2
		ADDS	R0, R1,	R0
		ADDS	R0, #0x60 ; '`'
		LDRB	R0, [R0,#0xA]
		CMP	R0, #0
		BEQ	loc_6CA4
		LDR	R0, =timer
		LDR	R1, [R0]
		LDR	R0, =byte_20000000
		LDR	R0, [R0,#(dword_2000001C - 0x20000000)]
		SUBS	R1, R1,	R0
		MOVS	R0, #0x3E8
		CMP	R1, R0
		BCS	loc_6CA4
		MOVS	R4, #0

loc_6C40				; CODE XREF: factoryModeMenu+1F4j
		BL	callSetupDMAandSend
		MOVS	R3, #0		; a4
		MOVS	R2, #8		; a3
		MOVS	R1, #0x40 ; '@'	; a2
		LDR	R0, =aForYouSafety ; "For you safety"
		BL	displayTextAt2
		MOVS	R3, #0		; a4
		MOVS	R2, #0x10	; a3
		MOVS	R1, #0x40 ; '@'	; a2
		LDR	R0, =aPleaseTurnOff ; text
		BL	displayTextAt2
		MOVS	R3, #0		; a4
		MOVS	R2, #0x18	; a3
		MOVS	R1, #0x40 ; '@'	; a2
		LDR	R0, =aTheReceiver ; text
		BL	displayTextAt2
		MOVS	R3, #0		; a4
		MOVS	R2, #0x20 ; ' '	; a3
		MOVS	R1, #0x40 ; '@'	; a2
		LDR	R0, =aFirst	; text
		BL	displayTextAt2
		MOVS	R3, #0		; a4
		MOVS	R2, #0x30 ; '0'	; a3
		MOVS	R1, #0x40 ; '@'	; a2
		LDR	R0, =aOk_0	; text
		BL	displayTextAt2
		MOVS	R3, #0x3A ; ':'
		MOVS	R2, #0x50 ; 'P'
		MOVS	R1, #0x2C ; ','
		MOVS	R0, #0x30 ; '0'
		STR	R4, [SP,#0x30+var_30]
		BL	drawLine
		BL	LCD_updateCALL
		BL	getKeyCode
		CMP	R0, #0xA
		BEQ	loc_6C9E
		CMP	R0, #0xB
		BNE	loc_6C40

loc_6C9E				; CODE XREF: factoryModeMenu+1F0j
		MOVS	R1, #0x64 ; 'd'
		LDR	R0, =0x20B
		B	loc_6CF6
; ---------------------------------------------------------------------------

loc_6CA4				; CODE XREF: factoryModeMenu+16Aj
					; factoryModeMenu+170j	...
		LDR	R4, =rxsettings
		MOVS	R1, #0x92 ; ''
		LDRB	R0, [R4,#(currentModel - 0x200002A4)]
		MOVS	R2, #0x92 ; ''
		MULS	R0, R1
		ADDS	R1, R0,	R4
		ADDS	R1, #0xA
		LDR	R0, =tmpModelData
		BL	memcpy
		LDR	R0, [SP,#0x30+var_2C]
		LSLS	R0, R0,	#3
		ADDS	R5, R0,	R6
		LDR	R0, [R5,#4]
		BLX	R0
		CMP	R0, #0
		BEQ	loc_6CFC
		BL	saveModelSettings
		LDR	R0, =off_D248
		CMP	R6, R0
		BNE	loc_6CF2
		MOVS	R1, #0x28 ; '('	; length
		LDR	R0, =stickAdjustData ; startPTR
		BL	crcCheck
		LDR	R1, =stickAdjustData ; 40 items
		MOVS	R4, #0
		STRH	R0, [R1,#(CRC_STICKDATA	- 0x20000E18)]

loc_6CDE				; CODE XREF: factoryModeMenu+248j
		LSLS	R1, R4,	#0xC
		MOVS	R2, #0x2A ; '*'
		LDR	R0, =stickAdjustData ; 40 items
		BL	saveEepromData
		BL	someSPImethod
		ADDS	R4, #1
		CMP	R4, #4
		BCC	loc_6CDE

loc_6CF2				; CODE XREF: factoryModeMenu+226j
		MOVS	R1, #0x64 ; 'd'
		LDR	R0, =0x417

loc_6CF6				; CODE XREF: factoryModeMenu+136j
					; factoryModeMenu+1FAj	...
		BL	beep

loc_6CFA				; CODE XREF: factoryModeMenu+25Aj
		B	loc_6AB8
; ---------------------------------------------------------------------------

loc_6CFC				; CODE XREF: factoryModeMenu+21Cj
		LDR	R0, =(RxSetupPage+1)
		LDR	R1, [R5,#4]
		CMP	R1, R0
		BEQ	loc_6CFA
		LDRB	R0, [R4,#(currentModel - 0x200002A4)]
		MOVS	R1, #0x92 ; ''
		MULS	R0, R1
		ADDS	R0, R0,	R4
		MOV	R2, R1
		ADDS	R0, #0xA
		LDR	R1, =tmpModelData
		BL	memcpy
		MOVS	R1, #0x64 ; 'd'
		LDR	R0, =0x20B
		B	loc_6CF6
; End of function factoryModeMenu

; ---------------------------------------------------------------------------
off_6D1C	DCD byte_20000000	; DATA XREF: factoryModeMenu:loc_6AB8r
					; factoryModeMenu+100r	...
off_6D20	DCD arrow_gfx		; DATA XREF: factoryModeMenu+DAr
dword_6D24	DCD 0x20B		; DATA XREF: factoryModeMenu+108r
					; factoryModeMenu+1F8r	...
off_6D28	DCD unk_D488		; DATA XREF: factoryModeMenu+16Cr
off_6D2C	DCD rxsettings		; DATA XREF: factoryModeMenu+172r
					; factoryModeMenu:loc_6CA4r
off_6D30	DCD timer		; DATA XREF: factoryModeMenu+184r
; _BYTE	*off_6D34
off_6D34	DCD aForYouSafety	; DATA XREF: factoryModeMenu+1A2r
					; "For you safety"
; _BYTE	*off_6D38
off_6D38	DCD aPleaseTurnOff	; DATA XREF: factoryModeMenu+1AEr
					; "Please turn off"
; _BYTE	*off_6D3C
off_6D3C	DCD aTheReceiver	; DATA XREF: factoryModeMenu+1BAr
					; "the receiver"
; _BYTE	*off_6D40
off_6D40	DCD aFirst		; DATA XREF: factoryModeMenu+1C6r
					; "first"
; _BYTE	*off_6D44
off_6D44	DCD aOk_0		; DATA XREF: factoryModeMenu+1D2r
					; "OK"
off_6D48	DCD tmpModelData	; DATA XREF: factoryModeMenu+20Ar
					; factoryModeMenu+268r
off_6D4C	DCD off_D248		; DATA XREF: factoryModeMenu+222r
; _BYTE	*startPTR
startPTR	DCD stickAdjustData	; DATA XREF: factoryModeMenu+22Ar
					; factoryModeMenu+230r	...
					; 40 items
dword_6D54	DCD 0x417		; DATA XREF: factoryModeMenu+24Cr
off_6D58	DCD RxSetupPage+1	; DATA XREF: factoryModeMenu:loc_6CFCr

; =============== S U B	R O U T	I N E =======================================


displayPageHeader			; CODE XREF: SwashAFRPage+12p
					; ChooseSensors+5Ap ...

var_18		= -0x18

		PUSH	{R3-R7,LR}
		MOV	R6, R0
		BL	strLength
		CMP	R0, #0x10
		BCS	loc_6DC4
		LSLS	R0, R0,	#3
		MOVS	R1, #0x7C ; '|'
		SUBS	R0, R1,	R0
		LSRS	R4, R0,	#1

loc_6D70
		MOVS	R5, #0
		MOVS	R3, #2
		SUBS	R2, R4,	#1
		MOVS	R1, #1
		MOV	R0, R5
		STR	R5, [SP,#0x18+var_18]
		BL	fillRegion
		MOVS	R3, #6
		SUBS	R2, R4,	#1
		MOVS	R1, #5
		MOVS	R0, #0
		STR	R5, [SP,#0x18+var_18]
		BL	fillRegion
		MOVS	R3, #0
		MOV	R2, R3
		ADDS	R1, R4,	#2
		MOV	R0, R6
		BL	displayTextAt
		MOV	R0, R6
		BL	strLength
		LSLS	R0, R0,	#3
		ADDS	R4, R0,	R4
		ADDS	R4, #4
		MOVS	R3, #2
		MOVS	R2, #0x7F ; ''
		MOVS	R1, #1
		MOV	R0, R4
		STR	R5, [SP,#0x18+var_18]
		BL	fillRegion
		CODE32

loc_6DB4
		MOVS	R3, #6
		CODE16
		MOVS	R2, #0x7F ; ''
		MOVS	R1, #5
		MOV	R0, R4
		STR	R5, [SP,#0x18+var_18]
		BL	fillRegion
		POP	{R3-R7,PC}
; ---------------------------------------------------------------------------

loc_6DC4				; CODE XREF: displayPageHeader+Aj
		MOVS	R3, #0		; a4
		MOV	R2, R3		; y
		MOV	R1, R3		; x
		MOV	R0, R6		; text
		BL	displayTextAt
		POP	{R3-R7,PC}
; End of function displayPageHeader

; ---------------------------------------------------------------------------
		ALIGN 4

; =============== S U B	R O U T	I N E =======================================


; signed int __fastcall	showNavigationPage(_BYTE *namePtr, unsigned int	numberOfItems, char **pageName)
showNavigationPage			; CODE XREF: RxSetupPage+8p
					; SpeedDistancePage+8p

var_30		= -0x30
var_2C		= -0x2C
var_28		= -0x28
var_24		= -0x24
var_20		= -0x20
var_1C		= -0x1C

		PUSH	{R0-R2,R4-R7,LR}
		SUB	SP, SP,	#0x10
		MOVS	R0, #0
		STR	R0, [SP,#0x30+var_2C]
		LDR	R0, [SP,#0x30+var_1C]
		MOV	R6, R2
		SUBS	R0, #1
		STR	R0, [SP,#0x30+var_24]

loc_6DE4				; CODE XREF: showNavigationPage+D2j
					; showNavigationPage:loc_6EBEj	...
		LDR	R1, =byte_20000000
		MOVS	R0, #0
		STRB	R0, [R1,#(byte_20000002	- 0x20000000)]
		BL	callSetupDMAandSend
		LDR	R0, [SP,#0x30+var_20]
		BL	displayPageHeader
		MOVS	R1, #6
		LDR	R0, [SP,#0x30+var_2C]
		BL	div_Other
		MOVS	R1, #6
		MULS	R0, R1
		STR	R0, [SP,#0x30+var_28]
		LDR	R0, =rxsettings
		MOVS	R2, #0x92 ; ''
		LDRB	R1, [R0,#(currentModel - 0x200002A4)]
		MULS	R1, R2
		ADDS	R0, R1,	R0
		ADDS	R0, #0x60 ; '`'
		LDRB	R0, [R0,#0xA]
		CMP	R0, #0
		BEQ	loc_6E52
		LDR	R4, [SP,#0x30+var_28]
		ADDS	R4, #5

loc_6E18				; CODE XREF: showNavigationPage+80j
		LDR	R0, [SP,#0x30+var_1C]
		CMP	R4, R0
		BCC	loc_6E20
		SUBS	R4, R0,	#1

loc_6E20				; CODE XREF: showNavigationPage+48j
		LDR	R5, [SP,#0x30+var_28]
		MOVS	R7, #0xD
		CMP	R5, R4
		BHI	loc_6E3E

loc_6E28				; CODE XREF: showNavigationPage+68j
		LSLS	R0, R5,	#3
		LDR	R0, [R6,R0]	; text
		MOVS	R3, #0		; a4
		MOV	R2, R7		; y
		MOVS	R1, #8		; x
		BL	displayTextAt
		ADDS	R7, #8
		ADDS	R5, #1
		CMP	R5, R4
		BLS	loc_6E28

loc_6E3E				; CODE XREF: showNavigationPage+52j
		LDR	R4, =rxsettings
		MOVS	R1, #0x92 ; ''
		LDRB	R0, [R4,#(currentModel - 0x200002A4)]
		MULS	R0, R1
		ADDS	R0, R0,	R4
		ADDS	R0, #0x60 ; '`'
		LDRB	R0, [R0,#0xA]
		CMP	R0, #0
		BEQ	loc_6E56
		B	loc_6E66
; ---------------------------------------------------------------------------

loc_6E52				; CODE XREF: showNavigationPage+3Ej
		MOVS	R4, #0
		B	loc_6E18
; ---------------------------------------------------------------------------

loc_6E56				; CODE XREF: showNavigationPage+7Aj
		MOVS	R0, #1
		STR	R0, [SP,#0x30+var_30]
		MOVS	R3, #0x15
		MOVS	R2, #0x48 ; 'H'
		MOVS	R1, #0xD
		MOVS	R0, #0x38 ; '8'
		BL	fillRegion

loc_6E66				; CODE XREF: showNavigationPage+7Cj
		MOVS	R0, #1
		STR	R0, [SP,#0x30+var_30]
		MOVS	R3, #0x3F ; '?'
		MOVS	R2, #7
		MOVS	R1, #0xD
		MOVS	R0, #0
		BL	fillRegion
		LDR	R1, [SP,#0x30+var_28]
		LDR	R0, [SP,#0x30+var_2C]
		SUBS	R0, R0,	R1
		LSLS	R2, R0,	#3
		ADDS	R2, #0xD
		MOVS	R1, #0
		LDR	R0, =arrow_gfx
		BL	displayGFX
		BL	LCD_updateCALL
		BL	getKeyCode
		CMP	R0, #9
		BEQ	loc_6EBA
		CMP	R0, #0x17
		BEQ	loc_6EBA
		CMP	R0, #8
		BEQ	loc_6EDC
		CMP	R0, #0x18
		BEQ	loc_6EDC
		CMP	R0, #0xA
		BEQ	loc_6F04
		CMP	R0, #0xB
		BNE	loc_6DE4
		MOVS	R1, #0x64 ; 'd'
		LDR	R0, =0x20B
		BL	beep
		LDR	R1, =byte_20000000
		MOVS	R0, #1
		STRB	R0, [R1,#(byte_20000002	- 0x20000000)]
		ADD	SP, SP,	#0x1C
		POP	{R4-R7,PC}
; ---------------------------------------------------------------------------

loc_6EBA				; CODE XREF: showNavigationPage+BEj
					; showNavigationPage+C2j
		LDR	R0, [SP,#0x30+var_2C]
		CMP	R0, #0

loc_6EBE				; CODE XREF: showNavigationPage+116j
		BEQ	loc_6DE4
		SUBS	R0, #1
		STR	R0, [SP,#0x30+var_2C]
		BL	sub_9BC0
		CMP	R0, #2
		BCC	loc_6DE4

loc_6ECC				; CODE XREF: showNavigationPage+12Ej
		MOVS	R0, #0x31 ; '1'
		MOVS	R1, #0xF
		LSLS	R0, R0,	#4
		BL	beep
		MOVS	R1, #0xF
		MOVS	R0, #0
		B	loc_6FAC
; ---------------------------------------------------------------------------

loc_6EDC				; CODE XREF: showNavigationPage+C6j
					; showNavigationPage+CAj
		LDRB	R0, [R4,#9]
		MOVS	R1, #0x92 ; ''
		MULS	R0, R1
		ADDS	R0, R0,	R4
		ADDS	R0, #0x60 ; '`'
		LDRB	R0, [R0,#0xA]
		CMP	R0, #0
		BEQ	loc_6EBE
		LDR	R1, [SP,#0x30+var_2C]
		LDR	R0, [SP,#0x30+var_24]
		CMP	R1, R0
		BCC	loc_6EF6

loc_6EF4				; CODE XREF: showNavigationPage+12Cj
					; showNavigationPage+1B4j ...
		B	loc_6DE4
; ---------------------------------------------------------------------------

loc_6EF6				; CODE XREF: showNavigationPage+11Ej
		ADDS	R0, R1,	#1
		STR	R0, [SP,#0x30+var_2C]
		BL	sub_9BC0
		CMP	R0, #2
		BCC	loc_6EF4
		B	loc_6ECC
; ---------------------------------------------------------------------------

loc_6F04				; CODE XREF: showNavigationPage+CEj
		LDR	R0, [SP,#0x30+var_2C]
		LDR	R7, =(ResetOdo1Menu+1)
		LSLS	R0, R0,	#3
		ADDS	R5, R0,	R6
		LDR	R0, [R5,#4]
		CMP	R0, R7
		BEQ	loc_6F32
		LDR	R1, =(ResetOdo2Menu+1)
		CMP	R0, R1
		BEQ	loc_6F32
		BL	sub_9BC0
		CMP	R0, #2
		BCC	loc_6F32
		MOVS	R0, #0x31 ; '1'
		MOVS	R1, #0xF
		LSLS	R0, R0,	#4
		BL	beep
		MOVS	R1, #0xF
		MOVS	R0, #0
		BL	beep

loc_6F32				; CODE XREF: showNavigationPage+13Cj
					; showNavigationPage+142j ...
		LDRB	R0, [R4,#(currentModel - 0x200002A4)]
		MOVS	R1, #0x92 ; ''
		MULS	R0, R1
		ADDS	R1, R0,	R4
		ADDS	R1, #0xA
		MOVS	R2, #0x92 ; ''
		LDR	R0, =tmpModelData
		BL	memcpy
		LDR	R0, [R5,#4]
		BLX	R0
		CMP	R0, #0
		BEQ	loc_6F82
		BL	saveModelSettings
		LDR	R0, =off_D248
		CMP	R6, R0
		BNE	loc_6F78
		MOVS	R1, #0x28 ; '('	; length
		LDR	R0, =stickAdjustData ; startPTR
		BL	crcCheck
		LDR	R1, =stickAdjustData ; 40 items
		MOVS	R4, #0
		STRH	R0, [R1,#(CRC_STICKDATA	- 0x20000E18)]

loc_6F64				; CODE XREF: showNavigationPage+1A2j
		LSLS	R1, R4,	#0xC
		MOVS	R2, #0x2A ; '*'
		LDR	R0, =stickAdjustData ; 40 items
		BL	saveEepromData
		BL	someSPImethod
		ADDS	R4, #1
		CMP	R4, #4
		BCC	loc_6F64

loc_6F78				; CODE XREF: showNavigationPage+180j
		MOVS	R1, #0x64 ; 'd'
		LDR	R0, =0x417
		BL	beep
		B	loc_6DE4
; ---------------------------------------------------------------------------

loc_6F82				; CODE XREF: showNavigationPage+176j
		LDR	R0, =(SpeedDistancePage+1)
		LDR	R1, [R5,#4]
		CMP	R1, R0
		BEQ	loc_6EF4
		LDRB	R0, [R4,#(currentModel - 0x200002A4)]
		MOVS	R1, #0x92 ; ''
		MULS	R0, R1
		ADDS	R0, R0,	R4
		MOV	R2, R1
		ADDS	R0, #0xA
		LDR	R1, =tmpModelData
		BL	memcpy
		LDR	R0, [R5,#4]
		CMP	R0, R7
		BEQ	loc_6EF4
		LDR	R1, =(ResetOdo2Menu+1)
		CMP	R0, R1
		BEQ	loc_6EF4
		MOVS	R1, #0x64 ; 'd'
		LDR	R0, =0x20B

loc_6FAC				; CODE XREF: showNavigationPage+106j
		BL	beep
		B	loc_6DE4
; End of function showNavigationPage

; ---------------------------------------------------------------------------
		ALIGN 4
off_6FB4	DCD byte_20000000	; DATA XREF: showNavigationPage:loc_6DE4r
					; showNavigationPage+DCr
off_6FB8	DCD rxsettings		; DATA XREF: showNavigationPage+2Er
					; showNavigationPage:loc_6E3Er
off_6FBC	DCD arrow_gfx		; DATA XREF: showNavigationPage+AEr
dword_6FC0	DCD 0x20B		; DATA XREF: showNavigationPage+D6r
					; showNavigationPage+1D6r
off_6FC4	DCD ResetOdo1Menu+1	; DATA XREF: showNavigationPage+132r
off_6FC8	DCD ResetOdo2Menu+1	; DATA XREF: showNavigationPage+13Er
					; showNavigationPage+1CEr
off_6FCC	DCD tmpModelData	; DATA XREF: showNavigationPage+16Ar
					; showNavigationPage+1C2r
off_6FD0	DCD off_D248		; DATA XREF: showNavigationPage+17Cr
; _BYTE	*off_6FD4
off_6FD4	DCD stickAdjustData	; DATA XREF: showNavigationPage+184r
					; showNavigationPage+18Ar ...
					; 40 items
dword_6FD8	DCD 0x417		; DATA XREF: showNavigationPage+1A6r
off_6FDC	DCD SpeedDistancePage+1	; DATA XREF: showNavigationPage:loc_6F82r

; =============== S U B	R O U T	I N E =======================================


sub_6FE0				; DATA XREF: ROM:0000D344o
					; ROM:0000D3A4o ...

var_20		= -0x20
var_1C		= -0x1C

		PUSH	{R4-R7,LR}
		MOVS	R5, #0
		LDR	R7, =byte_20000000
		SUB	SP, SP,	#0xC
		MOV	R6, R5

loc_6FEA				; CODE XREF: sub_6FE0:def_7182j
					; sub_6FE0:def_7296j ...
		ADR	R1, dword_73C8
		LDR	R0, [R1]
		LDR	R1, [R1,#(dword_73CC - 0x73C8)]
		STR	R1, [SP,#0x20+var_1C]
		STR	R0, [SP,#0x20+var_20]
		BL	callSetupDMAandSend
		LDR	R0, =0xCA93
		BL	displayPageHeader
		MOV	R0, R5
		LDR	R1, =aMix1	; "Mix #1"
		ADDS	R0, #0x31 ; '1'
		STRB	R0, [R1,#(aMix1+5 - 0x2000007D)] ; "1"
		MOVS	R3, #0		; a4
		MOVS	R2, #8		; y
		MOVS	R1, #0xC	; x
		LDR	R0, =aMix1	; "Mix #1"
		BL	displayTextAt
		MOVS	R3, #0		; a4
		MOVS	R2, #0x10	; y
		MOVS	R1, #0xC	; x
		LDR	R0, =aMixIs	; "Mix is"
		BL	displayTextAt
		LDR	R0, [R7,#(usedModelPtr - 0x20000000)]
		LSLS	R4, R5,	#2
		ADDS	R0, R4,	R0
		ADDS	R0, #0x20 ; ' '
		LDRB	R0, [R0,#0x1E]
		LSRS	R0, R0,	#7
		BEQ	loc_7030
		LDR	R0, =0xCA77
		B	loc_7032
; ---------------------------------------------------------------------------

loc_7030				; CODE XREF: sub_6FE0+4Aj
		LDR	R0, =aOff_0	; text

loc_7032				; CODE XREF: sub_6FE0+4Ej
		MOVS	R3, #0		; a4
		MOVS	R2, #0x10	; y
		MOVS	R1, #0x5C ; '\'	; x
		BL	displayTextAt
		MOVS	R3, #0		; a4
		MOVS	R2, #0x18	; y
		MOVS	R1, #0xC	; x
		LDR	R0, =aMaster	; text
		BL	displayTextAt
		LDR	R0, [R7,#(usedModelPtr - 0x20000000)]
		ADDS	R0, R4,	R0
		ADDS	R0, #0x20 ; ' '
		LDRB	R0, [R0,#0x1E]
		LSLS	R0, R0,	#0x1C
		LSRS	R0, R0,	#0x1C
		CMP	R0, #6
		BCS	loc_7068
		ADDS	R0, #0x31 ; '1'
		MOV	R1, SP
		STRB	R0, [R1,#0x20+var_20+2]
		MOVS	R3, #0
		MOVS	R2, #0x18
		MOVS	R1, #0x5C ; '\'
		MOV	R0, SP
		B	loc_7076
; ---------------------------------------------------------------------------

loc_7068				; CODE XREF: sub_6FE0+76j
		LDR	R1, =var_X
		ADDS	R0, #0x3B ; ';'
		STRB	R0, [R1,#(var_X_val - 0x2000000D)]
		MOVS	R3, #0		; a4
		MOVS	R2, #0x18	; y
		MOVS	R1, #0x5C ; '\'	; x
		LDR	R0, =var_X	; text

loc_7076				; CODE XREF: sub_6FE0+86j
		BL	displayTextAt
		MOVS	R3, #0		; a4
		MOVS	R2, #0x20 ; ' '	; y
		MOVS	R1, #0xC	; x
		LDR	R0, =aSlave	; text
		BL	displayTextAt
		LDR	R0, [R7,#(usedModelPtr - 0x20000000)]
		MOV	R1, SP
		ADDS	R0, R4,	R0
		ADDS	R0, #0x20 ; ' '
		LDRB	R0, [R0,#0x1E]
		MOVS	R3, #0		; a4
		LSLS	R0, R0,	#0x19
		LSRS	R0, R0,	#0x1D
		ADDS	R0, #0x31 ; '1'
		STRB	R0, [R1,#0x20+var_20+2]
		MOVS	R2, #0x20 ; ' '	; y
		MOVS	R1, #0x5C ; '\'	; x
		MOV	R0, SP		; text
		BL	displayTextAt
		MOVS	R3, #0		; a4
		MOVS	R2, #0x28 ; '('	; y
		MOVS	R1, #0xC	; x
		LDR	R0, =aPos_Mix	; text
		BL	displayTextAt
		LDR	R0, [R7,#(usedModelPtr - 0x20000000)]
		MOVS	R2, #4		; length
		ADDS	R1, R4,	R0
		MOVS	R0, #0x3F ; '?'
		LDRSB	R0, [R1,R0]	; sourceVal
		LDR	R1, =a100_1	; "-100%"
		BL	intToString
		MOVS	R3, #0		; a4
		MOVS	R2, #0x28 ; '('	; y
		MOVS	R1, #0x54 ; 'T'	; x
		LDR	R0, =a100_1	; text
		BL	displayTextAt
		MOVS	R3, #0		; a4
		MOVS	R2, #0x30 ; '0'	; y
		MOVS	R1, #0xC	; x
		LDR	R0, =aNeg_Mix	; "Neg. mix"
		BL	displayTextAt
		LDR	R0, [R7,#(usedModelPtr - 0x20000000)]
		MOVS	R2, #4		; length
		ADDS	R1, R4,	R0
		MOVS	R0, #0x40 ; '@'
		LDRSB	R0, [R1,R0]	; sourceVal
		LDR	R1, =a100_1	; "-100%"
		BL	intToString
		MOVS	R3, #0		; a4
		MOVS	R2, #0x30 ; '0'	; y
		MOVS	R1, #0x54 ; 'T'	; x
		LDR	R0, =a100_1	; text
		BL	displayTextAt
		MOVS	R3, #0		; a4
		MOVS	R2, #0x38 ; '8'	; y
		MOVS	R1, #0xC	; x
		LDR	R0, =aOffset	; text
		BL	displayTextAt
		LDR	R0, [R7,#(usedModelPtr - 0x20000000)]
		MOVS	R2, #3		; length
		ADDS	R1, R4,	R0
		MOVS	R0, #0x41 ; 'A'
		LDRSB	R0, [R1,R0]	; sourceVal
		LDR	R1, =a100_0	; "100%"
		BL	intToString
		LDR	R0, [R7,#(usedModelPtr - 0x20000000)]
		ADDS	R1, R4,	R0
		MOVS	R0, #0x41 ; 'A'
		LDRSB	R0, [R1,R0]
		CMP	R0, #0xA
		BLT	loc_7124
		LDR	R1, =a100_0	; "100%"
		MOVS	R0, #0x2B ; '+'
		STRB	R0, [R1]	; "100%"
		B	loc_712E
; ---------------------------------------------------------------------------

loc_7124				; CODE XREF: sub_6FE0+13Aj
		CMP	R0, #1
		BLT	loc_712E
		LDR	R0, =a100_0	; "100%"
		MOVS	R1, #0x2B ; '+'
		STRB	R1, [R0,#(a100_0+1 - 0x20000060)] ; "00%"

loc_712E				; CODE XREF: sub_6FE0+142j
					; sub_6FE0+146j
		MOVS	R3, #0		; a4
		MOVS	R2, #0x38 ; '8'	; y
		MOVS	R1, #0x5C ; '\'	; x
		LDR	R0, =a100_0	; "100%"
		BL	displayTextAt
		LSLS	R2, R6,	#3
		ADDS	R2, #8
		MOVS	R1, #4
		LDR	R0, =arrow_gfx
		BL	displayGFX
		BL	LCD_updateCALL
		BL	getKeyCode
		CMP	R0, #8
		BEQ	loc_7176
		CMP	R0, #0x18
		BEQ	loc_7176
		CMP	R0, #9
		BEQ	loc_7250
		CMP	R0, #0x17
		BEQ	loc_7250
		CMP	R0, #0x16
		BEQ	loc_7252
		CMP	R0, #0xA
		BEQ	loc_7254
		CMP	R0, #0x19
		BEQ	loc_7256
		CMP	R0, #0xB
		BEQ	loc_7170

def_7182				; CODE XREF: sub_6FE0+198j
					; sub_6FE0+1AEj ...
		B	loc_6FEA	; jumptable 00007182 default case
; ---------------------------------------------------------------------------

loc_7170				; CODE XREF: sub_6FE0+18Cj
		MOVS	R0, #0
		ADD	SP, SP,	#0xC
		POP	{R4-R7,PC}
; ---------------------------------------------------------------------------

loc_7176				; CODE XREF: sub_6FE0+170j
					; sub_6FE0+174j
		CMP	R6, #7		; switch 7 cases
		BCS	def_7182	; jumptable 00007182 default case
		MOVS	R3, R6
		ADD	R3, PC
		LDRB	R3, [R3,#4]
		ADDS	R3, R3,	R3
		ADD	PC, R3		; switch jump
; ---------------------------------------------------------------------------
jpt_7182	DCB 3			; jump table for switch	statement
		DCB 0xC
		DCB 0x1D
		DCB 0x30
		DCB 0x45
		DCB 0x55
		DCB 0x69
		ALIGN 2

loc_718C				; CODE XREF: sub_6FE0+1A2j
		CMP	R5, #0		; jumptable 00007182 case 0
		BEQ	def_7182	; jumptable 00007182 default case
		SUBS	R5, #1
		UXTB	R5, R5
		BL	sub_9BC0
		CMP	R0, #2

loc_719A				; CODE XREF: sub_6FE0+294j
		BCC	def_7182	; jumptable 00007182 default case
		B	loc_7276
; ---------------------------------------------------------------------------

loc_719E				; CODE XREF: sub_6FE0+1A2j
		LDR	R0, [R7,#0x2C]	; jumptable 00007182 case 1
		MOVS	R3, #1
		ADDS	R1, R4,	R0
		ADDS	R1, #0x20 ; ' '
		LDRB	R0, [R1,#0x1E]
		LSLS	R2, R0,	#0x19
		LSRS	R0, R0,	#7
		EORS	R0, R3
		LSRS	R2, R2,	#0x19
		LSLS	R0, R0,	#7
		ORRS	R2, R0
		STRB	R2, [R1,#0x1E]
		BL	sub_9BC0
		CMP	R0, #2
		BCC	def_7182	; jumptable 00007182 default case
		B	loc_7276
; ---------------------------------------------------------------------------

loc_71C0				; CODE XREF: sub_6FE0+1A2j
		LDR	R0, [R7,#0x2C]	; jumptable 00007182 case 2
		ADDS	R2, R4,	R0
		ADDS	R2, #0x20 ; ' '
		LDRB	R1, [R2,#0x1E]
		LSLS	R0, R1,	#0x1C
		LSRS	R0, R0,	#0x1C
		BEQ	def_7182	; jumptable 00007182 default case
		SUBS	R0, #1
		LSRS	R1, R1,	#4
		LSLS	R0, R0,	#0x1C
		LSLS	R1, R1,	#4
		LSRS	R0, R0,	#0x1C
		ORRS	R1, R0
		STRB	R1, [R2,#0x1E]
		BL	sub_9BC0
		CMP	R0, #2
		BCC	def_7182	; jumptable 00007182 default case
		B	loc_7276
; ---------------------------------------------------------------------------

loc_71E6				; CODE XREF: sub_6FE0+1A2j
		LDR	R0, [R7,#0x2C]	; jumptable 00007182 case 3
		ADDS	R1, R4,	R0
		ADDS	R1, #0x20 ; ' '
		LDRB	R0, [R1,#0x1E]
		LSLS	R2, R0,	#0x19
		LSRS	R3, R2,	#0x1D
		BEQ	def_7182	; jumptable 00007182 default case
		LSRS	R2, R2,	#0x1D
		LSLS	R2, R2,	#4
		SUBS	R2, #0x10
		LSLS	R2, R2,	#0x19
		MOVS	R3, #0x8F ; ''
		LSRS	R2, R2,	#0x19
		ANDS	R0, R3
		ORRS	R2, R0
		STRB	R2, [R1,#0x1E]
		BL	sub_9BC0
		CMP	R0, #2
		BCC	def_7182	; jumptable 00007182 default case
		B	loc_7276
; ---------------------------------------------------------------------------

loc_7210				; CODE XREF: sub_6FE0+1A2j
		LDR	R0, [R7,#0x2C]	; jumptable 00007182 case 4
		MOVS	R1, #0x1F
		ADDS	R0, R4,	R0
		ADDS	R0, #0x20 ; ' '
		LDRSB	R1, [R0,R1]
		MOVS	R2, #0x63 ; 'c'
		MVNS	R2, R2
		CMP	R1, R2

loc_7220				; CODE XREF: sub_6FE0+288j
		BLE	def_7182	; jumptable 00007182 default case
		SUBS	R1, #1
		STRB	R1, [R0,#0x1F]
		BL	sub_9BC0
		CMP	R0, #2
		BCC	def_7182	; jumptable 00007182 default case
		B	loc_7276
; ---------------------------------------------------------------------------

loc_7230				; CODE XREF: sub_6FE0+1A2j
		LDR	R0, [R7,#0x2C]	; jumptable 00007182 case 5
		MOVS	R1, #0
		ADDS	R0, R4,	R0
		ADDS	R0, #0x40 ; '@'
		LDRSB	R1, [R0,R1]
		MOVS	R2, #0x63 ; 'c'
		MVNS	R2, R2
		CMP	R1, R2
		BLE	def_7182	; jumptable 00007182 default case
		SUBS	R1, #1
		STRB	R1, [R0]
		BL	sub_9BC0
		CMP	R0, #2
		BCC	def_7182	; jumptable 00007182 default case
		B	loc_7276
; ---------------------------------------------------------------------------

loc_7250				; CODE XREF: sub_6FE0+178j
					; sub_6FE0+17Cj
		B	loc_728A
; ---------------------------------------------------------------------------

loc_7252				; CODE XREF: sub_6FE0+180j
		B	loc_737A
; ---------------------------------------------------------------------------

loc_7254				; CODE XREF: sub_6FE0+184j
		B	loc_7408
; ---------------------------------------------------------------------------

loc_7256				; CODE XREF: sub_6FE0+188j
		B	loc_741E
; ---------------------------------------------------------------------------

loc_7258				; CODE XREF: sub_6FE0+1A2j
		LDR	R0, [R7,#0x2C]	; jumptable 00007182 case 6
		MOVS	R2, #0x31 ; '1'
		ADDS	R1, R4,	R0
		ADDS	R1, #0x40 ; '@'
		MOVS	R0, #1
		LDRSB	R0, [R1,R0]
		MVNS	R2, R2
		CMP	R0, R2
		BLE	loc_7220
		SUBS	R0, #1
		STRB	R0, [R1,#1]
		BL	sub_9BC0
		CMP	R0, #2
		BCC	loc_719A

loc_7276				; CODE XREF: sub_6FE0+1BCj
					; sub_6FE0+1DEj ...
		MOVS	R0, #0x31 ; '1'
		MOVS	R1, #0xF
		LSLS	R0, R0,	#4
		BL	beep
		MOVS	R1, #0xF
		MOVS	R0, #0
		BL	beep

def_7296				; CODE XREF: sub_6FE0+2ACj
					; sub_6FE0+2C2j ...
		B	loc_6FEA	; jumptable 00007296 default case
; ---------------------------------------------------------------------------

loc_728A				; CODE XREF: sub_6FE0:loc_7250j
		CMP	R6, #7		; switch 7 cases
		BCS	def_7296	; jumptable 00007296 default case
		MOVS	R3, R6
		ADD	R3, PC
		LDRB	R3, [R3,#4]
		ADDS	R3, R3,	R3
		ADD	PC, R3		; switch jump
; ---------------------------------------------------------------------------
jpt_7296	DCB 3			; jump table for switch	statement
		DCB 0xC
		DCB 0x1D
		DCB 0x31
		DCB 0x46
		DCB 0x54
		DCB 0x62
		ALIGN 2

loc_72A0				; CODE XREF: sub_6FE0+2B6j
		CMP	R5, #2		; jumptable 00007296 case 0
		BCS	def_7296	; jumptable 00007296 default case
		ADDS	R5, #1
		UXTB	R5, R5
		BL	sub_9BC0
		CMP	R0, #2
		BCC	def_7296	; jumptable 00007296 default case
		B	loc_7276
; ---------------------------------------------------------------------------

loc_72B2				; CODE XREF: sub_6FE0+2B6j
		LDR	R0, [R7,#0x2C]	; jumptable 00007296 case 1
		MOVS	R3, #1
		ADDS	R1, R4,	R0
		ADDS	R1, #0x20 ; ' '
		LDRB	R0, [R1,#0x1E]
		LSLS	R2, R0,	#0x19
		LSRS	R0, R0,	#7
		EORS	R0, R3
		LSRS	R2, R2,	#0x19
		LSLS	R0, R0,	#7
		ORRS	R2, R0
		STRB	R2, [R1,#0x1E]
		BL	sub_9BC0
		CMP	R0, #2
		BCC	def_7296	; jumptable 00007296 default case
		B	loc_7276
; ---------------------------------------------------------------------------

loc_72D4				; CODE XREF: sub_6FE0+2B6j
		LDR	R0, [R7,#0x2C]	; jumptable 00007296 case 2
		ADDS	R0, R4,	R0
		ADDS	R0, #0x20 ; ' '
		LDRB	R2, [R0,#0x1E]
		LSLS	R1, R2,	#0x1C
		LSRS	R1, R1,	#0x1C
		CMP	R1, #7
		BCS	def_7296	; jumptable 00007296 default case
		ADDS	R1, #1
		LSRS	R2, R2,	#4
		LSLS	R1, R1,	#0x1C
		LSLS	R2, R2,	#4
		LSRS	R1, R1,	#0x1C
		ORRS	R2, R1
		STRB	R2, [R0,#0x1E]
		BL	sub_9BC0
		CMP	R0, #2
		BCC	def_7296	; jumptable 00007296 default case
		B	loc_7276
; ---------------------------------------------------------------------------

loc_72FC				; CODE XREF: sub_6FE0+2B6j
		LDR	R0, [R7,#0x2C]	; jumptable 00007296 case 3
		ADDS	R1, R4,	R0
		ADDS	R1, #0x20 ; ' '
		LDRB	R0, [R1,#0x1E]
		LSLS	R2, R0,	#0x19
		LSRS	R2, R2,	#0x1D
		CMP	R2, #5
		BCS	def_7296	; jumptable 00007296 default case
		MOVS	R2, #7
		RORS	R0, R2
		MOVS	R2, #0x20000000
		ADDS	R0, R0,	R2
		MOVS	R2, #0x19
		RORS	R0, R2
		STRB	R0, [R1,#0x1E]
		BL	sub_9BC0
		CMP	R0, #2
		BCC	def_7296	; jumptable 00007296 default case
		B	loc_7276
; ---------------------------------------------------------------------------

loc_7326				; CODE XREF: sub_6FE0+2B6j
		LDR	R0, [R7,#0x2C]	; jumptable 00007296 case 4
		ADDS	R1, R4,	R0
		ADDS	R1, #0x20 ; ' '
		MOVS	R0, #0x1F
		LDRSB	R0, [R1,R0]
		CMP	R0, #0x64 ; 'd'
		BGE	def_7296	; jumptable 00007296 default case
		ADDS	R0, #1
		STRB	R0, [R1,#0x1F]
		BL	sub_9BC0
		CMP	R0, #2
		BCC	def_7296	; jumptable 00007296 default case
		B	loc_7276
; ---------------------------------------------------------------------------

loc_7342				; CODE XREF: sub_6FE0+2B6j
		LDR	R0, [R7,#0x2C]	; jumptable 00007296 case 5
		ADDS	R1, R4,	R0
		ADDS	R1, #0x40 ; '@'
		MOVS	R0, #0
		LDRSB	R0, [R1,R0]
		CMP	R0, #0x64 ; 'd'
		BGE	def_7296	; jumptable 00007296 default case
		ADDS	R0, #1
		STRB	R0, [R1]
		BL	sub_9BC0
		CMP	R0, #2
		BCC	def_7296	; jumptable 00007296 default case
		B	loc_7276
; ---------------------------------------------------------------------------

loc_735E				; CODE XREF: sub_6FE0+2B6j
		LDR	R0, [R7,#0x2C]	; jumptable 00007296 case 6
		ADDS	R1, R4,	R0
		ADDS	R1, #0x40 ; '@'
		MOVS	R0, #1
		LDRSB	R0, [R1,R0]
		CMP	R0, #0x32 ; '2'
		BGE	def_7296	; jumptable 00007296 default case
		ADDS	R0, #1
		STRB	R0, [R1,#1]
		BL	sub_9BC0
		CMP	R0, #2
		BCC	def_7296	; jumptable 00007296 default case
		B	loc_7276
; ---------------------------------------------------------------------------

loc_737A				; CODE XREF: sub_6FE0:loc_7252j
		CMP	R6, #4
		BEQ	loc_739C
		CMP	R6, #5
		BEQ	loc_73B0
		CMP	R6, #6
		BEQ	loc_7388

loc_7386				; CODE XREF: sub_6FE0+3B8j
					; sub_6FE0+3CCj ...
		B	loc_6FEA
; ---------------------------------------------------------------------------

loc_7388				; CODE XREF: sub_6FE0+3A4j
		LDR	R1, [R7,#(usedModelPtr - 0x20000000)]
		MOVS	R0, #0
		ADDS	R1, R4,	R1
		ADDS	R1, #0x40 ; '@'
		STRB	R0, [R1,#1]
		BL	sub_9BC0
		CMP	R0, #2
		BCC	loc_7386
		B	loc_7276
; ---------------------------------------------------------------------------

loc_739C				; CODE XREF: sub_6FE0+39Cj
		LDR	R1, [R7,#(usedModelPtr - 0x20000000)]
		MOVS	R0, #0x32 ; '2'
		ADDS	R1, R4,	R1
		ADDS	R1, #0x20 ; ' '
		STRB	R0, [R1,#0x1F]
		BL	sub_9BC0
		CMP	R0, #2
		BCC	loc_7386
		B	loc_7276
; ---------------------------------------------------------------------------

loc_73B0				; CODE XREF: sub_6FE0+3A0j
		LDR	R1, [R7,#(usedModelPtr - 0x20000000)]
		MOVS	R0, #0x32 ; '2'
		ADDS	R1, R4,	R1
		ADDS	R1, #0x40 ; '@'
		STRB	R0, [R1]
		BL	sub_9BC0
		CMP	R0, #2
		BCC	loc_7386
		B	loc_7276
; ---------------------------------------------------------------------------
off_73C4	DCD byte_20000000	; DATA XREF: sub_6FE0+4r
dword_73C8	DCD 0x316843		; DATA XREF: sub_6FE0:loc_6FEAo
					; sub_6FE0+Cr
dword_73CC	DCD 0			; DATA XREF: sub_6FE0+Er
dword_73D0	DCD 0xCA93		; DATA XREF: sub_6FE0+18r
; _BYTE	*off_73D4
off_73D4	DCD aMix1		; DATA XREF: sub_6FE0+20r sub_6FE0+2Cr
					; "Mix #1"
; _BYTE	*off_73D8
off_73D8	DCD aMixIs		; DATA XREF: sub_6FE0+38r
					; "Mix is"
dword_73DC	DCD 0xCA77		; DATA XREF: sub_6FE0+4Cr
; _BYTE	*off_73E0
off_73E0	DCD aOff_0		; DATA XREF: sub_6FE0:loc_7030r
					; "Off"
; _BYTE	*off_73E4
off_73E4	DCD aMaster		; DATA XREF: sub_6FE0+62r
					; "Master"
; _BYTE	*off_73E8
off_73E8	DCD var_X		; DATA XREF: sub_6FE0:loc_7068r
					; sub_6FE0+94r
; _BYTE	*off_73EC
off_73EC	DCD aSlave		; DATA XREF: sub_6FE0+A0r
					; "Slave"
; _BYTE	*off_73F0
off_73F0	DCD aPos_Mix		; DATA XREF: sub_6FE0+CAr
					; "Pos. mix"
; char *off_73F4
off_73F4	DCD a100_1		; DATA XREF: sub_6FE0+DAr sub_6FE0+E6r ...
					; "-100%"
; _BYTE	*off_73F8
off_73F8	DCD aNeg_Mix		; DATA XREF: sub_6FE0+F2r
					; "Neg. mix"
; _BYTE	*off_73FC
off_73FC	DCD aOffset		; DATA XREF: sub_6FE0+11Ar
					; "Offset"
; char *off_7400
off_7400	DCD a100_0		; DATA XREF: sub_6FE0+12Ar
					; sub_6FE0+13Cr ...
					; "100%"
off_7404	DCD arrow_gfx		; DATA XREF: sub_6FE0+160r
; ---------------------------------------------------------------------------

loc_7408				; CODE XREF: sub_6FE0:loc_7254j
		CMP	R6, #6
		BCC	loc_7410
		MOVS	R6, #0
		B	loc_7414
; ---------------------------------------------------------------------------

loc_7410				; CODE XREF: sub_6FE0+42Aj
		ADDS	R6, #1
		UXTB	R6, R6

loc_7414				; CODE XREF: sub_6FE0+42Ej
		BL	sub_9BC0
		CMP	R0, #2
		BCC	loc_7386
		B	loc_7276
; ---------------------------------------------------------------------------

loc_741E				; CODE XREF: sub_6FE0:loc_7256j
		MOVS	R0, #1
		ADD	SP, SP,	#0xC
		POP	{R4-R7,PC}
; End of function sub_6FE0


; =============== S U B	R O U T	I N E =======================================


modelCopyPage				; DATA XREF: ROM:off_D4A4o
		PUSH	{R3-R7,LR}
		LDR	R0, =rxsettings
		MOVS	R6, #0
		LDRB	R4, [R0,#(currentModel - 0x200002A4)]
		MOV	R5, R4

loc_742E				; CODE XREF: modelCopyPage+DAj
					; modelCopyPage+EEj ...
		BL	callSetupDMAandSend
		LDR	R0, =0xCEB7
		BL	displayPageHeader
		MOVS	R2, #2
		LDR	R1, =0x2000009A
		ADDS	R0, R5,	#1
		BL	printNumberAsStringAt
		MOVS	R2, #8		; y
		MOVS	R3, #0		; a4
		MOV	R1, R2		; x
		LDR	R0, =aModel00	; "Model 00"
		BL	displayTextAt
		MOVS	R0, #0x92 ; ''
		MOV	R1, R5
		MULS	R1, R0
		LDR	R0, =rxsettings
		MOVS	R3, #0		; a4
		ADDS	R7, R1,	R0
		MOV	R0, R7
		ADDS	R0, #0xA	; text
		MOVS	R2, #0x10	; y
		MOVS	R1, #8		; x
		BL	displayTextAt
		LDRB	R0, [R7,#0x13]
		CMP	R0, #0
		BEQ	loc_7504
		LDR	R0, =heli_img

loc_746E				; CODE XREF: modelCopyPage+E2j
		MOVS	R2, #8
		MOVS	R1, #0x4A ; 'J'
		BL	displayGFX
		MOVS	R3, #0		; a4
		MOVS	R2, #0x18	; a3
		MOVS	R1, #0x40 ; '@'	; a2
		LDR	R0, =aCopyTo	; "Copy to"
		BL	displayTextAt2
		MOVS	R2, #2
		LDR	R1, =0x2000009A
		ADDS	R0, R4,	#1
		BL	printNumberAsStringAt
		MOVS	R3, #0		; a4
		MOVS	R2, #0x20 ; ' '	; y
		MOVS	R1, #8		; x
		LDR	R0, =aModel00	; "Model 00"
		BL	displayTextAt
		MOVS	R0, #0x92 ; ''
		MOV	R1, R4
		MULS	R1, R0
		LDR	R0, =rxsettings
		MOVS	R3, #0		; a4
		ADDS	R7, R1,	R0
		MOV	R0, R7
		ADDS	R0, #0xA	; text
		MOVS	R2, #0x28 ; '('	; y
		MOVS	R1, #8		; x
		BL	displayTextAt
		LDRB	R0, [R7,#0x13]
		CMP	R0, #0
		BEQ	loc_7508
		LDR	R0, =heli_img

loc_74B8				; CODE XREF: modelCopyPage+E6j
		MOVS	R2, #0x20 ; ' '
		MOVS	R1, #0x4A ; 'J'
		BL	displayGFX
		MOV	R2, R6
		MOVS	R0, #0x18
		MULS	R2, R0
		ADDS	R2, #8
		MOVS	R1, #0
		LDR	R0, =arrow_gfx
		BL	displayGFX
		MOVS	R3, #0		; a4
		MOVS	R2, #0x38 ; '8'	; a3
		MOVS	R1, #0x40 ; '@'	; a2
		LDR	R0, =aMenuToCopy ; "\"MENU\" to copy"
		BL	displayTextAt2
		BL	LCD_updateCALL
		BL	getKeyCode
		CMP	R0, #8
		BEQ	loc_750C
		CMP	R0, #0x18
		BEQ	loc_750C
		CMP	R0, #9
		BEQ	loc_7542
		CMP	R0, #0x17
		BEQ	loc_7542
		CMP	R0, #0xA
		BEQ	loc_7566
		CMP	R0, #0x16
		BEQ	loc_7574
		CMP	R0, #0xB
		BNE	loc_742E
		MOVS	R0, #0

locret_7502				; CODE XREF: modelCopyPage+156j
		POP	{R3-R7,PC}
; ---------------------------------------------------------------------------

loc_7504				; CODE XREF: modelCopyPage+46j
		LDR	R0, =plain_img
		B	loc_746E
; ---------------------------------------------------------------------------

loc_7508				; CODE XREF: modelCopyPage+90j
		LDR	R0, =plain_img
		B	loc_74B8
; ---------------------------------------------------------------------------

loc_750C				; CODE XREF: modelCopyPage+C2j
					; modelCopyPage+C6j
		CMP	R6, #0
		BEQ	loc_7520
		CMP	R4, #0
		BEQ	loc_742E
		SUBS	R4, #1
		BL	sub_9BC0
		CMP	R0, #2

loc_751C				; CODE XREF: modelCopyPage+108j
		BCC	loc_742E
		B	loc_752E
; ---------------------------------------------------------------------------

loc_7520				; CODE XREF: modelCopyPage+EAj
		CMP	R5, #0
		BEQ	loc_742E
		SUBS	R5, #1
		BL	sub_9BC0
		CMP	R0, #2
		BCC	loc_751C

loc_752E				; CODE XREF: modelCopyPage+FAj
					; modelCopyPage+130j ...
		MOVS	R0, #0x31 ; '1'
		MOVS	R1, #0xF
		LSLS	R0, R0,	#4
		BL	beep
		MOVS	R1, #0xF
		MOVS	R0, #0
		BL	beep

loc_7540				; CODE XREF: modelCopyPage+124j
					; modelCopyPage+12Ej ...
		B	loc_742E
; ---------------------------------------------------------------------------

loc_7542				; CODE XREF: modelCopyPage+CAj
					; modelCopyPage+CEj
		CMP	R6, #0
		BEQ	loc_7556
		CMP	R4, #0x13
		BCS	loc_7540
		ADDS	R4, #1
		BL	sub_9BC0
		CMP	R0, #2
		BCC	loc_7540
		B	loc_752E
; ---------------------------------------------------------------------------

loc_7556				; CODE XREF: modelCopyPage+120j
		CMP	R5, #0x13
		BCS	loc_7540
		ADDS	R5, #1
		BL	sub_9BC0
		CMP	R0, #2
		BCC	loc_7540
		B	loc_752E
; ---------------------------------------------------------------------------

loc_7566				; CODE XREF: modelCopyPage+D2j
		MOVS	R0, #1
		EORS	R6, R0
		BL	sub_9BC0
		CMP	R0, #2
		BCC	loc_7540
		B	loc_752E
; ---------------------------------------------------------------------------

loc_7574				; CODE XREF: modelCopyPage+D6j
		BL	sub_23F4
		CMP	R0, #0
		BEQ	locret_7502
		MOVS	R0, #0x92 ; ''
		MULS	R5, R0
		LDR	R0, =rxsettings
		MOVS	R2, #0x92 ; ''
		ADDS	R1, R5,	R0
		MULS	R4, R2
		ADDS	R0, R4,	R0
		ADDS	R1, #0xA
		ADDS	R0, #0xA
		BL	memcpy
		MOVS	R0, #1
		POP	{R3-R7,PC}
; End of function modelCopyPage

; ---------------------------------------------------------------------------
		ALIGN 4
off_7598	DCD rxsettings		; DATA XREF: modelCopyPage+2r
					; modelCopyPage+30r ...
dword_759C	DCD 0xCEB7		; DATA XREF: modelCopyPage+Er
dword_75A0	DCD 0x2000009A		; DATA XREF: modelCopyPage+16r
					; modelCopyPage+60r
; _BYTE	*off_75A4
off_75A4	DCD aModel00		; DATA XREF: modelCopyPage+24r
					; modelCopyPage+6Er
					; "Model 00"
off_75A8	DCD heli_img		; DATA XREF: modelCopyPage+48r
					; modelCopyPage+92r
; _BYTE	*off_75AC
off_75AC	DCD aCopyTo		; DATA XREF: modelCopyPage+58r
					; "Copy to"
off_75B0	DCD arrow_gfx		; DATA XREF: modelCopyPage+A6r
; _BYTE	*off_75B4
off_75B4	DCD aMenuToCopy		; DATA XREF: modelCopyPage+B2r
					; "\"MENU\" to copy"
off_75B8	DCD plain_img		; DATA XREF: modelCopyPage:loc_7504r
					; modelCopyPage:loc_7508r

; =============== S U B	R O U T	I N E =======================================


modelNamePAge				; DATA XREF: ROM:0000D494o

var_50		= -0x50
var_4F		= -0x4F
var_40		= -0x40
var_20		= -0x20

		PUSH	{R4-R7,LR}
		SUB	SP, SP,	#0x3C
		MOVS	R0, #0
		STR	R0, [SP,#0x50+var_20]

loc_75C4				; CODE XREF: modelNamePAge+100j
					; modelNamePAge:loc_76E8j ...
		BL	callSetupDMAandSend
		LDR	R0, =0xCED1
		BL	displayPageHeader
		LDR	R0, =rxsettings
		MOVS	R2, #2
		LDRB	R0, [R0,#(currentModel - 0x200002A4)]
		LDR	R1, =0x2000009A
		ADDS	R0, #1
		BL	printNumberAsStringAt
		MOVS	R3, #0		; a4
		MOVS	R2, #8		; y
		MOVS	R1, #0x20 ; ' '	; x
		LDR	R0, =aModel00	; "Model 00"
		BL	displayTextAt
		LDR	R4, =byte_20000000
		MOVS	R3, #0		; a4
		MOVS	R2, #0x10	; y
		MOVS	R1, #0x20 ; ' '	; x
		LDR	R0, [R4,#(usedModelPtr - 0x20000000)] ;	text
		BL	displayTextAt
		LDR	R1, [R4,#(usedModelPtr - 0x20000000)]
		LDR	R0, [SP,#0x50+var_20]
		LDRB	R4, [R1,R0]
		MOV	R0, R4
		SUBS	R0, #0x20 ; ' '
		CMP	R0, #0x60 ; '`'
		BCC	loc_7606
		MOVS	R4, #0x20 ; ' '

loc_7606				; CODE XREF: modelNamePAge+46j
		MOV	R0, SP
		STRB	R4, [R0,#0x50+var_50]
		MOVS	R7, #0
		STRB	R7, [R0,#0x50+var_4F]
		LDR	R0, [SP,#0x50+var_20]
		MOVS	R3, #1		; a4
		LSLS	R1, R0,	#3
		ADDS	R1, #0x20 ; ' '	; x
		MOVS	R2, #0x10	; y
		MOV	R0, SP		; text
		BL	displayTextAt
		MOV	R0, R4
		MOVS	R1, #0x30 ; '0'
		SUBS	R0, #0x20 ; ' '
		BL	div_Other
		MOVS	R1, #0x30 ; '0'
		MULS	R0, R1
		MOV	R5, R0
		ADDS	R5, #0x20 ; ' '
		MOVS	R6, #0

loc_7632				; CODE XREF: modelNamePAge+ACj
		MOVS	R0, #0
		MOVS	R3, #0x10
		LSLS	R1, R6,	#4
		MOV	R2, SP
		ADDS	R7, R1,	R5

loc_763C				; CODE XREF: modelNamePAge+92j
		ADDS	R1, R7,	R0
		UXTB	R1, R1
		CMP	R1, #0x80 ; ''
		BCC	loc_7646
		MOVS	R1, #0x20 ; ' '

loc_7646				; CODE XREF: modelNamePAge+86j
		STRB	R1, [R2]
		ADDS	R2, #1
		ADDS	R0, #1
		SUBS	R3, #1
		BNE	loc_763C
		MOVS	R0, #0
		MOV	R1, SP
		STRB	R0, [R1,#0x50+var_40]
		LSLS	R2, R6,	#3
		MOV	R3, R0		; a4
		MOV	R1, R0		; x
		ADDS	R2, #0x20 ; ' '	; y
		MOV	R0, SP		; text
		BL	displayTextAt
		ADDS	R6, #1
		CMP	R6, #3
		BCC	loc_7632
		MOV	R1, SP
		STRB	R4, [R1,#0x50+var_50]
		MOVS	R0, #0
		STRB	R0, [R1,#0x50+var_4F]
		SUBS	R0, R4,	R5
		LSRS	R1, R0,	#4
		LSLS	R2, R1,	#3
		LSLS	R0, R0,	#0x1C
		LSRS	R1, R0,	#0x19
		ADDS	R2, #0x20 ; ' '	; y
		MOVS	R3, #1		; a4
		MOV	R0, SP		; text
		BL	displayTextAt
		CMP	R5, #0x20 ; ' '
		BEQ	loc_76C4
		MOVS	R3, #0		; a4
		MOVS	R2, #0x38 ; '8'	; y
		MOVS	R1, #0x60 ; '`'	; x
		ADR	R0, unk_7774	; text

loc_7692				; CODE XREF: modelNamePAge+110j
		BL	displayTextAt
		BL	LCD_updateCALL
		BL	getKeyCode
		CMP	R0, #8
		BEQ	loc_76CE
		CMP	R0, #0x18
		BEQ	loc_76CE
		CMP	R0, #9
		BEQ	loc_76FE
		CMP	R0, #0x17
		BEQ	loc_76FE
		CMP	R0, #0x16
		BEQ	loc_771A
		CMP	R0, #0xA
		BEQ	loc_7740
		CMP	R0, #0x19
		BEQ	loc_7758
		CMP	R0, #0xB
		BNE	loc_75C4
		MOVS	R0, #0
		ADD	SP, SP,	#0x3C
		POP	{R4-R7,PC}
; ---------------------------------------------------------------------------

loc_76C4				; CODE XREF: modelNamePAge+CCj
		MOVS	R3, #0
		MOVS	R2, #0x38 ; '8'
		MOVS	R1, #0x60 ; '`'
		ADR	R0, dword_7778
		B	loc_7692
; ---------------------------------------------------------------------------

loc_76CE				; CODE XREF: modelNamePAge+E4j
					; modelNamePAge+E8j
		CMP	R4, #0x20 ; ' '
		BHI	loc_76D6
		MOVS	R4, #0x7F ; ''
		B	loc_76D8
; ---------------------------------------------------------------------------

loc_76D6				; CODE XREF: modelNamePAge+114j
		SUBS	R4, #1

loc_76D8				; CODE XREF: modelNamePAge+118j
		LDR	R0, =byte_20000000
		LDR	R1, [R0,#(usedModelPtr - 0x20000000)]
		LDR	R0, [SP,#0x50+var_20]
		STRB	R4, [R1,R0]
		BL	sub_9BC0
		CMP	R0, #2
		BCS	loc_76EA

loc_76E8				; CODE XREF: modelNamePAge+15Aj
					; modelNamePAge+180j ...
		B	loc_75C4
; ---------------------------------------------------------------------------

loc_76EA				; CODE XREF: modelNamePAge+12Aj
					; modelNamePAge+15Cj ...
		MOVS	R0, #0x31 ; '1'
		MOVS	R1, #0xF
		LSLS	R0, R0,	#4
		BL	beep
		MOVS	R1, #0xF
		MOVS	R0, #0
		BL	beep
		B	loc_75C4
; ---------------------------------------------------------------------------

loc_76FE				; CODE XREF: modelNamePAge+ECj
					; modelNamePAge+F0j
		CMP	R4, #0x7F ; ''
		BCC	loc_7706
		MOVS	R4, #0x20 ; ' '
		B	loc_7708
; ---------------------------------------------------------------------------

loc_7706				; CODE XREF: modelNamePAge+144j
		ADDS	R4, #1

loc_7708				; CODE XREF: modelNamePAge+148j
		LDR	R0, =byte_20000000
		LDR	R1, [R0,#(usedModelPtr - 0x20000000)]
		LDR	R0, [SP,#0x50+var_20]
		STRB	R4, [R1,R0]
		BL	sub_9BC0
		CMP	R0, #2
		BCC	loc_76E8
		B	loc_76EA
; ---------------------------------------------------------------------------

loc_771A				; CODE XREF: modelNamePAge+F4j
		LDR	R4, =byte_20000000
		MOVS	R2, #9
		LDR	R1, =0xD179
		LDR	R0, [R4,#(usedModelPtr - 0x20000000)]
		BL	memcpy
		LDR	R0, =rxsettings
		LDR	R1, [R4,#(usedModelPtr - 0x20000000)]
		LDRB	R0, [R0,#(currentModel - 0x200002A4)]
		MOVS	R2, #2
		ADDS	R0, #1
		ADDS	R1, #6
		BL	printNumberAsStringAt
		BL	sub_9BC0
		CMP	R0, #2
		BCC	loc_76E8
		B	loc_76EA
; ---------------------------------------------------------------------------

loc_7740				; CODE XREF: modelNamePAge+F8j
		LDR	R0, [SP,#0x50+var_20]
		CMP	R0, #7
		BCC	loc_774A
		MOVS	R0, #0
		B	loc_774C
; ---------------------------------------------------------------------------

loc_774A				; CODE XREF: modelNamePAge+188j
		ADDS	R0, #1

loc_774C				; CODE XREF: modelNamePAge+18Cj
		STR	R0, [SP,#0x50+var_20]
		BL	sub_9BC0
		CMP	R0, #2
		BCC	loc_76E8
		B	loc_76EA
; ---------------------------------------------------------------------------

loc_7758				; CODE XREF: modelNamePAge+FCj
		MOVS	R0, #1
		ADD	SP, SP,	#0x3C
		POP	{R4-R7,PC}
; End of function modelNamePAge

; ---------------------------------------------------------------------------
		ALIGN 0x10
dword_7760	DCD 0xCED1		; DATA XREF: modelNamePAge+Cr
off_7764	DCD rxsettings		; DATA XREF: modelNamePAge+12r
					; modelNamePAge+16Ar
dword_7768	DCD 0x2000009A		; DATA XREF: modelNamePAge+18r
; _BYTE	*off_776C
off_776C	DCD aModel00		; DATA XREF: modelNamePAge+26r
					; "Model 00"
off_7770	DCD byte_20000000	; DATA XREF: modelNamePAge+2Cr
					; modelNamePAge:loc_76D8r ...
unk_7774	DCB 0x20		; DATA XREF: modelNamePAge+D4o
		DCB 0x20, 0x20,	0
dword_7778	DCD 0x3E3D3D		; DATA XREF: modelNamePAge+10Eo
dword_777C	DCD 0xD179		; DATA XREF: modelNamePAge+162r

; =============== S U B	R O U T	I N E =======================================


modelResetPage				; DATA XREF: ROM:0000D4ACo
		PUSH	{R3-R7,LR}
		LDR	R5, =rxsettings
		LDR	R6, =aModel00	; "Model 00"
		LDRB	R4, [R5,#(currentModel - 0x200002A4)]

loc_7788				; CODE XREF: modelResetPage+80j
					; modelResetPage+8Cj ...
		BL	callSetupDMAandSend
		LDR	R0, =aModelReset ; "Model reset"
		BL	displayPageHeader
		MOVS	R3, #0		; a4
		MOVS	R2, #0x38 ; '8'	; a3
		MOVS	R1, #0x40 ; '@'	; a2
		LDR	R0, =aOkToReset	; "\"OK\" to reset"
		BL	displayTextAt2
		MOVS	R2, #2
		ADDS	R1, R6,	#6
		ADDS	R0, R4,	#1
		BL	printNumberAsStringAt
		MOVS	R3, #0		; a4
		MOVS	R2, #0x18	; y
		MOVS	R1, #8		; x
		LDR	R0, =aModel00	; "Model 00"
		BL	displayTextAt
		MOVS	R0, #0x92 ; ''
		MULS	R0, R4
		ADDS	R7, R0,	R5
		MOV	R0, R7
		ADDS	R0, #0xA	; text
		MOVS	R3, #0		; a4
		MOVS	R2, #0x20 ; ' '	; y
		MOVS	R1, #8		; x
		BL	displayTextAt
		LDRB	R0, [R7,#0x13]
		CMP	R0, #0
		BEQ	loc_7806
		LDR	R0, =heli_img

loc_77D0				; CODE XREF: modelResetPage+88j
		MOVS	R2, #0x18
		MOVS	R1, #0x4A ; 'J'
		BL	displayGFX
		MOVS	R2, #0x18
		MOVS	R1, #0
		LDR	R0, =arrow_gfx
		BL	displayGFX
		BL	LCD_updateCALL
		BL	getKeyCode
		CMP	R0, #8
		BEQ	loc_780A
		CMP	R0, #0x18
		BEQ	loc_780A
		CMP	R0, #9
		BEQ	loc_782C
		CMP	R0, #0x17
		BEQ	loc_782C
		CMP	R0, #0xA
		BEQ	loc_783C
		CMP	R0, #0xB
		BNE	loc_7788
		MOVS	R0, #0

locret_7804				; CODE XREF: modelResetPage+C2j
		POP	{R3-R7,PC}
; ---------------------------------------------------------------------------

loc_7806				; CODE XREF: modelResetPage+4Cj
		LDR	R0, =plain_img
		B	loc_77D0
; ---------------------------------------------------------------------------

loc_780A				; CODE XREF: modelResetPage+6Cj
					; modelResetPage+70j
		CMP	R4, #0
		BEQ	loc_7788
		SUBS	R4, #1
		BL	sub_9BC0
		CMP	R0, #2
		BCC	loc_7788

loc_7818				; CODE XREF: modelResetPage+BAj
		MOVS	R0, #0x31 ; '1'
		MOVS	R1, #0xF
		LSLS	R0, R0,	#4
		BL	beep
		MOVS	R1, #0xF
		MOVS	R0, #0
		BL	beep
		B	loc_7788
; ---------------------------------------------------------------------------

loc_782C				; CODE XREF: modelResetPage+74j
					; modelResetPage+78j
		CMP	R4, #0x13
		BCS	loc_7788
		ADDS	R4, #1
		BL	sub_9BC0
		CMP	R0, #2
		BCC	loc_7788
		B	loc_7818
; ---------------------------------------------------------------------------

loc_783C				; CODE XREF: modelResetPage+7Cj
		BL	sub_23F4
		CMP	R0, #0
		BEQ	locret_7804
		MOVS	R0, #0x92 ; ''
		MULS	R0, R4
		ADDS	R5, R0,	R5
		MOV	R0, R5
		ADDS	R0, #0xA
		MOVS	R2, #0x92 ; ''
		LDR	R1, =0xD179
		BL	memcpy
		MOV	R1, R5
		ADDS	R1, #0x10
		MOVS	R2, #2
		ADDS	R0, R4,	#1
		BL	printNumberAsStringAt
		MOVS	R0, #1
		POP	{R3-R7,PC}
; End of function modelResetPage

; ---------------------------------------------------------------------------
		ALIGN 4
off_7868	DCD rxsettings		; DATA XREF: modelResetPage+2r
; _BYTE	*off_786C
off_786C	DCD aModel00		; DATA XREF: modelResetPage+4r
					; modelResetPage+2Er
					; "Model 00"
off_7870	DCD aModelReset		; DATA XREF: modelResetPage+Cr
					; "Model reset"
; _BYTE	*off_7874
off_7874	DCD aOkToReset		; DATA XREF: modelResetPage+18r
					; "\"OK\" to reset"
off_7878	DCD heli_img		; DATA XREF: modelResetPage+4Er
off_787C	DCD arrow_gfx		; DATA XREF: modelResetPage+5Cr
off_7880	DCD plain_img		; DATA XREF: modelResetPage:loc_7806r
dword_7884	DCD 0xD179		; DATA XREF: modelResetPage+D0r

; =============== S U B	R O U T	I N E =======================================


modelSelectPage				; DATA XREF: ROM:0000D48Co

var_38		= -0x38
var_37		= -0x37
var_35		= -0x35
var_34		= -0x34

		PUSH	{R4-R7,LR}
		LDR	R7, =rxsettings
		SUB	SP, SP,	#0x24
		LDRB	R4, [R7,#(currentModel - 0x200002A4)]
		LDR	R5, =aModel00	; "Model 00"

loc_7892				; CODE XREF: modelSelectPage+7Aj
					; modelSelectPage+88j ...
		BL	callSetupDMAandSend
		LDR	R0, =aModelSelect ; "Model select"
		BL	displayPageHeader
		MOVS	R2, #2
		ADDS	R1, R5,	#6
		ADDS	R0, R4,	#1
		BL	printNumberAsStringAt
		MOVS	R3, #0		; a4
		MOVS	R2, #0x10	; y
		MOVS	R1, #0x24 ; '$' ; x
		LDR	R0, =aModel00	; "Model 00"
		BL	displayTextAt
		MOVS	R2, #0x10
		MOVS	R1, #0x1C
		LDR	R0, =arrow_gfx
		BL	displayGFX
		MOVS	R0, #0x92 ; ''
		MULS	R0, R4
		ADDS	R6, R0,	R7
		MOV	R0, R6
		MOVS	R2, #0x20 ; ' '	; y
		ADDS	R0, #0xA	; text
		MOVS	R3, #0		; a4
		MOV	R1, R2		; x
		BL	displayTextAt
		LDRB	R0, [R6,#0x13]
		CMP	R0, #0
		BEQ	loc_790A
		LDR	R0, =heli_img

loc_78D8				; CODE XREF: modelSelectPage+84j
		MOVS	R2, #0x30 ; '0'
		MOVS	R1, #0x24 ; '$'
		BL	displayGFX
		BL	LCD_updateCALL
		BL	getKeyCode
		CMP	R0, #8
		BEQ	loc_790E
		CMP	R0, #0x18
		BEQ	loc_790E
		CMP	R0, #9
		BEQ	loc_7930
		CMP	R0, #0x17
		BEQ	loc_7930
		CMP	R0, #0xA
		BEQ	loc_7940
		CMP	R0, #0x19
		BEQ	loc_7940
		CMP	R0, #0xB
		BNE	loc_7892
		MOVS	R0, #0
		ADD	SP, SP,	#0x24
		POP	{R4-R7,PC}
; ---------------------------------------------------------------------------

loc_790A				; CODE XREF: modelSelectPage+4Cj
		LDR	R0, =plain_img
		B	loc_78D8
; ---------------------------------------------------------------------------

loc_790E				; CODE XREF: modelSelectPage+62j
					; modelSelectPage+66j
		CMP	R4, #0
		BEQ	loc_7892
		SUBS	R4, #1
		BL	sub_9BC0
		CMP	R0, #2
		BCC	loc_7892

loc_791C				; CODE XREF: modelSelectPage+B6j
		MOVS	R0, #0x31 ; '1'
		MOVS	R1, #0xF
		LSLS	R0, R0,	#4
		BL	beep
		MOVS	R1, #0xF
		MOVS	R0, #0
		BL	beep
		B	loc_7892
; ---------------------------------------------------------------------------

loc_7930				; CODE XREF: modelSelectPage+6Aj
					; modelSelectPage+6Ej
		CMP	R4, #0x13
		BCS	loc_7892
		ADDS	R4, #1
		BL	sub_9BC0
		CMP	R0, #2
		BCC	loc_7892
		B	loc_791C
; ---------------------------------------------------------------------------

loc_7940				; CODE XREF: modelSelectPage+72j
					; modelSelectPage+76j
		UXTB	R0, R4
		MOVS	R2, #0x92 ; ''
		MULS	R4, R2
		ADDS	R2, R4,	R7
		LDR	R4, =byte_20000000
		STRB	R0, [R7,#9]
		ADDS	R2, #0xA
		STR	R2, [R4,#(usedModelPtr - 0x20000000)]
		MOVS	R2, #0x92 ; ''
		MULS	R0, R2
		ADDS	R0, R0,	R7
		MOVS	R2, #0x6A ; 'j'
		LDRB	R2, [R2,R0]
		CMP	R2, #0
		BEQ	loc_79FC
		LDR	R2, =dword_20000140
		MOVS	R5, #0
		STR	R5, [R2]
		LDR	R3, =dword_1FFFF884
		SUBS	R2, R5,	#1
		STR	R2, [R3]
		LDR	R2, =byte_2000013C
		LDRB	R2, [R2]
		CMP	R2, #0
		BEQ	loc_79FC
		LDR	R7, =sendingPacket
		MOVS	R6, #1
		STRB	R6, [R7]
		MOVS	R3, #0x9B ; ''
		MOV	R2, SP
		ADDS	R0, #0x61 ; 'a'
		MOVS	R1, #0xC
		STRB	R3, [R2,#0x38+var_38]
		ADDS	R1, R0,	R1
		LDRB	R2, [R1]
		MOV	R0, R2
		LDRB	R2, [R1,#1]
		LSLS	R2, R2,	#8
		ORRS	R0, R2
		LDRB	R2, [R1,#2]
		LDRB	R1, [R1,#3]
		LSLS	R2, R2,	#0x10
		ORRS	R0, R2
		LSLS	R1, R1,	#0x18
		ORRS	R0, R1
		MOV	R2, SP		; a3
		STRB	R0, [R2,#0x38+var_37]
		LSRS	R1, R0,	#8
		STRB	R1, [R2,#0x38+var_37+1]
		LSRS	R1, R0,	#0x10
		STRB	R1, [R2,#0x38+var_35]
		LSRS	R0, R0,	#0x18
		STRB	R0, [R2,#0x38+var_34]
		MOV	R0, SP		; targetAddress
		BL	sendPacketToRadio
		MOVS	R0, #0x9A ; ''
		BL	addPacketToResend1FFFFCF5When2000013C
		STRB	R5, [R7]
		LDR	R7, =byte_2000013F
		LDRB	R0, [R7]
		CMP	R0, #1
		BNE	loc_79FC
		STR	R5, [R4,#(dword_20000054 - 0x20000000)]
		LDR	R2, =rxsettings
		MOVS	R3, #0x92 ; ''
		LDRB	R1, [R2,#(currentModel - 0x200002A4)]
		MOVS	R0, #0
		MULS	R1, R3
		ADDS	R6, R1,	R2
		LDR	R2, =timer
		ADDS	R6, #0x71 ; 'q'

loc_79D2				; CODE XREF: modelSelectPage+172j
		MOVS	R1, #1
		STRB	R1, [R7]
		LDR	R3, [R2]
		LDR	R1, [R2]
		SUBS	R1, R1,	R3
		CMP	R1, #0x32 ; '2'
		BCS	loc_79F6
		LDRB	R1, [R6,#1]
		LDRB	R5, [R6]
		LSLS	R1, R1,	#8
		ORRS	R1, R5

loc_79E8				; CODE XREF: modelSelectPage+16Cj
		LDR	R5, [R4,#(dword_20000054 - 0x20000000)]
		CMP	R1, R5
		BEQ	loc_79FC
		LDR	R5, [R2]
		SUBS	R5, R5,	R3
		CMP	R5, #0x32 ; '2'
		BCC	loc_79E8

loc_79F6				; CODE XREF: modelSelectPage+156j
		ADDS	R0, #1
		CMP	R0, #5
		BCC	loc_79D2

loc_79FC				; CODE XREF: modelSelectPage+D4j
					; modelSelectPage+E8j ...
		MOVS	R0, #1
		ADD	SP, SP,	#0x24
		POP	{R4-R7,PC}
; End of function modelSelectPage

; ---------------------------------------------------------------------------
		ALIGN 4
off_7A04	DCD rxsettings		; DATA XREF: modelSelectPage+2r
					; modelSelectPage+13Ar
; _BYTE	*off_7A08
off_7A08	DCD aModel00		; DATA XREF: modelSelectPage+8r
					; modelSelectPage+24r
					; "Model 00"
off_7A0C	DCD aModelSelect	; DATA XREF: modelSelectPage+Er
					; "Model select"
off_7A10	DCD arrow_gfx		; DATA XREF: modelSelectPage+2Er
off_7A14	DCD heli_img		; DATA XREF: modelSelectPage+4Er
off_7A18	DCD plain_img		; DATA XREF: modelSelectPage:loc_790Ar
off_7A1C	DCD byte_20000000	; DATA XREF: modelSelectPage+C0r
off_7A20	DCD dword_20000140	; DATA XREF: modelSelectPage+D6r
off_7A24	DCD dword_1FFFF884	; DATA XREF: modelSelectPage+DCr
off_7A28	DCD byte_2000013C	; DATA XREF: modelSelectPage+E2r
off_7A2C	DCD sendingPacket	; DATA XREF: modelSelectPage+EAr
off_7A30	DCD byte_2000013F	; DATA XREF: modelSelectPage+130r
off_7A34	DCD timer		; DATA XREF: modelSelectPage+146r

; =============== S U B	R O U T	I N E =======================================


sub_7A38
		LDR	R0, =0x40037100	; argc
		LDR	R1, [R0,#0xC]
		LSLS	R1, R1,	#0x1F
		BEQ	locret_7A50
		PUSH	{R4,LR}
		LDR	R1, [R0,#0xC]
		MOVS	R2, #byte_1	; envp
		ORRS	R1, R2		; argv
		STR	R1, [R0,#0xC]
		BL	main
		POP	{R4,PC}
; ---------------------------------------------------------------------------

locret_7A50				; CODE XREF: sub_7A38+6j
		BX	LR
; End of function sub_7A38

; ---------------------------------------------------------------------------
		ALIGN 4
; int argc
argc		DCD 0x40037100		; DATA XREF: sub_7A38r
; ---------------------------------------------------------------------------
		LDR	R0, =0x4004C000
		LDR	R1, [R0,#0xC]
		LSLS	R1, R1,	#7
		BPL	locret_7A72
		PUSH	{R4,LR}
		LDR	R1, [R0,#0xC]
		MOVS	R2, #0x1000000
		ORRS	R1, R2
		STR	R1, [R0,#0xC]
		BL	sub_7E9C
		POP	{R4,PC}
; ---------------------------------------------------------------------------

locret_7A72				; CODE XREF: ROM:00007A5Ej
		BX	LR
; ---------------------------------------------------------------------------
dword_7A74	DCD 0x4004C000		; DATA XREF: ROM:00007A58r

; =============== S U B	R O U T	I N E =======================================


tpmMethod				; CODE XREF: main_screen:loc_C100p
					; main_screen+160p
		LDR	R0, =0x40048000
		LDR	R1, [R0,#0x3C]
		MOVS	R2, #0x4000000
		ORRS	R1, R2
		STR	R1, [R0,#0x3C]
		LDR	R0, =0x4003A000
		LDR	R1, [R0]
		LSRS	R1, R1,	#6
		LSLS	R1, R1,	#6
		STR	R1, [R0]
		MOVS	R1, #3
		LDR	R2, =0x40049000
		LSLS	R1, R1,	#8
		STR	R1, [R2,#4]
		STR	R1, [R2,#8]
		MOVS	R1, #9
		STR	R1, [R0]
		LDR	R2, [R0,#0xC]
		MOVS	R1, #0x3C ; '<'
		BICS	R2, R1
		STR	R2, [R0,#0xC]
		LDR	R2, [R0,#0xC]
		MOVS	R3, #0x14
		ORRS	R2, R3
		STR	R2, [R0,#0xC]
		LDR	R3, [R0,#0xC]
		MOVS	R2, #0x40 ; '@'
		ORRS	R3, R2
		STR	R3, [R0,#0xC]
		MOVS	R3, #0xFA0
		STR	R3, [R0,#0x10]
		LDR	R3, [R0,#0x14]
		BICS	R3, R1
		STR	R3, [R0,#0x14]
		LDR	R1, [R0,#0x14]
		MOVS	R3, #0xC
		ORRS	R1, R3
		STR	R1, [R0,#0x14]
		LDR	R1, [R0,#0x14]
		ORRS	R1, R2
		STR	R1, [R0,#0x14]
		MOVS	R1, #0
		STR	R1, [R0,#0x18]
		STR	R1, [R0,#4]
		LDR	R2, =0xFFFF
		STR	R2, [R0,#8]
		LDR	R0, =0xE000E400
		LDR	R2, [R0,#0x10]
		LSLS	R3, R3,	#0x1C
		LSLS	R2, R2,	#8
		LSRS	R2, R2,	#8
		ADDS	R2, R2,	R3
		STR	R2, [R0,#0x10]
		LDR	R0, =0xE000E100
		LDR	R2, [R0]
		MOVS	R3, #0x80000
		ORRS	R2, R3
		STR	R2, [R0]
		LDR	R0, =word_2000012C
		STRH	R1, [R0]
		BX	LR
; End of function tpmMethod

; ---------------------------------------------------------------------------
dword_7AF8	DCD 0x40048000		; DATA XREF: tpmMethodr
dword_7AFC	DCD 0x4003A000		; DATA XREF: tpmMethod+Cr
dword_7B00	DCD 0x40049000		; DATA XREF: tpmMethod+18r
dword_7B04	DCD 0xFFFF		; DATA XREF: tpmMethod+5Cr
dword_7B08	DCD 0xE000E400		; DATA XREF: tpmMethod+60r
dword_7B0C	DCD 0xE000E100		; DATA XREF: tpmMethod+6Er
off_7B10	DCD word_2000012C	; DATA XREF: tpmMethod+7Ar

; =============== S U B	R O U T	I N E =======================================


sub_7B14				; DATA XREF: ROM:0000D3FCo
					; ROM:0000D45Co
		PUSH	{R4,LR}
		LDR	R0, =byte_20000000
		LDR	R2, =unk_D198	; a3
		LDR	R1, [R0,#(usedModelPtr - 0x20000000)]
		LDR	R0, =aPitchCurve_0 ; namePtr
		ADDS	R1, #0x1F	; a2
		BL	showSingleValuePage
		POP	{R4,PC}
; End of function sub_7B14

; ---------------------------------------------------------------------------
		ALIGN 4
; int a3
a3		DCD unk_D198		; DATA XREF: sub_7B14+4r
off_7B2C	DCD byte_20000000	; DATA XREF: sub_7B14+2r
; _BYTE	*namePtr
namePtr		DCD aPitchCurve_0	; DATA XREF: sub_7B14+8r
					; "Pitch curve"

; =============== S U B	R O U T	I N E =======================================


startupWarning				; CODE XREF: main_screen+C8p
		PUSH	{R3-R7,LR}
		MOVS	R0, #1
		BL	adcMethod2
		LDR	R4, =byte_1FFFF896

loc_7B3E				; CODE XREF: startupWarning+1Cj
		LDRB	R0, [R4]
		CMP	R0, #0
		BEQ	loc_7B4C
		BL	sub_232C
		CMP	R0, #0
		BEQ	loc_7B52

loc_7B4C				; CODE XREF: startupWarning+Ej
		BL	sendPacketWithTimer
		B	loc_7B3E
; ---------------------------------------------------------------------------

loc_7B52				; CODE XREF: startupWarning+16j
		BL	getInputStates
		LSLS	R0, R0,	#0xC
		LDR	R5, =ch1_ADC_VAL
		LSRS	R0, R0,	#0x1C

loc_7B5C
		BNE	loc_7B7A
		BL	getInputStates
		LSLS	R0, R0,	#0xB
		BPL	loc_7B7A
		LDR	R0, =rxsettings
		LDRB	R0, [R0,#(stickModeSW -	0x200002A4)]
		CMP	R0, #1
		BEQ	loc_7C00
		CMP	R0, #3
		BEQ	loc_7C00
		LDR	R0, =(byte_DA0+0xC)
		LDR	R1, [R5,#(ch3_ADC_VAL -	0x20000F00)]
		CMP	R1, R0
		BHI	locret_7C74

loc_7B7A				; CODE XREF: startupWarning:loc_7B5Cj
					; startupWarning+30j ...
		BL	callSetupDMAandSend
		MOVS	R3, #0		; a4
		MOV	R2, R3		; a3
		MOVS	R1, #0x40 ; '@'	; a2
		LDR	R0, =aWarning	; text
		BL	displayTextAt2
		MOVS	R3, #0		; a4
		MOVS	R2, #0x10	; a3
		MOVS	R1, #0x40 ; '@'	; a2
		LDR	R0, =aPlaceAll	; text
		BL	displayTextAt2
		MOVS	R3, #0		; a4
		MOVS	R2, #0x18	; a3
		MOVS	R1, #0x40 ; '@'	; a2
		LDR	R0, =aSwitchesIn ; text
		BL	displayTextAt2
		MOVS	R3, #0		; a4
		MOVS	R2, #0x20 ; ' '	; a3
		MOVS	R1, #0x40 ; '@'	; a2
		LDR	R0, =aTheirUp	; text
		BL	displayTextAt2
		MOVS	R3, #0		; a4
		MOVS	R2, #0x28 ; '('	; a3
		MOVS	R1, #0x40 ; '@'	; a2
		LDR	R0, =aPositionAnd ; "position and"
		BL	displayTextAt2
		MOVS	R3, #0		; a4
		MOVS	R2, #0x30 ; '0'	; a3
		MOVS	R1, #0x40 ; '@'	; a2
		LDR	R0, =aLowerThe	; text
		BL	displayTextAt2
		MOVS	R3, #0		; a4
		MOVS	R2, #0x38 ; '8'	; a3
		MOVS	R1, #0x40 ; '@'	; a2
		LDR	R0, =aThrottle	; text
		BL	displayTextAt2
		BL	LCD_updateCALL
		MOVS	R1, #0x64 ; 'd'
		LDR	R0, =0x20B
		BL	beep
		MOVS	R0, #0xFF
		MOVS	R1, #0xFA ; 'ú'
		ADDS	R0, #0x73 ; 's'
		BL	beep
		LDR	R0, =timer
		LDR	R6, [R0]
		BL	getInputStates
		MOVS	R7, #0xB
		LDR	R5, =timer
		MOV	R4, R0
		LSLS	R7, R7,	#0x10

loc_7BF8				; CODE XREF: startupWarning+13Cj
		MOV	R0, R4
		TST	R0, R7
		BEQ	loc_7C0C
		B	loc_7C28
; ---------------------------------------------------------------------------

loc_7C00				; CODE XREF: startupWarning+38j
					; startupWarning+3Cj
		MOVS	R0, #0xFF
		LDR	R1, [R5,#8]
		ADDS	R0, #0xF5 ; 'õ'
		CMP	R1, R0
		BCC	locret_7C74
		B	loc_7B7A
; ---------------------------------------------------------------------------

loc_7C0C				; CODE XREF: startupWarning+C8j
		MVNS	R0, R4
		LSLS	R0, R0,	#0xB
		BMI	loc_7C28
		LDR	R0, =rxsettings
		LDRB	R0, [R0,#(stickModeSW -	0x200002A4)]
		CMP	R0, #1
		BEQ	loc_7C32
		CMP	R0, #3
		BEQ	loc_7C32
		LDR	R0, =ch1_ADC_VAL
		LDR	R1, [R0,#(ch3_ADC_VAL -	0x20000F00)]
		LDR	R0, =(byte_DA0+0xC)
		CMP	R1, R0
		BHI	locret_7C74

loc_7C28				; CODE XREF: startupWarning+CAj
					; startupWarning+DCj ...
		BL	sub_232C
		CMP	R0, #0
		BEQ	loc_7C40
		B	loc_7C46
; ---------------------------------------------------------------------------

loc_7C32				; CODE XREF: startupWarning+E4j
					; startupWarning+E8j
		LDR	R0, =ch1_ADC_VAL
		LDR	R1, [R0,#(ch3_ADC_VAL -	0x20000F00)]
		MOVS	R0, #0x1F4
		CMP	R1, R0
		BCC	locret_7C74
		B	loc_7C28
; ---------------------------------------------------------------------------

loc_7C40				; CODE XREF: startupWarning+FAj
		MOVS	R0, #1
		BL	adcMethod2

loc_7C46				; CODE XREF: startupWarning+FCj
		LDR	R0, [R5]
		SUBS	R1, R0,	R6
		MOVS	R0, #0x3E8
		CMP	R1, R0
		BCC	loc_7C66
		MOVS	R1, #0x64 ; 'd'
		LDR	R0, =0x20B
		BL	beep
		MOVS	R0, #0xFF
		MOVS	R1, #0xFA ; 'ú'
		ADDS	R0, #0x73 ; 's'
		BL	beep
		LDR	R6, [R5]

loc_7C66				; CODE XREF: startupWarning+11Cj
		BL	getInputStates
		MOV	R4, R0
		BL	sendPacketWithTimer
		B	loc_7BF8
; ---------------------------------------------------------------------------
		B	locret_7C74
; ---------------------------------------------------------------------------

locret_7C74				; CODE XREF: startupWarning+44j
					; startupWarning+D4j ...
		POP	{R3-R7,PC}
; End of function startupWarning

; ---------------------------------------------------------------------------
		ALIGN 4
off_7C78	DCD byte_1FFFF896	; DATA XREF: startupWarning+8r
off_7C7C	DCD ch1_ADC_VAL		; DATA XREF: startupWarning+24r
					; startupWarning+EAr ...
off_7C80	DCD rxsettings		; DATA XREF: startupWarning+32r
					; startupWarning+DEr
off_7C84	DCD byte_DA0+0xC	; DATA XREF: startupWarning+3Er
					; startupWarning+EEr
; _BYTE	*off_7C88
off_7C88	DCD aWarning		; DATA XREF: startupWarning+50r
					; "!! Warning !!"
; _BYTE	*off_7C8C
off_7C8C	DCD aPlaceAll		; DATA XREF: startupWarning+5Cr
					; "Place all"
; _BYTE	*off_7C90
off_7C90	DCD aSwitchesIn		; DATA XREF: startupWarning+68r
					; "switches in"
; _BYTE	*off_7C94
off_7C94	DCD aTheirUp		; DATA XREF: startupWarning+74r
					; "their up"
; _BYTE	*off_7C98
off_7C98	DCD aPositionAnd	; DATA XREF: startupWarning+80r
					; "position and"
; _BYTE	*off_7C9C
off_7C9C	DCD aLowerThe		; DATA XREF: startupWarning+8Cr
					; "lower the"
; _BYTE	*off_7CA0
off_7CA0	DCD aThrottle		; DATA XREF: startupWarning+98r
					; "throttle"
dword_7CA4	DCD 0x20B		; DATA XREF: startupWarning+A4r
					; startupWarning+120r
off_7CA8	DCD timer		; DATA XREF: startupWarning+B4r
					; startupWarning+BEr

; =============== S U B	R O U T	I N E =======================================


sub_7CAC				; DATA XREF: ROM:0000D27Co

var_48		= -0x48
var_47		= -0x47
var_45		= -0x45
var_43		= -0x43
text		= -0x28

		PUSH	{R4-R7,LR}
		LDR	R4, =byte_20000000
		SUB	SP, SP,	#0x34
		MOVS	R5, #0
		STR	R5, [R4,#(dword_20000044 - 0x20000000)]
		STR	R5, [R4,#(dword_20000048 - 0x20000000)]
		LDR	R1, =sendingPacket
		MOVS	R0, #1
		STR	R5, [R4,#(dword_2000004C - 0x20000000)]
		MOVS	R6, #0x4B ; 'K'
		STRB	R0, [R1]
		LSLS	R6, R6,	#5
		LDR	R7, =off_200000F4

loc_7CC6				; CODE XREF: sub_7CAC+EAj
					; sub_7CAC:loc_7DB2j ...
		BL	callSetupDMAandSend
		ADR	R0, aRfFrequency ; "RF frequency"
		BL	displayPageHeader
		MOVS	R2, #8		; y
		MOVS	R3, #0		; a4
		MOV	R1, R2		; x
		ADR	R0, aFrequency	; "Frequency"
		BL	displayTextAt
		LDR	R0, [R4,#(dword_20000044 - 0x20000000)]
		LSLS	R1, R0,	#0x1F
		LSRS	R1, R1,	#0x1F
		LSLS	R2, R1,	#2
		ADDS	R3, R1,	R2
		LSRS	R0, R0,	#1
		ADDS	R2, R0,	R6
		ADR	R1, aU_U	; "%u.%u"
		ADD	R0, SP,	#0x48+text
		BL	sprintf
		MOVS	R3, #0		; a4
		MOVS	R2, #0x10	; a3
		MOVS	R1, #0x40 ; '@'	; a2
		ADD	R0, SP,	#0x48+text ; text
		BL	displayTextAt2
		MOVS	R3, #0		; a4
		MOVS	R2, #0x1C	; y
		MOVS	R1, #8		; x
		ADR	R0, aMode	; "Mode"
		BL	displayTextAt
		LDR	R0, [R4,#(dword_20000048 - 0x20000000)]
		MOVS	R3, #0		; a4
		LSLS	R0, R0,	#2
		LDR	R0, [R7,R0]	; text
		MOVS	R2, #0x24 ; '$' ; a3
		MOVS	R1, #0x40 ; '@'	; a2
		BL	displayTextAt2
		MOVS	R3, #0		; a4
		MOVS	R2, #0x30 ; '0'	; y
		MOVS	R1, #8		; x
		ADR	R0, aAnt	; "Ant"
		BL	displayTextAt
		LDR	R0, [R4,#(dword_2000004C - 0x20000000)]
		MOVS	R3, #0		; a4
		LSLS	R1, R0,	#2
		LDR	R0, =aA		; "`í"
		MOVS	R2, #0x38 ; '8'	; a3
		LDR	R0, [R0,R1]	; text
		MOVS	R1, #0x40 ; '@'	; a2
		BL	displayTextAt2
		MOV	R2, R5
		MOVS	R0, #0x14
		MULS	R2, R0
		ADDS	R2, #8
		MOVS	R1, #0
		LDR	R0, =arrow_gfx
		BL	displayGFX
		BL	LCD_updateCALL
		MOVS	R2, #0xFF	; a3
		MOVS	R1, #0x1D	; numbButesToSend
		MOV	R0, SP		; targetAddress
		BL	setupDMA
		MOVS	R1, #0x54 ; 'T'
		MOV	R0, SP		; targetAddress
		STRB	R1, [R0,#0x48+var_48]
		LDR	R1, [R4,#(dword_20000044 - 0x20000000)]
		STRB	R1, [R0,#0x48+var_47]
		LSRS	R1, R1,	#8
		STRB	R1, [R0,#0x48+var_47+1]
		LDR	R1, [R4,#(dword_20000048 - 0x20000000)]
		STRB	R1, [R0,#0x48+var_45]
		LSRS	R1, R1,	#8
		STRB	R1, [R0,#0x48+var_45+1]
		LDR	R1, [R4,#(dword_2000004C - 0x20000000)]
		STRB	R1, [R0,#0x48+var_43]
		LSRS	R1, R1,	#8
		STRB	R1, [R0,#0x48+var_43+1]
		BL	sendPacketToRadio
		BL	getKeyCode
		CMP	R0, #0xA
		BEQ	loc_7DA2
		CMP	R0, #8
		BEQ	loc_7DB6
		CMP	R0, #0x18
		BEQ	loc_7DB6
		CMP	R0, #9
		BEQ	loc_7DFE
		CMP	R0, #0x17
		BEQ	loc_7DFE
		CMP	R0, #0x19
		BEQ	loc_7D98
		CMP	R0, #0xB
		BNE	loc_7CC6

loc_7D98				; CODE XREF: sub_7CAC+E6j
		LDR	R1, =sendingPacket
		MOVS	R0, #0
		STRB	R0, [R1]
		ADD	SP, SP,	#0x34
		POP	{R4-R7,PC}
; ---------------------------------------------------------------------------

loc_7DA2				; CODE XREF: sub_7CAC+D2j
		CMP	R5, #2
		BCC	loc_7DAA
		MOVS	R5, #0
		B	loc_7DAC
; ---------------------------------------------------------------------------

loc_7DAA				; CODE XREF: sub_7CAC+F8j
		ADDS	R5, #1

loc_7DAC				; CODE XREF: sub_7CAC+FCj
		BL	sub_9BC0
		CMP	R0, #2

loc_7DB2				; CODE XREF: sub_7CAC+124j
		BCC	loc_7CC6
		B	loc_7E1A
; ---------------------------------------------------------------------------

loc_7DB6				; CODE XREF: sub_7CAC+D6j sub_7CAC+DAj
		CMP	R5, #0
		BEQ	loc_7DD4
		CMP	R5, #1
		BEQ	loc_7DEA
		CMP	R5, #2
		BNE	loc_7CC6
		LDR	R1, [R4,#0x4C]
		MOVS	R0, #1
		EORS	R1, R0
		STR	R1, [R4,#0x4C]
		BL	sub_9BC0
		CMP	R0, #2
		BCC	loc_7DB2
		B	loc_7E1A
; ---------------------------------------------------------------------------

loc_7DD4				; CODE XREF: sub_7CAC+10Cj
		LDR	R0, [R4,#0x44]
		CMP	R0, #0
		BNE	loc_7DDC

loc_7DDA				; CODE XREF: sub_7CAC+13Aj
					; sub_7CAC+142j ...
		B	loc_7CC6
; ---------------------------------------------------------------------------

loc_7DDC				; CODE XREF: sub_7CAC+12Cj
		SUBS	R0, #1
		STR	R0, [R4,#0x44]
		BL	sub_9BC0
		CMP	R0, #2
		BCC	loc_7DDA
		B	loc_7E1A
; ---------------------------------------------------------------------------

loc_7DEA				; CODE XREF: sub_7CAC+110j
		LDR	R0, [R4,#0x48]
		CMP	R0, #0
		BEQ	loc_7DDA
		SUBS	R0, #1
		STR	R0, [R4,#0x48]
		BL	sub_9BC0
		CMP	R0, #2
		BCC	loc_7DDA
		B	loc_7E1A
; ---------------------------------------------------------------------------

loc_7DFE				; CODE XREF: sub_7CAC+DEj sub_7CAC+E2j
		CMP	R5, #0
		BEQ	loc_7E2E
		CMP	R5, #1
		BEQ	loc_7E42
		CMP	R5, #2
		BNE	loc_7DDA
		LDR	R0, [R4,#0x4C]
		MOVS	R1, #1
		EORS	R0, R1
		STR	R0, [R4,#0x4C]
		BL	sub_9BC0
		CMP	R0, #2
		BCC	loc_7DDA

loc_7E1A				; CODE XREF: sub_7CAC+108j
					; sub_7CAC+126j ...
		MOVS	R0, #0x31 ; '1'
		MOVS	R1, #0xF
		LSLS	R0, R0,	#4
		BL	beep
		MOVS	R1, #0xF
		MOVS	R0, #0
		BL	beep
		B	loc_7CC6
; ---------------------------------------------------------------------------

loc_7E2E				; CODE XREF: sub_7CAC+154j
		LDR	R0, [R4,#0x44]
		CMP	R0, #0xA6 ; '¦'
		BCS	loc_7DDA
		ADDS	R0, #1
		STR	R0, [R4,#0x44]
		BL	sub_9BC0
		CMP	R0, #2
		BCC	loc_7DDA
		B	loc_7E1A
; ---------------------------------------------------------------------------

loc_7E42				; CODE XREF: sub_7CAC+158j
		LDR	R0, [R4,#0x48]
		CMP	R0, #2
		BCS	loc_7DDA
		ADDS	R0, #1
		STR	R0, [R4,#0x48]
		BL	sub_9BC0
		CMP	R0, #2
		BCC	loc_7DDA
		B	loc_7E1A
; End of function sub_7CAC

; ---------------------------------------------------------------------------
		ALIGN 4
off_7E58	DCD byte_20000000	; DATA XREF: sub_7CAC+2r
off_7E5C	DCD sendingPacket	; DATA XREF: sub_7CAC+Cr
					; sub_7CAC:loc_7D98r
off_7E60	DCD off_200000F4	; DATA XREF: sub_7CAC+18r
aRfFrequency	DCB "RF frequency",0    ; DATA XREF: sub_7CAC+1Eo
		DCB 0, 0, 0
aFrequency	DCB "Frequency",0       ; DATA XREF: sub_7CAC+2Ao
		ALIGN 0x10
aU_U		DCB "%u.%u",0           ; DATA XREF: sub_7CAC+3Eo
		ALIGN 4
aMode		DCB "Mode",0            ; DATA XREF: sub_7CAC+58o
		DCB 0, 0, 0
aAnt		DCB "Ant",0             ; DATA XREF: sub_7CAC+74o
off_7E94	DCD aA			; DATA XREF: sub_7CAC+80r
					; "`í"
off_7E98	DCD arrow_gfx		; DATA XREF: sub_7CAC+96r

; =============== S U B	R O U T	I N E =======================================


sub_7E9C				; CODE XREF: ROM:00007A6Cp
		LDR	R0, =byte_2000016C
		LDRB	R1, [R0,#(byte_20000171	- 0x2000016C)]
		CMP	R1, #5
		BEQ	loc_7EAC
		CMP	R1, #6
		BEQ	loc_7EAC
		CMP	R1, #7
		BNE	locret_7EC0

loc_7EAC				; CODE XREF: sub_7E9C+6j sub_7E9C+Aj
		LDRB	R1, [R0,#(byte_20000178	- 0x2000016C)]
		CMP	R1, #3
		BEQ	locret_7EC0
		MOVS	R1, #1
		STRB	R1, [R0,#(byte_2000017A	- 0x2000016C)]
		LDRB	R1, [R0,#(byte_20000172	- 0x2000016C)]
		CMP	R1, #6
		BNE	locret_7EC0
		MOVS	R1, #2
		STRB	R1, [R0,#(byte_20000171	- 0x2000016C)]

locret_7EC0				; CODE XREF: sub_7E9C+Ej sub_7E9C+14j	...
		BX	LR
; End of function sub_7E9C

; ---------------------------------------------------------------------------
		ALIGN 4
off_7EC4	DCD byte_2000016C	; DATA XREF: sub_7E9Cr

; =============== S U B	R O U T	I N E =======================================


callSendPacket				; CODE XREF: sendPacketWithTimer+18p
					; timerSendPacket+2Cp
		PUSH	{R4,LR}
		BL	sendPAcket
		POP	{R4,PC}
; End of function callSendPacket


; =============== S U B	R O U T	I N E =======================================


sendSettingsPacket			; CODE XREF: trySendSettingsPacket+18p
		PUSH	{R3-R7,LR}
		LDR	R0, =byte_2000013C
		MOVS	R7, #0
		LDRB	R0, [R0,#(resend1FFFFCF5 - 0x2000013C)]
		CMP	R0, #0
		BEQ	loc_7EEC
		MOVS	R2, #0x1D
		LDR	R1, =(dword_1FFFFCF4+1)
		LDR	R0, =dword_1FFFFCD8
		BL	memcpy
		LDR	R0, =byte_2000013C
		STRB	R7, [R0,#(resend1FFFFCF5 - 0x2000013C)]
		B	loc_7FEA
; ---------------------------------------------------------------------------

loc_7EEC				; CODE XREF: sendSettingsPacket+Aj
		LDR	R6, =byte_2000013C
		LDRB	R0, [R6,#(sendingPacket	- 0x2000013C)]
		CMP	R0, #0
		BEQ	loc_7EF8
		MOVS	R0, #0
		POP	{R3-R7,PC}
; ---------------------------------------------------------------------------

loc_7EF8				; CODE XREF: sendSettingsPacket+22j
		LDR	R1, =rxsettings
		MOVS	R2, #0x92 ; ''
		LDRB	R0, [R1,#(currentModel - 0x200002A4)]
		LDR	R3, [R6,#(dword_20000140 - 0x2000013C)]
		MULS	R0, R2
		ADDS	R5, R0,	R1
		MOV	R2, R5
		ADDS	R2, #0x60 ; '`'
		LDR	R4, =dword_1FFFFCD8
		CMP	R3, #0
		BNE	loc_7F68
		LDRB	R3, [R2,#0xA]
		CMP	R3, #0
		BEQ	loc_7F68
		MOVS	R2, #0x56 ; 'V'
		STRB	R2, [R4]
		MOVS	R5, #0
		LDR	R6, =0xFFFF
		MOV	R7, R1
		B	loc_7F24
; ---------------------------------------------------------------------------

loc_7F20				; CODE XREF: sendSettingsPacket+94j
		CMP	R5, #6
		BCS	loc_7F54

loc_7F24				; CODE XREF: sendSettingsPacket+4Ej
		LDRB	R0, [R7,#(currentModel - 0x200002A4)]
		MOVS	R1, #0x92 ; ''
		MULS	R0, R1
		ADDS	R0, R0,	R7
		LSLS	R1, R5,	#1
		ADDS	R0, R0,	R1
		ADDS	R0, #0x71 ; 'q'
		LDRB	R1, [R0,#3]
		LDRB	R2, [R0,#2]
		LSLS	R0, R1,	#0x18
		ASRS	R0, R0,	#0x10
		LDR	R1, =(loc_7FFE+1)
		ORRS	R0, R2
		CMP	R0, R1
		BEQ	loc_7F54
		MOVS	R1, #0x258
		MULS	R0, R1
		LDR	R1, =0x2EE0
		BL	div__0
		LDR	R1, =unk_5DC
		ADDS	R0, R0,	R1
		B	loc_7F56
; ---------------------------------------------------------------------------

loc_7F54				; CODE XREF: sendSettingsPacket+52j
					; sendSettingsPacket+70j
		MOV	R0, R6

loc_7F56				; CODE XREF: sendSettingsPacket+82j
		LSLS	R1, R5,	#1
		ADDS	R1, R1,	R4
		STRB	R0, [R1,#1]
		LSRS	R0, R0,	#8
		ADDS	R5, #1
		STRB	R0, [R1,#2]
		CMP	R5, #0xE
		BCC	loc_7F20
		B	loc_7FEA
; ---------------------------------------------------------------------------

loc_7F68				; CODE XREF: sendSettingsPacket+3Cj
					; sendSettingsPacket+42j
		LDRB	R1, [R6,#3]
		CMP	R1, #0
		BEQ	loc_7FAA
		MOVS	R2, #0xFF	; a3
		MOVS	R1, #0x1D	; numbButesToSend
		LDR	R0, =dword_1FFFFCD8 ; targetAddress
		BL	setupDMA
		MOVS	R0, #0xAA ; 'ª'
		STRB	R0, [R4]
		MOVS	R0, #0xFD ; 'ý'
		STRB	R0, [R4,#1]
		MOVS	R0, #0xFF
		STRB	R0, [R4,#2]
		MOVS	R1, R5
		ADDS	R1, #0x64 ; 'd'
		LDRB	R0, [R1,#0xD]
		STRB	R0, [R4,#3]
		LDRB	R0, [R1,#0xE]
		STRB	R0, [R4,#4]
		LDRB	R0, [R1,#7]
		MOVS	R2, #1
		ANDS	R2, R0
		STRB	R2, [R4,#5]
		STRB	R7, [R4,#6]
		LSRS	R0, R0,	#1
		MOVS	R2, #0xDE ; 'Þ'
		SUBS	R2, R2,	R0
		STRB	R2, [R4,#0xD]
		NOP
		STR	R7, [R6,#4]
		STRB	R7, [R6,#3]
		B	loc_7FFA
; ---------------------------------------------------------------------------

loc_7FAA				; CODE XREF: sendSettingsPacket+9Cj
		LDRB	R1, [R2,#0xA]
		CMP	R1, #0
		BEQ	loc_7FB4
		MOVS	R1, #0x58 ; 'X'
		B	loc_7FB6
; ---------------------------------------------------------------------------

loc_7FB4				; CODE XREF: sendSettingsPacket+DEj
		MOVS	R1, #0x57 ; 'W'

loc_7FB6				; CODE XREF: sendSettingsPacket+E2j
		STRB	R1, [R4]
		MOVS	R5, #0
		LDR	R7, =dword_1FFFFDE0
		LDR	R6, =unk_5DC
		B	loc_7FC4
; ---------------------------------------------------------------------------

loc_7FC0				; CODE XREF: sendSettingsPacket+118j
		CMP	R5, #0xA
		BCS	loc_7FD8

loc_7FC4				; CODE XREF: sendSettingsPacket+EEj
		LSLS	R0, R5,	#2
		LDR	R0, [R7,R0]
		MOVS	R1, #0x258
		MULS	R0, R1
		LDR	R1, =0x2EE0
		BL	div__0
		ADDS	R0, R0,	R6
		B	loc_7FDA
; ---------------------------------------------------------------------------

loc_7FD8				; CODE XREF: sendSettingsPacket+F2j
		MOV	R0, R6

loc_7FDA				; CODE XREF: sendSettingsPacket+106j
		LSLS	R1, R5,	#1
		ADDS	R1, R1,	R4
		STRB	R0, [R1,#1]
		LSRS	R0, R0,	#8
		ADDS	R5, #1
		STRB	R0, [R1,#2]
		CMP	R5, #0xE
		BCC	loc_7FC0

loc_7FEA				; CODE XREF: sendSettingsPacket+1Aj
					; sendSettingsPacket+96j
		LDR	R1, =byte_2000013C
		LDR	R0, [R1,#(dword_20000140 - 0x2000013C)]
		CMP	R0, #0
		BEQ	loc_7FFA
		SUBS	R0, #1
		STR	R0, [R1,#(dword_20000140 - 0x2000013C)]

loc_7FF6				; CODE XREF: sendSettingsPacket+132j
		MOVS	R0, #1
		POP	{R3-R7,PC}
; ---------------------------------------------------------------------------

loc_7FFA				; CODE XREF: sendSettingsPacket+D8j
					; sendSettingsPacket+120j
		MOVS	R1, #0x7D ; '}'
		LDR	R0, =byte_2000013C

loc_7FFE				; DATA XREF: sendSettingsPacket+6Ao
					; ROM:off_8018o
		LSLS	R1, R1,	#3

loc_8000				; DATA XREF: calibrateADC+46o
					; ROM:off_2318o
		STR	R1, [R0,#(dword_20000140 - 0x2000013C)]
		B	loc_7FF6
; End of function sendSettingsPacket

; ---------------------------------------------------------------------------
off_8004	DCD byte_2000013C	; DATA XREF: sendSettingsPacket+2r
					; sendSettingsPacket+16r ...
off_8008	DCD dword_1FFFFCF4+1	; DATA XREF: sendSettingsPacket+Er
; _WORD	*off_800C
off_800C	DCD dword_1FFFFCD8	; DATA XREF: sendSettingsPacket+10r
					; sendSettingsPacket+38r ...
off_8010	DCD rxsettings		; DATA XREF: sendSettingsPacket:loc_7EF8r
dword_8014	DCD 0xFFFF		; DATA XREF: sendSettingsPacket+4Ar
off_8018	DCD loc_7FFE+1		; DATA XREF: sendSettingsPacket+6Ar
dword_801C	DCD 0x2EE0		; DATA XREF: sendSettingsPacket+78r
					; sendSettingsPacket+FEr
off_8020	DCD unk_5DC		; DATA XREF: sendSettingsPacket+7Er
					; sendSettingsPacket+ECr
off_8024	DCD dword_1FFFFDE0	; DATA XREF: sendSettingsPacket+EAr

; =============== S U B	R O U T	I N E =======================================


sub_8028				; CODE XREF: sendPacketToRadio+30p
					; sendPacketToRadio+CAp ...
		LDR	R0, =0x40038000
		LDR	R1, [R0]
		MOVS	R2, #0x18
		BICS	R1, R2
		STR	R1, [R0]
		BX	LR
; End of function sub_8028

; ---------------------------------------------------------------------------
dword_8034	DCD 0x40038000		; DATA XREF: sub_8028r

; =============== S U B	R O U T	I N E =======================================


sub_8038				; CODE XREF: sendPacketToRadio+44p
					; sendPacketToRadio+DCp ...
		LDR	R0, =0x40038000
		LDR	R1, [R0]
		MOVS	R2, #0x18
		BICS	R1, R2
		ADDS	R1, #8
		STR	R1, [R0]
		BX	LR
; End of function sub_8038

; ---------------------------------------------------------------------------
		ALIGN 4
dword_8048	DCD 0x40038000		; DATA XREF: sub_8038r

; =============== S U B	R O U T	I N E =======================================


configurePINandTimers			; CODE XREF: main_screen+D0p
		PUSH	{R4,LR}
		MOVS	R0, #0xFF
		LDR	R1, =0x4004B000
		ADDS	R0, #1
		STR	R0, [R1,#0x1C]
		STR	R0, [R1,#0xC]
		LDR	R1, =0x4004D000
		STR	R0, [R1,#4]
		STR	R0, [R1]
		LDR	R0, =0x400FF080
		LDR	R0, [R0,#0x14]
		MOVS	R1, #0x88 ; ''
		ORRS	R0, R1
		LDR	R1, =0x400FF080
		STR	R0, [R1,#0x14]
		LDR	R0, =0x400FF100
		LDR	R1, [R0,#0x14]
		LSRS	R1, R1,	#4
		LSLS	R1, R1,	#4
		ADDS	R1, #3
		STR	R1, [R0,#0x14]
		LDR	R1, =0x4004C000
		LDR	R0, =0xA0100
		STR	R0, [R1,#0xC]
		LDR	R0, =0xE000E41C
		LDR	R1, [R0]
		MOVS	R3, #1
		LSLS	R1, R1,	#8
		LSRS	R1, R1,	#8
		MOVS	R2, #3
		LSLS	R3, R3,	#0x1E
		ORRS	R1, R3
		STR	R1, [R0]
		LDR	R0, =0xE000E100
		LDR	R1, [R0]
		LSLS	R3, R0,	#0x17
		ORRS	R1, R3
		STR	R1, [R0]
		LDR	R1, =0x40048000
		LDR	R3, [R1,#0x3C]
		MOVS	R4, #0x1000000
		ORRS	R3, R4
		STR	R3, [R1,#0x3C]
		LDR	R1, =0x40038000
		STR	R2, [R1]
		LDR	R2, =0xFFFF
		STR	R2, [R1,#8]
		MOVS	R2, #0x54 ; 'T'
		STR	R2, [R1,#0xC]
		LDR	R2, =0xE000E410
		LDR	R1, [R2]
		MOVS	R3, #0xFF
		MOVS	R4, #1
		LSLS	R3, R3,	#8
		BICS	R1, R3
		STR	R1, [R2]
		LDR	R1, [R0]
		LSLS	R2, R4,	#0x11
		ORRS	R1, R2
		STR	R1, [R0]
		BL	sub_8AD4
		LDR	R0, =byte_2000013C
		STRB	R4, [R0]
		POP	{R4,PC}
; End of function configurePINandTimers

; ---------------------------------------------------------------------------
PortCMultiplexingCTR DCD 0x4004B000	; DATA XREF: configurePINandTimers+4r
PortEmultiplexingCTR DCD 0x4004D000	; DATA XREF: configurePINandTimers+Cr
PortCDataOutputReg_2 DCD 0x400FF080	; DATA XREF: configurePINandTimers+12r
					; configurePINandTimers+1Ar
PortEDataOutputReg_0 DCD 0x400FF100	; DATA XREF: configurePINandTimers+1Er
dword_80E0	DCD 0xA0100		; DATA XREF: configurePINandTimers+2Cr
PortDmultiplexingCTR DCD 0x4004C000	; DATA XREF: configurePINandTimers+2Ar
dword_80E8	DCD 0xE000E41C		; DATA XREF: configurePINandTimers+30r
dword_80EC	DCD 0xE000E100		; DATA XREF: configurePINandTimers+42r
SIM		DCD 0x40048000		; DATA XREF: configurePINandTimers+4Cr
TPM0_StatusControl DCD 0x40038000	; DATA XREF: configurePINandTimers+58r
dword_80F8	DCD 0xFFFF		; DATA XREF: configurePINandTimers+5Cr
dword_80FC	DCD 0xE000E410		; DATA XREF: configurePINandTimers+64r
off_8100	DCD byte_2000013C	; DATA XREF: configurePINandTimers+7Er

; =============== S U B	R O U T	I N E =======================================


callRxpacketHandle			; CODE XREF: sendPacketToRadio+28Ap
					; sendPAcket:loc_86C4p	...
		PUSH	{R4,LR}
		BL	rxpacketHandle
		POP	{R4,PC}
; End of function callRxpacketHandle


; =============== S U B	R O U T	I N E =======================================


sub_810C				; CODE XREF: sendPacketToRadio+3Ap
					; sendPacketToRadio+D2p ...
		LDR	R1, =0x40038000
		MOVS	R0, #0
		STR	R0, [R1,#4]
		BX	LR
; End of function sub_810C

; ---------------------------------------------------------------------------
dword_8114	DCD 0x40038000		; DATA XREF: sub_810Cr

; =============== S U B	R O U T	I N E =======================================


addPacketToResend1FFFFCF5When2000013C	; CODE XREF: afhd2Init+62p
					; modelSelectPage+12Ap	...

var_30		= -0x30

		PUSH	{R4,R5,LR}
		LDR	R4, =byte_2000013C
		SUB	SP, SP,	#0x24
		LDRB	R1, [R4]
		CMP	R1, #0
		BEQ	loc_8154
		MOV	R1, SP
		STRB	R0, [R1,#0x30+var_30]
		ADD	R0, SP,	#0x30+var_30
		MOVS	R2, #0xFF	; a3
		MOVS	R1, #0x1C	; numbButesToSend
		ADDS	R0, #1		; targetAddress
		BL	setupDMA
		LDRB	R0, [R4,#(resend1FFFFCF5 - 0x2000013C)]
		MOV	R5, SP
		CMP	R0, #0
		BEQ	loc_8146

loc_813C				; CODE XREF: addPacketToResend1FFFFCF5When2000013C+2Cj
		BL	sendPacketWithTimer
		LDRB	R0, [R4,#(resend1FFFFCF5 - 0x2000013C)]
		CMP	R0, #0
		BNE	loc_813C

loc_8146				; CODE XREF: addPacketToResend1FFFFCF5When2000013C+22j
		MOVS	R2, #0x1D
		MOV	R1, R5
		LDR	R0, =(dword_1FFFFCF4+1)
		BL	memcpy
		MOVS	R0, #1
		STRB	R0, [R4,#(resend1FFFFCF5 - 0x2000013C)]

loc_8154				; CODE XREF: addPacketToResend1FFFFCF5When2000013C+Aj
		ADD	SP, SP,	#0x24
		POP	{R4,R5,PC}
; End of function addPacketToResend1FFFFCF5When2000013C

; ---------------------------------------------------------------------------
off_8158	DCD byte_2000013C	; DATA XREF: addPacketToResend1FFFFCF5When2000013C+2r
off_815C	DCD dword_1FFFFCF4+1	; DATA XREF: addPacketToResend1FFFFCF5When2000013C+32r

; =============== S U B	R O U T	I N E =======================================


; char *__fastcall sendPacketToRadio(_BYTE *targetAddress, char	*a2, int a3)
sendPacketToRadio			; CODE XREF: afhd2Init+5Cp
					; modelSelectPage+124p	...

var_38		= -0x38
var_37		= -0x37
var_36		= -0x36
var_35		= -0x35
var_33		= -0x33
var_31		= -0x31
var_30		= -0x30
var_18		= -0x18

		PUSH	{R4-R7,LR}
		MOV	R5, R0
		LDRB	R0, [R0]
		SUB	SP, SP,	#0x24
		CMP	R0, #0
		BEQ	loc_8240
		SUBS	R0, #0xC0 ; 'À'
		MOVS	R6, #0
		CMP	R0, #0x10
		BCC	loc_81AA
		LDR	R4, =byte_2000016C
		LDRB	R1, [R4,#(byte_20000178	- 0x2000016C)]
		MOV	R0, R4
		LDRB	R0, [R0,#(byte_20000172	- 0x2000016C)]
		CMP	R1, #3
		BEQ	loc_8186
		CMP	R0, #6
		BEQ	loc_818A
		B	loc_81AA
; ---------------------------------------------------------------------------

loc_8186				; CODE XREF: sendPacketToRadio+1Ej
		CMP	R0, #6
		BNE	loc_81A8

loc_818A				; CODE XREF: sendPacketToRadio+22j
		MOVS	R0, #7
		STRB	R0, [R4,#(byte_20000173	- 0x2000016C)]
		MOVS	R7, #5
		BL	sub_8028
		MOVS	R0, #1
		STR	R0, [R4,#(dword_20000184 - 0x2000016C)]
		STRB	R7, [R4,#(byte_20000171	- 0x2000016C)]
		BL	sub_810C
		MOVS	R0, #1
		BL	sub_8540
		BL	sub_8038

loc_81A8				; CODE XREF: sendPacketToRadio+28j
		STRB	R6, [R4,#(byte_20000178	- 0x2000016C)]

loc_81AA				; CODE XREF: sendPacketToRadio+12j
					; sendPacketToRadio+24j
		LDRB	R0, [R5]
		ADDS	R4, R5,	#1
		CMP	R0, #0x9A ; ''
		BEQ	loc_82AA
		BGT	loc_81E2
		CMP	R0, #0x55 ; 'U'
		BEQ	loc_82AC
		BGT	loc_81D0
		SUBS	R0, #0x50 ; 'P'
		CMP	R0, #5		; switch 5 cases
		BCS	def_81C8	; jumptable 000081C8 default case
		MOVS	R3, R0
		ADD	R3, PC
		LDRB	R3, [R3,#4]
		ADDS	R3, R3,	R3
		ADD	PC, R3		; switch jump
; ---------------------------------------------------------------------------
jpt_81C8	DCB 0xFD		; jump table for switch	statement
		DCB 0xFC
		DCB 0xFB
		DCB 0xBA
		DCB 0xFA
		ALIGN 2

loc_81D0				; CODE XREF: sendPacketToRadio+58j
		CMP	R0, #0x56 ; 'V'
		BEQ	def_81C8	; jumptable 000081C8 default case
		CMP	R0, #0x57 ; 'W'
		BEQ	loc_82AC
		CMP	R0, #0x58 ; 'X'
		BEQ	loc_82DC
		CMP	R0, #0x99 ; ''
		BNE	def_81C8	; jumptable 000081C8 default case
		B	loc_8372
; ---------------------------------------------------------------------------

loc_81E2				; CODE XREF: sendPacketToRadio+52j
		CMP	R0, #0xC0 ; 'À'
		BEQ	def_81C8	; jumptable 000081C8 default case
		BGT	loc_81F6
		CMP	R0, #0x9B ; ''
		BEQ	loc_82D2
		CMP	R0, #0xA5 ; '¥'
		BEQ	loc_8208
		CMP	R0, #0xA6 ; '¦'
		BNE	def_81C8	; jumptable 000081C8 default case
		B	loc_82D4
; ---------------------------------------------------------------------------

loc_81F6				; CODE XREF: sendPacketToRadio+86j
		CMP	R0, #0xC1 ; 'Á'
		BEQ	loc_8244
		CMP	R0, #0xC2 ; 'Â'
		BEQ	loc_82B4
		CMP	R0, #0xC3 ; 'Ã'
		BEQ	loc_82B4
		CMP	R0, #0xC4 ; 'Ä'
		BNE	def_81C8	; jumptable 000081C8 default case
		B	loc_82B4
; ---------------------------------------------------------------------------

loc_8208				; CODE XREF: sendPacketToRadio+8Ej
		LDR	R4, =byte_2000016C
		LDRB	R0, [R4,#(byte_20000178	- 0x2000016C)]
		LDRB	R1, [R4]
		ORRS	R0, R1
		BNE	loc_8240
		MOVS	R5, #1
		STRB	R5, [R4,#(byte_20000178	- 0x2000016C)]
		STRB	R6, [R4,#(byte_20000179	- 0x2000016C)]
		MOVS	R0, #0x32 ; '2'
		STRB	R0, [R4]
		LDRB	R0, [R4,#(byte_20000171	- 0x2000016C)]
		CMP	R0, #0
		BEQ	loc_8228
		LDRB	R0, [R4,#(byte_20000172	- 0x2000016C)]
		CMP	R0, #3
		BNE	loc_8240

loc_8228				; CODE XREF: sendPacketToRadio+C0j
		MOVS	R6, #5
		BL	sub_8028
		STR	R5, [R4,#(dword_20000184 - 0x2000016C)]
		STRB	R6, [R4,#(byte_20000171	- 0x2000016C)]
		BL	sub_810C
		MOVS	R0, #1
		BL	sub_8540
		BL	sub_8038

loc_8240				; CODE XREF: sendPacketToRadio+Aj
					; sendPacketToRadio+B0j ...
		ADD	SP, SP,	#0x24
		POP	{R4-R7,PC}
; ---------------------------------------------------------------------------

loc_8244				; CODE XREF: sendPacketToRadio+98j
		LDR	R7, =byte_2000016C
		LDRB	R0, [R7,#(byte_20000171	- 0x2000016C)]
		CMP	R0, #0
		BEQ	loc_8252
		LDRB	R0, [R7,#(byte_20000172	- 0x2000016C)]
		CMP	R0, #3
		BNE	loc_8270

loc_8252				; CODE XREF: sendPacketToRadio+EAj
		MOVS	R0, #5
		STR	R0, [SP,#0x38+var_18]
		BL	sub_8028
		MOVS	R0, #1
		STR	R0, [R7,#(dword_20000184 - 0x2000016C)]
		LDR	R0, [SP,#0x38+var_18]
		STRB	R0, [R7,#(byte_20000171	- 0x2000016C)]
		BL	sub_810C
		MOVS	R0, #1
		BL	sub_8540
		BL	sub_8038

loc_8270				; CODE XREF: sendPacketToRadio+F0j
		LDRB	R2, [R4]
		LDRB	R1, [R4,#3]
		MOV	R0, R2
		LDRB	R2, [R4,#1]
		LSLS	R2, R2,	#8
		ORRS	R0, R2
		LDRB	R2, [R4,#2]
		LSLS	R2, R2,	#0x10
		ORRS	R0, R2
		LSLS	R1, R1,	#0x18
		ORRS	R0, R1
		BEQ	loc_82AE
		STRB	R6, [R7,#(byte_20000178	- 0x2000016C)]
		MOVS	R0, #6
		STRB	R0, [R7,#(byte_20000173	- 0x2000016C)]
		MOVS	R4, #5
		BL	sub_8028
		MOVS	R0, #1
		STR	R0, [R7,#(dword_20000184 - 0x2000016C)]
		STRB	R4, [R7,#(byte_20000171	- 0x2000016C)]
		BL	sub_810C
		MOVS	R0, #1
		BL	sub_8540
		BL	sub_8038

def_81C8				; CODE XREF: sendPacketToRadio+5Ej
					; sendPacketToRadio+72j ...
		B	loc_8340	; jumptable 000081C8 default case
; ---------------------------------------------------------------------------

loc_82AA				; CODE XREF: sendPacketToRadio+50j
		B	loc_8392
; ---------------------------------------------------------------------------

loc_82AC				; CODE XREF: sendPacketToRadio+56j
					; sendPacketToRadio+76j
		B	loc_82DC
; ---------------------------------------------------------------------------

loc_82AE				; CODE XREF: sendPacketToRadio+126j
		MOVS	R0, #3
		STRB	R0, [R7,#(byte_20000178	- 0x2000016C)]
		B	loc_8340	; jumptable 000081C8 case 3
; ---------------------------------------------------------------------------

loc_82B4				; CODE XREF: sendPacketToRadio+9Cj
					; sendPacketToRadio+A0j ...
		MOVS	R4, #5
		BL	sub_8028
		LDR	R0, =byte_2000016C
		MOVS	R1, #1
		STR	R1, [R0,#(dword_20000184 - 0x2000016C)]
		STRB	R4, [R0,#(byte_20000171	- 0x2000016C)]
		BL	sub_810C
		MOVS	R0, #1
		BL	sub_8540
		BL	sub_8038
		B	loc_8340	; jumptable 000081C8 case 3
; ---------------------------------------------------------------------------

loc_82D2				; CODE XREF: sendPacketToRadio+8Aj
		B	loc_8354
; ---------------------------------------------------------------------------

loc_82D4				; CODE XREF: sendPacketToRadio+94j
		LDR	R0, =byte_2000016C
		STRB	R6, [R0,#(byte_20000178	- 0x2000016C)]
		ADD	SP, SP,	#0x24
		POP	{R4-R7,PC}
; ---------------------------------------------------------------------------

loc_82DC				; CODE XREF: sendPacketToRadio+7Aj
					; sendPacketToRadio:loc_82ACj
		CMP	R0, #0x57 ; 'W'
		BEQ	loc_8314
		CMP	R0, #0x55 ; 'U'
		BEQ	loc_831E
		LDR	R0, =byte_2000016C
		MOVS	R1, #2
		STRB	R1, [R0,#(byte_20000173	- 0x2000016C)]

loc_82EA				; CODE XREF: sendPacketToRadio+1BCj
					; sendPacketToRadio+1C4j
		LDR	R6, =byte_2000016C
		LDR	R0, [R6,#(dword_2000019C - 0x2000016C)]
		CMP	R0, #0x11
		BLS	loc_8306
		LDRB	R0, [R4,#0x1B]
		LDRB	R1, [R4,#0x1A]
		LSLS	R0, R0,	#8
		ORRS	R0, R1
		MOVS	R1, #0x8000
		ORRS	R0, R1
		STRB	R0, [R4,#0x1A]
		LSRS	R0, R0,	#8
		STRB	R0, [R4,#0x1B]

loc_8306				; CODE XREF: sendPacketToRadio+190j
		LDRB	R0, [R6,#(byte_20000171	- 0x2000016C)]
		CMP	R0, #0
		BEQ	loc_8326
		LDRB	R0, [R6,#(byte_20000172	- 0x2000016C)]
		CMP	R0, #3
		BNE	loc_8340	; jumptable 000081C8 case 3
		B	loc_8326
; ---------------------------------------------------------------------------

loc_8314				; CODE XREF: sendPacketToRadio+17Ej
		LDR	R0, =byte_2000016C
		STRB	R6, [R0,#(byte_20000173	- 0x2000016C)]
		MOVS	R0, #0x55 ; 'U'
		STRB	R0, [R5]
		B	loc_82EA
; ---------------------------------------------------------------------------

loc_831E				; CODE XREF: sendPacketToRadio+182j
		LDR	R1, =byte_2000016C
		MOVS	R0, #1
		STRB	R0, [R1,#(byte_20000173	- 0x2000016C)]
		B	loc_82EA
; ---------------------------------------------------------------------------

loc_8326				; CODE XREF: sendPacketToRadio+1AAj
					; sendPacketToRadio+1B2j
		MOVS	R4, #5
		BL	sub_8028
		MOVS	R0, #1
		STR	R0, [R6,#0x18]
		STRB	R4, [R6,#5]
		BL	sub_810C
		MOVS	R0, #1
		BL	sub_8540
		BL	sub_8038

loc_8340				; CODE XREF: sendPacketToRadio+68j
					; sendPacketToRadio:def_81C8j ...
		MOVS	R2, #0x1D	; jumptable 000081C8 case 3
		MOV	R1, R5
		LDR	R0, =byte_1FFFFD9C ; packet data??
		BL	memcpy
		LDR	R1, =byte_2000016C
		MOVS	R0, #1
		STRB	R0, [R1,#(byte_2000016F	- 0x2000016C)]
		ADD	SP, SP,	#0x24
		POP	{R4-R7,PC}
; ---------------------------------------------------------------------------

loc_8354				; CODE XREF: sendPacketToRadio:loc_82D2j
		LDRB	R2, [R4]
		LDRB	R1, [R4,#3]
		MOV	R0, R2
		LDRB	R2, [R4,#1]
		LSLS	R2, R2,	#8
		ORRS	R0, R2
		LDRB	R2, [R4,#2]
		LSLS	R2, R2,	#0x10
		ORRS	R0, R2
		LSLS	R1, R1,	#0x18
		ORRS	R0, R1
		LDR	R1, =byte_2000016C
		STR	R0, [R1,#(dword_2000018C - 0x2000016C)]
		ADD	SP, SP,	#0x24
		POP	{R4-R7,PC}
; ---------------------------------------------------------------------------

loc_8372				; CODE XREF: sendPacketToRadio+80j
		MOVS	R4, #0
		BL	sub_8028
		LDR	R0, =byte_2000016C
		MOVS	R1, #1
		STR	R1, [R0,#(dword_20000184 - 0x2000016C)]
		STRB	R4, [R0,#(byte_20000171	- 0x2000016C)]
		BL	sub_810C
		MOVS	R0, #1
		BL	sub_8540
		BL	sub_8038
		ADD	SP, SP,	#0x24
		POP	{R4-R7,PC}
; ---------------------------------------------------------------------------

loc_8392				; CODE XREF: sendPacketToRadio:loc_82AAj
		MOVS	R1, #0xA5 ; '¥'
		MOV	R0, SP
		STRB	R1, [R0,#0x38+var_38]
		LDR	R0, =TX_ID
		LDRB	R2, [R0]
		MOV	R1, R2
		LDRB	R2, [R0,#(TX_ID+1 - 0x1400)]
		LSLS	R2, R2,	#8
		ORRS	R1, R2
		LDRB	R2, [R0,#(TX_ID+2 - 0x1400)]
		LDRB	R0, [R0,#(TX_ID+3 - 0x1400)]
		LSLS	R2, R2,	#0x10
		ORRS	R1, R2
		LSLS	R0, R0,	#0x18
		ORRS	R1, R0
		MOV	R0, SP
		STRB	R1, [R0,#0x38+var_37]
		LSRS	R2, R1,	#8
		STRB	R2, [R0,#0x38+var_36]
		LSRS	R2, R1,	#0x10
		STRB	R2, [R0,#0x38+var_35]
		LSRS	R1, R1,	#0x18
		B	loc_83C8
; ---------------------------------------------------------------------------

loc_83C0				; CODE XREF: sendPacketToRadio+68j
		B	loc_8494	; jumptable 000081C8 case 4
; ---------------------------------------------------------------------------

loc_83C2				; CODE XREF: sendPacketToRadio+68j
		B	loc_8414	; jumptable 000081C8 case 2
; ---------------------------------------------------------------------------

loc_83C4				; CODE XREF: sendPacketToRadio+68j
		B	loc_83F2	; jumptable 000081C8 case 1
; ---------------------------------------------------------------------------

loc_83C6				; CODE XREF: sendPacketToRadio+68j
		B	loc_8432	; jumptable 000081C8 case 0
; ---------------------------------------------------------------------------

loc_83C8				; CODE XREF: sendPacketToRadio+25Ej
		STRB	R1, [R0,#4]
		LDR	R0, =byte_2000016C
		LDR	R1, [R0,#(dword_2000018C - 0x2000016C)]
		MOV	R0, SP
		STRB	R1, [R0,#0x38+var_33]
		LSRS	R2, R1,	#8
		STRB	R2, [R0,#0x38+var_33+1]
		LSRS	R2, R1,	#0x10
		STRB	R2, [R0,#0x38+var_31]
		LSRS	R1, R1,	#0x18
		STRB	R1, [R0,#0x38+var_30]
		MOVS	R2, #0xFF	; a3
		MOVS	R1, #0x14	; numbButesToSend
		ADDS	R0, #9		; targetAddress
		BL	setupDMA
		MOV	R0, SP
		BL	callRxpacketHandle
		ADD	SP, SP,	#0x24
		POP	{R4-R7,PC}
; ---------------------------------------------------------------------------

loc_83F2				; CODE XREF: sendPacketToRadio:loc_83C4j
		LDRB	R0, [R4,#1]
		LDRB	R1, [R4]
		LSLS	R0, R0,	#8
		ORRS	R0, R1
		LDRB	R1, [R4,#3]
		LDRB	R2, [R4,#2]
		LSLS	R1, R1,	#8
		ORRS	R1, R2
		LDR	R2, =byte_20000180
		STRB	R0, [R2]
		STRB	R1, [R2,#(byte_20000181	- 0x20000180)]
		MOVS	R1, #2
		MOV	R0, R2
		BL	spiSend
		ADD	SP, SP,	#0x24
		POP	{R4-R7,PC}
; ---------------------------------------------------------------------------

loc_8414				; CODE XREF: sendPacketToRadio:loc_83C2j
		LDRB	R0, [R4,#1]
		LDRB	R1, [R4]
		LSLS	R0, R0,	#8
		ORRS	R0, R1
		LDR	R0, =byte_2000016C
		BEQ	loc_8424
		STR	R6, [R0,#(dword_20000194 - 0x2000016C)]
		B	loc_8428
; ---------------------------------------------------------------------------

loc_8424				; CODE XREF: sendPacketToRadio+2BEj
		LDR	R1, [R0,#(dword_20000190 - 0x2000016C)]
		STR	R1, [R0,#(dword_20000194 - 0x2000016C)]

loc_8428				; CODE XREF: sendPacketToRadio+2C2j
		LDR	R1, =byte_2000016C
		MOVS	R0, #1
		STRB	R0, [R1,#(byte_20000174	- 0x2000016C)]
		ADD	SP, SP,	#0x24
		POP	{R4-R7,PC}
; ---------------------------------------------------------------------------

loc_8432				; CODE XREF: sendPacketToRadio:loc_83C6j
		LDRB	R1, [R4,#1]
		LDRB	R0, [R4]
		LSLS	R1, R1,	#0x18
		ASRS	R6, R1,	#0x10
		ORRS	R6, R0
		MOVS	R0, #2
		STR	R0, [SP,#0x38+var_18]
		MOVS	R0, #7
		MOVS	R4, #0x1000000
		MOV	R12, R0
		MOVS	R2, #0

loc_844A				; CODE XREF: sendPacketToRadio+31Cj
		LDR	R0, =0xECFE
		LSLS	R1, R2,	#4
		ADDS	R3, R1,	R0
		MOVS	R1, #0
		MOVS	R5, #8

loc_8454				; CODE XREF: sendPacketToRadio+316j
		LDR	R0, =dword_E820
		MOVS	R7, #0
		LDRSH	R7, [R3,R7]
		LDR	R0, [R0]
		ADDS	R3, #2
		ADDS	R0, R7,	R0
		SUBS	R0, R0,	R6
		CMP	R0, #0
		BGE	loc_8468
		NEGS	R0, R0

loc_8468				; CODE XREF: sendPacketToRadio+304j
		CMP	R0, R4
		BGE	loc_8472
		MOV	R12, R1
		MOV	R4, R0
		STR	R2, [SP,#0x38+var_18]

loc_8472				; CODE XREF: sendPacketToRadio+30Aj
		ADDS	R1, #1
		SUBS	R5, #1
		BNE	loc_8454
		ADDS	R2, #1
		CMP	R2, #4
		BCC	loc_844A
		LDR	R0, [SP,#0x38+var_18]
		LSLS	R1, R0,	#3
		MOV	R0, R12
		ORRS	R1, R0
		LDR	R0, =byte_2000016C
		STR	R1, [R0,#(dword_20000190 - 0x2000016C)]
		STR	R1, [R0,#(dword_20000194 - 0x2000016C)]
		MOVS	R1, #1
		STRB	R1, [R0,#(byte_20000174	- 0x2000016C)]
		ADD	SP, SP,	#0x24
		POP	{R4-R7,PC}
; ---------------------------------------------------------------------------

loc_8494				; CODE XREF: sendPacketToRadio:loc_83C0j
		LDRB	R0, [R4,#1]
		LDRB	R1, [R4]
		LSLS	R0, R0,	#8
		LDR	R5, =byte_2000016C
		ORRS	R0, R1
		STR	R0, [R5,#(dword_200001A0 - 0x2000016C)]
		LDRB	R0, [R4,#3]
		LDRB	R1, [R4,#2]
		LSLS	R0, R0,	#8
		ORRS	R0, R1
		BEQ	loc_84E2
		CMP	R0, #1
		BEQ	loc_84E8
		MOVS	R0, #0xA
		STRB	R0, [R5,#(byte_20000176	- 0x2000016C)]
		MOVS	R0, #5

loc_84B4				; CODE XREF: sendPacketToRadio+38Aj
		STRB	R0, [R5,#(byte_20000173	- 0x2000016C)]

loc_84B6				; CODE XREF: sendPacketToRadio+386j
		LDRB	R0, [R4,#5]
		LDRB	R1, [R4,#4]
		LSLS	R0, R0,	#8
		ORRS	R0, R1
		BEQ	loc_84EC
		MOVS	R0, #1
		STRB	R0, [R5,#(byte_2000017C	- 0x2000016C)]

loc_84C4				; CODE XREF: sendPacketToRadio+38Ej
		MOVS	R4, #5
		BL	sub_8028
		MOVS	R0, #1
		STR	R0, [R5,#(dword_20000184 - 0x2000016C)]
		STRB	R4, [R5,#(byte_20000171	- 0x2000016C)]
		BL	sub_810C
		MOVS	R0, #1
		BL	sub_8540
		BL	sub_8038
		ADD	SP, SP,	#0x24
		POP	{R4-R7,PC}
; ---------------------------------------------------------------------------

loc_84E2				; CODE XREF: sendPacketToRadio+348j
		MOVS	R0, #3
		STRB	R0, [R5,#(byte_20000173	- 0x2000016C)]
		B	loc_84B6
; ---------------------------------------------------------------------------

loc_84E8				; CODE XREF: sendPacketToRadio+34Cj
		MOVS	R0, #4
		B	loc_84B4
; ---------------------------------------------------------------------------

loc_84EC				; CODE XREF: sendPacketToRadio+35Ej
		STRB	R6, [R5,#(byte_2000017C	- 0x2000016C)]
		B	loc_84C4
; End of function sendPacketToRadio

; ---------------------------------------------------------------------------
off_84F0	DCD byte_2000016C	; DATA XREF: sendPacketToRadio+14r
					; sendPacketToRadio:loc_8208r ...
off_84F4	DCD byte_1FFFFD9C	; DATA XREF: sendPacketToRadio+1E4r
					; packet data??
off_84F8	DCD TX_ID		; DATA XREF: sendPacketToRadio+238r
off_84FC	DCD byte_20000180	; DATA XREF: sendPacketToRadio+2A2r
dword_8500	DCD 0xECFE		; DATA XREF: sendPacketToRadio:loc_844Ar
off_8504	DCD dword_E820		; DATA XREF: sendPacketToRadio:loc_8454r

; =============== S U B	R O U T	I N E =======================================


setC7_unsetC4				; CODE XREF: methodOnTPM_Event+13Ap
					; methodOnTPM_Event+18Ap
		MOVS	R2, #8
		LDR	R1, =0x400FF080
		MOVS	R3, #0x80 ; ''
		CMP	R0, #0
		BEQ	loc_8518
		STR	R3, [R1,#8]
		STR	R2, [R1,#4]
		BX	LR
; ---------------------------------------------------------------------------

loc_8518				; CODE XREF: setC7_unsetC4+8j
		STR	R2, [R1,#8]
		STR	R3, [R1,#4]
		BX	LR
; End of function setC7_unsetC4

; ---------------------------------------------------------------------------
		ALIGN 0x10
PortCDataOutputReg_3 DCD 0x400FF080	; DATA XREF: setC7_unsetC4+2r

; =============== S U B	R O U T	I N E =======================================


setPortE1_unsetE0			; CODE XREF: methodOnTPM_Event+9Ap
					; methodOnTPM_Event+162p
		MOVS	R2, #1
		LDR	R1, =0x400FF100
		MOVS	R3, #2
		CMP	R0, #0
		BEQ	loc_8534
		STR	R2, [R1,#8]
		STR	R3, [R1,#4]
		BX	LR
; ---------------------------------------------------------------------------

loc_8534				; CODE XREF: setPortE1_unsetE0+8j
		STR	R3, [R1,#8]
		STR	R2, [R1,#4]
		BX	LR
; End of function setPortE1_unsetE0

; ---------------------------------------------------------------------------
		ALIGN 4
dword_853C	DCD 0x400FF100		; DATA XREF: setPortE1_unsetE0+2r

; =============== S U B	R O U T	I N E =======================================


sub_8540				; CODE XREF: sendPacketToRadio+40p
					; sendPacketToRadio+D8p ...
		LDR	R1, =0x40038000
		STR	R0, [R1,#0x10]
		BX	LR
; End of function sub_8540

; ---------------------------------------------------------------------------
		ALIGN 4
dword_8548	DCD 0x40038000		; DATA XREF: sub_8540r

; =============== S U B	R O U T	I N E =======================================


trySendSettingsPacket			; CODE XREF: sendPAcket+50Ap
					; sendPAcket+53Cp
		PUSH	{R4,LR}
		BL	sensorsFunction4
		BL	sub_232C
		CMP	R0, #0
		BNE	loc_8560
		MOVS	R0, #1
		BL	adcMethod2

loc_8560				; CODE XREF: trySendSettingsPacket+Cj
		BL	createRadioPacket
		BL	sendSettingsPacket
		CMP	R0, #0
		BEQ	locret_8572
		LDR	R0, =dword_1FFFFCD8 ; targetAddress
		BL	sendPacketToRadio

locret_8572				; CODE XREF: trySendSettingsPacket+1Ej
		POP	{R4,PC}
; End of function trySendSettingsPacket

; ---------------------------------------------------------------------------
; _BYTE	*off_8574
off_8574	DCD dword_1FFFFCD8	; DATA XREF: trySendSettingsPacket+20r

; =============== S U B	R O U T	I N E =======================================


sendPAcket				; CODE XREF: callSendPacket+2p

var_80		= -0x80
var_7C		= -0x7C
var_78		= -0x78
var_6D		= -0x6D
var_6C		= -0x6C
var_60		= -0x60
var_58		= -0x58
anonymous_0	= -0x53
var_40		= -0x40

		LDR	R0, =byte_2000016C
		LDRB	R1, [R0,#(byte_2000016D	- 0x2000016C)]
		CMP	R1, #0
		BEQ	loc_867C
		LDRB	R1, [R0,#(byte_2000016E	- 0x2000016C)]
		CMP	R1, #0
		BNE	loc_867C
		PUSH	{R4-R7,LR}
		LDR	R0, =byte_2000016C
		SUB	SP, SP,	#0x6C
		MOVS	R1, #1
		STRB	R1, [R0,#(byte_2000016E	- 0x2000016C)]
		LDRB	R0, [R0,#(byte_20000171	- 0x2000016C)]
		LDR	R6, =TX_ID
		MOVS	R5, #0
		CMP	R0, #2
		BEQ	loc_85A0
		CMP	R0, #6
		BNE	loc_865A
		B	loc_8854
; ---------------------------------------------------------------------------

loc_85A0				; CODE XREF: sendPAcket+20j
		LDR	R4, =byte_2000016C
		LDRB	R0, [R4,#(byte_2000017A	- 0x2000016C)]
		CMP	R0, #0
		BEQ	loc_865A
		STRB	R5, [R4,#(byte_2000017A	- 0x2000016C)]
		MOVS	R0, #0x40 ; '@'	; a1
		MOVS	R2, #1		; length
		MOV	R1, SP		; destination
		BL	sendOverSPI_useDMA
		MOV	R0, SP
		LDRB	R0, [R0,#0x80+var_80]
		LSLS	R0, R0,	#0x1A
		BMI	loc_86B8
		MOVS	R0, #0xF0 ; 'ð'
		STR	R5, [R4,#(dword_2000019C - 0x2000016C)]
		STRB	R0, [R4,#(byte_2000017D	- 0x2000016C)]
		MOVS	R1, #1
		LDR	R0, =byte_2000017D
		BL	spiSend
		MOVS	R2, #0x25 ; '%'	; length
		MOV	R1, SP		; destination
		MOVS	R0, #0x45 ; 'E'	; a1
		BL	sendOverSPI_useDMA
		ADD	R0, SP,	#0x80+var_58
		MOVS	R2, #0xFF	; a3
		MOVS	R1, #0x1C	; numbButesToSend
		ADDS	R0, #1		; targetAddress
		BL	setupDMA
		MOV	R0, SP
		LDRB	R0, [R0,#0x80+var_80]
		SUBS	R0, #0xBB ; '»'
		CMP	R0, #0xB	; switch 11 cases
		BCS	def_85F2	; jumptable 000085F2 default case
		MOVS	R3, R0
		ADD	R3, PC
		LDRB	R3, [R3,#4]
		ADDS	R3, R3,	R3
		ADD	PC, R3		; switch jump
; ---------------------------------------------------------------------------
jpt_85F2	DCB 7			; jump table for switch	statement
		DCB 0x6A
		DCB 0xD3
		DCB 0xD3
		DCB 0xD3
		DCB 0xD3
		DCB 0xD3
		DCB 5
		DCB 5
		DCB 5
		DCB 5
		ALIGN 2

loc_8600				; CODE XREF: sendPAcket+7Aj
		MOV	R0, SP		; jumptable 000085F2 cases 7-10
		B	loc_86C4
; ---------------------------------------------------------------------------

loc_8604				; CODE XREF: sendPAcket+7Aj
		LDRB	R0, [R4,#(byte_20000172	- 0x2000016C)] ; jumptable 000085F2 case 0
		CMP	R0, #1
		BNE	loc_86B8
		LDRB	R0, [R4,#(byte_20000178	- 0x2000016C)]
		CMP	R0, #1
		BEQ	loc_8616
		CMP	R0, #2
		BEQ	loc_865C
		B	loc_8A7A
; ---------------------------------------------------------------------------

loc_8616				; CODE XREF: sendPAcket+96j
		MOV	R1, SP
		LDR	R0, [SP,#0x80+var_80]
		LDRB	R1, [R1,#0x80+var_7C]
		LSRS	R0, R0,	#8
		LSLS	R1, R1,	#0x18
		LDRB	R3, [R6]
		ORRS	R1, R0
		MOV	R0, R3
		LDRB	R3, [R6,#(TX_ID+1 - 0x1400)]
		LSLS	R3, R3,	#8
		ORRS	R0, R3
		LDRB	R3, [R6,#(TX_ID+2 - 0x1400)]
		LDRB	R2, [R6,#(TX_ID+3 - 0x1400)]
		LSLS	R3, R3,	#0x10
		ORRS	R0, R3
		LSLS	R2, R2,	#0x18
		ORRS	R0, R2
		CMP	R1, R0
		BNE	loc_865A
		MOV	R0, SP
		LDRB	R1, [R0,#0x80+var_7C+2]
		LDRB	R2, [R0,#0x80+var_7C+1]
		LSLS	R0, R1,	#8
		ORRS	R0, R2
		CMP	R0, #9
		BNE	loc_865A
		MOV	R0, SP
		LDR	R1, [SP,#0x80+var_78]
		LDRB	R0, [R0,#0x80+var_7C+3]
		LSLS	R1, R1,	#8
		ORRS	R0, R1
		STR	R0, [R4,#(dword_2000018C - 0x2000016C)]
		MOVS	R0, #2
		STRB	R0, [R4,#(byte_20000178	- 0x2000016C)]

loc_865A				; CODE XREF: sendPAcket+24j
					; sendPAcket+2Ej ...
		B	loc_8A7A
; ---------------------------------------------------------------------------

loc_865C				; CODE XREF: sendPAcket+9Aj
		MOV	R1, SP
		LDR	R0, [SP,#0x80+var_7C]
		LDRB	R2, [R1,#0x80+var_78]
		LSRS	R1, R0,	#8
		LSLS	R0, R2,	#0x18
		LDR	R2, [R4,#(dword_2000018C - 0x2000016C)]
		ORRS	R0, R1
		CMP	R0, R2
		BNE	loc_86EE
		MOV	R1, SP
		LDRB	R0, [R1,#0x80+var_78+2]
		LDRB	R1, [R1,#0x80+var_78+1]
		LSLS	R0, R0,	#8
		ORRS	R0, R1
		CMP	R0, #0xFE ; 'þ'
		B	loc_867E
; ---------------------------------------------------------------------------

loc_867C				; CODE XREF: sendPAcket+6j
					; sendPAcket+Cj
		B	locret_8ABE
; ---------------------------------------------------------------------------

loc_867E				; CODE XREF: sendPAcket+102j
		BNE	loc_86EE
		STRB	R5, [R4,#(byte_20000178	- 0x2000016C)]
		MOVS	R0, #0xA5 ; '¥'
		ADD	R1, SP,	#0x80+var_60
		STRB	R0, [R1,#8]
		LDRB	R3, [R6]
		MOV	R0, R3
		LDRB	R3, [R6,#(TX_ID+1 - 0x1400)]
		LSLS	R3, R3,	#8
		ORRS	R0, R3
		LDRB	R3, [R6,#(TX_ID+2 - 0x1400)]
		LDRB	R1, [R6,#(TX_ID+3 - 0x1400)]
		LSLS	R3, R3,	#0x10
		ORRS	R0, R3
		LSLS	R1, R1,	#0x18
		ORRS	R0, R1
		ADD	R1, SP,	#0x80+var_60
		STRB	R0, [R1,#9]
		LSRS	R3, R0,	#8
		STRB	R3, [R1,#0xA]
		LSRS	R3, R0,	#0x10
		STRB	R3, [R1,#0xB]
		LSRS	R0, R0,	#0x18
		STRB	R0, [R1,#0xC]
		STRB	R2, [R1,#0xD]
		LSRS	R0, R2,	#8
		STRB	R0, [R1,#0xE]
		LSRS	R0, R2,	#0x10
		B	loc_86BC
; ---------------------------------------------------------------------------

loc_86B8				; CODE XREF: sendPAcket+42j
					; sendPAcket+90j
		B	loc_879A
; ---------------------------------------------------------------------------

def_85F2				; CODE XREF: sendPAcket+70j
		B	loc_879C	; jumptable 000085F2 default case
; ---------------------------------------------------------------------------

loc_86BC				; CODE XREF: sendPAcket+13Ej
		STRB	R0, [R1,#0xF]
		LSRS	R0, R2,	#0x18
		STRB	R0, [R1,#0x10]
		ADD	R0, SP,	#0x80+var_58

loc_86C4				; CODE XREF: sendPAcket+8Aj
		BL	callRxpacketHandle
		B	loc_87E2
; ---------------------------------------------------------------------------

loc_86CA				; CODE XREF: sendPAcket+7Aj
		LDRB	R0, [R4,#(byte_20000172	- 0x2000016C)] ; jumptable 000085F2 case 1
		CMP	R0, #2
		BNE	loc_879A
		MOV	R0, SP
		LDRB	R1, [R0,#0x80+var_80]
		ADD	R0, SP,	#0x80+var_40
		STRB	R1, [R0,#8]
		ADD	R1, SP,	#0x80+var_78
		MOVS	R2, #0x1C
		ADDS	R1, #1
		ADDS	R0, #9
		BL	memcpy
		LDRB	R0, [R4,#(byte_20000178	- 0x2000016C)]
		CMP	R0, #1
		BEQ	loc_86F0
		CMP	R0, #2
		BEQ	loc_8738

loc_86EE				; CODE XREF: sendPAcket+F4j
					; sendPAcket:loc_867Ej
		B	loc_8A7A
; ---------------------------------------------------------------------------

loc_86F0				; CODE XREF: sendPAcket+170j
		MOV	R1, SP
		LDR	R0, [SP,#0x80+var_80]
		LDRB	R1, [R1,#0x80+var_7C]
		LSRS	R0, R0,	#8
		LSLS	R1, R1,	#0x18
		LDRB	R3, [R6]
		ORRS	R1, R0
		MOV	R0, R3
		LDRB	R3, [R6,#(TX_ID+1 - 0x1400)]
		LSLS	R3, R3,	#8
		ORRS	R0, R3
		LDRB	R3, [R6,#(TX_ID+2 - 0x1400)]
		LDRB	R2, [R6,#(TX_ID+3 - 0x1400)]
		LSLS	R3, R3,	#0x10
		ORRS	R0, R3
		LSLS	R2, R2,	#0x18
		ORRS	R0, R2
		CMP	R1, R0
		BNE	loc_87E8
		ADD	R0, SP,	#0x80+var_40
		LDRB	R1, [R0,#0xA]
		LDRB	R2, [R0,#9]
		LSLS	R0, R1,	#8
		ORRS	R0, R2
		CMP	R0, #1
		BNE	loc_87E8
		MOV	R0, SP
		LDR	R1, [SP,#0x80+var_7C]
		LDRB	R0, [R0,#0x80+var_78]
		LSRS	R1, R1,	#8
		LSLS	R0, R0,	#0x18
		ORRS	R0, R1
		STR	R0, [R4,#(dword_2000018C - 0x2000016C)]
		MOVS	R0, #2
		STRB	R0, [R4,#(byte_20000178	- 0x2000016C)]
		B	loc_8A7A
; ---------------------------------------------------------------------------

loc_8738				; CODE XREF: sendPAcket+174j
		MOV	R1, SP
		LDR	R0, [SP,#0x80+var_7C]
		LDRB	R2, [R1,#0x80+var_78]
		LSRS	R1, R0,	#8
		LSLS	R0, R2,	#0x18
		LDR	R2, [R4,#(dword_2000018C - 0x2000016C)]
		ORRS	R0, R1
		CMP	R0, R2
		BNE	loc_87E8
		ADD	R0, SP,	#0x80+var_40
		LDRB	R1, [R0,#0xA]
		LDRB	R0, [R0,#9]
		LSLS	R1, R1,	#8
		ORRS	R1, R0
		CMP	R1, #2
		BNE	loc_87E8
		STRB	R5, [R4,#(byte_20000178	- 0x2000016C)]
		MOVS	R0, #0xA5 ; '¥'
		ADD	R1, SP,	#0x80+var_60
		STRB	R0, [R1,#8]
		LDRB	R3, [R6]
		MOV	R0, R3
		LDRB	R3, [R6,#(TX_ID+1 - 0x1400)]
		LSLS	R3, R3,	#8
		ORRS	R0, R3
		LDRB	R3, [R6,#(TX_ID+2 - 0x1400)]
		LDRB	R1, [R6,#(TX_ID+3 - 0x1400)]
		LSLS	R3, R3,	#0x10
		ORRS	R0, R3
		LSLS	R1, R1,	#0x18
		ORRS	R0, R1
		ADD	R1, SP,	#0x80+var_60
		STRB	R0, [R1,#9]
		LSRS	R3, R0,	#8
		STRB	R3, [R1,#0xA]
		LSRS	R3, R0,	#0x10
		STRB	R3, [R1,#0xB]
		LSRS	R0, R0,	#0x18
		STRB	R0, [R1,#0xC]
		STRB	R2, [R1,#0xD]
		LSRS	R0, R2,	#8
		STRB	R0, [R1,#0xE]
		LSRS	R0, R2,	#0x10
		STRB	R0, [R1,#0xF]
		LSRS	R0, R2,	#0x18
		STRB	R0, [R1,#0x10]
		ADD	R0, SP,	#0x80+var_58
		BL	callRxpacketHandle

loc_879A				; CODE XREF: sendPAcket:loc_86B8j
					; sendPAcket+156j
		B	loc_87E2
; ---------------------------------------------------------------------------

loc_879C				; CODE XREF: sendPAcket+7Aj
					; sendPAcket:def_85F2j
		LDRB	R0, [R4,#6]	; jumptable 000085F2 cases 2-6
		MOV	R1, SP
		CMP	R0, #2
		LDRB	R1, [R1,#0x80+var_7C]
		LDR	R0, [SP,#0x80+var_80]
		BEQ	loc_87EA
		LSRS	R0, R0,	#8
		LSLS	R1, R1,	#0x18
		LDRB	R3, [R6]
		ORRS	R1, R0
		MOV	R0, R3
		LDRB	R3, [R6,#1]
		LSLS	R3, R3,	#8
		ORRS	R0, R3
		LDRB	R3, [R6,#2]
		LDRB	R2, [R6,#3]
		LSLS	R3, R3,	#0x10
		ORRS	R0, R3
		LSLS	R2, R2,	#0x18
		ORRS	R0, R2
		CMP	R1, R0
		BNE	loc_87E2
		MOV	R0, SP
		LDRB	R1, [R0,#0x80+var_80]
		ADD	R0, SP,	#0x80+var_60
		STRB	R1, [R0,#8]
		ADD	R1, SP,	#0x80+var_7C
		MOVS	R2, #0x1C
		ADDS	R1, #1
		ADDS	R0, #9
		BL	memcpy
		ADD	R0, SP,	#0x80+var_58
		BL	callRxpacketHandle

loc_87E2				; CODE XREF: sendPAcket+150j
					; sendPAcket:loc_879Aj	...
		LDRB	R0, [R4,#6]
		CMP	R0, #6
		BEQ	loc_8838

loc_87E8				; CODE XREF: sendPAcket+19Cj
					; sendPAcket+1AAj ...
		B	loc_8A7A
; ---------------------------------------------------------------------------

loc_87EA				; CODE XREF: sendPAcket+22Ej
		LSRS	R0, R0,	#8
		LSLS	R1, R1,	#0x18
		LDRB	R3, [R6]
		ORRS	R1, R0
		MOV	R0, R3
		LDRB	R3, [R6,#1]
		LSLS	R3, R3,	#8
		ORRS	R0, R3
		LDRB	R3, [R6,#2]
		LDRB	R2, [R6,#3]
		LSLS	R3, R3,	#0x10
		ORRS	R0, R3
		LSLS	R2, R2,	#0x18
		ORRS	R0, R2
		CMP	R1, R0
		BNE	loc_8908
		MOV	R1, SP
		LDR	R0, [SP,#0x80+var_7C]
		LDRB	R2, [R1,#0x80+var_78]
		LSRS	R1, R0,	#8
		LSLS	R0, R2,	#0x18
		ORRS	R0, R1
		LDR	R1, [R4,#0x20]
		CMP	R0, R1
		BNE	loc_8908
		MOV	R0, SP
		LDRB	R1, [R0,#0x80+var_80]
		ADD	R0, SP,	#0x80+var_60
		STRB	R1, [R0,#8]
		ADD	R1, SP,	#0x80+var_78
		MOVS	R2, #0x1C
		ADDS	R1, #1
		ADDS	R0, #9
		BL	memcpy
		ADD	R0, SP,	#0x80+var_58
		BL	callRxpacketHandle
		B	loc_87E2
; ---------------------------------------------------------------------------

loc_8838				; CODE XREF: sendPAcket+26Ej
		MOVS	R6, #3
		BL	sub_8028
		MOVS	R0, #1
		STR	R0, [R4,#0x18]
		STRB	R6, [R4,#5]
		BL	sub_810C
		MOVS	R0, #1
		BL	sub_8540
		BL	sub_8038
		B	loc_8A7A
; ---------------------------------------------------------------------------

loc_8854				; CODE XREF: sendPAcket+26j
		LDR	R0, =byte_2000016C
		LDRB	R1, [R0,#(byte_20000177	- 0x2000016C)]
		CMP	R1, #0
		BEQ	loc_8908
		LDRB	R7, [R0,#(byte_20000173	- 0x2000016C)]
		CMP	R7, #6
		BEQ	loc_8870
		LDRB	R4, [R0,#(byte_20000178	- 0x2000016C)]
		CMP	R4, #1
		BEQ	loc_887C
		CMP	R4, #2
		BEQ	loc_887C
		LDR	R1, =byte_1FFFFD9C ; packet data??
		B	loc_89C6
; ---------------------------------------------------------------------------

loc_8870				; CODE XREF: sendPAcket+2E8j
		MOVS	R2, #0x1D
		LDR	R1, =byte_1FFFFD9C ; packet data??
		LDR	R0, =0x1FFFFDBA
		BL	memcpy
		B	loc_8A76
; ---------------------------------------------------------------------------

loc_887C				; CODE XREF: sendPAcket+2EEj
					; sendPAcket+2F2j
		MOVS	R2, #0xFF	; a3
		MOVS	R1, #0x1D	; numbButesToSend
		MOV	R0, SP		; targetAddress
		BL	setupDMA
		LDR	R1, =byte_2000016C
		CMP	R7, #0
		BEQ	loc_88A6
		MOVS	R2, #0xBB ; '»'
		MOV	R0, SP
		CMP	R7, #1
		BEQ	loc_88B0
		LDRH	R1, [R1,#(word_2000017E	- 0x2000016C)]
		LSLS	R1, R1,	#0x11
		LSRS	R1, R1,	#0x11
		STR	R1, [SP,#0x80+var_60]
		CMP	R4, #1
		BEQ	loc_88D8
		CMP	R4, #2
		BEQ	loc_8988
		B	loc_89B6
; ---------------------------------------------------------------------------

loc_88A6				; CODE XREF: sendPAcket+312j
		MOVS	R0, #0xAA ; 'ª'
		MOV	R2, SP
		STRB	R0, [R2,#0x80+var_80]
		MOVS	R0, #0x32 ; '2'
		B	loc_89BA
; ---------------------------------------------------------------------------

loc_88B0				; CODE XREF: sendPAcket+31Aj
		STRB	R2, [R0]
		CMP	R4, #1
		BEQ	loc_88BC
		CMP	R4, #2
		BEQ	loc_88C6
		B	loc_88CC
; ---------------------------------------------------------------------------

loc_88BC				; CODE XREF: sendPAcket+33Cj
		MOVS	R1, #1
		STRB	R1, [R0,#1]
		MOVS	R1, #0
		STRB	R1, [R0,#2]
		B	loc_88CC
; ---------------------------------------------------------------------------

loc_88C6				; CODE XREF: sendPAcket+340j
		STRB	R5, [R0,#1]
		LSRS	R2, R5,	#8
		STRB	R2, [R0,#2]

loc_88CC				; CODE XREF: sendPAcket+342j
					; sendPAcket+34Cj
		MOVS	R2, #0x10
		ADDS	R1, R6,	#4
		ADDS	R0, #3
		BL	memcpy
		B	loc_89B6
; ---------------------------------------------------------------------------

loc_88D8				; CODE XREF: sendPAcket+326j
		LDR	R1, =byte_2000016C
		LDRB	R1, [R1,#(byte_20000179	- 0x2000016C)]
		CMP	R1, #0
		BNE	loc_88EC
		LDR	R1, =byte_2000016C
		LDR	R3, [R1,#(dword_20000198 - 0x2000016C)]
		CMP	R3, #0x10
		BEQ	loc_8946
		MOVS	R2, #1
		STRB	R2, [R1,#(byte_20000179	- 0x2000016C)]

loc_88EC				; CODE XREF: sendPAcket+366j
		MOVS	R1, #0xBC ; '¼'
		STRB	R1, [R0]
		LDR	R1, =byte_2000016C
		MOV	R2, R0
		LDRB	R1, [R1,#(byte_20000179	- 0x2000016C)]
		CMP	R1, #1
		BEQ	loc_8976
		MOVS	R1, #1
		STRB	R1, [R2,#1]
		MOVS	R1, #0
		STRB	R1, [R2,#2]
		MOVS	R2, #0x10
		LDR	R1, =(RANDOM_BYTES+0x10)
		B	loc_890A
; ---------------------------------------------------------------------------

loc_8908				; CODE XREF: sendPAcket+290j
					; sendPAcket+2A2j ...
		B	loc_8A7A
; ---------------------------------------------------------------------------

loc_890A				; CODE XREF: sendPAcket+38Ej
		ADDS	R0, #3
		BL	memcpy

loc_8910				; CODE XREF: sendPAcket+40Ej
		MOV	R0, SP
		LDRB	R1, [R0,#0x80+var_6C]
		LDRB	R2, [R0,#0x80+var_6D]
		LSLS	R0, R1,	#8
		ORRS	R0, R2
		LSRS	R1, R0,	#0xF
		LDR	R0, [SP,#0x80+var_60]
		LSLS	R1, R1,	#0xF
		ORRS	R1, R0
		MOV	R0, SP
		STRB	R1, [R0,#0x80+var_6D]
		LSRS	R1, R1,	#8
		STRB	R1, [R0,#0x80+var_6C]
		UXTB	R1, R1
		MOVS	R0, #0x80 ; ''
		ORRS	R1, R0
		MOV	R0, SP
		STRB	R1, [R0,#0x80+var_6C]

loc_8934				; CODE XREF: sendPAcket+3E2j
		LDR	R1, =byte_2000016C
		LDRB	R0, [R1,#(byte_20000179	- 0x2000016C)]
		ADDS	R0, #1
		UXTB	R0, R0
		STRB	R0, [R1,#(byte_20000179	- 0x2000016C)]
		CMP	R0, #2
		BLS	loc_89B6
		STRB	R5, [R1,#(byte_20000179	- 0x2000016C)]
		B	loc_89B6
; ---------------------------------------------------------------------------

loc_8946				; CODE XREF: sendPAcket+36Ej
		STRB	R2, [R0]
		MOVS	R2, #1
		STRB	R2, [R0,#1]
		MOVS	R2, #0
		STRB	R2, [R0,#2]
		MOVS	R2, #0x10
		ADDS	R1, R6,	#4
		ADDS	R0, #3
		BL	memcpy
		B	loc_8934
; ---------------------------------------------------------------------------
off_895C	DCD byte_2000016C	; DATA XREF: sendPAcketr
					; sendPAcket+10r ...
off_8960	DCD TX_ID		; DATA XREF: sendPAcket+1Ar
off_8964	DCD byte_2000017D	; DATA XREF: sendPAcket+4Cr
off_8968	DCD byte_1FFFFD9C	; DATA XREF: sendPAcket+2F4r
					; sendPAcket+2FAr
					; packet data??
dword_896C	DCD 0x1FFFFDBA		; DATA XREF: sendPAcket+2FCr
off_8970	DCD RANDOM_BYTES+0x10	; DATA XREF: sendPAcket+38Cr
; ---------------------------------------------------------------------------
		B	loc_8988
; ---------------------------------------------------------------------------

loc_8976				; CODE XREF: sendPAcket+380j
		STRB	R5, [R0,#1]
		LSRS	R2, R5,	#8
		STRB	R2, [R0,#2]
		MOVS	R2, #0x10
		ADDS	R1, R6,	#4
		ADDS	R0, #3
		BL	memcpy
		B	loc_8910
; ---------------------------------------------------------------------------

loc_8988				; CODE XREF: sendPAcket+32Aj
					; sendPAcket+3FCj
		MOVS	R1, #0xBC ; '¼'
		STRB	R1, [R0]
		MOVS	R1, #2
		STRB	R1, [R0,#1]
		MOVS	R1, #0
		STRB	R1, [R0,#2]
		LDRB	R2, [R0,#0x14]
		LDRB	R1, [R0,#0x13]
		LSLS	R0, R2,	#8
		ORRS	R0, R1
		LSRS	R1, R0,	#0xF
		LDR	R0, [SP,#0x80+var_60]
		LSLS	R1, R1,	#0xF
		ORRS	R1, R0
		MOV	R0, SP
		STRB	R1, [R0,#0x80+var_6D]
		LSRS	R1, R1,	#8
		STRB	R1, [R0,#0x80+var_6C]
		UXTB	R1, R1
		MOVS	R0, #0x80 ; ''
		ORRS	R1, R0
		MOV	R0, SP
		STRB	R1, [R0,#0x80+var_6C]

loc_89B6				; CODE XREF: sendPAcket+32Cj
					; sendPAcket+35Ej ...
		LDR	R1, =byte_2000016C
		MOVS	R0, #0x32 ; '2'

loc_89BA				; CODE XREF: sendPAcket+336j
		STRB	R0, [R1]
		MOV	R1, SP
		CMP	R4, #1
		BEQ	loc_89CE
		CMP	R4, #2
		BEQ	loc_89CE

loc_89C6				; CODE XREF: sendPAcket+2F6j
		LDR	R0, =byte_2000016C
		LDRB	R0, [R0,#(byte_2000016F	- 0x2000016C)]
		CMP	R0, #0
		BEQ	loc_8A24

loc_89CE				; CODE XREF: sendPAcket+448j
					; sendPAcket+44Cj
		LDR	R0, =byte_1FFFFDB9
		LDR	R2, =byte_1FFFFDBB
		LDRB	R3, [R1]
		CMP	R7, #0
		STRB	R3, [R0,#(byte_1FFFFDBA	- 0x1FFFFDB9)]
		BEQ	loc_8A2C
		MOV	R3, R6
		LDRB	R6, [R6]
		MOV	R0, R6
		LDRB	R6, [R3,#1]
		LSLS	R6, R6,	#8
		ORRS	R0, R6
		LDRB	R6, [R3,#2]
		LDRB	R3, [R3,#3]
		LSLS	R6, R6,	#0x10
		ORRS	R0, R6
		LSLS	R3, R3,	#0x18
		ORRS	R0, R3
		STRB	R0, [R2]
		LSRS	R3, R0,	#8
		STRB	R3, [R2,#(byte_1FFFFDBC	- 0x1FFFFDBB)]
		LSRS	R3, R0,	#0x10
		STRB	R3, [R2,#(byte_1FFFFDBD	- 0x1FFFFDBB)]
		LSRS	R0, R0,	#0x18
		STRB	R0, [R2,#(byte_1FFFFDBE	- 0x1FFFFDBB)]
		LDR	R0, =byte_2000016C
		CMP	R4, #1
		BEQ	loc_8A58
		LDR	R0, [R0,#(dword_2000018C - 0x2000016C)]
		STRB	R0, [R2,#(word_1FFFFDBF	- 0x1FFFFDBB)]
		LSRS	R3, R0,	#8
		STRB	R3, [R2,#(word_1FFFFDBF+1 - 0x1FFFFDBB)]
		LSRS	R3, R0,	#0x10
		STRB	R3, [R2,#(byte_1FFFFDC1	- 0x1FFFFDBB)]
		LSRS	R0, R0,	#0x18
		STRB	R0, [R2,#(byte_1FFFFDC2	- 0x1FFFFDBB)]

loc_8A16				; CODE XREF: sendPAcket+4F2j
		MOVS	R2, #0x1C
		ADDS	R1, #1
		LDR	R0, =word_1FFFFDC3

loc_8A1C				; CODE XREF: sendPAcket+4DEj
		BL	memcpy
		LDR	R0, =byte_2000016C
		STRB	R5, [R0,#(byte_2000016F	- 0x2000016C)]

loc_8A24				; CODE XREF: sendPAcket+454j
		LDR	R0, =byte_2000016C
		CMP	R4, #0
		BEQ	loc_8A6C
		B	loc_8A76
; ---------------------------------------------------------------------------

loc_8A2C				; CODE XREF: sendPAcket+460j
		LDRB	R7, [R6]
		MOV	R3, R7
		LDRB	R7, [R6,#1]
		LSLS	R7, R7,	#8
		ORRS	R3, R7
		LDRB	R7, [R6,#2]
		LDRB	R6, [R6,#3]
		LSLS	R7, R7,	#0x10
		ORRS	R3, R7
		LSLS	R6, R6,	#0x18
		ORRS	R3, R6
		STRB	R3, [R2]
		LSRS	R6, R3,	#8
		STRB	R6, [R2,#(byte_1FFFFDBC	- 0x1FFFFDBB)]
		LSRS	R6, R3,	#0x10
		STRB	R6, [R2,#(byte_1FFFFDBD	- 0x1FFFFDBB)]
		LSRS	R3, R3,	#0x18
		STRB	R3, [R2,#(byte_1FFFFDBE	- 0x1FFFFDBB)]
		MOVS	R2, #0x10
		ADDS	R1, #1
		ADDS	R0, #6
		B	loc_8A1C
; ---------------------------------------------------------------------------

loc_8A58				; CODE XREF: sendPAcket+48Cj
		MOVS	R0, #0
		MVNS	R0, R0
		STRB	R0, [R2,#(word_1FFFFDBF	- 0x1FFFFDBB)]
		LSRS	R3, R0,	#8
		STRB	R3, [R2,#(word_1FFFFDBF+1 - 0x1FFFFDBB)]
		LSRS	R3, R0,	#0x10
		STRB	R3, [R2,#(byte_1FFFFDC1	- 0x1FFFFDBB)]
		LSRS	R0, R0,	#0x18
		STRB	R0, [R2,#(byte_1FFFFDC2	- 0x1FFFFDBB)]
		B	loc_8A16
; ---------------------------------------------------------------------------

loc_8A6C				; CODE XREF: sendPAcket+4B0j
		LDRB	R1, [R0]
		CMP	R1, #0
		BEQ	loc_8A76
		SUBS	R1, #1
		STRB	R1, [R0]

loc_8A76				; CODE XREF: sendPAcket+302j
					; sendPAcket+4B2j ...
		LDR	R0, =byte_2000016C
		STRB	R5, [R0,#(byte_20000177	- 0x2000016C)]

loc_8A7A				; CODE XREF: sendPAcket+9Cj
					; sendPAcket:loc_865Aj	...
		LDR	R4, =byte_2000016C
		LDRB	R0, [R4,#(byte_20000170	- 0x2000016C)]
		CMP	R0, #0
		BEQ	loc_8A92
		BL	trySendSettingsPacket
		STRB	R5, [R4,#(byte_20000170	- 0x2000016C)]
		BL	getCurrentTicks
		LSLS	R0, R0,	#8
		STR	R0, [R4,#(packetSendAt - 0x2000016C)]
		B	loc_8AB8
; ---------------------------------------------------------------------------

loc_8A92				; CODE XREF: sendPAcket+508j
		BL	getCurrentTicks
		LDR	R1, [R4,#(packetSendAt - 0x2000016C)]
		LSLS	R0, R0,	#8
		LDR	R6, =0x1B58
		SUBS	R7, R1,	R0
		MOV	R0, R6
		BL	toSysTick
		CMP	R7, R0
		BCC	loc_8AB8
		MOV	R0, R6
		BL	toSysTick
		LDR	R1, [R4,#(packetSendAt - 0x2000016C)]
		SUBS	R0, R1,	R0
		STR	R0, [R4,#(packetSendAt - 0x2000016C)]
		BL	trySendSettingsPacket

loc_8AB8				; CODE XREF: sendPAcket+518j
					; sendPAcket+52Ej
		STRB	R5, [R4,#(byte_2000016E	- 0x2000016C)]
		ADD	SP, SP,	#0x6C
		POP	{R4-R7,PC}
; ---------------------------------------------------------------------------

locret_8ABE				; CODE XREF: sendPAcket:loc_867Cj
		BX	LR
; End of function sendPAcket

; ---------------------------------------------------------------------------
off_8AC0	DCD byte_2000016C	; DATA XREF: sendPAcket:loc_89B6r
					; sendPAcket:loc_89C6r	...
off_8AC4	DCD byte_1FFFFDBB	; DATA XREF: sendPAcket+458r
off_8AC8	DCD byte_1FFFFDB9	; DATA XREF: sendPAcket:loc_89CEr
off_8ACC	DCD word_1FFFFDC3	; DATA XREF: sendPAcket+4A2r
dword_8AD0	DCD 0x1B58		; DATA XREF: sendPAcket+522r

; =============== S U B	R O U T	I N E =======================================


sub_8AD4				; CODE XREF: configurePINandTimers+7Ap

var_18		= -0x18

		PUSH	{R3-R7,LR}
		LDR	R5, =byte_2000016C
		MOVS	R4, #0
		STR	R4, [R5,#(dword_2000018C - 0x2000016C)]
		STRB	R4, [R5,#(byte_20000171	- 0x2000016C)]
		STRB	R4, [R5,#(byte_20000178	- 0x2000016C)]
		MOVS	R0, #7
		STRB	R0, [R5,#(byte_20000172	- 0x2000016C)]
		MOVS	R0, #2
		STRB	R0, [R5,#(byte_20000173	- 0x2000016C)]
		STR	R4, [R5,#(dword_2000019C - 0x2000016C)]
		STRB	R4, [R5,#(byte_20000177	- 0x2000016C)]
		STRB	R4, [R5,#(byte_2000016E	- 0x2000016C)]
		BL	getCurrentTicks
		LSLS	R0, R0,	#8
		STR	R0, [R5,#(packetSendAt - 0x2000016C)]
		LDR	R0, =(RANDOM_BYTES+0x1C)
		STRB	R4, [R5,#(byte_20000170	- 0x2000016C)]
		LDRB	R1, [R0,#(UNKNOWN_ID+1 - 0x1420)]
		LDRB	R2, [R0,#(UNKNOWN_ID - 0x1420)]
		LSLS	R1, R1,	#8
		ORRS	R1, R2
		BEQ	loc_8B2A
		LDRB	R1, [R0,#(UNKNOWN_ID+1 - 0x1420)]
		LDRB	R2, [R0,#(UNKNOWN_ID - 0x1420)]
		LSLS	R1, R1,	#8
		ORRS	R1, R2
		LDR	R2, =0x7FFF
		CMP	R1, R2
		BEQ	loc_8B2A
		LDRB	R1, [R0,#(UNKNOWN_ID+1 - 0x1420)]
		LDRB	R2, [R0,#(UNKNOWN_ID - 0x1420)]
		LSLS	R1, R1,	#8
		ORRS	R1, R2
		LDR	R2, =0xFFFF
		CMP	R1, R2
		BEQ	loc_8B2A
		LDRB	R1, [R0,#(UNKNOWN_ID+1 - 0x1420)]
		LDRB	R2, [R0,#(UNKNOWN_ID - 0x1420)]
		LSLS	R0, R1,	#8
		ORRS	R0, R2
		B	loc_8B2C
; ---------------------------------------------------------------------------

loc_8B2A				; CODE XREF: sub_8AD4+2Ej sub_8AD4+3Cj ...
		MOVS	R0, #1

loc_8B2C				; CODE XREF: sub_8AD4+54j
		STRH	R0, [R5,#0x12]
		LDR	R1, =byte_1FFFFDB9
		MOVS	R0, #5
		STRB	R0, [R1]
		MOVS	R1, #2
		LDR	R0, =dword_EA48
		BL	spiSend
		MOVS	R1, #5
		LDR	R0, =0xEA4A
		BL	spiSend
		LDR	R6, =0xEA81
		MOVS	R4, #0

loc_8B48				; CODE XREF: sub_8AD4+82j
		LSLS	R0, R4,	#1
		ADDS	R0, R0,	R6
		MOVS	R1, #2
		BL	spiSend
		ADDS	R4, #1
		CMP	R4, #0x2E ; '.'
		BCC	loc_8B48
		LDR	R1, =byte_2000016C
		MOVS	R0, #0xA0 ; ' '
		STRB	R0, [R1,#(byte_2000017D	- 0x2000016C)]
		MOVS	R1, #1
		LDR	R0, =byte_2000017D
		BL	spiSend
		LDR	R5, =byte_20000180
		MOVS	R0, #2
		MOVS	R1, #1
		STRB	R0, [R5]
		STRB	R1, [R5,#(byte_20000181	- 0x20000180)]
		MOV	R1, R0
		MOV	R0, R5
		BL	spiSend
		MOVS	R4, #2
		MOVS	R7, #1
		MOVS	R6, #0x40 ; '@'
		ORRS	R4, R6

loc_8B80				; CODE XREF: sub_8AD4+BCj
		MOVS	R2, #1		; length
		MOV	R1, SP		; destination
		MOV	R0, R4		; a1
		BL	sendOverSPI_useDMA
		MOV	R0, SP
		LDRB	R0, [R0,#0x18+var_18]
		TST	R0, R7
		BNE	loc_8B80
		MOVS	R0, #0xA
		BL	timerSendPacket
		MOVS	R0, #0x62 ; 'b'	; a1
		MOVS	R2, #1		; length
		MOV	R1, SP		; destination
		BL	sendOverSPI_useDMA
		MOV	R0, SP
		LDRB	R0, [R0,#0x18+var_18]
		LSLS	R0, R0,	#0x1B
		BPL	loc_8BAC

loc_8BAA				; CODE XREF: sub_8AD4:loc_8BAAj
		B	loc_8BAA
; ---------------------------------------------------------------------------

loc_8BAC				; CODE XREF: sub_8AD4+D4j
		MOVS	R0, #0x24 ; '$'
		STRB	R0, [R5]
		MOVS	R1, #0x13
		STRB	R1, [R5,#(byte_20000181	- 0x20000180)]
		MOVS	R1, #2
		LDR	R0, =byte_20000180
		BL	spiSend
		MOVS	R0, #0x26 ; '&'
		STRB	R0, [R5]
		MOVS	R1, #0x3B ; ';'
		STRB	R1, [R5,#(byte_20000181	- 0x20000180)]
		MOVS	R1, #2
		LDR	R0, =byte_20000180
		BL	spiSend
		MOVS	R1, #0xF
		STRB	R1, [R5]
		MOVS	R0, #0
		STRB	R0, [R5,#(byte_20000181	- 0x20000180)]
		MOVS	R1, #2
		LDR	R0, =byte_20000180
		BL	spiSend
		MOVS	R1, #2
		STRB	R1, [R5]
		STRB	R1, [R5,#(byte_20000181	- 0x20000180)]
		LDR	R0, =byte_20000180
		BL	spiSend
		MOVS	R4, #2
		MOV	R7, R4
		ORRS	R4, R6

loc_8BEE				; CODE XREF: sub_8AD4+12Aj
		MOVS	R2, #1		; length
		MOV	R1, SP		; destination
		MOV	R0, R4		; a1
		BL	sendOverSPI_useDMA
		MOV	R0, SP
		LDRB	R0, [R0,#0x18+var_18]
		TST	R0, R7
		BNE	loc_8BEE
		MOVS	R0, #0x65 ; 'e'	; a1
		MOVS	R2, #1		; length
		MOV	R1, SP		; destination
		BL	sendOverSPI_useDMA
		MOV	R0, SP
		LDRB	R6, [R0,#0x18+var_18]
		LDR	R5, =byte_20000180
		MOVS	R0, #0xF
		STRB	R0, [R5]
		MOVS	R1, #0xA0 ; ' '
		LSLS	R4, R6,	#0x1D
		STRB	R1, [R5,#(byte_20000181	- 0x20000180)]
		LSRS	R4, R4,	#0x1D
		MOVS	R1, #2
		MOV	R0, R5
		BL	spiSend
		MOVS	R0, #2
		STRB	R0, [R5]
		STRB	R0, [R5,#(byte_20000181	- 0x20000180)]
		MOV	R1, R0
		MOV	R0, R5
		BL	spiSend
		MOVS	R5, #2
		MOV	R7, R5
		MOVS	R0, #0x40 ; '@'
		ORRS	R5, R0

loc_8C3A				; CODE XREF: sub_8AD4+176j
		MOV	R0, R5		; a1
		MOVS	R2, #1		; length
		MOV	R1, SP		; destination
		BL	sendOverSPI_useDMA
		MOV	R0, SP
		LDRB	R0, [R0,#0x18+var_18]
		TST	R0, R7
		BNE	loc_8C3A
		MOVS	R0, #0x65 ; 'e'	; a1
		MOVS	R2, #1		; length
		MOV	R1, SP		; destination
		BL	sendOverSPI_useDMA
		MOV	R0, SP
		LDRB	R5, [R0,#0x18+var_18]
		MOVS	R1, #4
		LSLS	R0, R5,	#0x1D
		LSRS	R0, R0,	#0x1D
		CMP	R4, #4
		BCC	loc_8C68
		SUBS	R2, R4,	#4
		B	loc_8C6A
; ---------------------------------------------------------------------------

loc_8C68				; CODE XREF: sub_8AD4+18Ej
		SUBS	R2, R1,	R4

loc_8C6A				; CODE XREF: sub_8AD4+192j
		UXTB	R3, R2
		CMP	R0, #4
		BCC	loc_8C74
		SUBS	R1, R0,	#4
		B	loc_8C76
; ---------------------------------------------------------------------------

loc_8C74				; CODE XREF: sub_8AD4+19Aj
		SUBS	R1, R1,	R0

loc_8C76				; CODE XREF: sub_8AD4+19Ej
		UXTB	R1, R1
		MOVS	R2, #8
		CMP	R3, R1
		BCC	loc_8C90
		LDR	R0, =byte_20000180
		MOVS	R1, #0x25 ; '%'
		STRB	R1, [R0]
		ORRS	R4, R2
		STRB	R4, [R0,#(byte_20000181	- 0x20000180)]
		MOVS	R1, #2
		BL	spiSend
		B	loc_8CA2
; ---------------------------------------------------------------------------

loc_8C90				; CODE XREF: sub_8AD4+1A8j
		LDR	R1, =byte_20000180
		MOVS	R3, #0x25 ; '%'
		ORRS	R0, R2
		STRB	R3, [R1]
		STRB	R0, [R1,#(byte_20000181	- 0x20000180)]
		MOVS	R1, #2
		LDR	R0, =byte_20000180
		BL	spiSend

loc_8CA2				; CODE XREF: sub_8AD4+1BAj
		LSLS	R0, R6,	#0x1C
		BPL	loc_8CAC
		LSLS	R0, R5,	#0x1C
		BPL	loc_8CAC

loc_8CAA				; CODE XREF: sub_8AD4:loc_8CAAj
		B	loc_8CAA
; ---------------------------------------------------------------------------

loc_8CAC				; CODE XREF: sub_8AD4+1D0j
					; sub_8AD4+1D4j
		LDR	R0, =dword_E824
		MOVS	R4, #1
		LDR	R6, [R0]
		MOVS	R0, #2
		MOV	LR, R0
		MOVS	R0, #7
		LSLS	R4, R4,	#0x18
		MOV	R12, R0
		MOVS	R1, #0

loc_8CBE				; CODE XREF: sub_8AD4+21Cj
		LDR	R0, =0xECFE
		LSLS	R2, R1,	#4
		ADDS	R3, R2,	R0
		MOVS	R2, #0
		MOVS	R5, #8

loc_8CC8				; CODE XREF: sub_8AD4+216j
		LDR	R0, =dword_E820
		MOVS	R7, #0
		LDRSH	R7, [R3,R7]
		LDR	R0, [R0]
		ADDS	R3, #2
		ADDS	R0, R7,	R0
		SUBS	R0, R0,	R6
		CMP	R0, #0
		BGE	loc_8CDC
		NEGS	R0, R0

loc_8CDC				; CODE XREF: sub_8AD4+204j
		CMP	R0, R4
		BGE	loc_8CE6
		MOV	LR, R1
		MOV	R12, R2
		MOV	R4, R0

loc_8CE6				; CODE XREF: sub_8AD4+20Aj
		ADDS	R2, #1
		SUBS	R5, #1
		BNE	loc_8CC8
		ADDS	R1, #1
		CMP	R1, #4
		BCC	loc_8CBE
		MOV	R0, LR
		LSLS	R0, R0,	#3
		MOV	R1, R12
		LDR	R5, =byte_2000016C
		ORRS	R0, R1
		STR	R0, [R5,#(dword_20000190 - 0x2000016C)]
		MOVS	R4, #1
		STR	R0, [R5,#(dword_20000194 - 0x2000016C)]
		STRB	R4, [R5,#(byte_20000174	- 0x2000016C)]
		MOVS	R6, #0
		BL	sub_8028
		STR	R4, [R5,#(dword_20000184 - 0x2000016C)]
		STRB	R6, [R5,#(byte_20000171	- 0x2000016C)]
		BL	sub_810C
		MOVS	R0, #1
		BL	sub_8540
		BL	sub_8038
		STRB	R4, [R5,#(byte_2000016D	- 0x2000016C)]
		POP	{R3-R7,PC}
; End of function sub_8AD4

; ---------------------------------------------------------------------------
off_8D20	DCD byte_2000016C	; DATA XREF: sub_8AD4+2r sub_8AD4+84r	...
off_8D24	DCD RANDOM_BYTES+0x1C	; DATA XREF: sub_8AD4+22r
dword_8D28	DCD 0x7FFF		; DATA XREF: sub_8AD4+38r
dword_8D2C	DCD 0xFFFF		; DATA XREF: sub_8AD4+46r
off_8D30	DCD byte_1FFFFDB9	; DATA XREF: sub_8AD4+5Ar
off_8D34	DCD dword_EA48		; DATA XREF: sub_8AD4+62r
dword_8D38	DCD 0xEA4A		; DATA XREF: sub_8AD4+6Ar
dword_8D3C	DCD 0xEA81		; DATA XREF: sub_8AD4+70r
off_8D40	DCD byte_2000017D	; DATA XREF: sub_8AD4+8Cr
off_8D44	DCD byte_20000180	; DATA XREF: sub_8AD4+92r sub_8AD4+E2r ...
off_8D48	DCD dword_E824		; DATA XREF: sub_8AD4:loc_8CACr
dword_8D4C	DCD 0xECFE		; DATA XREF: sub_8AD4:loc_8CBEr
off_8D50	DCD dword_E820		; DATA XREF: sub_8AD4:loc_8CC8r

; =============== S U B	R O U T	I N E =======================================


methodOnTPM_Event			; CODE XREF: TPM0_method+12p
		PUSH	{R3-R7,LR}
		LDR	R4, =byte_2000016C
		MOVS	R5, #1
		MOV	R0, R4
		LDR	R6, [R0,#(dword_20000184 - 0x2000016C)]
		LDRB	R7, [R4,#(byte_20000171	- 0x2000016C)]
		MOV	R2, R6
		MOV	R1, R6
		ADDS	R2, #0x64 ; 'd'
		ADDS	R1, #0xC8 ; 'È'
		LDRB	R0, [R0,#(byte_20000172	- 0x2000016C)]
		CMP	R7, #9		; switch 9 cases
		BCS	def_8D76	; jumptable 00008D76 default case
		MOVS	R3, R7
		ADD	R3, PC
		LDRB	R3, [R3,#4]
		ADDS	R3, R3,	R3
		ADD	PC, R3		; switch jump
; ---------------------------------------------------------------------------
jpt_8D76	DCB 4			; jump table for switch	statement
		DCB 9
		DCB 0x1D
		DCB 0x23
		DCB 0x50
		DCB 0x4B
		DCB 0x62
		DCB 0x65
		DCB 0xF5
		ALIGN 2

loc_8D82				; CODE XREF: methodOnTPM_Event+22j
		LDR	R0, =0xF0A	; jumptable 00008D76 case 0
		STRB	R5, [R4,#(byte_20000170	- 0x2000016C)]
		ADDS	R0, R6,	R0
		STR	R0, [R4,#(dword_20000184 - 0x2000016C)]
		B	loc_9070
; ---------------------------------------------------------------------------

loc_8D8C				; CODE XREF: methodOnTPM_Event+22j
		CMP	R0, #0		; jumptable 00008D76 case 1
		BEQ	loc_8DA6
		CMP	R0, #3
		BEQ	loc_8E38
		MOVS	R1, #2
		STRB	R1, [R4,#(byte_20000171	- 0x2000016C)]
		LDR	R2, =byte_2000016C
		MOVS	R1, #0xE1 ; 'á'
		LDR	R2, [R2,#(dword_20000184 - 0x2000016C)]
		LSLS	R1, R1,	#2
		ADDS	R1, R2,	R1
		STR	R1, [R4,#(dword_20000184 - 0x2000016C)]
		B	loc_9070
; ---------------------------------------------------------------------------

loc_8DA6				; CODE XREF: methodOnTPM_Event+3Aj
		MOVS	R0, #3
		STRB	R0, [R4,#(byte_20000171	- 0x2000016C)]
		MOVS	R0, #0x3E8
		ADDS	R0, R6,	R0
		STR	R0, [R4,#(dword_20000184 - 0x2000016C)]
		B	loc_9070
; ---------------------------------------------------------------------------

loc_8DB4				; CODE XREF: methodOnTPM_Event+22j
		MOVS	R0, #3		; jumptable 00008D76 case 2
		ADDS	R6, #0xFF
		STRB	R0, [R4,#(byte_20000171	- 0x2000016C)]
		ADDS	R6, #0xF5 ; 'õ'
		STR	R6, [R4,#(dword_20000184 - 0x2000016C)]
		B	loc_9070
; ---------------------------------------------------------------------------

loc_8DC0				; CODE XREF: methodOnTPM_Event+22j
		CMP	R0, #0		; jumptable 00008D76 case 3
		BEQ	loc_8E10	; jumptable 00008D76 case 5
		MOVS	R2, #4
		STRB	R2, [R4,#(byte_20000171	- 0x2000016C)]
		LDR	R2, [R4,#(dword_2000019C - 0x2000016C)]
		ADDS	R2, #1
		STR	R2, [R4,#(dword_2000019C - 0x2000016C)]
		STR	R1, [R4,#(dword_20000184 - 0x2000016C)]
		CMP	R0, #3
		BEQ	def_8D76	; jumptable 00008D76 default case
		CMP	R0, #4
		BEQ	def_8D76	; jumptable 00008D76 default case
		CMP	R0, #5
		BEQ	def_8D76	; jumptable 00008D76 default case
		MOVS	R0, #0
		STRB	R0, [R4,#(byte_2000017A	- 0x2000016C)]
		MOVS	R0, #0xF0 ; 'ð'
		STRB	R0, [R4,#(byte_2000017D	- 0x2000016C)]
		MOVS	R1, #1
		LDR	R0, =byte_2000017D
		BL	spiSend
		MOVS	R0, #0
		BL	setPortE1_unsetE0
		LDRB	R0, [R4,#(byte_20000176	- 0x2000016C)]
		LDR	R2, =byte_20000180
		MOVS	R1, #0xF
		STRB	R1, [R2]
		SUBS	R0, #1
		STRB	R0, [R2,#(byte_20000181	- 0x20000180)]
		MOVS	R1, #2
		MOV	R0, R2
		BL	spiSend
		MOVS	R0, #0xC0 ; 'À'
		STRB	R0, [R4,#(byte_2000017D	- 0x2000016C)]
		MOVS	R1, #1
		LDR	R0, =byte_2000017D
		B	loc_9006
; ---------------------------------------------------------------------------

loc_8E10				; CODE XREF: methodOnTPM_Event+22j
					; methodOnTPM_Event+6Ej
		MOVS	R0, #6		; jumptable 00008D76 case 5
		STRB	R0, [R4,#5]
		STRB	R5, [R4,#0xB]

loc_8E16				; CODE XREF: methodOnTPM_Event+EEj
		STR	R2, [R4,#0x18]

def_8D76				; CODE XREF: methodOnTPM_Event+18j
					; methodOnTPM_Event+7Ej ...
		B	loc_9070	; jumptable 00008D76 default case
; ---------------------------------------------------------------------------

loc_8E1A				; CODE XREF: methodOnTPM_Event+22j
		MOVS	R1, #5		; jumptable 00008D76 case 4
		STRB	R1, [R4,#(byte_20000171	- 0x2000016C)]
		STRB	R5, [R4,#(byte_20000170	- 0x2000016C)]
		CMP	R0, #1
		BEQ	loc_8E30
		LDR	R1, =0x6D6
		ADDS	R1, R6,	R1
		STR	R1, [R4,#(dword_20000184 - 0x2000016C)]
		CMP	R0, #6
		BEQ	loc_8E38
		B	loc_9070
; ---------------------------------------------------------------------------

loc_8E30				; CODE XREF: methodOnTPM_Event+CEj
		LDR	R0, =unk_5DC
		ADDS	R0, R6,	R0
		STR	R0, [R4,#(dword_20000184 - 0x2000016C)]
		B	loc_9070
; ---------------------------------------------------------------------------

loc_8E38				; CODE XREF: methodOnTPM_Event+3Ej
					; methodOnTPM_Event+D8j
		BL	sub_8028
		B	loc_9070
; ---------------------------------------------------------------------------

loc_8E3E				; CODE XREF: methodOnTPM_Event+22j
		MOVS	R0, #7		; jumptable 00008D76 case 6
		STRB	R0, [R4,#(byte_20000171	- 0x2000016C)]
		B	loc_8E16
; ---------------------------------------------------------------------------

loc_8E44				; CODE XREF: methodOnTPM_Event+22j
		MOVS	R0, #8		; jumptable 00008D76 case 7
		STRB	R0, [R4,#(byte_20000171	- 0x2000016C)]
		STR	R1, [R4,#(dword_20000184 - 0x2000016C)]
		MOVS	R0, #0xA0 ; ' '
		STRB	R0, [R4,#(byte_2000017D	- 0x2000016C)]
		MOVS	R1, #1
		LDR	R0, =byte_2000017D
		BL	spiSend
		LDRB	R0, [R4,#(byte_20000172	- 0x2000016C)]
		CMP	R0, #3
		BEQ	loc_8EDC
		MOVS	R0, #0xE0 ; 'à'
		STRB	R0, [R4,#(byte_2000017D	- 0x2000016C)]
		MOVS	R1, #1
		LDR	R0, =byte_2000017D
		BL	spiSend
		LDRB	R0, [R4,#(byte_20000172	- 0x2000016C)]
		CMP	R0, #0
		BEQ	loc_8ED4
		CMP	R0, #1
		BEQ	loc_8ED8
		CMP	R0, #6
		BEQ	loc_8ED0
		MOVS	R1, #0x27 ; '''

loc_8E78				; CODE XREF: methodOnTPM_Event+17Ej
					; methodOnTPM_Event+182j ...
		LDR	R0, =byte_1FFFFDB9
		BL	spiSend
		LDRB	R0, [R4,#(byte_20000172	- 0x2000016C)]
		CMP	R0, #3
		BEQ	loc_8EDC
		CMP	R0, #4
		BEQ	loc_8EDC
		CMP	R0, #5
		BEQ	loc_8EDC
		LDRB	R0, [R4,#(byte_2000017B	- 0x2000016C)]
		BL	setC7_unsetC4
		LDRB	R0, [R4,#(byte_2000017B	- 0x2000016C)]
		EORS	R0, R5
		STRB	R0, [R4,#(byte_2000017B	- 0x2000016C)]

loc_8E98				; CODE XREF: methodOnTPM_Event+18Ej
		LDRB	R0, [R4,#(byte_20000174	- 0x2000016C)]
		CMP	R0, #0
		BEQ	loc_8EB4
		MOVS	R0, #0
		STRB	R0, [R4,#(byte_20000174	- 0x2000016C)]
		LDR	R1, =byte_20000180
		MOVS	R2, #0x28 ; '('
		LDRH	R0, [R4,#(dword_20000194 - 0x2000016C)]
		STRB	R2, [R1]
		STRB	R0, [R1,#(byte_20000181	- 0x20000180)]
		MOVS	R1, #2
		LDR	R0, =byte_20000180
		BL	spiSend

loc_8EB4				; CODE XREF: methodOnTPM_Event+148j
		MOVS	R0, #1
		BL	setPortE1_unsetE0
		LDRB	R0, [R4,#(byte_20000178	- 0x2000016C)]
		LDRB	R1, [R4,#(byte_20000173	- 0x2000016C)]
		CMP	R0, #0
		BEQ	loc_8EE4
		CMP	R0, #3
		BEQ	loc_8EE4
		CMP	R0, #1
		BEQ	loc_8FB2
		CMP	R0, #2
		BEQ	loc_8FB2
		B	def_8F08	; jumptable 00008F08 default case
; ---------------------------------------------------------------------------

loc_8ED0				; CODE XREF: methodOnTPM_Event+120j
		MOVS	R1, #0x1E
		B	loc_8E78
; ---------------------------------------------------------------------------

loc_8ED4				; CODE XREF: methodOnTPM_Event+118j
		MOVS	R1, #0x16
		B	loc_8E78
; ---------------------------------------------------------------------------

loc_8ED8				; CODE XREF: methodOnTPM_Event+11Cj
		MOVS	R1, #0x26 ; '&'
		B	loc_8E78
; ---------------------------------------------------------------------------

loc_8EDC				; CODE XREF: methodOnTPM_Event+106j
					; methodOnTPM_Event+12Ej ...
		LDRB	R0, [R4,#0x10]
		BL	setC7_unsetC4
		B	loc_8E98
; ---------------------------------------------------------------------------

loc_8EE4				; CODE XREF: methodOnTPM_Event+16Cj
					; methodOnTPM_Event+170j
		LDRB	R0, [R4,#9]
		ADDS	R0, #1
		UXTB	R0, R0
		STRB	R0, [R4,#9]
		LDR	R2, [R4,#0x2C]
		CMP	R0, R2
		BCC	loc_8EFC
		MOVS	R0, #0
		STRB	R0, [R4,#9]
		LDRB	R0, [R4,#0xF]
		EORS	R0, R5
		STRB	R0, [R4,#0xF]

loc_8EFC				; CODE XREF: methodOnTPM_Event+19Cj
		CMP	R1, #7		; switch 7 cases
		BCS	def_8F08	; jumptable 00008F08 default case
		MOVS	R3, R1
		ADD	R3, PC
		LDRB	R3, [R3,#4]
		ADDS	R3, R3,	R3
		ADD	PC, R3		; switch jump
; ---------------------------------------------------------------------------
jpt_8F08	DCB 3			; jump table for switch	statement
		DCB 0x2D
		DCB 0x54
		DCB 0x5A
		DCB 0x5A
		DCB 0x5C
		DCB 0x65
		ALIGN 2

loc_8F12				; CODE XREF: methodOnTPM_Event+1B4j
		LDR	R1, =TX_ID	; jumptable 00008F08 case 0
		LDRB	R3, [R1]
		MOV	R0, R3
		LDRB	R3, [R1,#(TX_ID+1 - 0x1400)]
		LSLS	R3, R3,	#8
		ORRS	R0, R3
		LDRB	R3, [R1,#(TX_ID+2 - 0x1400)]
		LDRB	R2, [R1,#(TX_ID+3 - 0x1400)]
		LSLS	R3, R3,	#0x10
		ORRS	R0, R3
		LSLS	R2, R2,	#0x18
		ORRS	R0, R2
		LSLS	R0, R0,	#0x18
		LSRS	R0, R0,	#0x1C
		CMP	R0, #9
		BLS	loc_8F34
		MOVS	R0, #9

loc_8F34				; CODE XREF: methodOnTPM_Event+1DCj
		MOV	R2, R1
		LDRB	R3, [R2]
		MOV	R1, R3
		LDRB	R3, [R2,#(TX_ID+1 - 0x1400)]
		LSLS	R3, R3,	#8
		ORRS	R1, R3
		LDRB	R3, [R2,#(TX_ID+2 - 0x1400)]
		LDRB	R2, [R2,#(TX_ID+3 - 0x1400)]
		LSLS	R3, R3,	#0x10
		ORRS	R1, R3
		LSLS	R2, R2,	#0x18
		ORRS	R1, R2
		LSLS	R1, R1,	#0x1C
		LDR	R2, =0xEB7D
		LSRS	R1, R1,	#0x18
		ADDS	R1, R1,	R2
		LDRB	R2, [R4,#9]
		LSLS	R0, R0,	#4
		LDRB	R1, [R1,R2]
		LDR	R2, =0xEADD
		ADDS	R0, R0,	R2
		LDRB	R0, [R1,R0]
		STRB	R0, [R4,#0xA]
		B	def_8F08	; jumptable 00008F08 default case
; ---------------------------------------------------------------------------

loc_8F64				; CODE XREF: methodOnTPM_Event+22j
		B	loc_900C	; jumptable 00008D76 case 8
; ---------------------------------------------------------------------------

loc_8F66				; CODE XREF: methodOnTPM_Event+1B4j
		LDR	R0, =TX_ID	; jumptable 00008F08 case 1
		LDRB	R3, [R0]
		MOV	R1, R3
		LDRB	R3, [R0,#(TX_ID+1 - 0x1400)]
		LSLS	R3, R3,	#8
		ORRS	R1, R3
		LDRB	R3, [R0,#(TX_ID+2 - 0x1400)]
		LDRB	R2, [R0,#(TX_ID+3 - 0x1400)]
		LSLS	R3, R3,	#0x10
		ORRS	R1, R3
		LSLS	R2, R2,	#0x18
		ORRS	R1, R2
		MOV	R2, R0
		LSLS	R1, R1,	#0x1B
		LDRB	R3, [R2]
		LSRS	R1, R1,	#0x1B
		MOV	R0, R3
		LDRB	R3, [R2,#(TX_ID+1 - 0x1400)]
		LSLS	R3, R3,	#8
		ORRS	R0, R3
		LDRB	R3, [R2,#(TX_ID+2 - 0x1400)]
		LDRB	R2, [R2,#(TX_ID+3 - 0x1400)]
		LSLS	R3, R3,	#0x10
		ORRS	R0, R3
		LSLS	R2, R2,	#0x18
		ORRS	R0, R2
		LSLS	R0, R0,	#0x18
		LSRS	R0, R0,	#0x1D
		LDR	R2, =0xEC7D
		LSLS	R0, R0,	#4
		ADDS	R0, R0,	R2
		LDRB	R2, [R4,#9]
		LDRB	R0, [R0,R2]
		LSLS	R2, R0,	#3
		SUBS	R0, R2,	R0
		ADDS	R0, R1,	R0
		ADDS	R0, #5
		B	loc_8FBC
; ---------------------------------------------------------------------------

loc_8FB2				; CODE XREF: methodOnTPM_Event+174j
					; methodOnTPM_Event+178j
		B	loc_8FDA
; ---------------------------------------------------------------------------

loc_8FB4				; CODE XREF: methodOnTPM_Event+1B4j
		LDR	R0, =TX_ID	; jumptable 00008F08 case 2
		LDRB	R1, [R4,#9]
		ADDS	R0, R0,	R1
		LDRB	R0, [R0,#4]

loc_8FBC				; CODE XREF: methodOnTPM_Event+25Cj
					; methodOnTPM_Event+26Ej ...
		STRB	R0, [R4,#0xA]
		B	def_8F08	; jumptable 00008F08 default case
; ---------------------------------------------------------------------------

loc_8FC0				; CODE XREF: methodOnTPM_Event+1B4j
		LDRH	R0, [R4,#0x34]	; jumptable 00008F08 cases 3,4
		B	loc_8FBC
; ---------------------------------------------------------------------------

loc_8FC4				; CODE XREF: methodOnTPM_Event+1B4j
		LDRB	R0, [R4,#0xA]	; jumptable 00008F08 case 5
		ADDS	R0, #1
		UXTB	R0, R0
		STRB	R0, [R4,#0xA]
		SUBS	R0, #0xA
		CMP	R0, #0x8D ; ''
		BCC	def_8F08	; jumptable 00008F08 default case
		MOVS	R0, #0xA
		B	loc_8FBC
; ---------------------------------------------------------------------------

loc_8FD6				; CODE XREF: methodOnTPM_Event+1B4j
		MOVS	R0, #0xA0 ; ' '	; jumptable 00008F08 case 6
		B	loc_8FBC
; ---------------------------------------------------------------------------

loc_8FDA				; CODE XREF: methodOnTPM_Event:loc_8FB2j
		LDRB	R0, [R4,#6]
		CMP	R0, #0
		BEQ	loc_8FEA
		LDRB	R0, [R4,#0xA]
		CMP	R0, #0xD
		BEQ	loc_8FEE
		MOVS	R0, #0xD
		B	loc_8FBC
; ---------------------------------------------------------------------------

loc_8FEA				; CODE XREF: methodOnTPM_Event+28Aj
		STRB	R5, [R4,#0xA]
		B	def_8F08	; jumptable 00008F08 default case
; ---------------------------------------------------------------------------

loc_8FEE				; CODE XREF: methodOnTPM_Event+290j
		MOVS	R0, #0x8C ; ''
		STRB	R0, [R4,#0xA]
		LDRB	R0, [R4,#0xF]
		EORS	R0, R5
		STRB	R0, [R4,#0xF]

def_8F08				; CODE XREF: methodOnTPM_Event+17Aj
					; methodOnTPM_Event+1AAj ...
		LDR	R1, =byte_20000180 ; jumptable 00008F08	default	case
		LDRB	R0, [R4,#0xA]
		MOVS	R2, #0xF
		STRB	R2, [R1]
		STRB	R0, [R1,#(byte_20000181	- 0x20000180)]
		MOVS	R1, #2
		LDR	R0, =byte_20000180

loc_9006				; CODE XREF: methodOnTPM_Event+BAj
		BL	spiSend
		B	loc_9070
; ---------------------------------------------------------------------------

loc_900C				; CODE XREF: methodOnTPM_Event:loc_8F64j
		STR	R2, [R4,#(dword_20000184 - 0x2000016C)]
		LDRB	R1, [R4,#(byte_20000173	- 0x2000016C)]
		CMP	R0, R1
		BNE	loc_9024
		STRB	R5, [R4,#(byte_20000171	- 0x2000016C)]
		MOVS	R0, #0xD0 ; 'Ð'
		STRB	R0, [R4,#(byte_2000017D	- 0x2000016C)]
		MOVS	R1, #1
		LDR	R0, =byte_2000017D
		BL	spiSend
		B	loc_9070
; ---------------------------------------------------------------------------

loc_9024				; CODE XREF: methodOnTPM_Event+2BEj
		MOVS	R0, #0
		STRB	R1, [R4,#(byte_20000172	- 0x2000016C)]
		STRB	R0, [R4,#(byte_20000175	- 0x2000016C)]
		CMP	R1, #0
		BEQ	loc_9040
		CMP	R1, #1
		BEQ	loc_9040
		LDR	R0, =TX_ID
		LDRB	R2, [R0,#(RANDOM_BYTES - 0x1400)]
		LDRB	R0, [R0,#(RANDOM_BYTES+0x10 - 0x1400)]
		CMP	R2, R0
		BEQ	loc_9040
		MOVS	R0, #0x20 ; ' '
		B	loc_9042
; ---------------------------------------------------------------------------

loc_9040				; CODE XREF: methodOnTPM_Event+2D8j
					; methodOnTPM_Event+2DCj ...
		MOVS	R0, #0x10

loc_9042				; CODE XREF: methodOnTPM_Event+2EAj
		STR	R0, [R4,#0x2C]
		CMP	R1, #0
		BEQ	loc_9078
		CMP	R1, #1
		BEQ	loc_907C
		CMP	R1, #3
		BEQ	loc_9080
		CMP	R1, #6
		BEQ	loc_9084
		MOVS	R0, #2

loc_9056				; CODE XREF: methodOnTPM_Event+326j
					; methodOnTPM_Event+32Aj ...
		MOVS	R1, #0xA
		MULS	R0, R1
		LDR	R1, =0xEA4F
		MOVS	R5, #0
		ADDS	R6, R0,	R1

loc_9060				; CODE XREF: methodOnTPM_Event+31Aj
		LSLS	R0, R5,	#1
		ADDS	R0, R6,	R0
		MOVS	R1, #2
		BL	spiSend
		ADDS	R5, #1
		CMP	R5, #5
		BCC	loc_9060

loc_9070				; CODE XREF: methodOnTPM_Event+36j
					; methodOnTPM_Event+50j ...
		LDR	R0, [R4,#0x18]
		BL	sub_8540
		POP	{R3-R7,PC}
; ---------------------------------------------------------------------------

loc_9078				; CODE XREF: methodOnTPM_Event+2F2j
		MOVS	R0, #0
		B	loc_9056
; ---------------------------------------------------------------------------

loc_907C				; CODE XREF: methodOnTPM_Event+2F6j
		MOVS	R0, #1
		B	loc_9056
; ---------------------------------------------------------------------------

loc_9080				; CODE XREF: methodOnTPM_Event+2FAj
		MOVS	R0, #3
		B	loc_9056
; ---------------------------------------------------------------------------

loc_9084				; CODE XREF: methodOnTPM_Event+2FEj
		MOVS	R0, #4
		B	loc_9056
; End of function methodOnTPM_Event

; ---------------------------------------------------------------------------
off_9088	DCD byte_2000016C	; DATA XREF: methodOnTPM_Event+2r
					; methodOnTPM_Event+44r
dword_908C	DCD 0xF0A		; DATA XREF: methodOnTPM_Event:loc_8D82r
off_9090	DCD byte_2000017D	; DATA XREF: methodOnTPM_Event+92r
					; methodOnTPM_Event+B8r ...
off_9094	DCD byte_20000180	; DATA XREF: methodOnTPM_Event+A0r
					; methodOnTPM_Event+14Er ...
dword_9098	DCD 0x6D6		; DATA XREF: methodOnTPM_Event+D0r
off_909C	DCD unk_5DC		; DATA XREF: methodOnTPM_Event:loc_8E30r
off_90A0	DCD byte_1FFFFDB9	; DATA XREF: methodOnTPM_Event:loc_8E78r
off_90A4	DCD TX_ID		; DATA XREF: methodOnTPM_Event:loc_8F12r
					; methodOnTPM_Event:loc_8F66r ...
dword_90A8	DCD 0xEB7D		; DATA XREF: methodOnTPM_Event+1FAr
dword_90AC	DCD 0xEADD		; DATA XREF: methodOnTPM_Event+206r
dword_90B0	DCD 0xEC7D		; DATA XREF: methodOnTPM_Event+24Ar
dword_90B4	DCD 0xEA4F		; DATA XREF: methodOnTPM_Event+306r

; =============== S U B	R O U T	I N E =======================================


rxBindingPage				; CODE XREF: rxBindingShow+4p
					; main_screen+18Cp
		PUSH	{R3-R7,LR}
		LDR	R0, =0xC350
		BL	timerSendPacket
		LDR	R5, =sendingPacket
		MOVS	R0, #1
		STRB	R0, [R5]
		MOVS	R0, #0xA5 ; '¥'
		BL	addPacketToResend1FFFFCF5When2000013C
		LDR	R4, =byte_20000000
		MOVS	R6, #0
		STRB	R6, [R4,#(byte_20000003	- 0x20000000)]
		BL	callSetupDMAandSend

loc_90D6				; CODE XREF: rxBindingPage+42j
		MOVS	R3, #0		; a4
		MOVS	R2, #0xA	; y
		MOV	R1, R3		; x
		ADR	R0, aRxbinding__ ; "RXBinding.."
		BL	displayTextAt
		BL	LCD_updateCALL
		BL	sub_2574
		CMP	R0, #0xFF
		BEQ	loc_90F6
		BL	getKeyCode
		CMP	R0, #0xB
		BEQ	loc_90FC

loc_90F6				; CODE XREF: rxBindingPage+34j
		LDRB	R0, [R4,#(byte_20000003	- 0x20000000)]
		CMP	R0, #0
		BEQ	loc_90D6

loc_90FC				; CODE XREF: rxBindingPage+3Cj
		LDRB	R0, [R4,#(byte_20000003	- 0x20000000)]
		CMP	R0, #0
		BEQ	loc_9118
		MOVS	R3, #0		; a4
		MOVS	R2, #0x14	; y
		MOV	R1, R3		; x
		ADR	R0, aRxbindFail	; "RXBind Fail"
		BL	displayTextAt
		BL	LCD_updateCALL
		MOVS	R0, #0xA6 ; '¦'
		BL	addPacketToResend1FFFFCF5When2000013C

loc_9118				; CODE XREF: rxBindingPage+48j
		LDR	R7, =rxsettings
		MOVS	R1, #0x92 ; ''
		LDRB	R0, [R7,#(currentModel - 0x200002A4)]
		MULS	R0, R1
		ADDS	R0, R0,	R7
		ADDS	R0, #0x60 ; '`'
		LDRB	R0, [R0,#0xA]
		CMP	R0, #0
		BEQ	loc_916E
		LDRB	R0, [R4,#(byte_20000003	- 0x20000000)]
		CMP	R0, #0
		BEQ	loc_916E
		MOVS	R3, #0		; a4
		MOVS	R2, #0x14	; y
		MOV	R1, R3		; x
		ADR	R0, aRxbindOk	; "RXBind OK  "
		BL	displayTextAt
		BL	LCD_updateCALL
		LDR	R0, =0x7A120
		BL	timerSendPacket
		MOVS	R0, #0x9A ; ''
		BL	addPacketToResend1FFFFCF5When2000013C
		LDR	R0, =0xC350
		BL	timerSendPacket
		LDR	R0, =dword_1FFFF884
		MOVS	R2, #0x92 ; ''
		LDR	R1, [R0]
		LDRB	R0, [R7,#(currentModel - 0x200002A4)]
		MULS	R0, R2
		ADDS	R0, R0,	R7
		ADDS	R0, #0x61 ; 'a'
		STRB	R1, [R0,#0xC]
		LSRS	R2, R1,	#8
		STRB	R2, [R0,#0xD]
		LSRS	R2, R1,	#0x10
		STRB	R2, [R0,#0xE]
		LSRS	R1, R1,	#0x18
		STRB	R1, [R0,#0xF]

loc_916E				; CODE XREF: rxBindingPage+70j
					; rxBindingPage+76j
		STRB	R6, [R5]
		POP	{R3-R7,PC}
; End of function rxBindingPage

; ---------------------------------------------------------------------------
		ALIGN 4
dword_9174	DCD 0xC350		; DATA XREF: rxBindingPage+2r
					; rxBindingPage+94r
off_9178	DCD sendingPacket	; DATA XREF: rxBindingPage+8r
off_917C	DCD byte_20000000	; DATA XREF: rxBindingPage+14r
aRxbinding__	DCB "RXBinding..",0     ; DATA XREF: rxBindingPage+24o
aRxbindFail	DCB "RXBind Fail",0     ; DATA XREF: rxBindingPage+50o
off_9198	DCD rxsettings		; DATA XREF: rxBindingPage:loc_9118r
aRxbindOk	DCB "RXBind OK  ",0     ; DATA XREF: rxBindingPage+7Eo
dword_91A8	DCD 0x7A120		; DATA XREF: rxBindingPage+88r
off_91AC	DCD dword_1FFFF884	; DATA XREF: rxBindingPage+9Ar

; =============== S U B	R O U T	I N E =======================================


RxSetupPage				; DATA XREF: factoryModeMenu:loc_6CFCo
					; ROM:off_6D58o ...
		PUSH	{R4,LR}
		LDR	R2, =unk_D2C0	; pageName
		MOVS	R1, #9		; numberOfItems
		LDR	R0, =aRxSetup	; namePtr
		BL	showNavigationPage
		MOVS	R0, #0
		POP	{R4,PC}
; End of function RxSetupPage

; ---------------------------------------------------------------------------
; char **pageName
pageName	DCD unk_D2C0		; DATA XREF: RxSetupPage+2r
; _BYTE	*off_91C4
off_91C4	DCD aRxSetup		; DATA XREF: RxSetupPage+6r
					; "RX Setup"

; =============== S U B	R O U T	I N E =======================================


RFStandardPage

var_38		= -0x38
var_37		= -0x37
var_36		= -0x36
var_35		= -0x35
var_34		= -0x34

		PUSH	{R4-R7,LR}
		SUB	SP, SP,	#0x24
		MOVS	R5, #1
		LDR	R4, =rxsettings
		LDR	R7, =0x61A8
		MOVS	R6, #0x9B ; ''

loc_91D4				; CODE XREF: RFStandardPage+64j
					; RFStandardPage:loc_9292j ...
		BL	callSetupDMAandSend
		ADR	R0, aRfStandard	; "RF Standard"
		BL	displayPageHeader
		MOVS	R3, #0		; a4
		MOVS	R2, #0x18	; y
		MOVS	R1, #0x24 ; '$' ; x
		LDR	R0, =aAfhds2a	; "AFHDS 2A"
		BL	displayTextAt
		LDRB	R0, [R4,#(currentModel - 0x200002A4)]
		MOVS	R1, #0x92 ; ''
		MULS	R0, R1
		ADDS	R0, R0,	R4
		ADDS	R0, #0x60 ; '`'
		LDRB	R0, [R0,#0xA]
		CMP	R0, #0
		BEQ	loc_91FE
		LDR	R0, =0xCA77
		B	loc_9200
; ---------------------------------------------------------------------------

loc_91FE				; CODE XREF: RFStandardPage+30j
		LDR	R0, =aOff_0	; text

loc_9200				; CODE XREF: RFStandardPage+34j
		MOVS	R3, #0		; a4
		MOVS	R2, #0x28 ; '('	; y
		MOVS	R1, #0x36 ; '6'	; x
		BL	displayTextAt
		BL	LCD_updateCALL
		BL	getKeyCode
		CMP	R0, #9
		BEQ	loc_9234
		CMP	R0, #0x17
		BEQ	loc_9234
		CMP	R0, #8
		BEQ	loc_9296
		CMP	R0, #0x18
		BEQ	loc_9296
		CMP	R0, #0x19
		BEQ	loc_930C
		CMP	R0, #0xA
		BEQ	loc_930C
		CMP	R0, #0xB
		BNE	loc_91D4
		MOVS	R0, #0
		ADD	SP, SP,	#0x24
		POP	{R4-R7,PC}
; ---------------------------------------------------------------------------

loc_9234				; CODE XREF: RFStandardPage+4Cj
					; RFStandardPage+50j
		LDRB	R0, [R4,#9]
		MOVS	R1, #0x92 ; ''
		MULS	R0, R1
		ADDS	R0, R0,	R4
		ADDS	R0, #0x60 ; '`'
		LDRB	R1, [R0,#0xA]
		EORS	R1, R5
		STRB	R1, [R0,#0xA]
		CMP	R1, #1
		BNE	loc_928C
		MOV	R0, R7
		BL	timerSendPacket
		MOV	R1, SP
		STRB	R6, [R1,#0x38+var_38]
		LDRB	R0, [R4,#9]
		MOVS	R1, #0x92 ; ''
		MULS	R0, R1
		ADDS	R0, R0,	R4
		ADDS	R0, #0x61 ; 'a'
		MOVS	R1, #0xC
		ADDS	R1, R0,	R1
		LDRB	R2, [R1]
		MOV	R0, R2
		LDRB	R2, [R1,#1]
		LSLS	R2, R2,	#8
		ORRS	R0, R2
		LDRB	R2, [R1,#2]
		LDRB	R1, [R1,#3]
		LSLS	R2, R2,	#0x10
		ORRS	R0, R2
		LSLS	R1, R1,	#0x18
		ORRS	R0, R1
		MOV	R1, SP		; a2
		STRB	R0, [R1,#0x38+var_37]
		LSRS	R2, R0,	#8
		STRB	R2, [R1,#0x38+var_36]
		LSRS	R2, R0,	#0x10
		STRB	R2, [R1,#0x38+var_35]
		LSRS	R0, R0,	#0x18
		STRB	R0, [R1,#0x38+var_34]
		MOV	R0, SP		; targetAddress
		BL	sendPacketToRadio

loc_928C				; CODE XREF: RFStandardPage+7Ej
		BL	sub_9BC0
		CMP	R0, #2

loc_9292				; CODE XREF: RFStandardPage+12Cj
		BCC	loc_91D4
		B	loc_92F6
; ---------------------------------------------------------------------------

loc_9296				; CODE XREF: RFStandardPage+54j
					; RFStandardPage+58j
		LDRB	R0, [R4,#9]
		MOVS	R1, #0x92 ; ''
		MULS	R0, R1
		ADDS	R0, R0,	R4
		ADDS	R0, #0x60 ; '`'
		LDRB	R1, [R0,#0xA]
		EORS	R1, R5
		STRB	R1, [R0,#0xA]
		CMP	R1, #1
		BNE	loc_92EE
		MOV	R0, R7
		BL	timerSendPacket
		MOV	R1, SP
		STRB	R6, [R1,#0x38+var_38]
		LDRB	R0, [R4,#9]
		MOVS	R1, #0x92 ; ''
		MULS	R0, R1
		ADDS	R0, R0,	R4
		ADDS	R0, #0x61 ; 'a'
		MOVS	R1, #0xC
		ADDS	R1, R0,	R1
		LDRB	R2, [R1]
		MOV	R0, R2
		LDRB	R2, [R1,#1]
		LSLS	R2, R2,	#8
		ORRS	R0, R2
		LDRB	R2, [R1,#2]
		LDRB	R1, [R1,#3]
		LSLS	R2, R2,	#0x10
		ORRS	R0, R2
		LSLS	R1, R1,	#0x18
		ORRS	R0, R1
		MOV	R1, SP		; a2
		STRB	R0, [R1,#0x38+var_37]
		LSRS	R2, R0,	#8
		STRB	R2, [R1,#0x38+var_36]
		LSRS	R2, R0,	#0x10
		STRB	R2, [R1,#0x38+var_35]
		LSRS	R0, R0,	#0x18
		STRB	R0, [R1,#0x38+var_34]
		MOV	R0, SP		; targetAddress
		BL	sendPacketToRadio

loc_92EE				; CODE XREF: RFStandardPage+E0j
		BL	sub_9BC0
		CMP	R0, #2
		BCC	loc_9292

loc_92F6				; CODE XREF: RFStandardPage+CCj
		MOVS	R0, #0x31 ; '1'
		MOVS	R1, #0xF
		LSLS	R0, R0,	#4
		BL	beep
		MOVS	R1, #0xF
		MOVS	R0, #0
		BL	beep
		B	loc_91D4
; ---------------------------------------------------------------------------
		B	loc_930C
; ---------------------------------------------------------------------------

loc_930C				; CODE XREF: RFStandardPage+5Cj
					; RFStandardPage+60j ...
		MOVS	R0, #1
		ADD	SP, SP,	#0x24
		POP	{R4-R7,PC}
; End of function RFStandardPage

; ---------------------------------------------------------------------------
		ALIGN 4
off_9314	DCD rxsettings		; DATA XREF: RFStandardPage+6r
dword_9318	DCD 0x61A8		; DATA XREF: RFStandardPage+8r
aRfStandard	DCB "RF Standard",0     ; DATA XREF: RFStandardPage+10o
; _BYTE	*off_9328
off_9328	DCD aAfhds2a		; DATA XREF: RFStandardPage+1Cr
					; "AFHDS 2A"
dword_932C	DCD 0xCA77		; DATA XREF: RFStandardPage+32r
; _BYTE	*off_9330
off_9330	DCD aOff_0		; DATA XREF: RFStandardPage:loc_91FEr
					; "Off"

; =============== S U B	R O U T	I N E =======================================


ServosFreqMenu

var_1D		= -0x1D

		PUSH	{R4-R7,LR}
		MOVS	R6, #0xFF
		SUB	SP, SP,	#0xC
		MOVS	R5, #0
		ADDS	R6, #0x7D ; '}'
		LDR	R4, =rxsettings
		MOVS	R7, #0x32 ; '2'

loc_9342				; CODE XREF: ServosFreqMenu+72j
					; ServosFreqMenu+8Ej ...
		BL	callSetupDMAandSend
		ADR	R0, aServosFreq	; "Servos Freq"
		BL	displayPageHeader
		MOVS	R3, #0		; a4
		MOVS	R2, #0x18	; y
		MOVS	R1, #0x1C	; x
		ADR	R0, aFrequency_0 ; "Frequency"
		BL	displayTextAt
		LDRB	R0, [R4,#(currentModel - 0x200002A4)]
		MOVS	R1, #0x92 ; ''
		MULS	R0, R1
		ADDS	R0, R0,	R4
		ADDS	R0, #0x71 ; 'q'
		LDRB	R1, [R0,#1]
		LDRB	R2, [R0]
		LSLS	R0, R1,	#8
		ORRS	R0, R2		; sourceVal
		MOVS	R2, #3		; length
		MOV	R1, SP		; targetText
		BL	intToString
		MOV	R0, SP		; text
		STRB	R5, [R0,#0x20+var_1D]
		MOVS	R3, #0		; a4
		MOVS	R2, #0x28 ; '('	; y
		MOVS	R1, #0x32 ; '2'	; x
		BL	displayTextAt
		BL	LCD_updateCALL
		BL	getKeyCode
		CMP	R0, #8
		BEQ	loc_93AE
		CMP	R0, #0x18
		BEQ	loc_93AE
		CMP	R0, #9
		BEQ	loc_93D6
		CMP	R0, #0x17
		BEQ	loc_93D6
		CMP	R0, #0x16
		BEQ	loc_93FE
		CMP	R0, #0x19
		BEQ	loc_942A
		CMP	R0, #0xA
		BEQ	loc_942A
		CMP	R0, #0xB
		BNE	loc_9342
		MOVS	R0, #0
		ADD	SP, SP,	#0xC
		POP	{R4-R7,PC}
; ---------------------------------------------------------------------------

loc_93AE				; CODE XREF: ServosFreqMenu+56j
					; ServosFreqMenu+5Aj
		LDRB	R0, [R4,#9]
		MOVS	R1, #0x92 ; ''
		MULS	R0, R1
		ADDS	R1, R0,	R4
		ADDS	R1, #0x71 ; 'q'
		LDRB	R0, [R1,#1]
		LDRB	R2, [R1]
		LSLS	R0, R0,	#8
		ORRS	R0, R2
		CMP	R0, #0x32 ; '2'
		BLS	loc_9342
		SUBS	R0, #1
		STRB	R0, [R1]
		LSRS	R0, R0,	#8
		STRB	R0, [R1,#1]
		BL	sub_9BC0
		CMP	R0, #2
		BCC	loc_9342
		B	loc_9416
; ---------------------------------------------------------------------------

loc_93D6				; CODE XREF: ServosFreqMenu+5Ej
					; ServosFreqMenu+62j
		LDRB	R0, [R4,#9]
		MOVS	R1, #0x92 ; ''
		MULS	R0, R1
		ADDS	R1, R0,	R4
		ADDS	R1, #0x71 ; 'q'
		LDRB	R0, [R1,#1]
		LDRB	R2, [R1]
		LSLS	R0, R0,	#8
		ORRS	R0, R2
		CMP	R0, R6
		BCS	loc_9342
		ADDS	R0, #1
		STRB	R0, [R1]
		LSRS	R0, R0,	#8
		STRB	R0, [R1,#1]
		BL	sub_9BC0
		CMP	R0, #2
		BCC	loc_9342
		B	loc_9416
; ---------------------------------------------------------------------------

loc_93FE				; CODE XREF: ServosFreqMenu+66j
		LDRB	R0, [R4,#(currentModel - 0x200002A4)]
		MOVS	R1, #0x92 ; ''
		MULS	R0, R1
		ADDS	R0, R0,	R4
		ADDS	R0, #0x71 ; 'q'
		STRB	R7, [R0]
		LSRS	R1, R7,	#8
		STRB	R1, [R0,#1]
		BL	sub_9BC0
		CMP	R0, #2
		BCC	loc_9342

loc_9416				; CODE XREF: ServosFreqMenu+A0j
					; ServosFreqMenu+C8j
		MOVS	R0, #0x31 ; '1'
		MOVS	R1, #0xF
		LSLS	R0, R0,	#4
		BL	beep
		MOVS	R1, #0xF
		MOVS	R0, #0
		BL	beep
		B	loc_9342
; ---------------------------------------------------------------------------

loc_942A				; CODE XREF: ServosFreqMenu+6Aj
					; ServosFreqMenu+6Ej
		MOVS	R5, #0
		LDR	R4, =byte_2000013F
		MOVS	R6, #1

loc_9430				; CODE XREF: ServosFreqMenu+112j
		LDRB	R0, [R4]
		CMP	R0, #1
		BNE	loc_9440

loc_9436				; CODE XREF: ServosFreqMenu+10Aj
		BL	sendPacketWithTimer
		LDRB	R0, [R4]
		CMP	R0, #1
		BEQ	loc_9436

loc_9440				; CODE XREF: ServosFreqMenu+100j
		ADDS	R5, #1
		STRB	R6, [R4]
		CMP	R5, #5
		BCC	loc_9430
		MOVS	R0, #1
		ADD	SP, SP,	#0xC
		POP	{R4-R7,PC}
; End of function ServosFreqMenu

; ---------------------------------------------------------------------------
		ALIGN 0x10
off_9450	DCD rxsettings		; DATA XREF: ServosFreqMenu+Ar
aServosFreq	DCB "Servos Freq",0     ; DATA XREF: ServosFreqMenu+12o
aFrequency_0	DCB "Frequency",0       ; DATA XREF: ServosFreqMenu+1Eo
		ALIGN 4
off_946C	DCD byte_2000013F	; DATA XREF: ServosFreqMenu+F8r

; =============== S U B	R O U T	I N E =======================================


ibussetupmenu

var_50		= -0x50
var_4C		= -0x4C
var_48		= -0x48
var_44		= -0x44
var_40		= -0x40
text		= -0x3C
targetAddress	= -0x38
var_36		= -0x36
var_35		= -0x35
var_34		= -0x34
var_33		= -0x33

		PUSH	{R4-R7,LR}
		ADR	R0, dword_9634
		SUB	SP, SP,	#0x3C
		LDR	R0, [R0]
		MOVS	R4, #1
		LDR	R5, =byte_20000000
		STR	R0, [SP,#0x50+text]

loc_947E				; CODE XREF: ibussetupmenu+6Cj
					; ibussetupmenu+76j ...
		BL	callSetupDMAandSend
		ADR	R0, aIBusSetup	; "i-BUS Setup"
		BL	displayPageHeader
		MOVS	R3, #0		; a4
		MOVS	R2, #0x18	; y
		MOVS	R1, #0x24 ; '$' ; x
		ADR	R0, aChannel	; "Channel"
		BL	displayTextAt
		MOV	R0, R4
		ADDS	R0, #0x30 ; '0'
		UXTB	R6, R0
		MOV	R0, SP
		STRB	R6, [R0,#0x50+text+2]
		MOVS	R3, #0		; a4
		MOVS	R2, #0x28 ; '('	; y
		MOVS	R1, #0x32 ; '2'	; x
		ADD	R0, SP,	#0x50+text ; text
		BL	displayTextAt
		CMP	R4, #0xA
		BCC	loc_94BA
		MOVS	R3, #0		; a4
		MOVS	R2, #0x28 ; '('	; y
		MOVS	R1, #0x32 ; '2'	; x
		ADR	R0, aCh10	; "CH10"
		BL	displayTextAt

loc_94BA				; CODE XREF: ibussetupmenu+3Cj
		BL	LCD_updateCALL
		BL	getKeyCode
		CMP	R0, #8
		BEQ	loc_94E4
		CMP	R0, #0x18
		BEQ	loc_94E4
		CMP	R0, #9
		BEQ	loc_94F4
		CMP	R0, #0x17
		BEQ	loc_94F4
		CMP	R0, #0x19
		BEQ	loc_9516
		CMP	R0, #0xA
		BEQ	loc_9516
		CMP	R0, #0xB
		BNE	loc_947E
		MOVS	R0, #0
		ADD	SP, SP,	#0x3C
		POP	{R4-R7,PC}
; ---------------------------------------------------------------------------

loc_94E4				; CODE XREF: ibussetupmenu+54j
					; ibussetupmenu+58j
		CMP	R4, #1
		BLS	loc_947E
		SUBS	R4, #1
		BL	sub_9BC0
		CMP	R0, #2
		BCC	loc_947E
		B	loc_9502
; ---------------------------------------------------------------------------

loc_94F4				; CODE XREF: ibussetupmenu+5Cj
					; ibussetupmenu+60j
		CMP	R4, #0xA
		BCS	loc_947E
		ADDS	R4, #1
		BL	sub_9BC0
		CMP	R0, #2
		BCC	loc_947E

loc_9502				; CODE XREF: ibussetupmenu+82j
		MOVS	R0, #0x31 ; '1'
		MOVS	R1, #0xF
		LSLS	R0, R0,	#4
		BL	beep
		MOVS	R1, #0xF
		MOVS	R0, #0
		BL	beep
		B	loc_947E
; ---------------------------------------------------------------------------

loc_9516				; CODE XREF: ibussetupmenu+64j
					; ibussetupmenu+68j
		BL	sub_9BC0
		CMP	R0, #2
		BCC	loc_9530
		MOVS	R0, #0x31 ; '1'
		MOVS	R1, #0xF
		LSLS	R0, R0,	#4
		BL	beep
		MOVS	R1, #0xF
		MOVS	R0, #0
		BL	beep

loc_9530				; CODE XREF: ibussetupmenu+ACj
		LDR	R0, =off_D4A4
		MOV	R1, R0
		ADDS	R1, #0x54 ; 'T'
		LDMIA	R1, {R1-R3,R7}	; "Assigning Ch"
		STR	R7, [SP,#0x50+var_44]
		STR	R3, [SP,#0x50+var_48]
		STR	R2, [SP,#0x50+var_4C]
		STR	R1, [SP,#0x50+var_50]
		LDR	R0, [R0,#(dword_D508 - 0xD4A4)]
		STR	R0, [SP,#0x50+var_40]
		BL	callSetupDMAandSend
		ADR	R0, aIBusSetup	; "i-BUS Setup"
		BL	displayPageHeader
		MOV	R0, SP		; text
		MOVS	R7, #0
		STRB	R6, [R0,#0x50+var_44]
		MOVS	R2, #0xA	; y
		STRB	R7, [R0,#0x50+var_44+1]
		CMP	R6, #0x3A ; ':'
		BCC	loc_9568
		MOVS	R1, #0x31 ; '1'
		STRB	R1, [R0,#0x50+var_44]
		MOVS	R1, #0x30 ; '0'
		STRB	R1, [R0,#0x50+var_44+1]
		MOVS	R1, #0
		STRB	R1, [R0,#0x50+var_44+2]

loc_9568				; CODE XREF: ibussetupmenu+EAj
		MOV	R3, R7		; a4
		MOV	R1, R2		; x
		BL	displayTextAt
		MOVS	R3, #0		; a4
		MOVS	R2, #0x16	; y
		MOVS	R1, #0x1C	; x
		ADR	R0, aPressThe	; "Press the"
		BL	displayTextAt
		MOVS	R3, #0		; a4
		MOVS	R2, #0x1E	; y
		MOVS	R1, #0xA	; x
		ADR	R0, aCorresponding ; "corresponding"
		BL	displayTextAt
		MOVS	R3, #0		; a4
		MOVS	R2, #0x26 ; '&'	; y
		MOVS	R1, #4		; x
		ADR	R0, aServoInterface ; "servo interface"
		BL	displayTextAt
		MOVS	R3, #0		; a4
		MOVS	R2, #0x2E ; '.'	; y
		MOVS	R1, #0x1C	; x
		ADR	R0, aButtonOr	; "button or"
		BL	displayTextAt
		MOVS	R3, #0		; a4
		MOVS	R2, #0x36 ; '6'	; y
		MOVS	R1, #8		; x
		ADR	R0, aPressCancel ; "press 'CANCEL'"
		BL	displayTextAt
		BL	LCD_updateCALL
		LDR	R1, =sendingPacket
		MOVS	R0, #1
		STRB	R0, [R1]
		SUBS	R0, R4,	#1
		STR	R7, [R5,#0x58]
		STR	R0, [R5,#0x5C]
		SUBS	R0, R7,	#1
		LDR	R6, =timer
		STR	R0, [R5,#0x30]

loc_95C2				; CODE XREF: ibussetupmenu+19Aj
					; ibussetupmenu+1A2j
		LDR	R0, [R5,#0x30]
		ADDS	R0, #1
		BNE	loc_962E
		LDR	R1, [R6]
		LDR	R0, [R5,#0x58]
		SUBS	R0, R1,	R0
		CMP	R0, #0xA
		BCC	loc_9604
		MOVS	R2, #0xFF	; a3
		MOVS	R1, #0x1D	; numbButesToSend
		ADD	R0, SP,	#0x50+targetAddress ; targetAddress
		BL	setupDMA
		MOVS	R1, #0xAA ; 'ª'
		MOV	R0, SP
		STRB	R1, [R0,#0x50+targetAddress]
		MOVS	R1, #1
		MVNS	R1, R1
		STRB	R1, [R0,#0x50+targetAddress+1]
		LSRS	R1, R1,	#8
		STRB	R1, [R0,#0x50+var_36]
		STRB	R7, [R0,#0x50+var_35]
		LSRS	R1, R7,	#8
		STRB	R1, [R0,#0x50+var_34]
		LDR	R1, [R5,#0x5C]
		STRB	R1, [R0,#0x50+var_33]
		LSRS	R1, R1,	#8
		STRB	R1, [R0,#0x50+var_33+1]
		ADD	R0, SP,	#0x50+targetAddress ; targetAddress
		BL	sendPacketToRadio
		LDR	R0, [R6]
		STR	R0, [R5,#0x58]

loc_9604				; CODE XREF: ibussetupmenu+160j
		BL	sub_2574
		CMP	R0, #0xFF
		BEQ	loc_95C2
		BL	getKeyCode
		CMP	R0, #0xB
		BNE	loc_95C2
		BL	sub_9BC0
		CMP	R0, #2
		BCC	loc_962E
		MOVS	R0, #0x31 ; '1'
		MOVS	R1, #0xF
		LSLS	R0, R0,	#4
		BL	beep
		MOVS	R1, #0xF
		MOVS	R0, #0
		BL	beep

loc_962E				; CODE XREF: ibussetupmenu+156j
					; ibussetupmenu+1AAj
		LDR	R0, =sendingPacket
		STRB	R7, [R0]
		B	loc_947E
; End of function ibussetupmenu

; ---------------------------------------------------------------------------
dword_9634	DCD 0x314843		; DATA XREF: ibussetupmenu+2o
					; ibussetupmenu+6r
aCh10		DCB "CH10",0            ; DATA XREF: ibussetupmenu+44o
		DCB 0, 0, 0
off_9640	DCD byte_20000000	; DATA XREF: ibussetupmenu+Ar
aIBusSetup	DCB "i-BUS Setup",0     ; DATA XREF: ibussetupmenu+12o
					; ibussetupmenu+D8o
aChannel	DCB "Channel",0         ; DATA XREF: ibussetupmenu+1Eo
off_9658	DCD off_D4A4		; DATA XREF: ibussetupmenu:loc_9530r
aPressThe	DCB "Press the",0       ; DATA XREF: ibussetupmenu+106o
		ALIGN 4
aCorresponding	DCB "corresponding",0   ; DATA XREF: ibussetupmenu+112o
		ALIGN 4
aServoInterface	DCB "servo interface",0 ; DATA XREF: ibussetupmenu+11Eo
aButtonOr	DCB "button or",0       ; DATA XREF: ibussetupmenu+12Ao
		ALIGN 4
aPressCancel	DCB "press 'CANCEL'",0  ; DATA XREF: ibussetupmenu+136o
		DCB 0
off_96A4	DCD sendingPacket	; DATA XREF: ibussetupmenu+140r
					; ibussetupmenu:loc_962Er
off_96A8	DCD timer		; DATA XREF: ibussetupmenu+14Er

; =============== S U B	R O U T	I N E =======================================


PPMOutMenu
		PUSH	{R3-R7,LR}
		LDR	R7, =rxsettings
		MOVS	R6, #1
		LDR	R4, =byte_2000013F

loc_96B4				; CODE XREF: PPMOutMenu+6Cj
					; PPMOutMenu+ACj ...
		BL	callSetupDMAandSend
		ADR	R0, aPpmOutput	; "RX Output"
		BL	displayPageHeader
		LDRB	R0, [R7,#(currentModel - 0x200002A4)] ;	a4
		MOVS	R1, #0x92 ; ''	; a3
		MULS	R0, R1		; a2
		ADDS	R0, R0,	R7	; "Receiver" - const
		ADDS	R0, #0x61 ; 'a'
		LDRB	R1, [R0,#0xA]
		LDR	R2, =aIbusPwm	; a4

loc_96CC				; CODE XREF: PPMOutMenu+28j
		CMP	R1, #0		; a3
		BEQ	loc_96EA	; a2
		SUBS	R1, #byte_1	; "P" -const
		ADDS	R2, #9
		B	loc_96CC
; ---------------------------------------------------------------------------

loc_96D6				; CODE XREF: PPMOutMenu+7Ej
		ADDS	R0, #(rxsettings+1 - 0x200002A4)
		CMP	R0, #4
		BLT	loc_972C
		MOVS	R0, #0
		NOP
		NOP
		NOP
		NOP
		NOP
		B	loc_972C
; ---------------------------------------------------------------------------

loc_96EA				; CODE XREF: PPMOutMenu+22j
		MOVS	R0, R2		; text
		MOVS	R3, #0		; a4
		MOVS	R2, #0x28 ; '('	; y
		MOVS	R1, #0x36 ; '6'	; x
		BL	displayTextAt
		BL	LCD_updateCALL
		BL	getKeyCode	; switch(keyCode) in R0
		CMP	R0, #9
		BEQ	loc_971E
		CMP	R0, #0x17
		BEQ	loc_971E
		CMP	R0, #8
		BEQ	loc_971E
		CMP	R0, #0x18
		BEQ	loc_971E
		CMP	R0, #0x19
		BEQ	loc_971A	; return 1
		CMP	R0, #0xA
		BEQ	loc_971A	; return 1
		CMP	R0, #0xB
		BNE	loc_96B4

loc_971A				; CODE XREF: PPMOutMenu+64j
					; PPMOutMenu+68j
		MOVS	R0, #1		; return 1
		POP	{R3-R7,PC}
; ---------------------------------------------------------------------------

loc_971E				; CODE XREF: PPMOutMenu+54j
					; PPMOutMenu+58j ...
		LDRB	R0, [R7,#9]
		MOVS	R1, #0x92 ; ''
		MULS	R0, R1
		ADDS	R1, R0,	R7
		ADDS	R1, #0x61 ; 'a'
		LDRB	R0, [R1,#0xA]
		B	loc_96D6
; ---------------------------------------------------------------------------

loc_972C				; CODE XREF: PPMOutMenu+2Ej
					; PPMOutMenu+3Cj
		STRB	R0, [R1,#0xA]
		CMP	R0, #1
		BNE	loc_9738
		LDR	R0, =0x61A8
		BL	timerSendPacket

loc_9738				; CODE XREF: PPMOutMenu+84j
		MOVS	R5, #0

loc_973A				; CODE XREF: PPMOutMenu+A4j
		LDRB	R0, [R4]
		CMP	R0, #1
		BNE	loc_974A

loc_9740				; CODE XREF: PPMOutMenu+9Cj
		BL	sendPacketWithTimer
		LDRB	R0, [R4]
		CMP	R0, #1
		BEQ	loc_9740

loc_974A				; CODE XREF: PPMOutMenu+92j
		ADDS	R5, #1
		STRB	R6, [R4]
		CMP	R5, #5
		BCC	loc_973A
		BL	sub_9BC0
		CMP	R0, #2
		BCC	loc_96B4
		MOVS	R0, #0x31 ; '1'
		MOVS	R1, #0xF
		LSLS	R0, R0,	#4
		BL	beep
		MOVS	R1, #0xF
		MOVS	R0, #0
		BL	beep
		B	loc_96B4
; End of function PPMOutMenu

; ---------------------------------------------------------------------------
		ALIGN 0x10
off_9770	DCD rxsettings		; DATA XREF: PPMOutMenu+2r
off_9774	DCD byte_2000013F	; DATA XREF: PPMOutMenu+6r
aPpmOutput	DCB "RX Output",0,0     ; DATA XREF: PPMOutMenu+Co
		DCB 0
; _BYTE	*text
text		DCD aIbusPwm		; DATA XREF: PPMOutMenu+1Er
					; "IBUS/PWM"
; _BYTE	*
		DCD PPMOut_FullSTR	; "RX signals"
		DCD 0xCA77
; _BYTE	*
		DCD aOff_0		; "Off"
dword_9794	DCD 0x61A8		; DATA XREF: PPMOutMenu+86r

; =============== S U B	R O U T	I N E =======================================


setFactVal				; CODE XREF: FactoryReset+6Ep
					; FactResConfirm+6Ep ...
		PUSH	{R4-R6,LR}
		LDR	R6, =rxsettings
		MOVS	R2, #1
		MOVS	R1, #0
		STR	R2, [R6]
		STRB	R1, [R6,#(trainerMode -	0x200002A4)] ; 0=OFF 1=ON
		MOVS	R0, #0x13
		STRB	R0, [R6,#(trainerSW - 0x200002A4)] ; 16=A 17=B 18=C 19=D
		LDR	R0, =(stickAdjustData+0x20) ; 40 items
		MOV	R5, R6
		LDRB	R3, [R0,#(stickAdjustData+0x25 - 0x20000E38)] ;	40 items
		STRB	R3, [R6,#(lcdBrightnes - 0x200002A4)]
		LDRB	R0, [R0,#(stickAdjustData+0x24 - 0x20000E38)] ;	40 items
		STRB	R0, [R6,#(stickModeSW -	0x200002A4)]
		STRB	R2, [R6,#(byte_200002AB	- 0x200002A4)]
		LDR	R0, =0x7FFF
		STRB	R1, [R6,#(currentModel - 0x200002A4)]
		ADDS	R5, #0x71 ; 'q'
		STRB	R0, [R5,#(FailSafeCH1L - 0x20000315)]
		LSRS	R2, R0,	#8
		STRB	R2, [R5,#(FailSafeCH1H - 0x20000315)]
		STRB	R0, [R5,#(FailSafeCH2L - 0x20000315)]
		LSRS	R2, R0,	#8
		STRB	R2, [R5,#(FailSafeCH2H - 0x20000315)]
		STRB	R0, [R5,#(FailSafeCH3L - 0x20000315)]
		LSRS	R2, R0,	#8
		STRB	R2, [R5,#(FailSafeCH3H - 0x20000315)]
		STRB	R0, [R5,#(FailSafeCH4L - 0x20000315)]
		LSRS	R2, R0,	#8
		STRB	R2, [R5,#(FailSafeCH4H - 0x20000315)]
		STRB	R0, [R5,#(FailSafeCH5L - 0x20000315)]
		LSRS	R2, R0,	#8
		STRB	R2, [R5,#(FailSafeCH5H - 0x20000315)]
		STRB	R0, [R5,#(FailSafeCH6L - 0x20000315)]
		LSRS	R0, R0,	#8
		STRB	R0, [R5,#(FailSafeCH6H - 0x20000315)]
		LDR	R2, =byte_20000000
		LDR	R0, =modelname	; "Flysky01"
		STR	R0, [R2,#(usedModelPtr - 0x20000000)]
		STRB	R1, [R0,#(settings_10 -	0x200002AE)] ; some settings related to	word_1FFFF89C no idea what
		STRB	R1, [R0,#(settings_11 -	0x200002AE)]
		STRB	R1, [R0,#(settings_12 -	0x200002AE)]
		STRB	R1, [R0,#(settings_13 -	0x200002AE)]
		MOVS	R4, #0

loc_97F0				; CODE XREF: setFactVal+7Aj
		MOVS	R0, #0x92 ; ''
		MULS	R0, R4
		ADDS	R5, R0,	R6
		MOV	R0, R5
		ADDS	R0, #0xA
		MOVS	R2, #0x92 ; ''
		LDR	R1, =0xD179
		BL	memcpy
		MOV	R1, R5
		ADDS	R1, #0x10
		MOVS	R2, #2
		ADDS	R0, R4,	#1
		BL	printNumberAsStringAt
		ADDS	R4, #1
		CMP	R4, #0x14
		BCC	loc_97F0
		POP	{R4-R6,PC}
; End of function setFactVal

; ---------------------------------------------------------------------------
		ALIGN 4
varrxsettings_6	DCD rxsettings		; DATA XREF: setFactVal+2r
off_981C	DCD stickAdjustData+0x20 ; DATA	XREF: setFactVal+10r
					; 40 items
dword_9820	DCD 0x7FFF		; DATA XREF: setFactVal+1Er
off_9824	DCD modelname		; DATA XREF: setFactVal+4Ar
					; "Flysky01"
off_9828	DCD byte_20000000	; DATA XREF: setFactVal+48r
dword_982C	DCD 0xD179		; DATA XREF: setFactVal+64r

; =============== S U B	R O U T	I N E =======================================


ResetOdo1Menu				; DATA XREF: showNavigationPage+132o
					; ROM:off_6FC4o
		PUSH	{R4,LR}
		BL	callSetupDMAandSend
		ADR	R0, aResetOdometer1 ; "Reset odometer 1"
		BL	displayPageHeader
		MOVS	R3, #0		; a4
		MOVS	R2, #0x10	; a3
		MOVS	R1, #0x40 ; '@'	; a2
		ADR	R0, aThisWillReset ; "This will reset"
		BL	displayTextAt2
		MOVS	R3, #0		; a4
		MOVS	R2, #0x18	; a3
		MOVS	R1, #0x40 ; '@'	; a2
		ADR	R0, aTheOdmeter1 ; "the odmeter 1"
		BL	displayTextAt2
		BL	LCD_updateCALL
		BL	sub_23F4
		CMP	R0, #0
		BEQ	locret_9870
		LDR	R0, =byte_20000000
		MOVS	R1, #0
		LDR	R0, [R0,#(usedModelPtr - 0x20000000)]
		ADDS	R0, #0x82 ; ''
		STRB	R1, [R0,#8]
		STRB	R1, [R0,#9]
		STRB	R1, [R0,#0xA]
		MOVS	R0, #1

locret_9870				; CODE XREF: ResetOdo1Menu+2Ej
		POP	{R4,PC}
; End of function ResetOdo1Menu

; ---------------------------------------------------------------------------
		ALIGN 4
aResetOdometer1	DCB "Reset odometer 1",0 ; DATA XREF: ResetOdo1Menu+6o
		DCB 0, 0, 0
aThisWillReset	DCB "This will reset",0 ; DATA XREF: ResetOdo1Menu+12o
aTheOdmeter1	DCB "the odmeter 1",0   ; DATA XREF: ResetOdo1Menu+1Eo
		ALIGN 4
off_98A8	DCD byte_20000000	; DATA XREF: ResetOdo1Menu+30r

; =============== S U B	R O U T	I N E =======================================


ResetOdo2Menu				; DATA XREF: showNavigationPage+13Eo
					; showNavigationPage+1CEo ...
		PUSH	{R4,LR}
		BL	callSetupDMAandSend
		ADR	R0, aResetOdometer2 ; "Reset odometer 2"
		BL	displayPageHeader
		MOVS	R3, #0		; a4
		MOVS	R2, #0x10	; a3
		MOVS	R1, #0x40 ; '@'	; a2
		ADR	R0, aThisWillRese_0 ; "This will reset"
		BL	displayTextAt2
		MOVS	R3, #0		; a4
		MOVS	R2, #0x18	; a3
		MOVS	R1, #0x40 ; '@'	; a2
		ADR	R0, aTheOdmeter2 ; "the odmeter 2"
		BL	displayTextAt2
		BL	LCD_updateCALL
		BL	sub_23F4
		CMP	R0, #0
		BEQ	locret_98EC
		LDR	R0, =byte_20000000
		MOVS	R1, #0
		LDR	R0, [R0,#(usedModelPtr - 0x20000000)]
		ADDS	R0, #0x82 ; ''
		STRB	R1, [R0,#0xC]
		STRB	R1, [R0,#0xD]
		STRB	R1, [R0,#0xE]
		MOVS	R0, #1

locret_98EC				; CODE XREF: ResetOdo2Menu+2Ej
		POP	{R4,PC}
; End of function ResetOdo2Menu

; ---------------------------------------------------------------------------
		ALIGN 0x10
aResetOdometer2	DCB "Reset odometer 2",0 ; DATA XREF: ResetOdo2Menu+6o
		DCB 0, 0, 0
aThisWillRese_0	DCB "This will reset",0 ; DATA XREF: ResetOdo2Menu+12o
aTheOdmeter2	DCB "the odmeter 2",0   ; DATA XREF: ResetOdo2Menu+1Eo
		ALIGN 4
off_9924	DCD byte_20000000	; DATA XREF: ResetOdo2Menu+30r
; ---------------------------------------------------------------------------

loc_9928				; DATA XREF: ROM:0000D294o
		DCB 0xBF ; ¿
		DCB 0xF3 ; ó		; DATA XREF: ROM:0000D294o
		DCB 0x4F ; O
		DCB 0x8F ; 
; ---------------------------------------------------------------------------
		LDR	R1, =0xE000ED00
		LDR	R0, =0x5FA0004
		STR	R0, [R1,#0xC]
		DCB 0xBF ; ¿
		DCB 0xF3 ; ó
		DCB 0x4F ; O
		DCB 0x8F ; 
; ---------------------------------------------------------------------------

loc_9936				; CODE XREF: ROM:loc_9936j
		B	loc_9936
; ---------------------------------------------------------------------------
dword_9938	DCD 0x5FA0004		; DATA XREF: ROM:0000992Er
dword_993C	DCD 0xE000ED00		; DATA XREF: ROM:0000992Cr

; =============== S U B	R O U T	I N E =======================================


ReverseMenu				; DATA XREF: ROM:0000D30Co
					; ROM:0000D36Co ...

var_20		= -0x20
text		= -0x1C
var_1B		= -0x1B

		PUSH	{R4-R7,LR}
		LDR	R6, =byte_20000000
		SUB	SP, SP,	#0xC
		MOVS	R7, #1
		STRB	R7, [R6,#(byte_20000002	- 0x20000000)]
		MOVS	R0, #0
		STR	R0, [SP,#0x20+var_20]

loc_994E				; CODE XREF: ReverseMenu+A6j
					; ReverseMenu+C6j ...
		BL	callSetupDMAandSend
		LDR	R0, =aReverse	; "Reverse"
		BL	displayPageHeader
		MOVS	R3, #0		; a4
		MOVS	R2, #0x18	; a3
		MOVS	R1, #0xC	; a2
		LDR	R0, =aCh	; text
		BL	displayTextAt2
		MOVS	R3, #0		; a4
		MOVS	R2, #0x24 ; '$' ; y
		MOV	R1, R3		; x
		LDR	R0, =aNor	; text
		BL	displayTextAt
		MOVS	R3, #0		; a4
		MOVS	R2, #0x34 ; '4'	; y
		MOV	R1, R3		; x
		LDR	R0, =aRev	; text
		BL	displayTextAt
		LDR	R0, [SP,#0x20+var_20]
		MOVS	R2, #0x10
		LSLS	R1, R0,	#4
		ADDS	R1, #0x1C
		LDR	R0, =unk_CC04
		BL	displayGFX
		MOVS	R4, #0

loc_998C				; CODE XREF: ReverseMenu+8Aj
		MOV	R0, R4
		ADDS	R0, #0x31 ; '1'
		MOV	R1, SP
		STRB	R0, [R1,#0x20+text]
		MOVS	R0, #0
		STRB	R0, [R1,#0x20+var_1B]
		LSLS	R5, R4,	#4
		MOV	R1, R5
		MOV	R3, R0		; a4
		ADDS	R1, #0x1C	; x
		MOVS	R2, #0x18	; y
		ADD	R0, SP,	#0x20+text ; text
		BL	displayTextAt
		LDR	R0, [R6,#(usedModelPtr - 0x20000000)]
		ADDS	R0, #0x40 ; '@'
		LDRB	R1, [R0,#0x1E]
		MOV	R0, R7
		LSLS	R0, R4
		TST	R1, R0
		BEQ	loc_99BA
		LDR	R0, =unk_CC28
		B	loc_99BC
; ---------------------------------------------------------------------------

loc_99BA				; CODE XREF: ReverseMenu+74j
		LDR	R0, =unk_CC1C

loc_99BC				; CODE XREF: ReverseMenu+78j
		MOV	R1, R5
		ADDS	R1, #0x18
		MOVS	R2, #0x20 ; ' '
		BL	displayGFX
		ADDS	R4, #1
		CMP	R4, #6
		BCC	loc_998C
		BL	LCD_updateCALL
		BL	getKeyCode
		CMP	R0, #9
		BEQ	loc_99F0
		CMP	R0, #8
		BEQ	loc_99F0
		CMP	R0, #0xA
		BEQ	loc_9A1C
		CMP	R0, #0x19
		BEQ	loc_9A34
		CMP	R0, #0xB
		BNE	loc_994E
		MOVS	R0, #0
		STRB	R0, [R6,#(byte_20000002	- 0x20000000)]
		ADD	SP, SP,	#0xC
		POP	{R4-R7,PC}
; ---------------------------------------------------------------------------

loc_99F0				; CODE XREF: ReverseMenu+96j
					; ReverseMenu+9Aj
		LDR	R0, [R6,#0x2C]
		LDR	R3, [SP,#0x20+var_20]
		ADDS	R0, #0x40 ; '@'
		LDRB	R1, [R0,#0x1E]
		MOV	R2, R7
		LSLS	R2, R3
		EORS	R1, R2
		STRB	R1, [R0,#0x1E]
		BL	sub_9BC0
		CMP	R0, #2
		BCC	loc_994E

loc_9A08				; CODE XREF: ReverseMenu+F2j
		MOVS	R0, #0x31 ; '1'
		MOVS	R1, #0xF
		LSLS	R0, R0,	#4
		BL	beep
		MOVS	R1, #0xF
		MOVS	R0, #0
		BL	beep
		B	loc_994E
; ---------------------------------------------------------------------------

loc_9A1C				; CODE XREF: ReverseMenu+9Ej
		LDR	R0, [SP,#0x20+var_20]
		CMP	R0, #5
		BCC	loc_9A26
		MOVS	R0, #0
		B	loc_9A28
; ---------------------------------------------------------------------------

loc_9A26				; CODE XREF: ReverseMenu+E0j
		ADDS	R0, #1

loc_9A28				; CODE XREF: ReverseMenu+E4j
		STR	R0, [SP,#0x20+var_20]
		BL	sub_9BC0
		CMP	R0, #2
		BCC	loc_994E
		B	loc_9A08
; ---------------------------------------------------------------------------

loc_9A34				; CODE XREF: ReverseMenu+A2j
		MOVS	R0, #0
		STRB	R0, [R6,#(byte_20000002	- 0x20000000)]
		MOVS	R0, #1
		ADD	SP, SP,	#0xC
		POP	{R4-R7,PC}
; End of function ReverseMenu

; ---------------------------------------------------------------------------
		ALIGN 0x10
off_9A40	DCD byte_20000000	; DATA XREF: ReverseMenu+2r
off_9A44	DCD aReverse		; DATA XREF: ReverseMenu+12r
					; "Reverse"
; _BYTE	*off_9A48
off_9A48	DCD aCh			; DATA XREF: ReverseMenu+1Er
					; "Ch"
; _BYTE	*off_9A4C
off_9A4C	DCD aNor		; DATA XREF: ReverseMenu+2Ar
					; "Nor"
; _BYTE	*off_9A50
off_9A50	DCD aRev		; DATA XREF: ReverseMenu+36r
					; "Rev"
off_9A54	DCD unk_CC04		; DATA XREF: ReverseMenu+44r
off_9A58	DCD unk_CC28		; DATA XREF: ReverseMenu+76r
off_9A5C	DCD unk_CC1C		; DATA XREF: ReverseMenu:loc_99BAr

; =============== S U B	R O U T	I N E =======================================


RotationLenMenu

var_18		= -0x18

		PUSH	{R3-R7,LR}
		MOVS	R7, #0
		LDR	R4, =byte_20000000

loc_9A66				; CODE XREF: RotationLenMenu+D4j
					; RotationLenMenu+ECj ...
		BL	callSetupDMAandSend
		ADR	R0, aRotationLength ; "Rotation length "
		BL	displayPageHeader
		MOVS	R2, #0x18	; y
		MOVS	R3, #0		; a4
		MOV	R1, R2		; x
		ADR	R0, aLengthMm	; "Length(mm)"
		BL	displayTextAt
		LDR	R6, [R4,#(usedModelPtr - 0x20000000)]
		ADDS	R6, #0x80 ; ''
		LDRB	R1, [R6,#9]
		LDRB	R0, [R6,#8]
		LSLS	R5, R1,	#8
		ORRS	R5, R0
		MOV	R0, R5
		ADDS	R0, #0x63 ; 'c'
		CMP	R0, #0xC7 ; 'Ç'
		BCC	loc_9AD0
		MOVS	R1, #0x64 ; 'd'
		MOV	R0, R5
		BL	div_Other
		MOVS	R1, #0xA
		BL	div_Other
		ADDS	R1, #0x30 ; '0'
		MOV	R0, SP
		STRB	R1, [R0,#0x18+var_18]
		MOVS	R1, #0xA
		MOV	R0, R5
		BL	div_Other
		MOVS	R1, #0xA
		BL	div_Other
		ADDS	R1, #0x30 ; '0'
		MOV	R0, SP
		STRB	R1, [R0,#0x18+var_18+1]
		LDRB	R0, [R6,#9]
		LDRB	R1, [R6,#8]
		LSLS	R0, R0,	#8
		ORRS	R0, R1
		MOVS	R1, #0xA
		BL	div_Other
		ADDS	R1, #0x30 ; '0'
		MOV	R0, SP
		STRB	R1, [R0,#0x18+var_18+2]
		STRB	R7, [R0,#0x18+var_18+3]
		B	loc_9B08
; ---------------------------------------------------------------------------

loc_9AD0				; CODE XREF: RotationLenMenu+2Ej
		MOV	R0, R5
		ADDS	R0, #9
		CMP	R0, #0x13
		BCC	loc_9AF8
		MOVS	R1, #0xA
		MOV	R0, R5
		BL	div_Other
		MOV	R5, R1
		MOVS	R1, #0xA
		BL	div_Other
		ADDS	R1, #0x30 ; '0'
		MOV	R0, SP
		STRB	R1, [R0,#0x18+var_18]
		MOV	R1, R5
		ADDS	R1, #0x30 ; '0'
		STRB	R1, [R0,#0x18+var_18+1]
		STRB	R7, [R0,#0x18+var_18+2]
		B	loc_9B08
; ---------------------------------------------------------------------------

loc_9AF8				; CODE XREF: RotationLenMenu+76j
		MOVS	R1, #0xA
		MOV	R0, R5
		BL	div_Other
		ADDS	R1, #0x30 ; '0'
		MOV	R0, SP		; text
		STRB	R1, [R0,#0x18+var_18]
		STRB	R7, [R0,#0x18+var_18+1]

loc_9B08				; CODE XREF: RotationLenMenu+6Ej
					; RotationLenMenu+96j
		MOVS	R3, #0		; a4
		MOVS	R2, #0x28 ; '('	; y
		MOVS	R1, #0x36 ; '6'	; x
		BL	displayTextAt
		BL	LCD_updateCALL
		BL	getKeyCode
		CMP	R0, #9
		BEQ	loc_9B3A
		CMP	R0, #0x17
		BEQ	loc_9B3A
		CMP	R0, #8
		BEQ	loc_9B60
		CMP	R0, #0x18
		BEQ	loc_9B60
		CMP	R0, #0x19
		BEQ	loc_9B96
		CMP	R0, #0xA
		BEQ	loc_9B96
		CMP	R0, #0xB
		BNE	loc_9A66
		MOVS	R0, #0
		POP	{R3-R7,PC}
; ---------------------------------------------------------------------------

loc_9B3A				; CODE XREF: RotationLenMenu+BCj
					; RotationLenMenu+C0j
		LDR	R1, [R4,#0x2C]
		ADDS	R1, #0x80 ; ''
		LDRB	R0, [R1,#9]
		LDRB	R2, [R1,#8]
		LSLS	R0, R0,	#8
		ORRS	R0, R2
		MOVS	R2, #0x1F4
		CMP	R0, R2
		BCS	loc_9A66
		ADDS	R0, #1
		STRB	R0, [R1,#8]
		LSRS	R0, R0,	#8
		STRB	R0, [R1,#9]
		BL	sub_9BC0
		CMP	R0, #2
		BCC	loc_9A66
		B	loc_9B82
; ---------------------------------------------------------------------------

loc_9B60				; CODE XREF: RotationLenMenu+C4j
					; RotationLenMenu+C8j
		LDR	R1, [R4,#0x2C]
		ADDS	R1, #0x80 ; ''
		LDRB	R0, [R1,#9]
		LDRB	R2, [R1,#8]
		LSLS	R0, R0,	#8
		ORRS	R0, R2
		CMP	R0, #1
		BHI	loc_9B72

loc_9B70				; CODE XREF: RotationLenMenu+120j
		B	loc_9A66
; ---------------------------------------------------------------------------

loc_9B72				; CODE XREF: RotationLenMenu+10Ej
		SUBS	R0, #1
		STRB	R0, [R1,#8]
		LSRS	R0, R0,	#8
		STRB	R0, [R1,#9]
		BL	sub_9BC0
		CMP	R0, #2
		BCC	loc_9B70

loc_9B82				; CODE XREF: RotationLenMenu+FEj
		MOVS	R0, #0x31 ; '1'
		MOVS	R1, #0xF
		LSLS	R0, R0,	#4
		BL	beep
		MOVS	R1, #0xF
		MOVS	R0, #0
		BL	beep
		B	loc_9A66
; ---------------------------------------------------------------------------

loc_9B96				; CODE XREF: RotationLenMenu+CCj
					; RotationLenMenu+D0j
		MOVS	R0, #1
		POP	{R3-R7,PC}
; End of function RotationLenMenu

; ---------------------------------------------------------------------------
		ALIGN 4
off_9B9C	DCD byte_20000000	; DATA XREF: RotationLenMenu+4r
aRotationLength	DCB "Rotation length ",0 ; DATA XREF: RotationLenMenu+Ao
		DCB 0, 0, 0
aLengthMm	DCB "Length(mm)",0      ; DATA XREF: RotationLenMenu+16o
		DCB 0

; =============== S U B	R O U T	I N E =======================================


sub_9BC0				; CODE XREF: sub_23F4+A6p
					; SwashAFRPage+106p ...
		LDR	R0, =dword_1FFFF888
		LDR	R1, [R0]
		LDR	R0, [R0,#(dword_1FFFF88C - 0x1FFFF888)]
		CMP	R1, R0
		BLS	loc_9BCC
		ADDS	R0, #0x10

loc_9BCC				; CODE XREF: sub_9BC0+8j
		SUBS	R0, R0,	R1
		MOVS	R1, #0xF
		SUBS	R0, R1,	R0
		BX	LR
; End of function sub_9BC0

; ---------------------------------------------------------------------------
off_9BD4	DCD dword_1FFFF888	; DATA XREF: sub_9BC0r

; =============== S U B	R O U T	I N E =======================================


buzzerSetup				; CODE XREF: main_screen+C4p
		LDR	R1, =dword_1FFFF888
		MOVS	R0, #0
		STR	R0, [R1,#(dword_1FFFF890 - 0x1FFFF888)]
		STR	R0, [R1]
		STR	R0, [R1,#(dword_1FFFF88C - 0x1FFFF888)]
		LDR	R1, =0x40048000
		LDR	R2, [R1,#0x3C]
		MOVS	R3, #0x2000000
		ORRS	R2, R3
		STR	R2, [R1,#0x3C]
		MOVS	R1, #3
		LDR	R2, =0x40049000
		LSLS	R1, R1,	#8
		STR	R1, [R2,#0x30]
		LDR	R1, =0x40039000
		MOVS	R2, #0x4B ; 'K'
		STR	R2, [R1]
		LDR	R2, =0xFFFF
		STR	R2, [R1,#8]
		MOVS	R2, #0x28 ; '('
		STR	R2, [R1,#0xC]
		STR	R0, [R1,#4]
		STR	R0, [R1,#0x10]
		LDR	R0, =0xE000E400
		LDR	R1, [R0,#0x10]
		MOVS	R2, #0xFF0000
		BICS	R1, R2
		STR	R1, [R0,#0x10]
		LDR	R0, =0xE000E100
		LDR	R1, [R0]
		ASRS	R2, R3,	#7
		ORRS	R1, R2
		STR	R1, [R0]
		BX	LR
; End of function buzzerSetup

; ---------------------------------------------------------------------------
off_9C20	DCD dword_1FFFF888	; DATA XREF: buzzerSetupr
dword_9C24	DCD 0x40048000		; DATA XREF: buzzerSetup+Ar
dword_9C28	DCD 0x40049000		; DATA XREF: buzzerSetup+18r
dword_9C2C	DCD 0x40039000		; DATA XREF: buzzerSetup+1Er
dword_9C30	DCD 0xFFFF		; DATA XREF: buzzerSetup+24r
dword_9C34	DCD 0xE000E400		; DATA XREF: buzzerSetup+30r
dword_9C38	DCD 0xE000E100		; DATA XREF: buzzerSetup+3Cr

; =============== S U B	R O U T	I N E =======================================


beep					; CODE XREF: sub_23F4+Cp sub_23F4+9Cp	...
		PUSH	{R4-R6,LR}
		LDR	R3, =dword_1FFFF888
		LDR	R2, [R3,#(dword_1FFFF88C - 0x1FFFF888)]
		LDR	R6, [R3]
		MOV	R4, R2
		CMP	R2, R6
		BNE	loc_9C4E
		MOVS	R5, #1
		B	loc_9C50
; ---------------------------------------------------------------------------

loc_9C4E				; CODE XREF: beep+Cj
		MOVS	R5, #0

loc_9C50				; CODE XREF: beep+10j
		ADDS	R2, #1
		CMP	R2, #0x10
		BCC	loc_9C58
		MOVS	R2, #0

loc_9C58				; CODE XREF: beep+18j
		CMP	R2, R6
		BEQ	locret_9C78
		LSLS	R6, R4,	#2
		LDR	R4, =word_1FFFFD12
		STRH	R0, [R4,R6]
		ADDS	R0, R6,	R4
		STRH	R1, [R0,#2]
		STR	R2, [R3,#(dword_1FFFF88C - 0x1FFFF888)]
		CMP	R5, #0
		BEQ	locret_9C78
		BL	TMP1_method_beep_modulation
		MOVS	R0, #3
		LDR	R1, =0x40049000
		LSLS	R0, R0,	#8
		STR	R0, [R1,#0x30]

locret_9C78				; CODE XREF: beep+1Ej beep+2Ej
		POP	{R4-R6,PC}
; End of function beep

; ---------------------------------------------------------------------------
		ALIGN 4
off_9C7C	DCD dword_1FFFF888	; DATA XREF: beep+2r
off_9C80	DCD word_1FFFFD12	; DATA XREF: beep+22r
dword_9C84	DCD 0x40049000		; DATA XREF: beep+36r

; =============== S U B	R O U T	I N E =======================================


TMP1_method_beep_modulation		; CODE XREF: beep+30p
					; TMP1_method_beep_modulation+6Cp ...
		LDR	R0, =dword_1FFFF888
		MOVS	R1, #0
		LDR	R2, [R0,#(dword_1FFFF890 - 0x1FFFF888)]
		CMP	R2, #0
		BEQ	loc_9C9E
		SUBS	R2, #1
		STR	R2, [R0,#(dword_1FFFF890 - 0x1FFFF888)]
		CMP	R2, #0
		BGT	locret_9C9C
		STR	R1, [R0,#(dword_1FFFF890 - 0x1FFFF888)]

locret_9C9C				; CODE XREF: TMP1_method_beep_modulation+10j
		BX	LR
; ---------------------------------------------------------------------------

loc_9C9E				; CODE XREF: TMP1_method_beep_modulation+8j
		PUSH	{R3-R7,LR}
		MOVS	R3, #0xFF
		LDR	R5, [R0,#(dword_1FFFF88C - 0x1FFFF888)]
		LDR	R4, [R0]
		ADDS	R3, #1
		LDR	R2, =0x40049000
		CMP	R4, R5
		BNE	loc_9CB2
		STR	R3, [R2,#0x30]
		POP	{R3-R7,PC}
; ---------------------------------------------------------------------------

loc_9CB2				; CODE XREF: TMP1_method_beep_modulation+24j
		LDR	R5, =0x40039000
		STR	R1, [R5,#4]
		LDR	R7, =word_1FFFFD12
		LSLS	R6, R4,	#2
		LDRH	R1, [R7,R6]
		CMP	R1, #0
		BEQ	loc_9CFA
		MOVS	R0, #0x300
		STR	R0, [R2,#0x30]
		LDR	R0, =0xF4240
		BL	div_Other
		MOV	R1, R0
		LSRS	R0, R0,	#1
		SUBS	R0, #1
		STR	R0, [R5,#0x10]

loc_9CD4				; CODE XREF: TMP1_method_beep_modulation+86j
		SUBS	R0, R1,	#1
		STR	R0, [R5,#8]
		ADDS	R0, R6,	R7
		LDRH	R0, [R0,#2]
		MOVS	R2, #0x3E8
		MULS	R0, R2
		BL	div_Other
		LDR	R1, =dword_1FFFF888
		ADDS	R4, #1
		STR	R0, [R1,#(dword_1FFFF890 - 0x1FFFF888)]
		CMP	R4, #0x10
		BCC	loc_9CF2
		MOVS	R4, #0

loc_9CF2				; CODE XREF: TMP1_method_beep_modulation+66j
		STR	R4, [R1]
		BL	TMP1_method_beep_modulation
		POP	{R3-R7,PC}
; ---------------------------------------------------------------------------

loc_9CFA				; CODE XREF: TMP1_method_beep_modulation+36j
		STR	R3, [R2,#0x30]
		LDR	R0, =0x400FF000
		LDR	R2, [R0,#0x14]
		MOVS	R1, #0x1000
		ORRS	R2, R1
		STR	R2, [R0,#0x14]
		STR	R1, [R0,#8]
		MOVS	R1, #0x3E8
		B	loc_9CD4
; End of function TMP1_method_beep_modulation

; ---------------------------------------------------------------------------
off_9D10	DCD dword_1FFFF888	; DATA XREF: TMP1_method_beep_modulationr
					; TMP1_method_beep_modulation+5Er
dword_9D14	DCD 0x40049000		; DATA XREF: TMP1_method_beep_modulation+20r
dword_9D18	DCD 0x40039000		; DATA XREF: TMP1_method_beep_modulation:loc_9CB2r
off_9D1C	DCD word_1FFFFD12	; DATA XREF: TMP1_method_beep_modulation+2Er
dword_9D20	DCD 0xF4240		; DATA XREF: TMP1_method_beep_modulation+3Er
dword_9D24	DCD 0x400FF000		; DATA XREF: TMP1_method_beep_modulation+74r

; =============== S U B	R O U T	I N E =======================================


setupPortsC4_c5_c6_spi_DMA2_DMA3	; CODE XREF: main_screen+CCp
		LDR	R0, =0x40048000
		LDR	R1, [R0,#0x34]
		MOVS	R2, #0x400000
		ORRS	R1, R2
		STR	R1, [R0,#0x34]
		ASRS	R1, R0,	#0x16
		LDR	R0, =0x4004B000
		STR	R1, [R0,#0x10]
		ASRS	R1, R0,	#0x15
		STR	R1, [R0,#0x14]
		STR	R1, [R0,#0x18]
		LDR	R0, =0x400FF080
		LDR	R2, [R0,#0x14]
		MOVS	R1, #0x10
		ORRS	R2, R1
		STR	R2, [R0,#0x14]
		STR	R1, [R0,#4]
		LDR	R0, =0x40076000
		MOVS	R1, #0x52 ; 'R'
		STRB	R1, [R0,#3]
		MOVS	R1, #1
		STRB	R1, [R0,#2]
		STRB	R1, [R0,#1]
		LDR	R1, =0x40021000
		MOVS	R0, #0x91 ; ''
		STRB	R0, [R1,#2]
		LDR	R0, =0x40008100
		LDR	R2, =0x40076006
		STR	R2, [R0,#0x24]
		LDR	R3, =0x20520080
		STR	R3, [R0,#0x2C]
		MOVS	R3, #0x90 ; ''
		STRB	R3, [R1,#3]
		STR	R2, [R0,#0x30]
		LDR	R1, =0x201A0080
		STR	R1, [R0,#0x3C]
		BX	LR
; End of function setupPortsC4_c5_c6_spi_DMA2_DMA3

; ---------------------------------------------------------------------------
SIM_0		DCD 0x40048000		; DATA XREF: setupPortsC4_c5_c6_spi_DMA2_DMA3r
PortCmultiplexingCTR DCD 0x4004B000	; DATA XREF: setupPortsC4_c5_c6_spi_DMA2_DMA3+Er
PortCDataOutputReg_4 DCD 0x400FF080	; DATA XREF: setupPortsC4_c5_c6_spi_DMA2_DMA3+18r
SPI0		DCD 0x40076000		; DATA XREF: setupPortsC4_c5_c6_spi_DMA2_DMA3+24r
DMAMUX0_CHCFG0	DCD 0x40021000		; DATA XREF: setupPortsC4_c5_c6_spi_DMA2_DMA3+30r
SPI0_DL		DCD 0x40076006		; DATA XREF: setupPortsC4_c5_c6_spi_DMA2_DMA3+38r
DMA_SAR0	DCD 0x40008100		; DATA XREF: setupPortsC4_c5_c6_spi_DMA2_DMA3+36r
dword_9D90	DCD 0x20520080		; DATA XREF: setupPortsC4_c5_c6_spi_DMA2_DMA3+3Cr
dword_9D94	DCD 0x201A0080		; DATA XREF: setupPortsC4_c5_c6_spi_DMA2_DMA3+46r

; =============== S U B	R O U T	I N E =======================================


; signed int __fastcall	sendOverSPI_useDMA(char	a1, _BYTE *destination,	unsigned int length)
sendOverSPI_useDMA			; CODE XREF: sendPAcket+38p
					; sendPAcket+58p ...
		PUSH	{R3-R7,LR}
		LDR	R4, =0x40076000
		MOV	R7, R1
		LDRB	R1, [R4,#2]
		MOV	R6, R2
		MOVS	R2, #8
		ORRS	R1, R2
		STRB	R1, [R4,#2]
		LDR	R2, =0x400FF080
		MOVS	R1, #0x10
		STR	R1, [R2,#8]
		LDRB	R1, [R4,#2]
		MOVS	R2, #0xDB ; 'Û'
		ANDS	R1, R2
		STRB	R1, [R4,#2]
		LDR	R5, =0x40008100
		LDR	R2, [R5,#0x2C]
		LSLS	R1, R5,	#0x16
		BICS	R2, R1
		STR	R2, [R5,#0x2C]

loc_9DC0				; CODE XREF: sendOverSPI_useDMA+2Cj
		LDRB	R2, [R4]
		LSLS	R2, R2,	#0x1A
		BPL	loc_9DC0
		LDRB	R2, [R4,#6]
		STRB	R0, [R4,#6]

loc_9DCA				; CODE XREF: sendOverSPI_useDMA+36j
		LDRB	R0, [R4]
		LSLS	R0, R0,	#0x18
		BPL	loc_9DCA
		LDRB	R0, [R4,#6]
		LDRB	R0, [R4,#2]
		MOVS	R2, #0xF7 ; '÷'
		ANDS	R0, R2
		STRB	R0, [R4,#2]
		STR	R7, [R5,#0x34]
		STR	R6, [R5,#0x38]
		LDRB	R0, [R4,#2]
		MOVS	R2, #4
		ORRS	R0, R2
		STRB	R0, [R4,#2]
		LDR	R0, [R5,#0x3C]
		LSLS	R1, R2,	#0x1C
		ORRS	R0, R1
		STR	R0, [R5,#0x3C]
		CMP	R6, #1
		BLS	loc_9DFA
		ADDS	R0, R7,	#1
		STR	R0, [R5,#0x20]
		SUBS	R0, R6,	#1
		STR	R0, [R5,#0x28]

loc_9DFA				; CODE XREF: sendOverSPI_useDMA+58j
					; sendOverSPI_useDMA+66j
		LDRB	R0, [R4]
		LSLS	R0, R0,	#0x1A
		BPL	loc_9DFA
		BL	sub_A158
		LDRB	R0, [R7]
		STRB	R0, [R4,#6]
		CMP	R6, #1
		BLS	loc_9E1C
		LDRB	R0, [R4,#2]
		MOVS	R1, #0x20 ; ' '
		ORRS	R0, R1
		STRB	R0, [R4,#2]
		LDR	R0, [R5,#0x2C]
		LSLS	R1, R1,	#0x19
		ORRS	R0, R1
		STR	R0, [R5,#0x2C]

loc_9E1C				; CODE XREF: sendOverSPI_useDMA+72j
		BL	sub_A190

loc_9E20				; CODE XREF: sendOverSPI_useDMA+8Cj
		LDR	R0, [R5,#0x38]
		LSLS	R0, R0,	#8
		BNE	loc_9E20
		LDR	R0, [R5,#0x28]
		LSLS	R1, R0,	#7
		LDR	R0, =0x1000000
		BPL	loc_9E34
		LDR	R1, [R5,#0x28]
		ORRS	R1, R0
		STR	R1, [R5,#0x28]

loc_9E34				; CODE XREF: sendOverSPI_useDMA+94j
		LDR	R1, [R5,#0x38]
		LSLS	R1, R1,	#7
		BPL	loc_9E40
		LDR	R1, [R5,#0x38]
		ORRS	R1, R0
		STR	R1, [R5,#0x38]

loc_9E40				; CODE XREF: sendOverSPI_useDMA+A0j
		LDR	R1, =0x400FF080
		MOVS	R0, #0x10
		STR	R0, [R1,#4]
		POP	{R3-R7,PC}
; End of function sendOverSPI_useDMA

; ---------------------------------------------------------------------------
SPI0_S		DCD 0x40076000		; DATA XREF: sendOverSPI_useDMA+2r
PortCDataOutputReg_5 DCD 0x400FF080	; DATA XREF: sendOverSPI_useDMA+10r
					; sendOverSPI_useDMA:loc_9E40r
DMA_SAR0_0	DCD 0x40008100		; DATA XREF: sendOverSPI_useDMA+1Er
dword_9E54	DCD 0x1000000		; DATA XREF: sendOverSPI_useDMA+92r

; =============== S U B	R O U T	I N E =======================================


spiSend					; CODE XREF: sendPacketToRadio+2ACp
					; sendPAcket+4Ep ...
		PUSH	{R3-R7,LR}
		LDR	R5, =0x40076000
		MOV	R7, R0
		LDRB	R0, [R5,#2]
		MOV	R6, R1
		MOVS	R1, #0xDB ; 'Û'
		ANDS	R0, R1
		STRB	R0, [R5,#2]
		LDR	R4, =0x40008100
		LDR	R1, [R4,#0x2C]
		LSLS	R0, R4,	#0x16
		BICS	R1, R0
		STR	R1, [R4,#0x2C]

loc_9E72				; CODE XREF: spiSend+1Ej
		LDRB	R0, [R5]
		LSLS	R0, R0,	#0x1A
		BPL	loc_9E72
		CMP	R6, #1
		BLS	loc_9E84
		ADDS	R0, R7,	#1
		STR	R0, [R4,#0x20]
		SUBS	R0, R6,	#1
		STR	R0, [R4,#0x28]

loc_9E84				; CODE XREF: spiSend+22j
		LDRB	R0, [R5,#2]
		MOVS	R1, #8
		ORRS	R0, R1
		STRB	R0, [R5,#2]
		LDR	R1, =0x400FF080
		MOVS	R0, #0x10
		STR	R0, [R1,#8]
		BL	sub_A158
		LDRB	R0, [R7]
		STRB	R0, [R5,#6]
		CMP	R6, #1
		BLS	loc_9EAE
		LDRB	R0, [R5,#2]
		MOVS	R1, #0x20 ; ' '
		ORRS	R0, R1
		STRB	R0, [R5,#2]
		LDR	R0, [R4,#0x2C]
		LSLS	R1, R1,	#0x19
		ORRS	R0, R1
		STR	R0, [R4,#0x2C]

loc_9EAE				; CODE XREF: spiSend+44j
		BL	sub_A190
		CMP	R6, #1
		BLS	loc_9ED6

loc_9EB6				; CODE XREF: spiSend+62j
		LDR	R0, [R4,#0x28]
		LSLS	R0, R0,	#8
		BNE	loc_9EB6
		LDR	R0, [R4,#0x28]
		LSLS	R1, R0,	#7
		LDR	R0, byte_9EF8
		BPL	loc_9ECA
		LDR	R1, [R4,#0x28]
		ORRS	R1, R0
		STR	R1, [R4,#0x28]

loc_9ECA				; CODE XREF: spiSend+6Aj
		LDR	R1, [R4,#0x38]
		LSLS	R1, R1,	#7
		BPL	loc_9ED6
		LDR	R1, [R4,#0x38]
		ORRS	R1, R0
		STR	R1, [R4,#0x38]

loc_9ED6				; CODE XREF: spiSend+5Cj spiSend+76j ...
		LDRB	R0, [R5]
		LSLS	R0, R0,	#0x1A
		BPL	loc_9ED6
		MOVS	R0, #4
		BL	strageSPILoop
		LDR	R1, =0x400FF080
		MOVS	R0, #0x10
		STR	R0, [R1,#4]
		POP	{R3-R7,PC}
; End of function spiSend

; ---------------------------------------------------------------------------
		ALIGN 4
SPI0_S_0	DCD 0x40076000		; DATA XREF: spiSend+2r
DMA_SAR0_1	DCD 0x40008100		; DATA XREF: spiSend+10r
PortCDataOutputReg_6 DCD 0x400FF080	; DATA XREF: spiSend+34r spiSend+8Ar
byte_9EF8	DCB 0			; DATA XREF: spiSend+68r
		DCB    0
		DCB 0
		DCB    1

; =============== S U B	R O U T	I N E =======================================


sendPacketWithTimer			; CODE XREF: getKeyCode:loc_2540p
					; sub_2574+2p ...
		PUSH	{R4,LR}
		LDR	R0, =0xE000E000
		LDR	R0, [R0,#0x18]
		LDR	R4, =studentMode
		LSLS	R0, R0,	#8
		LDR	R1, [R4,#(dword_2000015C - 0x20000144)]
		MOVS	R2, #0xF
		SUBS	R1, R1,	R0
		LSLS	R2, R2,	#9
		CMP	R1, R2
		BCC	locret_9F64
		STR	R0, [R4,#(dword_2000015C - 0x20000144)]
		BL	callSendPacket
		LDR	R0, =timer
		LDR	R1, [R0]
		LDR	R2, [R4,#(dword_20000148 - 0x20000144)]
		SUBS	R1, R1,	R2
		LDR	R2, =0x927C0
		CMP	R1, R2
		BCC	loc_9F52
		LDR	R1, [R0]
		LDR	R2, [R4,#(dword_2000014C - 0x20000144)]
		SUBS	R1, R1,	R2
		LDR	R2, =(byte_DA0+0x5E8)
		CMP	R1, R2
		BCC	loc_9F52
		LDR	R0, [R0]
		STR	R0, [R4,#(dword_2000014C - 0x20000144)]
		LDR	R4, =0x20B
		MOVS	R1, #0x4B ; 'K'
		MOV	R0, R4
		BL	beep
		MOVS	R0, #0x31 ; '1'
		MOVS	R1, #0x4B ; 'K'
		LSLS	R0, R0,	#4
		BL	beep
		MOVS	R1, #0x4B ; 'K'
		MOV	R0, R4
		BL	beep

loc_9F52				; CODE XREF: sendPacketWithTimer+28j
					; sendPacketWithTimer+34j
		BL	sub_61EC
		BL	sub_618C
		LDR	R0, =0x40048100
		MOVS	R1, #0x55 ; 'U'
		STR	R1, [R0,#4]
		MOVS	R1, #0xAA ; 'ª'
		STR	R1, [R0,#4]

locret_9F64				; CODE XREF: sendPacketWithTimer+14j
		POP	{R4,PC}
; End of function sendPacketWithTimer

; ---------------------------------------------------------------------------
		DCB 0
		DCB    0
dword_9F68	DCD 0xE000E000		; DATA XREF: sendPacketWithTimer+2r
off_9F6C	DCD studentMode		; DATA XREF: sendPacketWithTimer+6r
off_9F70	DCD timer		; DATA XREF: sendPacketWithTimer+1Cr
dword_9F74	DCD 0x927C0		; DATA XREF: sendPacketWithTimer+24r
off_9F78	DCD byte_DA0+0x5E8	; DATA XREF: sendPacketWithTimer+30r
dword_9F7C	DCD 0x20B		; DATA XREF: sendPacketWithTimer+3Ar
dword_9F80	DCD 0x40048100		; DATA XREF: sendPacketWithTimer+5Er

; =============== S U B	R O U T	I N E =======================================


dualRateExpFunction			; CODE XREF: DualRateExp+15Ep
		PUSH	{R4-R7,LR}
		MOVS	R4, #1
		MOV	LR, R0
		LSLS	R4, R4,	#0x10
		ASRS	R0, R4,	#1
		MOVS	R2, #0
		SUBS	R3, R0,	R1
		LSLS	R7, R1,	#0xF

loc_9F94				; CODE XREF: dualRateExpFunction+3Cj
		ADDS	R0, R2,	R4
		LSRS	R5, R0,	#1
		MOV	R0, R3
		MOV	R6, R1
		MULS	R0, R5
		MULS	R6, R5
		ADDS	R0, R7,	R0
		SUBS	R0, R0,	R6
		LSRS	R0, R0,	#0xF
		MULS	R0, R5
		ADDS	R6, R0,	R6
		MOVS	R0, #0x4000
		ADDS	R0, R6,	R0
		LSRS	R0, R0,	#0xF
		CMP	R0, LR
		BCS	loc_9FBA
		MOV	R2, R5
		B	loc_9FBC
; ---------------------------------------------------------------------------

loc_9FBA				; CODE XREF: dualRateExpFunction+30j
		MOV	R4, R5

loc_9FBC				; CODE XREF: dualRateExpFunction+34j
		SUBS	R0, R4,	R2
		CMP	R0, #1
		BHI	loc_9F94
		MOV	R0, R3
		MOV	R6, R1
		MULS	R0, R2
		MULS	R6, R2
		ADDS	R5, R7,	R0
		SUBS	R0, R5,	R6
		LSRS	R5, R0,	#0xF
		MULS	R5, R2
		ADDS	R0, R5,	R6
		MOVS	R5, #0x4000
		ADDS	R0, R0,	R5
		LSRS	R0, R0,	#0xF
		MOV	R5, LR
		SUBS	R5, R5,	R0
		MOV	R6, R3
		MOV	R0, R1
		MULS	R6, R4
		MULS	R0, R4
		ADDS	R6, R7,	R6
		SUBS	R6, R6,	R0
		LSRS	R6, R6,	#0xF
		MULS	R6, R4
		ADDS	R0, R6,	R0
		MOVS	R6, #0x4000
		ADDS	R0, R0,	R6
		LSRS	R0, R0,	#0xF
		MOV	R6, LR
		SUBS	R0, R0,	R6
		CMP	R5, R0
		BLS	loc_A004
		MOV	R2, R4

loc_A004				; CODE XREF: dualRateExpFunction+7Cj
		MOV	R0, R3
		LSLS	R3, R3,	#0xF
		MULS	R1, R2
		MULS	R0, R2
		ADDS	R1, R3,	R1
		SUBS	R1, R1,	R0
		LSRS	R1, R1,	#0xF
		MULS	R1, R2
		ADDS	R0, R1,	R0
		MOVS	R1, #0x4000
		ADDS	R0, R0,	R1
		LSRS	R0, R0,	#0xF
		POP	{R4-R7,PC}
; End of function dualRateExpFunction


; =============== S U B	R O U T	I N E =======================================


; unsigned int __fastcall crcCheck(_BYTE *startPTR, signed int length)
crcCheck				; CODE XREF: FirmwareUpdatePage+B2p
					; settingsValidation+20p ...
		PUSH	{R4,R5}
		MOV	R2, R0
		LDR	R4, =0x7FFFFFFF
		LDR	R0, =0xFFFF
		LDR	R3, =dword_E828
		CMP	R1, R4
		BLS	loc_A04C
		CMP	R1, #0
		BEQ	loc_A048

loc_A032				; CODE XREF: crcCheck+26j
		LDRB	R5, [R2]
		LSRS	R4, R0,	#8
		EORS	R4, R5
		LSLS	R4, R4,	#1
		LDRH	R4, [R3,R4]
		LSLS	R0, R0,	#8
		EORS	R4, R0
		ADDS	R2, #1
		UXTH	R0, R4
		SUBS	R1, #1
		BNE	loc_A032

loc_A048				; CODE XREF: crcCheck+10j crcCheck+2Ej ...
		POP	{R4,R5}
		BX	LR
; ---------------------------------------------------------------------------

loc_A04C				; CODE XREF: crcCheck+Cj
		CMP	R1, #0
		BLE	loc_A048
		SUBS	R2, #1
		LSLS	R4, R1,	#0x1F
		BEQ	loc_A06A
		ADDS	R2, #1
		LDRB	R4, [R2]
		MOVS	R0, #0xFF
		EORS	R0, R4
		LSLS	R0, R0,	#1
		LDRH	R0, [R3,R0]
		MOVS	R4, #0xFF00
		EORS	R0, R4
		UXTH	R0, R0

loc_A06A				; CODE XREF: crcCheck+34j
		ASRS	R1, R1,	#1
		BEQ	loc_A048

loc_A06E				; CODE XREF: crcCheck+72j
		LSRS	R4, R0,	#8
		LDRB	R5, [R2,#1]
		LSLS	R0, R0,	#8
		EORS	R4, R5
		LSLS	R4, R4,	#1
		LDRH	R4, [R3,R4]
		ADDS	R2, #2
		EORS	R4, R0
		UXTH	R0, R4
		LDRB	R5, [R2]
		LSRS	R4, R0,	#8
		EORS	R4, R5
		LSLS	R4, R4,	#1
		LDRH	R4, [R3,R4]
		LSLS	R0, R0,	#8
		EORS	R4, R0
		UXTH	R0, R4
		SUBS	R1, #1
		BNE	loc_A06E
		POP	{R4,R5}
		BX	LR
; End of function crcCheck

; ---------------------------------------------------------------------------
dword_A098	DCD 0xFFFF		; DATA XREF: crcCheck+6r
dword_A09C	DCD 0x7FFFFFFF		; DATA XREF: crcCheck+4r
off_A0A0	DCD dword_E828		; DATA XREF: crcCheck+8r

; =============== S U B	R O U T	I N E =======================================


strageSPILoop				; CODE XREF: spiSend+86p
		LDR	R1, =0xE000E000
		LDR	R2, [R1,#0x18]
		LSLS	R2, R2,	#8
		LSLS	R0, R0,	#8

loc_A0AC				; CODE XREF: strageSPILoop+10j
		LDR	R3, [R1,#0x18]
		LSLS	R3, R3,	#8
		SUBS	R3, R2,	R3
		CMP	R3, R0
		BCC	loc_A0AC
		BX	LR
; End of function strageSPILoop

; ---------------------------------------------------------------------------
dword_A0B8	DCD 0xE000E000		; DATA XREF: strageSPILoopr

; =============== S U B	R O U T	I N E =======================================


timerSendPacket				; CODE XREF: LCD_clear+100p
					; LCD_clear+108p ...
		PUSH	{R4,LR}
		LDR	R1, =0xE000E000
		LDR	R2, [R1,#0x18]
		MOVS	R3, #3
		LSLS	R2, R2,	#8
		LSLS	R3, R3,	#8
		MULS	R0, R3

loc_A0CA				; CODE XREF: timerSendPacket+16j
		LDR	R3, [R1,#0x18]
		LSLS	R3, R3,	#8
		SUBS	R3, R2,	R3
		CMP	R3, R0
		BCC	loc_A0CA
		LDR	R0, [R1,#0x18]
		LDR	R4, =studentMode
		LSLS	R0, R0,	#8
		LDR	R1, [R4,#(dword_2000015C - 0x20000144)]
		MOVS	R2, #0xF
		SUBS	R1, R1,	R0
		LSLS	R2, R2,	#9
		CMP	R1, R2
		BCC	locret_A138
		STR	R0, [R4,#(dword_2000015C - 0x20000144)]
		BL	callSendPacket
		LDR	R0, =timer
		LDR	R1, [R0]
		LDR	R2, [R4,#(dword_20000148 - 0x20000144)]
		SUBS	R1, R1,	R2
		LDR	R2, =0x927C0
		CMP	R1, R2
		BCC	loc_A126
		LDR	R1, [R0]
		LDR	R2, [R4,#(dword_2000014C - 0x20000144)]
		SUBS	R1, R1,	R2
		LDR	R2, =(byte_DA0+0x5E8)
		CMP	R1, R2
		BCC	loc_A126
		LDR	R0, [R0]
		STR	R0, [R4,#(dword_2000014C - 0x20000144)]
		LDR	R4, =0x20B
		MOVS	R1, #0x4B ; 'K'
		MOV	R0, R4
		BL	beep
		MOVS	R0, #0x31 ; '1'
		MOVS	R1, #0x4B ; 'K'
		LSLS	R0, R0,	#4
		BL	beep
		MOVS	R1, #0x4B ; 'K'
		MOV	R0, R4
		BL	beep

loc_A126				; CODE XREF: timerSendPacket+3Cj
					; timerSendPacket+48j
		BL	sub_61EC
		BL	sub_618C
		LDR	R0, =0x40048100
		MOVS	R1, #0x55 ; 'U'
		STR	R1, [R0,#4]
		MOVS	R1, #0xAA ; 'ª'
		STR	R1, [R0,#4]

locret_A138				; CODE XREF: timerSendPacket+28j
		POP	{R4,PC}
; End of function timerSendPacket

; ---------------------------------------------------------------------------
		ALIGN 4
dword_A13C	DCD 0xE000E000		; DATA XREF: timerSendPacket+2r
off_A140	DCD studentMode		; DATA XREF: timerSendPacket+1Ar
off_A144	DCD timer		; DATA XREF: timerSendPacket+30r
dword_A148	DCD 0x927C0		; DATA XREF: timerSendPacket+38r
off_A14C	DCD byte_DA0+0x5E8	; DATA XREF: timerSendPacket+44r
dword_A150	DCD 0x20B		; DATA XREF: timerSendPacket+4Er
dword_A154	DCD 0x40048100		; DATA XREF: timerSendPacket+72r

; =============== S U B	R O U T	I N E =======================================


sub_A158				; CODE XREF: SensorsList+22p
					; sensorsFunction+6p ...
		LDR	R0, =studentMode
		LDR	R1, [R0,#(dword_20000154 - 0x20000144)]
		CMP	R1, #0
		BNE	loc_A16A
		LDR	R2, =0xE000E100
		LDR	R3, [R2]
		STR	R3, [R0,#(dword_20000158 - 0x20000144)]
		MOVS	R3, #0
		STR	R3, [R2]

loc_A16A				; CODE XREF: sub_A158+6j
		ADDS	R1, #1
		STR	R1, [R0,#(dword_20000154 - 0x20000144)]
		BX	LR
; End of function sub_A158

; ---------------------------------------------------------------------------
off_A170	DCD studentMode		; DATA XREF: sub_A158r
dword_A174	DCD 0xE000E100		; DATA XREF: sub_A158+8r

; =============== S U B	R O U T	I N E =======================================


div__0					; CODE XREF: DualRateExp+178p
					; DisplayChannels+74p ...
		LSRS	R2, R1,	#0x1F
		ADDS	R2, R2,	R1
		PUSH	{R4,LR}
		ASRS	R2, R2,	#1
		CMP	R0, #0
		BGE	loc_A188
		SUBS	R0, R0,	R2
		B	loc_A18A
; ---------------------------------------------------------------------------

loc_A188				; CODE XREF: div__0+Aj
		ADDS	R0, R2,	R0

loc_A18A				; CODE XREF: div__0+Ej
		BL	div_
		POP	{R4,PC}
; End of function div__0


; =============== S U B	R O U T	I N E =======================================


sub_A190				; CODE XREF: SensorsList+62p
					; sensorsFunction:loc_53A2p ...
		LDR	R0, =studentMode
		LDR	R1, [R0,#(dword_20000154 - 0x20000144)]
		CMP	R1, #0
		BEQ	locret_A1A4
		SUBS	R1, #1
		STR	R1, [R0,#(dword_20000154 - 0x20000144)]
		BNE	locret_A1A4
		LDR	R1, =0xE000E100
		LDR	R0, [R0,#(dword_20000158 - 0x20000144)]
		STR	R0, [R1]

locret_A1A4				; CODE XREF: sub_A190+6j sub_A190+Cj
		BX	LR
; End of function sub_A190

; ---------------------------------------------------------------------------
		ALIGN 4
off_A1A8	DCD studentMode		; DATA XREF: sub_A190r
dword_A1AC	DCD 0xE000E100		; DATA XREF: sub_A190+Er

; =============== S U B	R O U T	I N E =======================================


getCurrentTicks				; CODE XREF: sendPAcket+510p
					; sendPAcket:loc_8A92p	...
		LDR	R0, =0xE000E000
		LDR	R0, [R0,#0x18]
		BX	LR
; End of function getCurrentTicks

; ---------------------------------------------------------------------------
		ALIGN 4
dword_A1B8	DCD 0xE000E000		; DATA XREF: getCurrentTicksr

; =============== S U B	R O U T	I N E =======================================


kindOfInit				; CODE XREF: main_screen+10p
		PUSH	{R4,R5}
		LDR	R1, =0x40048100
		MOVS	R0, #0xD
		STR	R0, [R1]
		LDR	R2, =studentMode
		MOVS	R3, #0
		LDR	R0, =0xE000E000
		LDR	R1, =0xFFFFFF
		STR	R3, [R2,#(dword_20000154 - 0x20000144)]
		STR	R1, [R0,#0x14]
		LDR	R1, [R0,#0x10]
		MOVS	R4, #1
		ORRS	R1, R4
		STR	R1, [R0,#0x10]
		LDR	R0, =0x40064000
		MOVS	R1, #0x9C ; ''
		STRB	R1, [R0,#1]
		MOVS	R1, #0x98 ; ''
		STRB	R1, [R0]
		LDRB	R1, [R0,#6]

loc_A1E4				; CODE XREF: kindOfInit+2Cj
		LDRB	R1, [R0,#6]
		LSLS	R1, R1,	#0x1B
		BMI	loc_A1E4

loc_A1EA				; CODE XREF: kindOfInit+36j
		LDRB	R1, [R0,#6]
		LSLS	R1, R1,	#0x1C
		LSRS	R1, R1,	#0x1E
		CMP	R1, #2
		BNE	loc_A1EA
		LDRB	R1, [R0,#4]
		LSRS	R1, R1,	#5
		LSLS	R1, R1,	#5
		ADDS	R1, #3
		STRB	R1, [R0,#4]
		LDRB	R1, [R0,#5]
		MOVS	R4, #0x40 ; '@'
		ORRS	R1, R4
		STRB	R1, [R0,#5]
		LDRB	R1, [R0,#5]
		LSRS	R1, R1,	#5
		LSLS	R1, R1,	#5
		STRB	R1, [R0,#5]

loc_A20E				; CODE XREF: kindOfInit+56j
		LDRB	R1, [R0,#6]
		LSLS	R1, R1,	#0x1A
		BPL	loc_A20E

loc_A214				; CODE XREF: kindOfInit+5Cj
		LDRB	R1, [R0,#6]
		LSLS	R1, R1,	#0x19
		BPL	loc_A214
		LDR	R4, =0x40048040
		LDR	R1, [R4,#4]
		MOVS	R5, #0x70000
		ANDS	R1, R5
		MOVS	R5, #0x10000
		ORRS	R1, R5
		STR	R1, [R4,#4]
		LDRB	R1, [R0]
		LSLS	R1, R1,	#0x1A
		LSRS	R1, R1,	#0x1A
		STRB	R1, [R0]

loc_A234				; CODE XREF: kindOfInit+80j
		LDRB	R1, [R0,#6]
		LSLS	R1, R1,	#0x1C
		LSRS	R1, R1,	#0x1E
		CMP	R1, #3
		BNE	loc_A234
		LDR	R0, =0x40065000
		LDRB	R1, [R0]
		MOVS	R5, #0x80 ; ''
		ORRS	R1, R5
		STRB	R1, [R0]
		LDR	R0, =0x40048000
		LDR	R1, [R0,#4]
		MOVS	R5, #0x3000000
		ANDS	R1, R5
		MOVS	R5, #0x2000000
		ORRS	R1, R5
		STR	R1, [R0,#4]
		LDR	R1, [R0,#0x38]
		MOVS	R5, #0x3E00
		ORRS	R1, R5
		STR	R1, [R0,#0x38]
		LDR	R1, [R0,#0x3C]
		MOVS	R5, #2
		ORRS	R1, R5
		STR	R1, [R0,#0x3C]
		LDR	R0, [R4]
		LSLS	R1, R5,	#7
		ORRS	R0, R1
		STR	R0, [R4]
		LDR	R0, =timer
		LDR	R0, [R0]
		STR	R3, [R2,#(dword_2000014C - 0x20000144)]
		SUBS	R0, #1
		STR	R0, [R2,#(dword_20000148 - 0x20000144)]
		POP	{R4,R5}
		BX	LR
; End of function kindOfInit

; ---------------------------------------------------------------------------
		ALIGN 4
dword_A284	DCD 0x40048100		; DATA XREF: kindOfInit+2r
off_A288	DCD studentMode		; DATA XREF: kindOfInit+8r
dword_A28C	DCD 0xFFFFFF		; DATA XREF: kindOfInit+Er
dword_A290	DCD 0xE000E000		; DATA XREF: kindOfInit+Cr
dword_A294	DCD 0x40064000		; DATA XREF: kindOfInit+1Cr
dword_A298	DCD 0x40048040		; DATA XREF: kindOfInit+5Er
dword_A29C	DCD 0x40065000		; DATA XREF: kindOfInit+82r
dword_A2A0	DCD 0x40048000		; DATA XREF: kindOfInit+8Cr
off_A2A4	DCD timer		; DATA XREF: kindOfInit+B8r

; =============== S U B	R O U T	I N E =======================================


; int __fastcall intToString(signed int	sourceVal, char	*targetText, unsigned int length)
intToString				; CODE XREF: SwashAFRPage+4Ep
					; SwashAFRPage+76p ...
		PUSH	{R3-R7,LR}
		MOVS	R6, #0
		MOV	R4, R2
		MOV	R7, R1
		MOV	R5, R0
		CMP	R0, #0
		BGE	loc_A2BA
		NEGS	R5, R0
		MOVS	R6, #1

loc_A2BA				; CODE XREF: intToString+Cj
		MOVS	R2, #0x20 ; ' '	; a3
		MOV	R1, R4		; numbButesToSend
		MOV	R0, R7		; targetAddress
		BL	setupDMA
		ADDS	R4, R7,	R4
		SUBS	R4, #1

loc_A2C8				; CODE XREF: intToString+30j
		MOVS	R1, #0xA
		MOV	R0, R5
		BL	div_
		ADDS	R1, #0x30 ; '0'
		STRB	R1, [R4]
		SUBS	R4, #1
		MOVS	R5, R0
		BNE	loc_A2C8
		CMP	R6, #0
		BEQ	locret_A2E2
		MOVS	R0, #0x2D ; '-'
		STRB	R0, [R4]

locret_A2E2				; CODE XREF: intToString+34j
		POP	{R3-R7,PC}
; End of function intToString


; =============== S U B	R O U T	I N E =======================================


printNumberAsStringAt			; CODE XREF: modelCopyPage+1Ap
					; modelCopyPage+64p ...
		PUSH	{R3-R7,LR}
		MOVS	R6, #0
		MOV	R4, R2
		MOV	R7, R1
		MOV	R5, R0
		CMP	R0, #0
		BGE	loc_A2F6
		NEGS	R5, R0
		MOVS	R6, #1

loc_A2F6				; CODE XREF: printNumberAsStringAt+Cj
		MOVS	R2, #0x30 ; '0'	; a3
		MOV	R1, R4		; numbButesToSend
		MOV	R0, R7		; targetAddress
		BL	setupDMA
		ADDS	R4, R7,	R4
		SUBS	R4, #1

loc_A304				; CODE XREF: printNumberAsStringAt+30j
		MOVS	R1, #0xA
		MOV	R0, R5
		BL	div_
		ADDS	R1, #0x30 ; '0'
		STRB	R1, [R4]
		SUBS	R4, #1
		MOVS	R5, R0
		BNE	loc_A304
		CMP	R6, #0
		BEQ	locret_A31E
		MOVS	R0, #0x2D ; '-'
		STRB	R0, [R4]

locret_A31E				; CODE XREF: printNumberAsStringAt+34j
		POP	{R3-R7,PC}
; End of function printNumberAsStringAt


; =============== S U B	R O U T	I N E =======================================


sub_A320				; CODE XREF: sub_24D0:loc_24F4p
					; sub_24D0+46p
		LDR	R0, =timer
		LDR	R1, [R0]
		LDR	R0, =studentMode
		SUBS	R1, #1
		STR	R1, [R0,#(dword_20000148 - 0x20000144)]
		MOVS	R1, #0
		STR	R1, [R0,#(dword_2000014C - 0x20000144)]
		BX	LR
; End of function sub_A320

; ---------------------------------------------------------------------------
off_A330	DCD timer		; DATA XREF: sub_A320r
off_A334	DCD studentMode		; DATA XREF: sub_A320+4r

; =============== S U B	R O U T	I N E =======================================


someSPImethod				; CODE XREF: FactoryReset+8Cp
					; FactoryReset+ACp ...
		LDR	R0, =0x40048100
		MOVS	R1, #0x55 ; 'U'
		STR	R1, [R0,#4]
		MOVS	R1, #0xAA ; 'ª'
		STR	R1, [R0,#4]
		BX	LR
; End of function someSPImethod

; ---------------------------------------------------------------------------
dword_A344	DCD 0x40048100		; DATA XREF: someSPImethodr

; =============== S U B	R O U T	I N E =======================================


createRadioPacket			; CODE XREF: trySendSettingsPacket:loc_8560p

ch5_val		= -0x90
ch6_val		= -0x8C
ch_1		= -0x88
ch_2		= -0x84
ch_3		= -0x80
ch_4		= -0x7C
ch_5		= -0x78
ch_6		= -0x74
modelPtrPlus32	= -0x6C
var_64		= -0x64
modelNamePlus64	= -0x5C
var_58		= -0x58
var_54		= -0x54
var_50		= -0x50
var_4C		= -0x4C
var_48		= -0x48
pointerSettings	= -0x44
var_3C		= -0x3C
var_38		= -0x38
studentMod1	= -0x34
pointeSettingsAfterName= -0x30
var_2C		= -0x2C
trainerSW_1	= -0x28
trainerMod	= -0x24
studentMod2	= -0x1C

		PUSH	{R4-R7,LR}
		LDR	R0, =studentMode
		LDR	R5, =timer
		LDRB	R0, [R0,#(byte_20000145	- 0x20000144)]
		SUB	SP, SP,	#0x8C
		CMP	R0, #0
		BEQ	loc_A39E
		LDR	R0, [R5]
		LDR	R2, =studentMode
		LDR	R1, =0x2EE0
		LDR	R3, [R2,#(dword_20000150 - 0x20000144)]
		SUBS	R0, R0,	R3
		CMP	R0, R1
		BCC	loc_A36C
		ADDS	R1, R3,	R1
		STR	R1, [R2,#(dword_20000150 - 0x20000144)]
		LDR	R1, =0xFFFFD120
		ADDS	R0, R0,	R1

loc_A36C				; CODE XREF: createRadioPacket+1Aj
		LDR	R1, =byte_BB8
		CMP	R0, R1
		BHI	loc_A38C

loc_A372				; CODE XREF: createRadioPacket+4Ej
					; createRadioPacket+54j
		MOVS	R1, #0xA
		MULS	R0, R1
		MOVS	R1, #3
		BL	div_
		ADD	R1, SP,	#0xA0+ch6_val
		MOVS	R2, #3

loc_A380				; CODE XREF: createRadioPacket+40j
		STR	R0, [R1,#4]
		ADDS	R1, #8
		STR	R0, [R1]
		SUBS	R2, #1
		BNE	loc_A380
		B	loc_AA1E
; ---------------------------------------------------------------------------

loc_A38C				; CODE XREF: createRadioPacket+28j
		LDR	R1, =off_2328
		CMP	R0, R1
		BHI	loc_A398
		LDR	R1, =(byte_1426+0x34A)
		SUBS	R0, R1,	R0
		B	loc_A372
; ---------------------------------------------------------------------------

loc_A398				; CODE XREF: createRadioPacket+48j
		LDR	R1, =0xFFFFD120
		ADDS	R0, R0,	R1
		B	loc_A372
; ---------------------------------------------------------------------------

loc_A39E				; CODE XREF: createRadioPacket+Cj
		BL	getInputStates
		LDR	R2, =studentMode
		STR	R0, [SP,#0xA0+modelNamePlus64]
		LDRB	R0, [R2]
		LDR	R3, =rxsettings
		STR	R0, [SP,#0xA0+studentMod1]
		STR	R0, [SP,#0xA0+studentMod2]
		LDRB	R0, [R3,#(trainerMode -	0x200002A4)] ; 0=OFF 1=ON
		STR	R0, [SP,#0xA0+trainerMod]
		LDRB	R0, [R3,#(trainerSW - 0x200002A4)] ; 16=A 17=B 18=C 19=D
		MOVS	R1, #1
		LSLS	R1, R0
		LDR	R0, [SP,#0xA0+modelNamePlus64]
		MOVS	R4, #0
		ANDS	R1, R0
		STR	R1, [SP,#0xA0+trainerSW_1]
		LDRB	R0, [R3,#(stickModeSW -	0x200002A4)]
		STR	R0, [SP,#0xA0+var_48]
		LDR	R1, =0xDD21
		LSLS	R0, R0,	#2
		STR	R0, [SP,#0xA0+var_2C]
		ADDS	R0, R0,	R1
		STR	R0, [SP,#0xA0+var_38]
		LDR	R0, =usedModelPtr
		LDR	R0, [R0]
		STR	R0, [SP,#0xA0+pointerSettings]
		ADDS	R0, #0xA
		STR	R0, [SP,#0xA0+pointeSettingsAfterName]

loc_A3D8				; CODE XREF: createRadioPacket+B0j
		LDR	R0, [SP,#0xA0+studentMod2]
		CMP	R0, #0
		BNE	loc_A402
		LDR	R0, [SP,#0xA0+trainerMod]
		CMP	R0, #0
		BEQ	loc_A402
		LDR	R0, [SP,#0xA0+trainerSW_1]
		CMP	R0, #0
		BEQ	loc_A402
		LDR	R1, =dword_1FFFFCC0
		LSLS	R0, R4,	#2
		LDR	R2, [R1,R0]
		ADD	R1, SP,	#0xA0+ch_1
		STR	R2, [R1,R0]

loc_A3F4				; CODE XREF: createRadioPacket+1E4j
					; createRadioPacket+1F6j
		ADDS	R4, #1
		CMP	R4, #6
		BCC	loc_A3D8
		LDR	R0, [SP,#0xA0+studentMod1]
		CMP	R0, #0
		BNE	loc_A4E4
		B	loc_A550
; ---------------------------------------------------------------------------

loc_A402				; CODE XREF: createRadioPacket+94j
					; createRadioPacket+9Aj ...
		LDR	R0, =ch1_ADC_VAL
		LSLS	R6, R4,	#2
		LDR	R7, [R0,R6]
		MOV	R0, R4
		MOVS	R1, #6
		MULS	R0, R1
		LDR	R1, =stickAdjustData ; 40 items
		ADDS	R5, R0,	R1
		LDRB	R0, [R5,#1]
		LDRB	R1, [R5]
		LSLS	R0, R0,	#8
		ORRS	R0, R1
		STR	R0, [SP,#0xA0+var_64]
		CMP	R7, R0
		BCC	loc_A4C2
		LDRB	R0, [R5,#5]
		LDRB	R2, [R5,#4]
		LSLS	R1, R0,	#8
		ORRS	R1, R2
		CMP	R7, R1
		BLS	loc_A430
		MOV	R0, R1
		B	loc_A4C2
; ---------------------------------------------------------------------------

loc_A430				; CODE XREF: createRadioPacket+E2j
		CMP	R4, #0
		BEQ	loc_A43C
		CMP	R4, #1
		BEQ	loc_A43C
		CMP	R4, #3
		BNE	loc_A4C0

loc_A43C				; CODE XREF: createRadioPacket+EAj
					; createRadioPacket+EEj
		LDRB	R0, [R5,#3]
		LDRB	R2, [R5,#2]
		LSLS	R0, R0,	#8
		ORRS	R0, R2
		STR	R0, [SP,#0xA0+modelPtrPlus32]
		SUBS	R0, #0x50 ; 'P'
		CMP	R7, R0
		BLS	loc_A45E
		LDR	R2, [SP,#0xA0+modelPtrPlus32]
		ADDS	R2, #0x50 ; 'P'
		CMP	R7, R2
		BCS	loc_A45E
		LDR	R0, [SP,#0xA0+modelPtrPlus32]
		LSRS	R1, R0,	#3
		SUBS	R0, R0,	R1
		LSRS	R1, R7,	#3
		B	loc_A48C
; ---------------------------------------------------------------------------

loc_A45E				; CODE XREF: createRadioPacket+102j
					; createRadioPacket+10Aj
		CMP	R4, #0
		BEQ	loc_A46A
		CMP	R4, #1
		BEQ	loc_A46A
		CMP	R4, #3
		BNE	loc_A4C0

loc_A46A				; CODE XREF: createRadioPacket+118j
					; createRadioPacket+11Cj
		LDR	R2, [SP,#0xA0+modelPtrPlus32]
		ADDS	R2, #0x50 ; 'P'
		CMP	R7, R2
		BCC	loc_A490
		LDR	R2, [SP,#0xA0+modelPtrPlus32]
		LDR	R0, [SP,#0xA0+modelPtrPlus32]
		SUBS	R1, R1,	R2
		MOV	R2, R1
		SUBS	R0, R7,	R0
		SUBS	R0, #0x50 ; 'P'
		SUBS	R2, #0xA
		MULS	R0, R2
		SUBS	R1, #0x50 ; 'P'
		BL	div_Other
		LDR	R1, [SP,#0xA0+modelPtrPlus32]
		ADDS	R0, #0xA

loc_A48C				; CODE XREF: createRadioPacket+114j
		ADDS	R0, R0,	R1
		B	loc_A4C2
; ---------------------------------------------------------------------------

loc_A490				; CODE XREF: createRadioPacket+128j
		CMP	R4, #0
		BEQ	loc_A49C
		CMP	R4, #1
		BEQ	loc_A49C
		CMP	R4, #3
		BNE	loc_A4C0

loc_A49C				; CODE XREF: createRadioPacket+14Aj
					; createRadioPacket+14Ej
		CMP	R7, R0
		BHI	loc_A4C0
		LDR	R2, [SP,#0xA0+var_64]
		LDR	R1, [SP,#0xA0+modelPtrPlus32]
		LDR	R0, [SP,#0xA0+modelPtrPlus32]
		SUBS	R1, R1,	R2
		MOV	R2, R1
		SUBS	R0, R0,	R7
		SUBS	R0, #0x50 ; 'P'
		SUBS	R2, #0xA
		MULS	R0, R2
		SUBS	R1, #0x50 ; 'P'
		BL	div_Other
		LDR	R1, [SP,#0xA0+modelPtrPlus32]
		SUBS	R0, R1,	R0
		SUBS	R0, #0xA
		B	loc_A4C2
; ---------------------------------------------------------------------------

loc_A4C0				; CODE XREF: createRadioPacket+F2j
					; createRadioPacket+120j ...
		MOV	R0, R7

loc_A4C2				; CODE XREF: createRadioPacket+D6j
					; createRadioPacket+E6j ...
		LDRB	R2, [R5,#3]
		LDRB	R1, [R5,#2]
		LSLS	R2, R2,	#8
		ORRS	R2, R1
		CMP	R2, R0
		BLE	loc_A4E6
		LDR	R1, [SP,#0xA0+var_64]
		SUBS	R1, R2,	R1
		LDR	R2, [SP,#0xA0+var_64]
		SUBS	R0, R0,	R2
		LDR	R2, =dword_2710
		MULS	R0, R2
		BL	div_
		LDR	R1, =0xFFFFD8F0
		ADDS	R0, R0,	R1
		B	loc_A4FA
; ---------------------------------------------------------------------------

loc_A4E4				; CODE XREF: createRadioPacket+B6j
		B	loc_A55C
; ---------------------------------------------------------------------------

loc_A4E6				; CODE XREF: createRadioPacket+184j
		LDRB	R1, [R5,#5]
		LDRB	R3, [R5,#4]
		LSLS	R1, R1,	#8
		ORRS	R1, R3
		SUBS	R1, R1,	R2
		SUBS	R0, R0,	R2
		LDR	R2, =dword_2710
		MULS	R0, R2
		BL	div_

loc_A4FA				; CODE XREF: createRadioPacket+19Aj
		CMP	R4, #4
		BCS	loc_A516
		LDR	R1, [SP,#0xA0+var_48]
		CMP	R1, #1
		BEQ	loc_A540
		CMP	R1, #3
		BEQ	loc_A540
		LDR	R1, [SP,#0xA0+var_38]
		LDRB	R2, [R1,R4]
		LDR	R1, [SP,#0xA0+pointeSettingsAfterName]
		LDRSB	R1, [R2,R1]
		MOVS	R2, #0x14
		MULS	R1, R2
		SUBS	R0, R0,	R1

loc_A516				; CODE XREF: createRadioPacket+1B4j
					; createRadioPacket+206j
		ADD	R1, SP,	#0xA0+ch_1
		STR	R0, [R1,R6]
		LDR	R1, =byte_1FFFFD54
		LDR	R0, [R1,R6]
		SUBS	R0, R7,	R0
		BPL	loc_A524
		NEGS	R0, R0

loc_A524				; CODE XREF: createRadioPacket+1D8j
		MOVS	R2, #0x12C
		CMP	R0, R2
		BGT	loc_A52E
		B	loc_A3F4
; ---------------------------------------------------------------------------

loc_A52E				; CODE XREF: createRadioPacket+1E2j
		STR	R7, [R1,R6]
		LDR	R0, =timer
		LDR	R1, [R0]
		LDR	R0, =studentMode
		SUBS	R1, #1
		STR	R1, [R0,#(dword_20000148 - 0x20000144)]
		MOVS	R1, #0
		STR	R1, [R0,#(dword_2000014C - 0x20000144)]
		B	loc_A3F4
; ---------------------------------------------------------------------------

loc_A540				; CODE XREF: createRadioPacket+1BAj
					; createRadioPacket+1BEj
		LDR	R1, [SP,#0xA0+var_38]
		LDRB	R2, [R1,R4]
		LDR	R1, [SP,#0xA0+pointeSettingsAfterName]
		LDRSB	R1, [R2,R1]
		MOVS	R2, #0x14
		MULS	R1, R2
		ADDS	R0, R1,	R0
		B	loc_A516
; ---------------------------------------------------------------------------

loc_A550				; CODE XREF: createRadioPacket+B8j
		LDR	R0, [SP,#0xA0+trainerMod]
		CMP	R0, #0
		BEQ	loc_A55C
		LDR	R0, [SP,#0xA0+trainerSW_1]
		CMP	R0, #0
		BNE	loc_A5A6

loc_A55C				; CODE XREF: createRadioPacket:loc_A4E4j
					; createRadioPacket+20Cj
		LDR	R1, =0xDD11
		LDR	R0, [SP,#0xA0+var_2C]
		LDR	R3, [SP,#0xA0+ch_1]
		ADDS	R0, R0,	R1
		LDRB	R1, [R0]
		LSLS	R2, R1,	#2
		ADD	R1, SP,	#0xA0+var_58
		STR	R3, [R1,R2]
		LDRB	R2, [R0,#1]
		LDR	R3, [SP,#0xA0+ch_2]
		LSLS	R2, R2,	#2
		STR	R3, [R1,R2]
		LDRB	R2, [R0,#2]
		LDR	R3, [SP,#0xA0+ch_3]
		LSLS	R2, R2,	#2
		STR	R3, [R1,R2]
		LDRB	R0, [R0,#3]
		LDR	R2, [SP,#0xA0+ch_4]
		LSLS	R0, R0,	#2
		STR	R2, [R1,R0]
		LDR	R0, [SP,#0xA0+var_48]
		CMP	R0, #1
		BEQ	loc_A61C
		CMP	R0, #3
		BEQ	loc_A61C
		LDR	R0, [SP,#0xA0+var_58]
		NEGS	R0, R0
		STR	R0, [SP,#0xA0+ch_1]
		LDR	R0, [SP,#0xA0+var_54]
		NEGS	R0, R0
		STR	R0, [SP,#0xA0+ch_2]
		LDR	R0, [SP,#0xA0+var_50]
		NEGS	R0, R0
		STR	R0, [SP,#0xA0+ch_3]
		LDR	R0, [SP,#0xA0+var_4C]
		NEGS	R0, R0

loc_A5A4				; CODE XREF: createRadioPacket+2E2j
		STR	R0, [SP,#0xA0+ch_4]

loc_A5A6				; CODE XREF: createRadioPacket+212j
		LDR	R2, =0xFFFFD8F0
		LDR	R0, [SP,#0xA0+ch_1]
		CMP	R0, R2
		BGT	loc_A5B0
		MOV	R0, R2

loc_A5B0				; CODE XREF: createRadioPacket+264j
		LDR	R3, =dword_2710
		STR	R0, [SP,#0xA0+ch_1]
		CMP	R0, R3
		BLE	loc_A5BA
		MOV	R0, R3

loc_A5BA				; CODE XREF: createRadioPacket+26Ej
		LDR	R1, =(dword_1FFFFD7C+8)
		STR	R0, [SP,#0xA0+ch_1]
		STR	R0, [R1]
		LDR	R0, [SP,#0xA0+ch_2]
		CMP	R0, R2
		BGT	loc_A5C8
		MOV	R0, R2

loc_A5C8				; CODE XREF: createRadioPacket+27Cj
		STR	R0, [SP,#0xA0+ch_2]
		CMP	R0, R3
		BLE	loc_A5D0
		MOV	R0, R3

loc_A5D0				; CODE XREF: createRadioPacket+284j
		STR	R0, [SP,#0xA0+ch_2]
		STR	R0, [R1,#(dword_1FFFFD7C+0xC - 0x1FFFFD84)]
		LDR	R0, [SP,#0xA0+ch_3]
		CMP	R0, R2
		BGT	loc_A5DC
		MOV	R0, R2

loc_A5DC				; CODE XREF: createRadioPacket+290j
		STR	R0, [SP,#0xA0+ch_3]
		CMP	R0, R3
		BLE	loc_A5E4
		MOV	R0, R3

loc_A5E4				; CODE XREF: createRadioPacket+298j
		STR	R0, [SP,#0xA0+ch_3]
		STR	R0, [R1,#(dword_1FFFFD7C+0x10 -	0x1FFFFD84)]
		LDR	R0, [SP,#0xA0+ch_4]
		CMP	R0, R2
		BGT	loc_A5F0
		MOV	R0, R2

loc_A5F0				; CODE XREF: createRadioPacket+2A4j
		STR	R0, [SP,#0xA0+ch_4]
		CMP	R0, R3
		BLE	loc_A5F8
		MOV	R0, R3

loc_A5F8				; CODE XREF: createRadioPacket+2ACj
		STR	R0, [SP,#0xA0+ch_4]
		STR	R0, [R1,#(dword_1FFFFD7C+0x14 -	0x1FFFFD84)]
		LDR	R0, [SP,#0xA0+ch_5]
		CMP	R0, R2
		BGT	loc_A604
		MOV	R0, R2

loc_A604				; CODE XREF: createRadioPacket+2B8j
		STR	R0, [SP,#0xA0+ch_5]
		CMP	R0, R3
		BLE	loc_A60C
		MOV	R0, R3

loc_A60C				; CODE XREF: createRadioPacket+2C0j
		STR	R0, [SP,#0xA0+ch_5]
		STR	R0, [R1,#(dword_1FFFFD7C+0x18 -	0x1FFFFD84)]
		LDR	R0, =0xFFFFD8F0
		LDR	R4, [SP,#0xA0+ch_6]
		CMP	R4, R0
		BLE	loc_A62C
		MOV	R0, R4
		B	loc_A62E
; ---------------------------------------------------------------------------

loc_A61C				; CODE XREF: createRadioPacket+240j
					; createRadioPacket+244j
		LDR	R0, [SP,#0xA0+var_58]
		STR	R0, [SP,#0xA0+ch_1]
		LDR	R0, [SP,#0xA0+var_54]
		STR	R0, [SP,#0xA0+ch_2]
		LDR	R0, [SP,#0xA0+var_50]
		STR	R0, [SP,#0xA0+ch_3]
		LDR	R0, [SP,#0xA0+var_4C]
		B	loc_A5A4
; ---------------------------------------------------------------------------

loc_A62C				; CODE XREF: createRadioPacket+2CEj
		LDR	R0, =0xFFFFD8F0

loc_A62E				; CODE XREF: createRadioPacket+2D2j
		STR	R0, [SP,#0xA0+ch_6]
		CMP	R0, R3
		BLE	loc_A636
		MOV	R0, R3

loc_A636				; CODE XREF: createRadioPacket+2EAj
		LDR	R1, =(dword_1FFFFD7C+8)
		STR	R0, [SP,#0xA0+ch_6]
		STR	R0, [R1,#(dword_1FFFFD7C+0x1C -	0x1FFFFD84)]
		LDR	R0, [SP,#0xA0+studentMod1]
		CMP	R0, #0
		BNE	loc_A740
		MOVS	R5, #0
		B	loc_A652
; ---------------------------------------------------------------------------

loc_A646				; CODE XREF: createRadioPacket+46Aj
		CMP	R5, #0
		BEQ	loc_A652
		CMP	R5, #1
		BEQ	loc_A652
		CMP	R5, #3
		BNE	loc_A742

loc_A652				; CODE XREF: createRadioPacket+2FCj
					; createRadioPacket+300j ...
		LDR	R0, [SP,#0xA0+pointerSettings]
		LDRB	R1, [R0,#0xE]
		MOVS	R0, #1
		LSLS	R0, R1
		LDR	R1, [SP,#0xA0+modelNamePlus64]
		ANDS	R0, R1
		BEQ	loc_A662
		MOVS	R0, #1

loc_A662				; CODE XREF: createRadioPacket+316j
		LDR	R1, [SP,#0xA0+pointerSettings]
		LSLS	R0, R0,	#2
		ADDS	R0, R0,	R1
		ADDS	R0, R0,	R5
		MOVS	R1, #0x17
		STR	R0, [SP,#0xA0+trainerMod]
		LDRSB	R1, [R0,R1]
		MOVS	R0, #0x62 ; 'b'
		MULS	R1, R0
		MOVS	R4, #0x4000
		ADDS	R7, R1,	R4
		LSLS	R0, R5,	#2
		ADD	R1, SP,	#0xA0+ch_1
		STR	R0, [SP,#0xA0+trainerSW_1]
		LDR	R0, [R1,R0]
		STR	R0, [SP,#0xA0+studentMod1]
		CMP	R0, #0
		BGE	loc_A68A
		NEGS	R0, R0

loc_A68A				; CODE XREF: createRadioPacket+33Ej
		LSLS	R0, R0,	#0xF
		LDR	R1, =dword_2710
		BL	div_
		MOVS	R2, #0x10000
		ASRS	R1, R2,	#1
		STR	R0, [SP,#0xA0+var_3C]
		SUBS	R1, R1,	R7
		MOVS	R0, #0
		MOV	R12, R1
		LSLS	R1, R7,	#0xF
		STR	R1, [SP,#0xA0+var_48]

loc_A6A4				; CODE XREF: createRadioPacket+38Cj
		ADDS	R1, R0,	R2
		LSRS	R3, R1,	#1
		MOV	R1, R12
		LDR	R6, [SP,#0xA0+var_48]
		MOV	R4, R7
		MULS	R1, R3
		MULS	R4, R3
		ADDS	R1, R6,	R1
		SUBS	R1, R1,	R4
		LSRS	R1, R1,	#0xF
		MULS	R1, R3
		ADDS	R1, R1,	R4
		MOVS	R4, #0x4000
		ADDS	R1, R1,	R4
		LDR	R4, [SP,#0xA0+var_3C]
		LSRS	R1, R1,	#0xF
		CMP	R1, R4
		BCS	loc_A6CE
		MOV	R0, R3
		B	loc_A6D0
; ---------------------------------------------------------------------------

loc_A6CE				; CODE XREF: createRadioPacket+380j
		MOV	R2, R3

loc_A6D0				; CODE XREF: createRadioPacket+384j
		SUBS	R1, R2,	R0
		CMP	R1, #1
		BHI	loc_A6A4
		MOV	R3, R12
		MULS	R3, R0
		ADDS	R3, R6,	R3
		MOV	R1, R7
		MULS	R1, R0
		SUBS	R3, R3,	R1
		LSRS	R3, R3,	#0xF
		MULS	R3, R0
		ADDS	R1, R3,	R1
		MOVS	R3, #0x4000
		ADDS	R1, R1,	R3
		LDR	R3, [SP,#0xA0+var_3C]
		LSRS	R1, R1,	#0xF
		MOV	R4, R6
		SUBS	R3, R3,	R1
		MOV	R1, R12
		MOV	R6, R7
		MULS	R1, R2
		MULS	R6, R2
		ADDS	R4, R4,	R1
		SUBS	R1, R4,	R6
		LSRS	R4, R1,	#0xF
		MULS	R4, R2
		ADDS	R1, R4,	R6
		MOVS	R4, #0x4000
		ADDS	R1, R1,	R4
		LDR	R4, [SP,#0xA0+var_3C]
		LSRS	R1, R1,	#0xF
		SUBS	R1, R1,	R4
		CMP	R3, R1
		BLS	loc_A71A
		MOV	R0, R2

loc_A71A				; CODE XREF: createRadioPacket+3CEj
		MOV	R3, R12
		MOV	R2, R12
		LSLS	R3, R3,	#0xF
		MULS	R7, R0
		MULS	R2, R0
		ADDS	R3, R3,	R7
		SUBS	R3, R3,	R2
		LSRS	R3, R3,	#0xF
		MULS	R3, R0
		MOVS	R1, #1
		ADDS	R0, R3,	R2
		LSLS	R1, R1,	#0xF
		ASRS	R2, R1,	#1
		ADDS	R0, R0,	R2
		LSRS	R0, R0,	#0xF
		MOVS	R3, #0x64 ; 'd'
		MULS	R0, R3
		LDR	R3, [SP,#0xA0+trainerMod]
		B	loc_A78C
; ---------------------------------------------------------------------------

loc_A740				; CODE XREF: createRadioPacket+2F8j
		B	loc_AA8C
; ---------------------------------------------------------------------------

loc_A742				; CODE XREF: createRadioPacket+308j
		B	loc_A7AC
; ---------------------------------------------------------------------------
off_A744	DCD studentMode		; DATA XREF: createRadioPacket+2r
					; createRadioPacket+10r ...
off_A748	DCD timer		; DATA XREF: createRadioPacket+4r
					; createRadioPacket+1E8r
dword_A74C	DCD 0x2EE0		; DATA XREF: createRadioPacket+12r
dword_A750	DCD 0xFFFFD120		; DATA XREF: createRadioPacket+20r
					; createRadioPacket:loc_A398r
off_A754	DCD byte_BB8		; DATA XREF: createRadioPacket:loc_A36Cr
off_A758	DCD off_2328		; DATA XREF: createRadioPacket:loc_A38Cr
off_A75C	DCD byte_1426+0x34A	; DATA XREF: createRadioPacket+4Ar
off_A760	DCD rxsettings		; DATA XREF: createRadioPacket+60r
dword_A764	DCD 0xDD21		; DATA XREF: createRadioPacket+7Cr
off_A768	DCD usedModelPtr	; DATA XREF: createRadioPacket+86r
off_A76C	DCD dword_1FFFFCC0	; DATA XREF: createRadioPacket+A2r
off_A770	DCD ch1_ADC_VAL		; DATA XREF: createRadioPacket:loc_A402r
off_A774	DCD stickAdjustData	; DATA XREF: createRadioPacket+C6r
					; 40 items
off_A778	DCD dword_2710		; DATA XREF: createRadioPacket+18Er
					; createRadioPacket+1AAr ...
dword_A77C	DCD 0xFFFFD8F0		; DATA XREF: createRadioPacket+196r
					; createRadioPacket:loc_A5A6r ...
off_A780	DCD byte_1FFFFD54	; DATA XREF: createRadioPacket+1D2r
dword_A784	DCD 0xDD11		; DATA XREF: createRadioPacket:loc_A55Cr
off_A788	DCD dword_1FFFFD7C+8	; DATA XREF: createRadioPacket:loc_A5BAr
					; createRadioPacket:loc_A636r
; ---------------------------------------------------------------------------

loc_A78C				; CODE XREF: createRadioPacket+3F6j
		LDRB	R3, [R3,#0xF]
		MULS	R0, R3
		CMP	R0, #0
		BGE	loc_A798
		SUBS	R0, R0,	R2
		B	loc_A79A
; ---------------------------------------------------------------------------

loc_A798				; CODE XREF: createRadioPacket+44Aj
		ADDS	R0, R2,	R0

loc_A79A				; CODE XREF: createRadioPacket+44Ej
		BL	div_
		LDR	R1, [SP,#0xA0+studentMod1]
		ADD	R4, SP,	#0xA0+ch_1
		CMP	R1, #0
		BGE	loc_A7A8
		NEGS	R0, R0

loc_A7A8				; CODE XREF: createRadioPacket+45Cj
		LDR	R1, [SP,#0xA0+trainerSW_1]
		STR	R0, [R4,R1]

loc_A7AC				; CODE XREF: createRadioPacket:loc_A742j
		ADDS	R5, #1
		CMP	R5, #6
		BCS	loc_A7B4
		B	loc_A646
; ---------------------------------------------------------------------------

loc_A7B4				; CODE XREF: createRadioPacket+468j
		LDR	R0, [SP,#0xA0+pointerSettings]
		LDR	R5, =usedModelPtr
		LDRB	R0, [R0,#9]
		CMP	R0, #2
		BCC	loc_A7CA
		LDR	R1, [SP,#0xA0+pointerSettings]
		LDR	R0, [SP,#0xA0+ch_3]
		ADDS	R1, #0x1F
		BL	sub_237C
		STR	R0, [SP,#0xA0+ch_6]

loc_A7CA				; CODE XREF: createRadioPacket+474j
		LDR	R1, [R5]
		LDRB	R0, [R1,#9]
		CMP	R0, #3
		BCC	loc_A82C
		MOVS	R2, #0x29 ; ')'
		LDRSB	R2, [R1,R2]
		LDR	R0, [SP,#0xA0+ch_1]
		MOVS	R1, #0x64 ; 'd'
		MULS	R0, R2
		BL	div__0
		LDR	R1, [R5]
		MOV	R7, R0
		MOVS	R2, #0x2A ; '*'
		LDR	R0, [SP,#0xA0+ch_2]
		LDRSB	R2, [R1,R2]
		MOVS	R1, #0x64 ; 'd'
		MULS	R0, R2
		BL	div__0
		LDR	R1, [R5]
		MOV	R6, R0
		MOVS	R2, #0x2B ; '+'
		LDR	R0, [SP,#0xA0+ch_6]
		LDRSB	R2, [R1,R2]
		MOVS	R1, #0x64 ; 'd'
		MULS	R0, R2
		BL	div__0
		LDR	R1, [R5]
		LDRB	R1, [R1,#9]
		CMP	R1, #3
		BEQ	loc_A89C
		CMP	R1, #4
		BEQ	loc_A8A8
		LDR	R2, =0xC41B
		MOV	R1, R6
		MULS	R1, R2
		ASRS	R1, R1,	#0xF
		SUBS	R2, R0,	R1
		LDR	R1, =(dword_DD3C+0x78)
		ADDS	R0, R0,	R6
		MULS	R7, R1
		ASRS	R1, R7,	#0xF
		SUBS	R3, R2,	R1
		STR	R0, [SP,#0xA0+ch_2]
		STR	R3, [SP,#0xA0+ch_1]
		ADDS	R0, R2,	R1
		STR	R0, [SP,#0xA0+ch_6]

loc_A82C				; CODE XREF: createRadioPacket+488j
					; createRadioPacket+57Aj
		LDR	R1, [R5]
		MOV	R2, R1
		ADDS	R2, #0x20 ; ' '
		LDRB	R0, [R2,#0x17]
		LSLS	R0, R0,	#0x1F
		BEQ	loc_A8C4
		LDRB	R3, [R2,#0x18]
		MOVS	R0, #1
		LSLS	R0, R3
		LDR	R3, [SP,#0xA0+modelNamePlus64]
		TST	R0, R3
		BEQ	loc_A8C4
		LDRB	R0, [R2,#0x19]
		MOVS	R1, #0xC8 ; 'È'
		SUBS	R0, #0x32 ; '2'
		MULS	R0, R1

loc_A84C				; CODE XREF: createRadioPacket+584j
		STR	R0, [SP,#0xA0+ch_3]
		LDR	R2, [R5]
		LDRB	R0, [R2,#9]
		CMP	R0, #0
		BEQ	loc_A87E
		MOV	R0, R2
		ADDS	R0, #0x20 ; ' '
		LDRB	R1, [R0,#0x17]
		LSLS	R1, R1,	#0x1C
		BPL	loc_A87E
		LDRB	R0, [R0,#0xC]
		MOVS	R1, #1
		LSLS	R1, R0
		LDR	R0, [SP,#0xA0+modelNamePlus64]
		MOVS	R3, #0
		TST	R1, R0
		BEQ	loc_A870
		MOVS	R3, #1

loc_A870				; CODE XREF: createRadioPacket+524j
		ADDS	R0, R2,	R3
		ADDS	R0, #0x20 ; ' '
		LDRB	R0, [R0,#0x1A]
		MOVS	R1, #0xC8 ; 'È'
		SUBS	R0, #0x32 ; '2'
		MULS	R0, R1
		STR	R0, [SP,#0xA0+ch_5]

loc_A87E				; CODE XREF: createRadioPacket+50Cj
					; createRadioPacket+516j
		BL	getInputStates
		LDR	R1, =usedModelPtr
		MOVS	R3, #5
		LDR	R5, [R1]
		LSLS	R3, R3,	#0x12
		LDRB	R6, [R5,#9]
		CMP	R6, #0
		BEQ	loc_A8CE
		MOVS	R1, #0x37 ; '7'
		LDRB	R1, [R1,R5]
		LSLS	R1, R1,	#0x1C
		BPL	loc_A8CE
		LDR	R2, [SP,#0xA0+ch_5]
		B	loc_A8DC
; ---------------------------------------------------------------------------

loc_A89C				; CODE XREF: createRadioPacket+4C2j
		SUBS	R1, R0,	R7
		STR	R1, [SP,#0xA0+ch_1]
		ADDS	R1, R0,	R6
		ADDS	R0, R0,	R7
		STR	R1, [SP,#0xA0+ch_2]
		B	loc_A8C0
; ---------------------------------------------------------------------------

loc_A8A8				; CODE XREF: createRadioPacket+4C6j
		LSRS	R1, R6,	#0x1F
		ADDS	R1, R1,	R6
		ASRS	R1, R1,	#1
		LDR	R2, =0x6EDA
		SUBS	R1, R0,	R1
		MULS	R7, R2
		ASRS	R2, R7,	#0xF
		SUBS	R3, R1,	R2
		ADDS	R0, R0,	R6
		STR	R0, [SP,#0xA0+ch_2]
		STR	R3, [SP,#0xA0+ch_1]
		ADDS	R0, R1,	R2

loc_A8C0				; CODE XREF: createRadioPacket+55Ej
		STR	R0, [SP,#0xA0+ch_6]
		B	loc_A82C
; ---------------------------------------------------------------------------

loc_A8C4				; CODE XREF: createRadioPacket+4EEj
					; createRadioPacket+4FAj
		ADDS	R1, #0x2D ; '-'
		LDR	R0, [SP,#0xA0+ch_3]
		BL	sub_237C
		B	loc_A84C
; ---------------------------------------------------------------------------

loc_A8CE				; CODE XREF: createRadioPacket+546j
					; createRadioPacket+54Ej
		MOVS	R1, #0x3C ; '<'
		LDRB	R0, [R1,R5]	; switch_1
		BL	createPacketsForCH7_10
		LDR	R3, =(dword_1FFFFD7C+8)
		STR	R0, [R3,#(dword_1FFFFD7C+0x18 -	0x1FFFFD84)]
		STR	R0, [SP,#0xA0+ch_5]

loc_A8DC				; CODE XREF: createRadioPacket+552j
		CMP	R6, #3
		BCC	loc_A8E4
		LDR	R0, [SP,#0xA0+ch_6]
		B	loc_A8F2
; ---------------------------------------------------------------------------

loc_A8E4				; CODE XREF: createRadioPacket+596j
		MOVS	R1, #0x3D ; '='
		LDRB	R0, [R1,R5]	; switch_1
		BL	createPacketsForCH7_10
		LDR	R3, =(dword_1FFFFD7C+8)
		STR	R0, [R3,#(dword_1FFFFD7C+0x1C -	0x1FFFFD84)]
		STR	R0, [SP,#0xA0+ch_6]

loc_A8F2				; CODE XREF: createRadioPacket+59Aj
		MOV	R3, R5
		ADDS	R3, #0x20 ; ' '
		STR	R3, [SP,#0xA0+modelPtrPlus32]
		ADD	R0, SP,	#0xA0+ch_1
		LDMIA	R0, {R0,R2,R3,R6}
		MOV	R1, SP
		STMIA	R1!, {R0,R2,R3,R6}
		LDR	R0, [SP,#0xA0+ch_5]
		LDR	R2, [SP,#0xA0+ch_6]
		MOVS	R6, #0
		STR	R2, [SP,#0xA0+ch6_val]
		STR	R0, [SP,#0xA0+ch5_val]

loc_A90A				; CODE XREF: createRadioPacket+622j
		LSLS	R0, R6,	#2
		ADDS	R4, R0,	R5
		MOV	R2, R4
		ADDS	R2, #0x20 ; ' '
		LDRB	R3, [R2,#0x1E]
		LSRS	R0, R3,	#7
		BEQ	loc_A966
		LSLS	R0, R3,	#0x1C
		LSRS	R0, R0,	#0x1C
		CMP	R0, #6
		BCS	loc_A928
		LSLS	R1, R0,	#2
		MOV	R0, SP
		LDR	R1, [R0,R1]
		B	loc_A932
; ---------------------------------------------------------------------------

loc_A928				; CODE XREF: createRadioPacket+5D6j
		LSLS	R1, R0,	#2
		LDR	R0, =(dword_1FFFFD7C+8)
		ADDS	R0, R1,	R0
		SUBS	R0, #0x40 ; '@'
		LDR	R1, [R0,#0x38]

loc_A932				; CODE XREF: createRadioPacket+5DEj
		LSLS	R0, R3,	#0x19
		LSRS	R7, R0,	#0x1D
		CMP	R1, #0
		BLT	loc_A976
		MOVS	R0, #0x1F
		LDRSB	R0, [R2,R0]
		MULS	R0, R1
		CMP	R0, #0
		BLT	loc_A980
		B	loc_A986
; ---------------------------------------------------------------------------

loc_A946				; CODE XREF: createRadioPacket+63Cj
					; createRadioPacket+642j
		BL	div_
		LSLS	R1, R7,	#2
		ADD	R2, SP,	#0xA0+ch_1
		LDR	R3, [R2,R1]
		ADDS	R0, R0,	R3
		STR	R0, [R2,R1]
		LSLS	R1, R7,	#2
		MOV	R0, R2
		LDR	R3, [R2,R1]
		MOVS	R2, #0x41 ; 'A'
		LDRSB	R2, [R4,R2]
		MOVS	R4, #0xC8 ; 'È'
		MULS	R2, R4
		ADDS	R2, R3,	R2
		STR	R2, [R0,R1]

loc_A966				; CODE XREF: createRadioPacket+5CEj
		ADDS	R6, #1
		CMP	R6, #3
		BCC	loc_A90A
		LDRB	R0, [R5,#9]
		LDR	R4, =usedModelPtr
		CMP	R0, #0
		BEQ	loc_A98C
		B	loc_AA1E
; ---------------------------------------------------------------------------

loc_A976				; CODE XREF: createRadioPacket+5F0j
		MOVS	R2, #0x40 ; '@'
		LDRSB	R0, [R2,R4]
		MULS	R0, R1
		CMP	R0, #0
		BGE	loc_A986

loc_A980				; CODE XREF: createRadioPacket+5FAj
		MOVS	R1, #0x64 ; 'd'
		SUBS	R0, #0x32 ; '2'
		B	loc_A946
; ---------------------------------------------------------------------------

loc_A986				; CODE XREF: createRadioPacket+5FCj
					; createRadioPacket+636j
		MOVS	R1, #0x64 ; 'd'
		ADDS	R0, #0x32 ; '2'
		B	loc_A946
; ---------------------------------------------------------------------------

loc_A98C				; CODE XREF: createRadioPacket+62Aj
		LDR	R0, [SP,#0xA0+modelPtrPlus32]
		LDRB	R0, [R0,#0x17]
		LSLS	R0, R0,	#0x1D
		BPL	loc_A9D8
		ADDS	R5, #0x40 ; '@'
		MOVS	R1, #0xB
		LDRSB	R1, [R5,R1]
		LDR	R0, [SP,#0xA0+ch_2]
		MOVS	R2, #0xA
		MULS	R0, R1
		LDRSB	R2, [R5,R2]
		LDR	R1, [SP,#0xA0+ch_1]
		MULS	R1, R2
		ADDS	R0, R0,	R1
		MOVS	R1, #0x64 ; 'd'
		BL	div__0
		MOV	R5, R0
		LDR	R0, [R4]
		MOVS	R2, #0xB
		ADDS	R0, #0x40 ; '@'
		LDR	R1, [SP,#0xA0+ch_2]
		LDRSB	R2, [R0,R2]
		MOVS	R3, #0xA
		MULS	R1, R2
		LDRSB	R3, [R0,R3]
		LDR	R2, [SP,#0xA0+ch_1]
		MULS	R2, R3
		SUBS	R0, R1,	R2
		MOVS	R1, #0x64 ; 'd'
		BL	div__0
		STR	R5, [SP,#0xA0+ch_1]
		STR	R0, [SP,#0xA0+ch_2]
		LDR	R0, [R4]
		LDRB	R0, [R0,#9]
		CMP	R0, #0
		BNE	loc_AA1E

loc_A9D8				; CODE XREF: createRadioPacket+64Aj
		LDR	R0, [R4]
		MOVS	R1, #0x37 ; '7'
		LDRB	R1, [R1,R0]
		LSLS	R1, R1,	#0x1E
		BPL	loc_AA1E
		ADDS	R0, #0x40 ; '@'
		MOVS	R2, #0xB
		LDRSB	R2, [R0,R2]
		LDR	R1, [SP,#0xA0+ch_2]
		MOVS	R3, #0xA
		MULS	R1, R2
		LDRSB	R3, [R0,R3]
		LDR	R2, [SP,#0xA0+ch_4]
		MULS	R2, R3
		SUBS	R0, R1,	R2
		MOVS	R1, #0x64 ; 'd'
		BL	div__0
		MOV	R5, R0
		LDR	R0, [R4]
		MOVS	R2, #0xB
		ADDS	R0, #0x40 ; '@'
		LDR	R1, [SP,#0xA0+ch_2]
		LDRSB	R2, [R0,R2]
		MOVS	R3, #0xA
		MULS	R1, R2
		LDRSB	R3, [R0,R3]
		LDR	R2, [SP,#0xA0+ch_4]
		MULS	R2, R3
		ADDS	R0, R1,	R2
		MOVS	R1, #0x64 ; 'd'
		BL	div__0
		STR	R5, [SP,#0xA0+ch_2]
		STR	R0, [SP,#0xA0+ch_4]

loc_AA1E				; CODE XREF: createRadioPacket+42j
					; createRadioPacket+62Cj ...
		LDR	R0, =studentMode
		LDRB	R0, [R0]
		CMP	R0, #0
		BNE	loc_AA8C
		LDR	R0, =usedModelPtr
		MOVS	R4, #0
		LDR	R7, [R0]
		ADD	R5, SP,	#0xA0+ch_1
		MOV	R0, R7
		ADDS	R0, #0x40 ; '@'
		STR	R0, [SP,#0xA0+modelNamePlus64]

loc_AA34				; CODE XREF: createRadioPacket+742j
		ADDS	R0, R7,	R4
		MOVS	R1, #0x4C ; 'L'
		LSLS	R6, R4,	#2
		LDRSB	R1, [R0,R1]
		LDR	R2, [R5,R6]
		MOVS	R0, #0x14
		MULS	R1, R0
		ADDS	R0, R2,	R1
		LDR	R1, =0xFFFFD8F0
		STR	R0, [R5,R6]
		CMP	R0, R1
		BGT	loc_AA4E
		MOV	R0, R1

loc_AA4E				; CODE XREF: createRadioPacket+702j
		LDR	R1, =dword_2710
		STR	R0, [R5,R6]
		CMP	R0, R1
		BLE	loc_AA58
		MOV	R0, R1

loc_AA58				; CODE XREF: createRadioPacket+70Cj
		STR	R0, [R5,R6]
		CMP	R0, #0
		BGE	loc_AA98
		LSLS	R1, R4,	#1
		ADDS	R1, R1,	R7
		ADDS	R1, #0x40 ; '@'
		LDRB	R1, [R1,#0x12]
		MULS	R0, R1
		CMP	R0, #0
		BLT	loc_AAA6
		B	loc_AAAC
; ---------------------------------------------------------------------------

loc_AA6E				; CODE XREF: createRadioPacket+762j
					; createRadioPacket+768j
		BL	div_
		STR	R0, [R5,R6]
		LDR	R0, [SP,#0xA0+modelNamePlus64]
		LDRB	R1, [R0,#0x1E]
		MOVS	R0, #1
		LSLS	R0, R4
		TST	R1, R0
		BEQ	loc_AA86
		LDR	R0, [R5,R6]
		NEGS	R0, R0
		STR	R0, [R5,R6]

loc_AA86				; CODE XREF: createRadioPacket+736j
		ADDS	R4, #1
		CMP	R4, #6
		BCC	loc_AA34

loc_AA8C				; CODE XREF: createRadioPacket:loc_A740j
					; createRadioPacket+6DCj
		LDR	R0, =0xFFFFD120
		LDR	R1, [SP,#0xA0+ch_1]
		CMP	R1, R0
		BLE	loc_AAB2
		MOV	R2, R1
		B	loc_AAB4
; ---------------------------------------------------------------------------

loc_AA98				; CODE XREF: createRadioPacket+714j
		LSLS	R1, R4,	#1
		ADDS	R1, R1,	R7
		ADDS	R1, #0x40 ; '@'
		LDRB	R1, [R1,#0x13]
		MULS	R0, R1
		CMP	R0, #0
		BGE	loc_AAAC

loc_AAA6				; CODE XREF: createRadioPacket+722j
		MOVS	R1, #0x64 ; 'd'
		SUBS	R0, #0x32 ; '2'
		B	loc_AA6E
; ---------------------------------------------------------------------------

loc_AAAC				; CODE XREF: createRadioPacket+724j
					; createRadioPacket+75Cj
		MOVS	R1, #0x64 ; 'd'
		ADDS	R0, #0x32 ; '2'
		B	loc_AA6E
; ---------------------------------------------------------------------------

loc_AAB2				; CODE XREF: createRadioPacket+74Aj
		MOV	R2, R0

loc_AAB4				; CODE XREF: createRadioPacket+74Ej
		LDR	R1, =0x2EE0
		STR	R2, [SP,#0xA0+ch_1]
		CMP	R2, R1
		BLE	loc_AAC0
		MOV	R3, R1
		B	loc_AAC2
; ---------------------------------------------------------------------------

loc_AAC0				; CODE XREF: createRadioPacket+772j
		MOV	R3, R2

loc_AAC2				; CODE XREF: createRadioPacket+776j
		LDR	R2, =dword_1FFFFDE0
		STR	R3, [SP,#0xA0+ch_1]
		STR	R3, [R2]
		LDR	R3, [SP,#0xA0+ch_2]
		CMP	R3, R0
		BGT	loc_AAD0
		MOV	R3, R0

loc_AAD0				; CODE XREF: createRadioPacket+784j
		STR	R3, [SP,#0xA0+ch_2]
		CMP	R3, R1
		BLE	loc_AAD8
		MOV	R3, R1

loc_AAD8				; CODE XREF: createRadioPacket+78Cj
		STR	R3, [SP,#0xA0+ch_2]
		STR	R3, [R2,#(dword_1FFFFDE4 - 0x1FFFFDE0)]
		LDR	R3, [SP,#0xA0+ch_3]
		CMP	R3, R0
		BGT	loc_AAE4
		MOV	R3, R0

loc_AAE4				; CODE XREF: createRadioPacket+798j
		STR	R3, [SP,#0xA0+ch_3]
		CMP	R3, R1
		BLE	loc_AAEC
		MOV	R3, R1

loc_AAEC				; CODE XREF: createRadioPacket+7A0j
		STR	R3, [SP,#0xA0+ch_3]
		STR	R3, [R2,#(dword_1FFFFDE8 - 0x1FFFFDE0)]
		LDR	R3, [SP,#0xA0+ch_4]
		CMP	R3, R0
		BGT	loc_AAF8
		MOV	R3, R0

loc_AAF8				; CODE XREF: createRadioPacket+7ACj
		STR	R3, [SP,#0xA0+ch_4]
		CMP	R3, R1
		BLE	loc_AB00
		MOV	R3, R1

loc_AB00				; CODE XREF: createRadioPacket+7B4j
		STR	R3, [SP,#0xA0+ch_4]
		STR	R3, [R2,#(dword_1FFFFDEC - 0x1FFFFDE0)]
		LDR	R3, [SP,#0xA0+ch_5]
		CMP	R3, R0
		BGT	loc_AB0C
		MOV	R3, R0

loc_AB0C				; CODE XREF: createRadioPacket+7C0j
		STR	R3, [SP,#0xA0+ch_5]
		CMP	R3, R1
		BLE	loc_AB14
		MOV	R3, R1

loc_AB14				; CODE XREF: createRadioPacket+7C8j
		STR	R3, [SP,#0xA0+ch_5]
		STR	R3, [R2,#(dword_1FFFFDF0 - 0x1FFFFDE0)]
		LDR	R3, [SP,#0xA0+ch_6]
		CMP	R3, R0
		BLE	loc_AB20
		MOV	R0, R3

loc_AB20				; CODE XREF: createRadioPacket+7D4j
		STR	R0, [SP,#0xA0+ch_6]
		CMP	R0, R1
		BGT	loc_AB28
		MOV	R1, R0

loc_AB28				; CODE XREF: createRadioPacket+7DCj
		STR	R1, [R2,#(dword_1FFFFDF4 - 0x1FFFFDE0)]
		LDR	R5, =usedModelPtr
		LDR	R5, [R5]
		B	loc_AB5C
; ---------------------------------------------------------------------------
off_AB30	DCD usedModelPtr	; DATA XREF: createRadioPacket+46Er
					; createRadioPacket+53Ar ...
dword_AB34	DCD 0xC41B		; DATA XREF: createRadioPacket+4C8r
off_AB38	DCD dword_DD3C+0x78	; DATA XREF: createRadioPacket+4D2r
dword_AB3C	DCD 0x6EDA		; DATA XREF: createRadioPacket+566r
off_AB40	DCD dword_2710		; DATA XREF: createRadioPacket:loc_AA4Er
dword_AB44	DCD 0xFFFFD8F0		; DATA XREF: createRadioPacket+6FCr
off_AB48	DCD dword_1FFFFD7C+8	; DATA XREF: createRadioPacket+58Er
					; createRadioPacket+5A4r ...
off_AB4C	DCD studentMode		; DATA XREF: createRadioPacket:loc_AA1Er
dword_AB50	DCD 0xFFFFD120		; DATA XREF: createRadioPacket:loc_AA8Cr
dword_AB54	DCD 0x2EE0		; DATA XREF: createRadioPacket:loc_AAB4r
off_AB58	DCD dword_1FFFFDE0	; DATA XREF: createRadioPacket:loc_AAC2r
; ---------------------------------------------------------------------------

loc_AB5C				; CODE XREF: createRadioPacket+7E6j
		MOVS	R0, #0x8D ; ''
		LDRB	R0, [R0,R5]
		LSLS	R0, R0,	#0x1C
		LSRS	R0, R0,	#0x1C
		BL	createPacketsForCH7_10
		LDR	R1, =dword_1FFFFDE0
		STR	R0, [R1,#(dword_1FFFFDF8 - 0x1FFFFDE0)]
		MOVS	R0, #0x8D ; ''
		LDRB	R0, [R0,R5]
		LSRS	R0, R0,	#4
		BL	createPacketsForCH7_10
		LDR	R1, =dword_1FFFFDE0
		STR	R0, [R1,#(dword_1FFFFDFC - 0x1FFFFDE0)]
		MOVS	R0, #0x91 ; ''
		LDRB	R0, [R0,R5]
		LSLS	R0, R0,	#0x1C
		LSRS	R0, R0,	#0x1C
		BL	createPacketsForCH7_10
		LDR	R1, =dword_1FFFFDE0
		STR	R0, [R1,#(dword_1FFFFE00 - 0x1FFFFDE0)]
		MOVS	R0, #0x91 ; ''
		LDRB	R0, [R0,R5]
		LSRS	R0, R0,	#4
		BL	createPacketsForCH7_10
		LDR	R1, =dword_1FFFFDE0
		STR	R0, [R1,#(dword_1FFFFE04 - 0x1FFFFDE0)]
		ADD	SP, SP,	#0x8C
		POP	{R4-R7,PC}
; End of function createRadioPacket

; ---------------------------------------------------------------------------
off_AB9C	DCD dword_1FFFFDE0	; DATA XREF: createRadioPacket+820r
					; createRadioPacket+82Er ...

; =============== S U B	R O U T	I N E =======================================


toSysTick				; CODE XREF: sendPAcket+528p
					; sendPAcket+532p
		MOVS	R1, #0x300
		MULS	R0, R1
		BX	LR
; End of function toSysTick


; =============== S U B	R O U T	I N E =======================================


saveModelSettings			; CODE XREF: factoryModeMenu+21Ep
					; showNavigationPage+178p ...
		PUSH	{R3-R7,LR}
		MOVS	R6, #0
		MVNS	R6, R6
		MOVS	R7, #0
		MOV	R5, R7
		MOV	R4, R7

loc_ABB4				; CODE XREF: saveModelSettings+50j
		LDR	R0, =settingRelatedValue
		LSLS	R1, R4,	#2
		LDR	R0, [R0,R1]
		CMP	R4, #0
		BEQ	loc_ABCE
		CMP	R6, #0
		BEQ	loc_ABCA
		MOVS	R1, #0x80000000
		CMP	R0, R1
		BCS	loc_ABCE

loc_ABCA				; CODE XREF: saveModelSettings+18j
		CMP	R0, R6
		BCS	loc_ABDE

loc_ABCE				; CODE XREF: saveModelSettings+14j
					; saveModelSettings+20j
		MOVS	R1, #0x80000000
		MOV	R7, R4
		CMP	R0, R1
		BCC	loc_ABDC
		MOVS	R6, #0
		B	loc_ABDE
; ---------------------------------------------------------------------------

loc_ABDC				; CODE XREF: saveModelSettings+2Ej
		MOV	R6, R0

loc_ABDE				; CODE XREF: saveModelSettings+24j
					; saveModelSettings+32j
		MOVS	R1, #0x80000000
		CMP	R0, R1
		BCS	loc_ABF0
		CMP	R4, #0
		BEQ	loc_ABEE
		CMP	R0, R5
		BLS	loc_ABF0

loc_ABEE				; CODE XREF: saveModelSettings+40j
		MOV	R5, R0

loc_ABF0				; CODE XREF: saveModelSettings+3Cj
					; saveModelSettings+44j
		BL	someSPImethod
		ADDS	R4, #1
		CMP	R4, #4
		BCC	loc_ABB4
		LDR	R0, =rxsettings
		ADDS	R5, #1
		STR	R5, [R0]
		LDR	R0, =settingRelatedValue
		LSLS	R1, R7,	#2
		STR	R5, [R0,R1]
		LDR	R1, =0xB72	; length
		LDR	R0, =rxsettings	; startPTR
		BL	crcCheck
		LDR	R1, =(aFlysky02+0xAD4) ; ""
		LDR	R2, =dword_B74
		STRH	R0, [R1,#(settingsCRC -	0x20000E14)]
		LSLS	R1, R7,	#0xC
		ADDS	R1, #0x40 ; '@'
		LDR	R0, =rxsettings
		BL	saveEepromData
		POP	{R3-R7,PC}
; End of function saveModelSettings

; ---------------------------------------------------------------------------
off_AC20	DCD settingRelatedValue	; DATA XREF: saveModelSettings:loc_ABB4r
					; saveModelSettings+58r
; _BYTE	*off_AC24
off_AC24	DCD rxsettings		; DATA XREF: saveModelSettings+52r
					; saveModelSettings+60r ...
; signed int dword_AC28
dword_AC28	DCD 0xB72		; DATA XREF: saveModelSettings+5Er
off_AC2C	DCD aFlysky02+0xAD4	; DATA XREF: saveModelSettings+66r
					; ""
off_AC30	DCD dword_B74		; DATA XREF: saveModelSettings+68r

; =============== S U B	R O U T	I N E =======================================


SpeedDistancePage			; DATA XREF: showNavigationPage:loc_6F82o
					; ROM:off_6FDCo
		PUSH	{R4,LR}
		LDR	R2, =byte_D2A0	; pageName
		MOVS	R1, #4		; numberOfItems
		ADR	R0, aSpeedDistance ; "Speed-distance"
		BL	showNavigationPage
		MOVS	R0, #0
		POP	{R4,PC}
; End of function SpeedDistancePage

; ---------------------------------------------------------------------------
; char **off_AC44
off_AC44	DCD byte_D2A0		; DATA XREF: SpeedDistancePage+2r
aSpeedDistance	DCB "Speed-distance",0  ; DATA XREF: SpeedDistancePage+6o
		DCB 0

; =============== S U B	R O U T	I N E =======================================


SpeedSensor

var_D8		= -0xD8
var_58		= -0x58

		PUSH	{R4-R7,LR}
		MOVS	R5, #0
		SUB	SP, SP,	#0x1C4
		MOV	R4, R5
		BL	sub_A158
		LDR	R0, =byte_20000000
		MOVS	R2, #0xFF
		LDR	R6, [R0,#(activeSensors	- 0x20000000)]
		ADDS	R2, #1		; len
		LDR	R1, =sensorsArrayInRam ; source
		MOV	R0, SP		; target
		BL	strcpy
		BL	sub_A190
		MOVS	R1, #0
		MOV	R0, SP
		CMP	R6, #0
		BLS	loc_ACA6
		LDR	R2, =byte_20000000
		LDR	R2, [R2,#(usedModelPtr - 0x20000000)]
		ADDS	R2, #0x80 ; ''
		LDRB	R3, [R2,#7]

loc_AC88				; CODE XREF: SpeedSensor+4Cj
		LSLS	R2, R1,	#3
		LDRB	R7, [R0,R2]
		CMP	R7, #2
		BNE	loc_AC94
		ADDS	R5, #1
		UXTB	R5, R5

loc_AC94				; CODE XREF: SpeedSensor+36j
		ADDS	R2, R2,	R0
		LDRB	R2, [R2,#1]
		CMP	R3, R2
		BNE	loc_ACA0
		MOV	R4, R5
		B	loc_ACA6
; ---------------------------------------------------------------------------

loc_ACA0				; CODE XREF: SpeedSensor+42j
		ADDS	R1, #1
		CMP	R1, R6
		BCC	loc_AC88

loc_ACA6				; CODE XREF: SpeedSensor+26j
					; SpeedSensor+46j ...
		BL	callSetupDMAandSend
		ADR	R0, aSpeedSensor ; "Speed sensor"
		BL	displayPageHeader
		BL	sub_A158
		LDR	R0, =byte_20000000
		MOVS	R2, #0xFF
		LDR	R7, [R0,#(activeSensors	- 0x20000000)]
		ADDS	R2, #1		; len
		LDR	R1, =sensorsArrayInRam ; source
		MOV	R0, SP		; target
		BL	strcpy
		BL	sub_A190
		ADR	R2, aNone_0	; "None"
		ADR	R1, aS		; "%s"
		ADD	R0, SP,	#0x1D8+var_58
		BL	sprintf
		MOVS	R5, #1
		MOVS	R6, #0
		CMP	R7, #0
		BLS	loc_AD06

loc_ACDA				; CODE XREF: SpeedSensor+ACj
		LSLS	R1, R6,	#3
		MOV	R0, SP
		LDRB	R2, [R0,R1]
		CMP	R2, #2
		BNE	loc_AD00
		ADDS	R0, R1,	R0
		LDRB	R3, [R0,#1]
		LSLS	R1, R5,	#2
		ADD	R0, SP,	#0x1D8+var_D8
		STR	R3, [R0,R1]
		LSLS	R0, R5,	#4
		ADD	R1, SP,	#0x1D8+var_58
		ADDS	R0, R0,	R1
		ADDS	R3, #1
		ADR	R2, aMotorSpeed	; "Motor speed"
		ADR	R1, aSU		; "%s %u"
		BL	sprintf
		ADDS	R5, #1

loc_AD00				; CODE XREF: SpeedSensor+8Aj
		ADDS	R6, #1
		CMP	R6, R7
		BCC	loc_ACDA

loc_AD06				; CODE XREF: SpeedSensor+80j
		LDR	R2, =byte_20000000
		LDR	R0, [R2,#(usedModelPtr - 0x20000000)]
		MOV	R3, R0
		ADDS	R0, #0x81 ; ''
		LDRB	R1, [R0]
		CMP	R1, #0x7C ; '|'
		BEQ	loc_AD1C
		CMP	R1, #0x7D ; '}'
		BEQ	loc_AD1C
		CMP	R1, #0x7E ; '~'
		BNE	loc_AD2C

loc_AD1C				; CODE XREF: SpeedSensor+BAj
					; SpeedSensor+BEj
		ADDS	R3, #0x80 ; ''
		LDRB	R1, [R3,#7]
		CMP	R1, #0xFF
		BEQ	loc_AD28
		STRB	R1, [R0,#1]
		B	loc_AD2C
; ---------------------------------------------------------------------------

loc_AD28				; CODE XREF: SpeedSensor+CAj
		MOVS	R1, #0xFF
		STRB	R1, [R0]

loc_AD2C				; CODE XREF: SpeedSensor+C2j
					; SpeedSensor+CEj
		LDR	R1, [R2,#(usedModelPtr - 0x20000000)]
		MOV	R0, R1
		ADDS	R1, #0x83 ; ''
		LDRB	R3, [R1]
		CMP	R3, #0x7C ; '|'
		BEQ	loc_AD40
		CMP	R3, #0x7D ; '}'
		BEQ	loc_AD40
		CMP	R3, #0x7E ; '~'
		BNE	loc_AD50

loc_AD40				; CODE XREF: SpeedSensor+DEj
					; SpeedSensor+E2j
		ADDS	R0, #0x80 ; ''
		LDRB	R0, [R0,#7]
		CMP	R0, #0xFF
		BEQ	loc_AD4C
		STRB	R0, [R1,#1]
		B	loc_AD50
; ---------------------------------------------------------------------------

loc_AD4C				; CODE XREF: SpeedSensor+EEj
		MOVS	R0, #0xFF
		STRB	R0, [R1]

loc_AD50				; CODE XREF: SpeedSensor+E6j
					; SpeedSensor+F2j
		LDR	R2, [R2,#(usedModelPtr - 0x20000000)]
		MOV	R0, R2
		ADDS	R0, #0x85 ; ''
		LDRB	R1, [R0]
		CMP	R1, #0x7C ; '|'
		BEQ	loc_AD64
		CMP	R1, #0x7D ; '}'
		BEQ	loc_AD64
		CMP	R1, #0x7E ; '~'
		BNE	loc_AD74

loc_AD64				; CODE XREF: SpeedSensor+102j
					; SpeedSensor+106j
		ADDS	R2, #0x80 ; ''
		LDRB	R1, [R2,#7]
		CMP	R1, #0xFF
		BEQ	loc_AD70
		STRB	R1, [R0,#1]
		B	loc_AD74
; ---------------------------------------------------------------------------

loc_AD70				; CODE XREF: SpeedSensor+112j
		MOVS	R1, #0xFF
		STRB	R1, [R0]

loc_AD74				; CODE XREF: SpeedSensor+10Aj
					; SpeedSensor+116j
		LSLS	R1, R4,	#4
		ADD	R0, SP,	#0x1D8+var_58
		ADDS	R0, R1,	R0	; text
		MOVS	R3, #0		; a4
		MOVS	R2, #0x18	; a3
		MOVS	R1, #0x40 ; '@'	; a2
		BL	displayTextAt2
		BL	LCD_updateCALL
		BL	getKeyCode
		CMP	R0, #9
		BEQ	loc_ADB0
		CMP	R0, #0x17
		BEQ	loc_ADB0
		CMP	R0, #8
		BEQ	loc_ADC2
		CMP	R0, #0x18
		BEQ	loc_ADC2
		CMP	R0, #0x19
		BEQ	loc_ADE4
		CMP	R0, #0xA
		BEQ	loc_ADE4
		CMP	R0, #0xB
		BEQ	loc_ADAA

loc_ADA8				; CODE XREF: SpeedSensor+166j
					; SpeedSensor+176j
		B	loc_ACA6
; ---------------------------------------------------------------------------

loc_ADAA				; CODE XREF: SpeedSensor+14Ej
		MOVS	R0, #0
		ADD	SP, SP,	#0x1C4
		POP	{R4-R7,PC}
; ---------------------------------------------------------------------------

loc_ADB0				; CODE XREF: SpeedSensor+136j
					; SpeedSensor+13Aj
		SUBS	R5, #1
		CMP	R4, R5
		BCS	loc_ADB8
		ADDS	R4, #1

loc_ADB8				; CODE XREF: SpeedSensor+15Cj
		BL	sub_9BC0
		CMP	R0, #2
		BCC	loc_ADA8
		B	loc_ADD0
; ---------------------------------------------------------------------------

loc_ADC2				; CODE XREF: SpeedSensor+13Ej
					; SpeedSensor+142j
		CMP	R4, #0
		BEQ	loc_ADC8
		SUBS	R4, #1

loc_ADC8				; CODE XREF: SpeedSensor+16Cj
		BL	sub_9BC0
		CMP	R0, #2
		BCC	loc_ADA8

loc_ADD0				; CODE XREF: SpeedSensor+168j
		MOVS	R0, #0x31 ; '1'
		MOVS	R1, #0xF
		LSLS	R0, R0,	#4
		BL	beep
		MOVS	R1, #0xF
		MOVS	R0, #0
		BL	beep
		B	loc_ACA6
; ---------------------------------------------------------------------------

loc_ADE4				; CODE XREF: SpeedSensor+146j
					; SpeedSensor+14Aj
		CMP	R4, R5
		BCS	loc_ADF8
		LSLS	R1, R4,	#2
		ADD	R0, SP,	#0x1D8+var_D8
		LDRB	R0, [R0,R1]
		LDR	R1, =byte_20000000
		LDR	R1, [R1,#(usedModelPtr - 0x20000000)]
		ADDS	R1, #0x80 ; ''
		STRB	R0, [R1,#7]
		B	loc_AE06
; ---------------------------------------------------------------------------

loc_ADF8				; CODE XREF: SpeedSensor+18Ej
		CMP	R4, #0
		BNE	loc_AE06
		LDR	R1, =byte_20000000
		MOVS	R0, #0xFF
		LDR	R1, [R1,#(usedModelPtr - 0x20000000)]
		ADDS	R1, #0x80 ; ''
		STRB	R0, [R1,#7]

loc_AE06				; CODE XREF: SpeedSensor+19Ej
					; SpeedSensor+1A2j
		MOVS	R0, #1
		ADD	SP, SP,	#0x1C4
		POP	{R4-R7,PC}
; End of function SpeedSensor

; ---------------------------------------------------------------------------
off_AE0C	DCD byte_20000000	; DATA XREF: SpeedSensor+Cr
					; SpeedSensor+28r ...
; _BYTE	*sensorsList7
sensorsList7	DCD sensorsArrayInRam	; DATA XREF: SpeedSensor+14r
					; SpeedSensor+64r
aSpeedSensor	DCB "Speed sensor",0    ; DATA XREF: SpeedSensor+52o
		DCB 0, 0, 0
aNone_0		DCB "None",0            ; DATA XREF: SpeedSensor+70o
		DCB 0, 0, 0
aS		DCB "%s",0              ; DATA XREF: SpeedSensor+72o
		DCB 0
aMotorSpeed	DCB "Motor speed",0     ; DATA XREF: SpeedSensor+9Eo
aSU		DCB "%s %u",0           ; DATA XREF: SpeedSensor+A0o
		ALIGN 4

; =============== S U B	R O U T	I N E =======================================


SticksAdjustPage			; DATA XREF: ROM:0000D24Co

var_18		= -0x18

		PUSH	{R3-R7,LR}
		BL	callSetupDMAandSend
		LDR	R0, =aSticksAdjust ; "Sticks adjust"
		BL	displayPageHeader
		MOVS	R3, #0		; a4
		MOVS	R2, #0x18	; a3
		MOVS	R1, #0x40 ; '@'	; a2
		LDR	R0, =aPlaceAllSticks ; text
		BL	displayTextAt2
		MOVS	R3, #0		; a4
		MOVS	R2, #0x20 ; ' '	; a3
		MOVS	R1, #0x40 ; '@'	; a2
		LDR	R0, =aInTheirMiddle ; text
		BL	displayTextAt2
		MOVS	R3, #0		; a4
		MOVS	R2, #0x28 ; '('	; a3
		MOVS	R1, #0x40 ; '@'	; a2
		LDR	R0, =aPositionAnd_0 ; text
		BL	displayTextAt2
		MOVS	R3, #0		; a4
		MOVS	R2, #0x30 ; '0'	; a3
		MOVS	R1, #0x40 ; '@'	; a2
		LDR	R0, =aPressOk	; "Press \"OK\""
		BL	displayTextAt2
		BL	LCD_updateCALL
		MOVS	R7, #0x600
		LDR	R4, =ch1_ADC_VAL
		LDR	R6, =stickAdjustData ; 40 items

loc_AE8C				; CODE XREF: SticksAdjustPage+56j
					; SticksAdjustPage+90j
		BL	getKeyCode
		CMP	R0, #0xB
		BEQ	loc_AF80
		CMP	R0, #0x19
		BEQ	loc_AE9C
		CMP	R0, #0xA
		BNE	loc_AE8C

loc_AE9C				; CODE XREF: SticksAdjustPage+52j
		LDR	R2, =unk_401
		MOVS	R5, #0

loc_AEA0				; CODE XREF: SticksAdjustPage+8Cj
		LSLS	R0, R5,	#2
		LDR	R0, [R4,R0]
		SUBS	R1, R0,	R7
		CMP	R1, R2
		BCC	loc_AEBE
		MOVS	R1, #0x64 ; 'd'
		LDR	R0, =0x20B
		BL	beep
		MOVS	R0, #0xFF
		MOVS	R1, #0xFA ; 'ú'
		ADDS	R0, #0x73 ; 's'
		BL	beep
		B	loc_AED2
; ---------------------------------------------------------------------------

loc_AEBE				; CODE XREF: SticksAdjustPage+64j
		MOV	R1, R5
		MOVS	R3, #6
		MULS	R1, R3
		ADDS	R1, R1,	R6
		STRH	R0, [R1]
		STRH	R0, [R1,#2]
		ADDS	R5, #1
		STRH	R0, [R1,#4]
		CMP	R5, #4
		BCC	loc_AEA0

loc_AED2				; CODE XREF: SticksAdjustPage+78j
		CMP	R5, #4
		BNE	loc_AE8C
		MOVS	R1, #0x64 ; 'd'
		LDR	R0, =0x417
		BL	beep
		MOVS	R0, #1
		STR	R0, [SP,#0x18+var_18]
		MOVS	R3, #0x3F ; '?'
		MOVS	R2, #0x7F ; ''
		MOVS	R1, #0x10
		MOVS	R0, #0
		BL	fillRegion
		MOVS	R3, #0		; a4
		MOVS	R2, #0x18	; a3
		MOVS	R1, #0x40 ; '@'	; a2
		LDR	R0, =aMoveAllSticks ; text
		BL	displayTextAt2
		MOVS	R3, #0		; a4
		MOVS	R2, #0x20 ; ' '	; a3
		MOVS	R1, #0x40 ; '@'	; a2
		LDR	R0, =aToTheirExtreme ; text
		BL	displayTextAt2
		MOVS	R3, #0		; a4
		MOVS	R2, #0x28 ; '('	; a3
		MOVS	R1, #0x40 ; '@'	; a2
		LDR	R0, =aPositionsAnd ; "positions and"
		BL	displayTextAt2
		MOVS	R3, #0		; a4
		MOVS	R2, #0x30 ; '0'	; a3
		MOVS	R1, #0x40 ; '@'	; a2
		LDR	R0, =aPressOk_2	; text
		BL	displayTextAt2
		BL	LCD_updateCALL
		LSLS	R7, R5,	#8

loc_AF24				; CODE XREF: SticksAdjustPage+12Ej
					; SticksAdjustPage+13Aj ...
		LDRH	R1, [R6]	; 40 items
		LDR	R0, [R4]
		CMP	R0, R1
		BCS	loc_AF2E
		STRH	R0, [R6]	; 40 items

loc_AF2E				; CODE XREF: SticksAdjustPage+E6j
		LDRH	R1, [R6,#(stickAdjustData+4 - 0x20000E18)] ; 40	items
		CMP	R0, R1
		BLS	loc_AF36
		STRH	R0, [R6,#(stickAdjustData+4 - 0x20000E18)] ; 40	items

loc_AF36				; CODE XREF: SticksAdjustPage+EEj
		LDRH	R1, [R6,#(stickAdjustData+6 - 0x20000E18)] ; 40	items
		LDR	R0, [R4,#(ch2_ADC_VAL -	0x20000F00)]
		CMP	R0, R1
		BCS	loc_AF40
		STRH	R0, [R6,#(stickAdjustData+6 - 0x20000E18)] ; 40	items

loc_AF40				; CODE XREF: SticksAdjustPage+F8j
		LDRH	R1, [R6,#(stickAdjustData+0xA -	0x20000E18)] ; 40 items
		CMP	R0, R1
		BLS	loc_AF48
		STRH	R0, [R6,#(stickAdjustData+0xA -	0x20000E18)] ; 40 items

loc_AF48				; CODE XREF: SticksAdjustPage+100j
		LDRH	R1, [R6,#(stickAdjustData+0xC -	0x20000E18)] ; 40 items
		LDR	R0, [R4,#(ch3_ADC_VAL -	0x20000F00)]
		CMP	R0, R1
		BCS	loc_AF52
		STRH	R0, [R6,#(stickAdjustData+0xC -	0x20000E18)] ; 40 items

loc_AF52				; CODE XREF: SticksAdjustPage+10Aj
		LDRH	R1, [R6,#(stickAdjustData+0x10 - 0x20000E18)] ;	40 items
		CMP	R0, R1
		BLS	loc_AF5A
		STRH	R0, [R6,#(stickAdjustData+0x10 - 0x20000E18)] ;	40 items

loc_AF5A				; CODE XREF: SticksAdjustPage+112j
		LDRH	R1, [R6,#(stickAdjustData+0x12 - 0x20000E18)] ;	40 items
		LDR	R0, [R4,#(ch4_ADC_VAL -	0x20000F00)]
		CMP	R0, R1
		BCS	loc_AF64
		STRH	R0, [R6,#(stickAdjustData+0x12 - 0x20000E18)] ;	40 items

loc_AF64				; CODE XREF: SticksAdjustPage+11Cj
		LDRH	R1, [R6,#(stickAdjustData+0x16 - 0x20000E18)] ;	40 items
		CMP	R0, R1
		BLS	loc_AF6C
		STRH	R0, [R6,#(stickAdjustData+0x16 - 0x20000E18)] ;	40 items

loc_AF6C				; CODE XREF: SticksAdjustPage+124j
		BL	sub_2574
		CMP	R0, #0xFF
		BEQ	loc_AF24
		BL	getKeyCode
		CMP	R0, #0xA
		BEQ	loc_AF84
		CMP	R0, #0xB
		BNE	loc_AF24

loc_AF80				; CODE XREF: SticksAdjustPage+4Ej
		MOVS	R0, #0
		POP	{R3-R7,PC}
; ---------------------------------------------------------------------------

loc_AF84				; CODE XREF: SticksAdjustPage+136j
		MOVS	R5, #0
		MOVS	R2, #0xC00

loc_AF8A				; CODE XREF: SticksAdjustPage+170j
		MOVS	R0, #6
		MULS	R0, R5
		ADDS	R0, R0,	R6
		LDRH	R1, [R0]
		CMP	R1, R7
		BHI	loc_AF9C
		LDRH	R0, [R0,#4]
		CMP	R0, R2
		BCS	loc_AFB0

loc_AF9C				; CODE XREF: SticksAdjustPage+150j
		MOVS	R1, #0x64 ; 'd'
		LDR	R0, =0x20B
		BL	beep
		MOVS	R0, #0xFF
		MOVS	R1, #0xFA ; 'ú'
		ADDS	R0, #0x73 ; 's'
		BL	beep
		B	loc_AFB6
; ---------------------------------------------------------------------------

loc_AFB0				; CODE XREF: SticksAdjustPage+156j
		ADDS	R5, #1
		CMP	R5, #4
		BCC	loc_AF8A

loc_AFB6				; CODE XREF: SticksAdjustPage+16Aj
		CMP	R5, #4
		BNE	loc_AF24
		MOVS	R0, #1
		POP	{R3-R7,PC}
; End of function SticksAdjustPage

; ---------------------------------------------------------------------------
		ALIGN 0x10
off_AFC0	DCD aSticksAdjust	; DATA XREF: SticksAdjustPage+6r
					; "Sticks adjust"
; _BYTE	*off_AFC4
off_AFC4	DCD aPlaceAllSticks	; DATA XREF: SticksAdjustPage+12r
					; "Place all sticks"
; _BYTE	*off_AFC8
off_AFC8	DCD aInTheirMiddle	; DATA XREF: SticksAdjustPage+1Er
					; "in their middle"
; _BYTE	*off_AFCC
off_AFCC	DCD aPositionAnd_0	; DATA XREF: SticksAdjustPage+2Ar
					; "position and"
; _BYTE	*off_AFD0
off_AFD0	DCD aPressOk		; DATA XREF: SticksAdjustPage+36r
					; "Press \"OK\""
off_AFD4	DCD ch1_ADC_VAL		; DATA XREF: SticksAdjustPage+44r
off_AFD8	DCD stickAdjustData	; DATA XREF: SticksAdjustPage+46r
					; 40 items
off_AFDC	DCD unk_401		; DATA XREF: SticksAdjustPage:loc_AE9Cr
dword_AFE0	DCD 0x20B		; DATA XREF: SticksAdjustPage+68r
					; SticksAdjustPage+15Ar
dword_AFE4	DCD 0x417		; DATA XREF: SticksAdjustPage+94r
; _BYTE	*off_AFE8
off_AFE8	DCD aMoveAllSticks	; DATA XREF: SticksAdjustPage+B0r
					; "Move all sticks"
; _BYTE	*off_AFEC
off_AFEC	DCD aToTheirExtreme	; DATA XREF: SticksAdjustPage+BCr
					; "to their extreme"
; _BYTE	*off_AFF0
off_AFF0	DCD aPositionsAnd	; DATA XREF: SticksAdjustPage+C8r
					; "positions and"
; _BYTE	*off_AFF4
off_AFF4	DCD aPressOk_2		; DATA XREF: SticksAdjustPage+D4r
					; "Press \"OK\""

; =============== S U B	R O U T	I N E =======================================


SticksMode				; DATA XREF: ROM:0000D254o
					; ROM:0000D4D4o

var_18		= -0x18

		PUSH	{R3-R7,LR}
		LDR	R7, =byte_20000000
		LDRB	R0, [R7,#(factoryMode -	0x20000000)]
		CMP	R0, #0
		BEQ	loc_B006
		LDR	R4, =(stickAdjustData+0x24) ; 40 items
		B	loc_B008
; ---------------------------------------------------------------------------

loc_B006				; CODE XREF: SticksMode+8j
		LDR	R4, =stickModeSW

loc_B008				; CODE XREF: SticksMode+Cj
		LDR	R5, =0xD235
		LDRB	R0, [R4]
		LDR	R6, =byte_20000005
		STR	R0, [SP,#0x18+var_18]

loc_B010				; CODE XREF: SticksMode+D4j
					; SticksMode+E2j ...
		BL	callSetupDMAandSend
		LDRB	R0, [R7,#(factoryMode -	0x20000000)]
		CMP	R0, #0
		BEQ	loc_B01E
		LDR	R0, =aDefSticksMode ; "Def sticks mode"
		B	loc_B020
; ---------------------------------------------------------------------------

loc_B01E				; CODE XREF: SticksMode+20j
		LDR	R0, =0xCFED

loc_B020				; CODE XREF: SticksMode+24j
		BL	displayPageHeader
		MOVS	R2, #0x20 ; ' '
		MOVS	R1, #0x1C
		LDR	R0, =unk_CC34
		BL	displayGFX
		MOVS	R2, #0x20 ; ' '
		MOVS	R1, #0x5C ; '\'
		LDR	R0, =unk_CC34
		BL	displayGFX
		LDRB	R0, [R4]
		LDR	R1, =aMode1	; "Mode 1"
		ADDS	R0, #0x31 ; '1'
		STRB	R0, [R1,#(aMode1+5 - 0x20000100)] ; "1"
		LDRB	R0, [R4]
		MOVS	R3, #0		; a4
		LSLS	R0, R0,	#2
		LDRB	R0, [R5,R0]
		MOVS	R2, #0x2C ; ','	; y
		ADDS	R0, #0x31 ; '1'
		STRB	R0, [R6,#(byte_20000007	- 0x20000005)]
		MOVS	R1, #0x44 ; 'D'	; x
		LDR	R0, =byte_20000005 ; text
		BL	displayTextAt
		LDRB	R0, [R4]
		MOVS	R3, #0		; a4
		LSLS	R0, R0,	#2
		ADDS	R0, R0,	R5
		LDRB	R0, [R0,#1]
		MOVS	R2, #0x18	; y
		ADDS	R0, #0x31 ; '1'
		STRB	R0, [R6,#(byte_20000007	- 0x20000005)]
		MOVS	R1, #0x60 ; '`'	; x
		LDR	R0, =byte_20000005 ; text
		BL	displayTextAt
		LDRB	R0, [R4]
		MOVS	R3, #0		; a4
		LSLS	R0, R0,	#2
		ADDS	R0, R0,	R5
		LDRB	R0, [R0,#2]
		MOVS	R2, #0x18	; y
		ADDS	R0, #0x31 ; '1'
		STRB	R0, [R6,#(byte_20000007	- 0x20000005)]
		MOVS	R1, #0x20 ; ' '	; x
		LDR	R0, =byte_20000005 ; text
		BL	displayTextAt
		LDRB	R0, [R4]
		MOVS	R3, #0		; a4
		LSLS	R0, R0,	#2
		ADDS	R0, R0,	R5
		LDRB	R0, [R0,#3]
		MOVS	R2, #0x2C ; ','	; y
		ADDS	R0, #0x31 ; '1'
		STRB	R0, [R6,#(byte_20000007	- 0x20000005)]
		MOVS	R1, #4		; x
		LDR	R0, =byte_20000005 ; text
		BL	displayTextAt
		MOVS	R3, #0		; a4
		MOVS	R2, #0xC	; y
		MOV	R1, R3		; x
		LDR	R0, =aMode1	; "Mode 1"
		BL	displayTextAt
		BL	LCD_updateCALL
		BL	getKeyCode
		CMP	R0, #8
		BEQ	loc_B0D6
		CMP	R0, #0x18
		BEQ	loc_B0D6
		CMP	R0, #9
		BEQ	loc_B0FC
		CMP	R0, #0x17
		BEQ	loc_B0FC
		CMP	R0, #0xA
		BEQ	loc_B110
		CMP	R0, #0x19
		BEQ	loc_B110
		CMP	R0, #0xB
		BNE	loc_B010
		LDR	R0, [SP,#0x18+var_18]
		STRB	R0, [R4]
		MOVS	R0, #0
		POP	{R3-R7,PC}
; ---------------------------------------------------------------------------

loc_B0D6				; CODE XREF: SticksMode+BCj
					; SticksMode+C0j
		LDRB	R0, [R4]
		CMP	R0, #0
		BEQ	loc_B010
		SUBS	R0, #1
		STRB	R0, [R4]
		BL	sub_9BC0
		CMP	R0, #2
		BCC	loc_B010

loc_B0E8				; CODE XREF: SticksMode+116j
		MOVS	R0, #0x31 ; '1'
		MOVS	R1, #0xF
		LSLS	R0, R0,	#4
		BL	beep
		MOVS	R1, #0xF
		MOVS	R0, #0
		BL	beep
		B	loc_B010
; ---------------------------------------------------------------------------

loc_B0FC				; CODE XREF: SticksMode+C4j
					; SticksMode+C8j
		LDRB	R0, [R4]
		CMP	R0, #3
		BCS	loc_B010
		ADDS	R0, #1
		STRB	R0, [R4]
		BL	sub_9BC0
		CMP	R0, #2
		BCC	loc_B010
		B	loc_B0E8
; ---------------------------------------------------------------------------

loc_B110				; CODE XREF: SticksMode+CCj
					; SticksMode+D0j
		LDRB	R0, [R7,#1]
		CMP	R0, #0
		BEQ	loc_B122
		LDR	R0, =(stickAdjustData+0x20) ; 40 items
		LDRB	R1, [R0,#(stickAdjustData+0x24 - 0x20000E38)] ;	40 items
		LDR	R0, =rxsettings
		STRB	R1, [R0,#(stickModeSW -	0x200002A4)]
		BL	saveModelSettings

loc_B122				; CODE XREF: SticksMode+11Cj
		MOVS	R0, #1
		POP	{R3-R7,PC}
; End of function SticksMode

; ---------------------------------------------------------------------------
		ALIGN 4
off_B128	DCD byte_20000000	; DATA XREF: SticksMode+2r
off_B12C	DCD stickAdjustData+0x24 ; DATA	XREF: SticksMode+Ar
					; 40 items
off_B130	DCD stickModeSW		; DATA XREF: SticksMode:loc_B006r
dword_B134	DCD 0xD235		; DATA XREF: SticksMode:loc_B008r
; _BYTE	*off_B138
off_B138	DCD byte_20000005	; DATA XREF: SticksMode+14r
					; SticksMode+58r ...
off_B13C	DCD aDefSticksMode	; DATA XREF: SticksMode+22r
					; "Def sticks mode"
dword_B140	DCD 0xCFED		; DATA XREF: SticksMode:loc_B01Er
off_B144	DCD unk_CC34		; DATA XREF: SticksMode+30r
					; SticksMode+3Ar
; _BYTE	*off_B148
off_B148	DCD aMode1		; DATA XREF: SticksMode+42r
					; SticksMode+ACr
					; "Mode 1"
off_B14C	DCD stickAdjustData+0x20 ; DATA	XREF: SticksMode+11Er
					; 40 items
off_B150	DCD rxsettings		; DATA XREF: SticksMode+122r

; =============== S U B	R O U T	I N E =======================================


StudentModePage				; DATA XREF: ROM:0000D4C4o
		PUSH	{R4,LR}
		BL	callSetupDMAandSend
		LDR	R0, =0xCFF9
		BL	displayPageHeader
		LDR	R4, =studentMode
		LDRB	R0, [R4]
		CMP	R0, #0
		BEQ	loc_B1B6
		MOVS	R3, #0		; a4
		MOVS	R2, #0x18	; a3
		MOVS	R1, #0x40 ; '@'	; a2
		LDR	R0, =aThisWillCancel ; text
		BL	displayTextAt2
		MOVS	R3, #0		; a4
		MOVS	R2, #0x20 ; ' '	; a3
		MOVS	R1, #0x40 ; '@'	; a2
		LDR	R0, =aStudentMode_1 ; text

loc_B17C				; CODE XREF: StudentModePage+8Ej
		BL	displayTextAt2
		MOVS	R3, #0		; a4
		MOVS	R2, #0x30 ; '0'	; a3
		MOVS	R1, #0x40 ; '@'	; a2
		LDR	R0, =aPressOk_3	; text
		BL	displayTextAt2
		MOVS	R3, #0		; a4
		MOVS	R2, #0x38 ; '8'	; a3
		MOVS	R1, #0x40 ; '@'	; a2
		LDR	R0, =aToProceed_1 ; text
		BL	displayTextAt2
		BL	LCD_updateCALL

loc_B19C				; CODE XREF: StudentModePage+52j
		BL	getKeyCode
		CMP	R0, #0xB
		BEQ	loc_B1E4
		CMP	R0, #0xA
		BNE	loc_B19C
		LDRB	R0, [R4]
		CMP	R0, #0
		BEQ	loc_B1E8
		MOVS	R0, #0
		STRB	R0, [R4]
		MOVS	R0, #1
		POP	{R4,PC}
; ---------------------------------------------------------------------------

loc_B1B6				; CODE XREF: StudentModePage+12j
		MOVS	R3, #0		; a4
		MOVS	R2, #0xF	; a3
		MOVS	R1, #0x40 ; '@'	; a2
		LDR	R0, =aThisWillEnte_0 ; "This will enter"
		BL	displayTextAt2
		MOVS	R3, #0		; a4
		MOVS	R2, #0x17	; a3
		MOVS	R1, #0x40 ; '@'	; a2
		LDR	R0, =aStudentMode_0 ; "student mode"
		BL	displayTextAt2
		MOVS	R3, #0		; a4
		MOVS	R2, #0x1F	; a3
		MOVS	R1, #0x40 ; '@'	; a2
		LDR	R0, =aAllSettings ; text
		BL	displayTextAt2
		MOVS	R3, #0
		MOVS	R2, #0x27 ; '''
		MOVS	R1, #0x40 ; '@'
		LDR	R0, =aWillBeBypassed ; "will be bypassed"
		B	loc_B17C
; ---------------------------------------------------------------------------

loc_B1E4				; CODE XREF: StudentModePage+4Ej
		MOVS	R0, #0

locret_B1E6				; CODE XREF: StudentModePage+9Aj
		POP	{R4,PC}
; ---------------------------------------------------------------------------

loc_B1E8				; CODE XREF: StudentModePage+58j
		BL	sub_23F4
		CMP	R0, #0
		BEQ	locret_B1E6
		MOVS	R0, #1
		STRB	R0, [R4]
		POP	{R4,PC}
; End of function StudentModePage

; ---------------------------------------------------------------------------
		ALIGN 4
dword_B1F8	DCD 0xCFF9		; DATA XREF: StudentModePage+6r
off_B1FC	DCD studentMode		; DATA XREF: StudentModePage+Cr
; _BYTE	*off_B200
off_B200	DCD aThisWillCancel	; DATA XREF: StudentModePage+1Ar
					; "This will cancel"
; _BYTE	*off_B204
off_B204	DCD aStudentMode_1	; DATA XREF: StudentModePage+26r
					; "student mode"
; _BYTE	*off_B208
off_B208	DCD aPressOk_3		; DATA XREF: StudentModePage+32r
					; "Press \"OK\""
; _BYTE	*off_B20C
off_B20C	DCD aToProceed_1	; DATA XREF: StudentModePage+3Er
					; "to proceed"
; _BYTE	*off_B210
off_B210	DCD aThisWillEnte_0	; DATA XREF: StudentModePage+68r
					; "This will enter"
; _BYTE	*off_B214
off_B214	DCD aStudentMode_0	; DATA XREF: StudentModePage+74r
					; "student mode"
; _BYTE	*off_B218
off_B218	DCD aAllSettings	; DATA XREF: StudentModePage+80r
					; "all settings"
off_B21C	DCD aWillBeBypassed	; DATA XREF: StudentModePage+8Cr
					; "will be bypassed"

; =============== S U B	R O U T	I N E =======================================


SubtrimPage				; DATA XREF: ROM:0000D32Co
					; ROM:0000D38Co ...

var_30		= -0x30
text		= -0x2C
var_28		= -0x28
var_24		= -0x24
var_20		= -0x20
var_1C		= -0x1C

		PUSH	{R4-R7,LR}
		MOVS	R0, #0
		SUB	SP, SP,	#0x1C
		MOV	R7, R0
		STR	R0, [SP,#0x30+var_24]

loc_B22A				; CODE XREF: SubtrimPage+D4j
					; SubtrimPage+F0j ...
		ADR	R1, dword_B388
		LDR	R0, [R1]
		LDR	R1, [R1,#(dword_B38C - 0xB388)]
		STR	R1, [SP,#0x30+var_28]
		STR	R0, [SP,#0x30+text]
		BL	callSetupDMAandSend
		LDR	R0, =aSubtrim	; "Subtrim"
		BL	displayPageHeader
		MOVS	R6, #0

loc_B240				; CODE XREF: SubtrimPage+9Ej
		MOV	R0, R6
		ADDS	R0, #0x31 ; '1'
		MOV	R1, SP
		STRB	R0, [R1,#0x30+text+2]
		LSLS	R5, R6,	#3
		MOV	R2, R5
		ADDS	R2, #0x10	; y
		MOVS	R3, #0		; a4
		MOVS	R1, #8		; x
		ADD	R0, SP,	#0x30+text ; text
		STR	R2, [SP,#0x30+var_20]
		BL	displayTextAt
		MOV	R3, R5
		ADDS	R3, #0x16
		SUBS	R1, R3,	#4
		MOVS	R2, #0x23 ; '#'
		STR	R7, [SP,#0x30+var_30]
		MOV	R4, R3
		MOV	R0, R2
		STR	R1, [SP,#0x30+var_1C]
		BL	sub_4E8C
		MOV	R1, R5
		MOVS	R2, #0x50 ; 'P'
		MOV	R3, R4
		ADDS	R1, #0x14
		MOV	R0, R2
		STR	R7, [SP,#0x30+var_30]
		BL	sub_4E8C
		STR	R7, [SP,#0x30+var_30]
		MOVS	R2, #0x7D ; '}'
		MOV	R3, R4
		MOV	R0, R2
		LDR	R1, [SP,#0x30+var_1C]
		BL	sub_4E8C
		MOV	R3, R4
		MOV	R1, R4
		MOVS	R2, #0x7D ; '}'
		MOVS	R0, #0x23 ; '#'
		STR	R7, [SP,#0x30+var_30]
		BL	sub_4E8C
		LDR	R0, =byte_20000000
		LDR	R0, [R0,#(usedModelPtr - 0x20000000)]
		ADDS	R1, R0,	R6
		MOVS	R0, #0x4C ; 'L'
		LDRSB	R0, [R1,R0]
		MOVS	R1, #0x2A ; '*'
		MULS	R0, R1
		MOVS	R1, #0x78 ; 'x'
		BL	div__0
		MOV	R1, R0
		ADDS	R1, #0x4E ; 'N'
		LDR	R0, =unk_CC10
		LDR	R2, [SP,#0x30+var_20]
		BL	displayGFX
		ADDS	R6, #1
		CMP	R6, #6
		BCC	loc_B240
		LDR	R0, [SP,#0x30+var_24]
		MOVS	R1, #0
		LSLS	R2, R0,	#3
		ADDS	R2, #0x10
		LDR	R0, =arrow_gfx
		BL	displayGFX
		BL	LCD_updateCALL
		BL	getKeyCode
		CMP	R0, #0x18
		BEQ	loc_B2FC
		CMP	R0, #8
		BEQ	loc_B2FC
		CMP	R0, #0x17
		BEQ	loc_B332
		CMP	R0, #9
		BEQ	loc_B332
		CMP	R0, #0x16
		BEQ	loc_B352
		CMP	R0, #0xA
		BEQ	loc_B368
		CMP	R0, #0x19
		BEQ	loc_B382
		CMP	R0, #0xB
		BNE	loc_B22A
		MOVS	R0, #0
		ADD	SP, SP,	#0x1C
		POP	{R4-R7,PC}
; ---------------------------------------------------------------------------

loc_B2FC				; CODE XREF: SubtrimPage+B8j
					; SubtrimPage+BCj
		LDR	R0, =byte_20000000
		MOVS	R2, #0x77 ; 'w'
		LDR	R1, [R0,#(usedModelPtr - 0x20000000)]
		LDR	R0, [SP,#0x30+var_24]
		MVNS	R2, R2
		ADDS	R1, R1,	R0
		ADDS	R1, #0x40 ; '@'
		MOVS	R0, #0xC
		LDRSB	R0, [R1,R0]
		CMP	R0, R2
		BLE	loc_B22A
		SUBS	R0, #1
		STRB	R0, [R1,#0xC]
		BL	sub_9BC0
		CMP	R0, #2
		BCC	loc_B22A

loc_B31E				; CODE XREF: SubtrimPage+130j
					; SubtrimPage+146j ...
		MOVS	R0, #0x31 ; '1'
		MOVS	R1, #0xF
		LSLS	R0, R0,	#4
		BL	beep
		MOVS	R1, #0xF
		MOVS	R0, #0
		BL	beep

loc_B330				; CODE XREF: SubtrimPage+122j
					; SubtrimPage+12Ej ...
		B	loc_B22A
; ---------------------------------------------------------------------------

loc_B332				; CODE XREF: SubtrimPage+C0j
					; SubtrimPage+C4j
		LDR	R0, =byte_20000000
		LDR	R1, [R0,#(usedModelPtr - 0x20000000)]
		LDR	R0, [SP,#0x30+var_24]
		ADDS	R0, R1,	R0
		ADDS	R0, #0x40 ; '@'
		MOVS	R1, #0xC
		LDRSB	R1, [R0,R1]
		CMP	R1, #0x78 ; 'x'
		BGE	loc_B330
		ADDS	R1, #1
		STRB	R1, [R0,#0xC]
		BL	sub_9BC0
		CMP	R0, #2
		BCC	loc_B330
		B	loc_B31E
; ---------------------------------------------------------------------------

loc_B352				; CODE XREF: SubtrimPage+C8j
		LDR	R0, =byte_20000000
		LDR	R1, [R0,#(usedModelPtr - 0x20000000)]
		LDR	R0, [SP,#0x30+var_24]
		ADDS	R0, R1,	R0
		ADDS	R0, #0x40 ; '@'
		STRB	R7, [R0,#0xC]
		BL	sub_9BC0
		CMP	R0, #2
		BCC	loc_B330
		B	loc_B31E
; ---------------------------------------------------------------------------

loc_B368				; CODE XREF: SubtrimPage+CCj
		LDR	R0, [SP,#0x30+var_24]
		CMP	R0, #5
		BCC	loc_B372
		MOVS	R0, #0
		B	loc_B376
; ---------------------------------------------------------------------------

loc_B372				; CODE XREF: SubtrimPage+14Cj
		ADDS	R0, #1
		UXTB	R0, R0

loc_B376				; CODE XREF: SubtrimPage+150j
		STR	R0, [SP,#0x30+var_24]
		BL	sub_9BC0
		CMP	R0, #2
		BCC	loc_B330
		B	loc_B31E
; ---------------------------------------------------------------------------

loc_B382				; CODE XREF: SubtrimPage+D0j
		MOVS	R0, #1
		ADD	SP, SP,	#0x1C
		POP	{R4-R7,PC}
; End of function SubtrimPage

; ---------------------------------------------------------------------------
dword_B388	DCD 0x316843		; DATA XREF: SubtrimPage:loc_B22Ao
					; SubtrimPage+Cr
dword_B38C	DCD 0			; DATA XREF: SubtrimPage+Er
off_B390	DCD aSubtrim		; DATA XREF: SubtrimPage+18r
					; "Subtrim"
off_B394	DCD byte_20000000	; DATA XREF: SubtrimPage+7Ar
					; SubtrimPage:loc_B2FCr ...
off_B398	DCD unk_CC10		; DATA XREF: SubtrimPage+92r
off_B39C	DCD arrow_gfx		; DATA XREF: SubtrimPage+A8r

; =============== S U B	R O U T	I N E =======================================


SwitchesAssigPage			; DATA XREF: ROM:0000D35Co
					; ROM:0000D3B4o ...
		PUSH	{R3-R7,LR}
		MOVS	R6, #0
		MOVS	R5, #1
		LDR	R4, =byte_20000000

loc_B3A8				; CODE XREF: SwitchesAssigPage:loc_B514j
					; SwitchesAssigPage:loc_B54Ej
		BL	callSetupDMAandSend
		LDR	R0, =0xD075
		BL	displayPageHeader
		BL	getInputStates
		MOV	R7, R0
		CMP	R6, #2
		BHI	loc_B4A0
		MOVS	R3, #0		; a4
		MOVS	R2, #0x10	; y
		MOVS	R1, #0xC	; x
		LDR	R0, =aFlyMode	; text
		BL	displayTextAt
		LDR	R0, [R4,#(usedModelPtr - 0x20000000)]
		LDR	R1, =sw_X
		LDRB	R0, [R0,#0xE]
		MOVS	R3, #0		; a4
		ADDS	R0, #0x31 ; '1'
		STRB	R0, [R1,#(sw_X_val - 0x20000009)]
		MOVS	R2, #0x10	; y
		MOVS	R1, #0x64 ; 'd'	; x
		LDR	R0, =sw_X	; text
		BL	displayTextAt
		LDR	R0, [R4,#(usedModelPtr - 0x20000000)]
		LDRB	R1, [R0,#0xE]
		MOV	R0, R5
		LSLS	R0, R1
		TST	R0, R7
		BEQ	loc_B480
		MOVS	R3, #0		; a4
		MOVS	R2, #0x18	; y
		MOVS	R1, #0x1C	; x
		LDR	R0, =aSport	; text

loc_B3F2				; CODE XREF: SwitchesAssigPage+E8j
		BL	displayTextAt
		MOVS	R3, #0		; a4
		MOVS	R2, #0x20 ; ' '	; y
		MOVS	R1, #0xC	; x
		LDR	R0, =aIdleMode	; "Idle mode"
		BL	displayTextAt
		LDR	R0, [R4,#(usedModelPtr - 0x20000000)]
		LDR	R1, =sw_X
		ADDS	R0, #0x20 ; ' '
		LDRB	R0, [R0,#0xC]
		MOVS	R3, #0		; a4
		ADDS	R0, #0x31 ; '1'
		STRB	R0, [R1,#(sw_X_val - 0x20000009)]
		MOVS	R2, #0x20 ; ' '	; y
		MOVS	R1, #0x64 ; 'd'	; x
		LDR	R0, =sw_X	; text
		BL	displayTextAt
		LDR	R0, [R4,#(usedModelPtr - 0x20000000)]
		MOV	R1, R5
		ADDS	R0, #0x20 ; ' '
		LDRB	R0, [R0,#0xC]
		LSLS	R1, R0
		TST	R1, R7
		BEQ	loc_B48A
		MOVS	R3, #0		; a4
		MOVS	R2, #0x28 ; '('	; y
		MOVS	R1, #0x1C	; x
		LDR	R0, =aIdleUp	; "Idle up"

loc_B430				; CODE XREF: SwitchesAssigPage+F2j
		BL	displayTextAt
		MOVS	R3, #0		; a4
		MOVS	R2, #0x30 ; '0'	; y
		MOVS	R1, #0xC	; x
		LDR	R0, =aThro_Hold	; "Thro. hold"
		BL	displayTextAt
		LDR	R0, [R4,#(usedModelPtr - 0x20000000)]
		LDR	R1, =sw_X
		ADDS	R0, #0x20 ; ' '
		LDRB	R0, [R0,#0x18]
		MOVS	R3, #0		; a4
		ADDS	R0, #0x31 ; '1'
		STRB	R0, [R1,#(sw_X_val - 0x20000009)]
		MOVS	R2, #0x30 ; '0'	; y
		MOVS	R1, #0x64 ; 'd'	; x
		LDR	R0, =sw_X	; text
		BL	displayTextAt
		LDR	R0, [R4,#(usedModelPtr - 0x20000000)]
		ADDS	R0, #0x20 ; ' '
		LDRB	R1, [R0,#0x18]
		MOV	R0, R5
		LSLS	R0, R1
		TST	R0, R7
		BEQ	loc_B494
		MOVS	R3, #0		; a4
		MOVS	R2, #0x38 ; '8'	; y
		MOVS	R1, #0x1C	; x
		LDR	R0, =aOn_0	; text

loc_B46E				; CODE XREF: SwitchesAssigPage+FCj
		BL	displayTextAt
		LSLS	R2, R6,	#4
		ADDS	R2, #0x10
		MOVS	R1, #4
		LDR	R0, =arrow_gfx
		BL	displayGFX
		B	loc_B4F0
; ---------------------------------------------------------------------------

loc_B480				; CODE XREF: SwitchesAssigPage+48j
		MOVS	R3, #0
		MOVS	R2, #0x18
		MOVS	R1, #0x1C
		LDR	R0, =0xCAE7
		B	loc_B3F2
; ---------------------------------------------------------------------------

loc_B48A				; CODE XREF: SwitchesAssigPage+86j
		MOVS	R3, #0
		MOVS	R2, #0x28 ; '('
		MOVS	R1, #0x1C
		LDR	R0, =0xCAE7
		B	loc_B430
; ---------------------------------------------------------------------------

loc_B494				; CODE XREF: SwitchesAssigPage+C4j
		MOVS	R3, #0
		MOVS	R2, #0x38 ; '8'
		MOVS	R1, #0x1C
		LDR	R0, =aOff_0	; "Off"
		B	loc_B46E
; ---------------------------------------------------------------------------
		B	loc_B4A0
; ---------------------------------------------------------------------------

loc_B4A0				; CODE XREF: SwitchesAssigPage+1Aj
					; SwitchesAssigPage+FEj
		LDR	R0, [R4,#(usedModelPtr - 0x20000000)]
		ADDS	R0, #0x40 ; '@'
		LDRB	R0, [R0,#0x1F]
		CMP	R0, #0
		BEQ	loc_B4C0
		MOVS	R3, #0		; a4
		MOVS	R2, #0x18	; y
		MOVS	R1, #0x1C	; x
		LDR	R0, =aOn_0	; text
		BL	displayTextAt
		MOVS	R3, #0
		MOVS	R2, #0x10
		MOVS	R1, #0x64 ; 'd'
		ADR	R0, unk_B698
		B	loc_B4D4
; ---------------------------------------------------------------------------

loc_B4C0				; CODE XREF: SwitchesAssigPage+108j
		MOVS	R3, #0		; a4
		MOVS	R2, #0x18	; y
		MOVS	R1, #0x1C	; x
		LDR	R0, =aOff_0	; text
		BL	displayTextAt
		MOVS	R3, #0		; a4
		MOVS	R2, #0x10	; y
		MOVS	R1, #0x5C ; '\'	; x
		ADR	R0, aNone_1	; "None"

loc_B4D4				; CODE XREF: SwitchesAssigPage+11Ej
		BL	displayTextAt
		MOVS	R3, #0		; a4
		MOVS	R2, #0x10	; y
		MOVS	R1, #0xC	; x
		LDR	R0, =aUfoMode	; text
		BL	displayTextAt
		LSLS	R2, R6,	#4
		SUBS	R2, #0x20 ; ' '
		MOVS	R1, #4
		LDR	R0, =arrow_gfx
		BL	displayGFX

loc_B4F0				; CODE XREF: SwitchesAssigPage+DEj
		BL	LCD_updateCALL
		BL	getKeyCode
		CMP	R0, #8
		BEQ	loc_B51A
		CMP	R0, #0x18
		BEQ	loc_B51A
		CMP	R0, #9
		BEQ	loc_B5B4
		CMP	R0, #0x17
		BEQ	loc_B5B4
		CMP	R0, #0xA
		BEQ	loc_B5F8
		CMP	R0, #0x19
		BEQ	loc_B5FA
		CMP	R0, #0xB
		BEQ	loc_B516

loc_B514				; CODE XREF: SwitchesAssigPage+188j
					; SwitchesAssigPage+19Aj ...
		B	loc_B3A8
; ---------------------------------------------------------------------------

loc_B516				; CODE XREF: SwitchesAssigPage+172j
		MOVS	R0, #0
		POP	{R3-R7,PC}
; ---------------------------------------------------------------------------

loc_B51A				; CODE XREF: SwitchesAssigPage+15Aj
					; SwitchesAssigPage+15Ej
		CMP	R6, #0
		BEQ	loc_B550
		CMP	R6, #1
		BEQ	loc_B570
		CMP	R6, #2
		BEQ	loc_B592
		CMP	R6, #3
		BNE	loc_B514
		LDR	R0, [R4,#0x2C]
		ADDS	R0, #0x40 ; '@'
		LDRB	R1, [R0,#0x1F]
		EORS	R1, R5
		STRB	R1, [R0,#0x1F]
		BL	sub_9BC0
		CMP	R0, #2
		BCC	loc_B514

loc_B53C				; CODE XREF: SwitchesAssigPage+1CEj
					; SwitchesAssigPage+1F0j ...
		MOVS	R0, #0x31 ; '1'
		MOVS	R1, #0xF
		LSLS	R0, R0,	#4
		BL	beep
		MOVS	R1, #0xF
		MOVS	R0, #0
		BL	beep

loc_B54E				; CODE XREF: SwitchesAssigPage+27Aj
					; SwitchesAssigPage+286j ...
		B	loc_B3A8
; ---------------------------------------------------------------------------

loc_B550				; CODE XREF: SwitchesAssigPage+17Cj
		LDR	R1, [R4,#0x2C]
		LDRB	R0, [R1,#0xE]
		CMP	R0, #0x10
		BLS	loc_B514
		SUBS	R0, #1
		UXTB	R0, R0
		STRB	R0, [R1,#0xE]
		CMP	R0, #0x12
		BNE	loc_B566
		MOVS	R0, #0x11
		STRB	R0, [R1,#0xE]

loc_B566				; CODE XREF: SwitchesAssigPage+1C0j
		BL	sub_9BC0
		CMP	R0, #2

loc_B56C				; CODE XREF: SwitchesAssigPage+2B0j
		BCC	loc_B514
		B	loc_B53C
; ---------------------------------------------------------------------------

loc_B570				; CODE XREF: SwitchesAssigPage+180j
		LDR	R0, [R4,#0x2C]
		ADDS	R0, #0x20 ; ' '
		LDRB	R1, [R0,#0xC]
		CMP	R1, #0x10
		BLS	loc_B514
		SUBS	R1, #1
		UXTB	R1, R1
		STRB	R1, [R0,#0xC]
		CMP	R1, #0x12
		BNE	loc_B588
		MOVS	R1, #0x11
		STRB	R1, [R0,#0xC]

loc_B588				; CODE XREF: SwitchesAssigPage+1E2j
		BL	sub_9BC0
		CMP	R0, #2
		BCC	loc_B514
		B	loc_B53C
; ---------------------------------------------------------------------------

loc_B592				; CODE XREF: SwitchesAssigPage+184j
		LDR	R1, [R4,#0x2C]
		ADDS	R1, #0x20 ; ' '
		LDRB	R0, [R1,#0x18]
		CMP	R0, #0x10
		BLS	loc_B514
		SUBS	R0, #1
		UXTB	R0, R0
		STRB	R0, [R1,#0x18]
		CMP	R0, #0x12
		BNE	loc_B5AA
		MOVS	R0, #0x11
		STRB	R0, [R1,#0x18]

loc_B5AA				; CODE XREF: SwitchesAssigPage+204j
		BL	sub_9BC0
		CMP	R0, #2
		BCC	loc_B514
		B	loc_B53C
; ---------------------------------------------------------------------------

loc_B5B4				; CODE XREF: SwitchesAssigPage+162j
					; SwitchesAssigPage+166j
		CMP	R6, #0
		BEQ	loc_B5D8
		CMP	R6, #1
		BEQ	loc_B5FC
		CMP	R6, #2
		BEQ	loc_B61E
		CMP	R6, #3
		BNE	loc_B514
		LDR	R0, [R4,#0x2C]
		ADDS	R0, #0x40 ; '@'
		LDRB	R1, [R0,#0x1F]
		EORS	R1, R5
		STRB	R1, [R0,#0x1F]
		BL	sub_9BC0
		CMP	R0, #2
		BCC	loc_B514
		B	loc_B53C
; ---------------------------------------------------------------------------

loc_B5D8				; CODE XREF: SwitchesAssigPage+216j
		LDR	R1, [R4,#0x2C]
		LDRB	R0, [R1,#0xE]
		CMP	R0, #0x13
		BCS	loc_B514
		ADDS	R0, #1
		UXTB	R0, R0
		STRB	R0, [R1,#0xE]
		CMP	R0, #0x12
		BNE	loc_B5EE
		MOVS	R0, #0x13
		STRB	R0, [R1,#0xE]

loc_B5EE				; CODE XREF: SwitchesAssigPage+248j
		BL	sub_9BC0
		CMP	R0, #2
		BCC	loc_B514
		B	loc_B53C
; ---------------------------------------------------------------------------

loc_B5F8				; CODE XREF: SwitchesAssigPage+16Aj
		B	loc_B640
; ---------------------------------------------------------------------------

loc_B5FA				; CODE XREF: SwitchesAssigPage+16Ej
		B	loc_B654
; ---------------------------------------------------------------------------

loc_B5FC				; CODE XREF: SwitchesAssigPage+21Aj
		LDR	R0, [R4,#0x2C]
		ADDS	R0, #0x20 ; ' '
		LDRB	R1, [R0,#0xC]
		CMP	R1, #0x13
		BCS	loc_B514
		ADDS	R1, #1
		UXTB	R1, R1
		STRB	R1, [R0,#0xC]
		CMP	R1, #0x12
		BNE	loc_B614
		MOVS	R1, #0x13
		STRB	R1, [R0,#0xC]

loc_B614				; CODE XREF: SwitchesAssigPage+26Ej
		BL	sub_9BC0
		CMP	R0, #2
		BCC	loc_B54E
		B	loc_B53C
; ---------------------------------------------------------------------------

loc_B61E				; CODE XREF: SwitchesAssigPage+21Ej
		LDR	R0, [R4,#0x2C]
		ADDS	R0, #0x20 ; ' '
		LDRB	R1, [R0,#0x18]
		CMP	R1, #0x13
		BCS	loc_B54E
		ADDS	R1, #1
		UXTB	R1, R1
		STRB	R1, [R0,#0x18]
		CMP	R1, #0x12
		BNE	loc_B636
		MOVS	R1, #0x13
		STRB	R1, [R0,#0x18]

loc_B636				; CODE XREF: SwitchesAssigPage+290j
		BL	sub_9BC0
		CMP	R0, #2
		BCC	loc_B54E
		B	loc_B53C
; ---------------------------------------------------------------------------

loc_B640				; CODE XREF: SwitchesAssigPage:loc_B5F8j
		CMP	R6, #2
		BCC	loc_B648
		MOVS	R6, #0
		B	loc_B64A
; ---------------------------------------------------------------------------

loc_B648				; CODE XREF: SwitchesAssigPage+2A2j
		ADDS	R6, #1

loc_B64A				; CODE XREF: SwitchesAssigPage+2A6j
		BL	sub_9BC0
		CMP	R0, #2
		BCC	loc_B56C
		B	loc_B53C
; ---------------------------------------------------------------------------

loc_B654				; CODE XREF: SwitchesAssigPage:loc_B5FAj
		LDR	R0, [R4,#(usedModelPtr - 0x20000000)]
		MOVS	R1, #0x5F ; '_'
		LDRB	R1, [R1,R0]
		CMP	R1, #0
		BEQ	loc_B664
		MOVS	R1, #5
		ADDS	R0, #0x20 ; ' '
		STRB	R1, [R0,#0x1D]

loc_B664				; CODE XREF: SwitchesAssigPage+2BCj
		MOVS	R0, #1
		POP	{R3-R7,PC}
; End of function SwitchesAssigPage

; ---------------------------------------------------------------------------
off_B668	DCD byte_20000000	; DATA XREF: SwitchesAssigPage+6r
dword_B66C	DCD 0xD075		; DATA XREF: SwitchesAssigPage+Cr
; _BYTE	*off_B670
off_B670	DCD aFlyMode		; DATA XREF: SwitchesAssigPage+22r
					; "Fly mode"
; _BYTE	*off_B674
off_B674	DCD sw_X		; DATA XREF: SwitchesAssigPage+2Ar
					; SwitchesAssigPage+38r ...
; _BYTE	*off_B678
off_B678	DCD aSport		; DATA XREF: SwitchesAssigPage+50r
					; "Sport"
; _BYTE	*off_B67C
off_B67C	DCD aIdleMode		; DATA XREF: SwitchesAssigPage+5Cr
					; "Idle mode"
; _BYTE	*off_B680
off_B680	DCD aIdleUp		; DATA XREF: SwitchesAssigPage+8Er
					; "Idle up"
; _BYTE	*off_B684
off_B684	DCD aThro_Hold		; DATA XREF: SwitchesAssigPage+9Ar
					; "Thro. hold"
; _BYTE	*off_B688
off_B688	DCD aOn_0		; DATA XREF: SwitchesAssigPage+CCr
					; SwitchesAssigPage+110r
					; "On"
off_B68C	DCD arrow_gfx		; DATA XREF: SwitchesAssigPage+D8r
					; SwitchesAssigPage+14Ar
dword_B690	DCD 0xCAE7		; DATA XREF: SwitchesAssigPage+E6r
					; SwitchesAssigPage+F0r
; _BYTE	*off_B694
off_B694	DCD aOff_0		; DATA XREF: SwitchesAssigPage+FAr
					; SwitchesAssigPage+126r
					; "Off"
unk_B698	DCB 0x53 ; S		; DATA XREF: SwitchesAssigPage+11Co
		DCB 0x57, 0x43,	0
aNone_1		DCB "None",0            ; DATA XREF: SwitchesAssigPage+132o
		DCB 0, 0, 0
; _BYTE	*off_B6A4
off_B6A4	DCD aUfoMode		; DATA XREF: SwitchesAssigPage+13Er
					; "UFO mode"

; =============== S U B	R O U T	I N E =======================================


TPM0_method
		LDR	R0, =0x40038000
		LDR	R1, [R0,#0xC]
		LSLS	R1, R1,	#0x18
		BPL	locret_B6C0
		PUSH	{R4,LR}
		LDR	R1, [R0,#0xC]
		MOVS	R2, #0x80 ; ''
		ORRS	R1, R2
		STR	R1, [R0,#0xC]
		BL	methodOnTPM_Event
		POP	{R4,PC}
; ---------------------------------------------------------------------------

locret_B6C0				; CODE XREF: TPM0_method+6j
		BX	LR
; End of function TPM0_method

; ---------------------------------------------------------------------------
		ALIGN 4
dword_B6C4	DCD 0x40038000		; DATA XREF: TPM0_methodr
; ---------------------------------------------------------------------------
		PUSH	{R4,LR}
		BL	TMP1_method_beep_modulation
		LDR	R0, =0x40039000
		LDR	R1, [R0]
		MOVS	R2, #0x80 ; ''
		ORRS	R1, R2
		STR	R1, [R0]
		POP	{R4,PC}
; ---------------------------------------------------------------------------
		ALIGN 4
dword_B6DC	DCD 0x40039000		; DATA XREF: ROM:0000B6CEr
; ---------------------------------------------------------------------------
		PUSH	{R3-R7,LR}
		LDR	R5, =0x4003A000
		LDR	R0, [R5,#0xC]
		MOVS	R1, #0
		LSLS	R2, R0,	#0x18
		MOVS	R0, #0x80 ; ''
		LDR	R4, =word_2000012C
		CMP	R2, #0
		BGE	loc_B764
		LDR	R2, [R5,#0xC]
		ORRS	R2, R0
		STR	R2, [R5,#0xC]
		LDR	R0, =0x400FF000
		LDR	R0, [R0,#0x10]
		LDR	R2, =word_2000012C
		LSLS	R0, R0,	#0x1E
		LDRH	R6, [R2]
		LSRS	R0, R0,	#0x1F
		BEQ	loc_B738
		LDR	R7, [R4,#(dword_20000130 - 0x2000012C)]
		CMP	R7, #6
		BCS	loc_B74C
		LDR	R1, =dword_1FFFFDE0
		LSLS	R0, R7,	#2
		LDR	R0, [R1,R0]
		MOVS	R1, #0x1F4
		MULS	R0, R1
		LDR	R1, =dword_2710
		BL	div_
		LDR	R1, =loc_44C
		ADDS	R0, R0,	R1
		LSLS	R1, R0,	#2
		ADDS	R1, R1,	R6
		UXTH	R1, R1
		STRH	R1, [R4]
		STR	R1, [R5,#0x10]
		ADDS	R7, #1
		STR	R7, [R4,#(dword_20000130 - 0x2000012C)]
		LDR	R1, [R4,#(dword_20000134 - 0x2000012C)]
		ADDS	R0, R1,	R0

loc_B734				; CODE XREF: ROM:0000B74Aj
		STR	R0, [R4,#(dword_20000134 - 0x2000012C)]
		POP	{R3-R7,PC}
; ---------------------------------------------------------------------------

loc_B738				; CODE XREF: ROM:0000B704j
		MOVS	R0, #0x640
		ADDS	R0, R6,	R0
		UXTH	R0, R0
		STRH	R0, [R4]
		STR	R0, [R5,#0x10]
		LDR	R0, [R4,#(dword_20000134 - 0x2000012C)]
		ADDS	R0, #0xFF
		ADDS	R0, #0x91 ; ''
		B	loc_B734
; ---------------------------------------------------------------------------

loc_B74C				; CODE XREF: ROM:0000B70Aj
		LDRH	R0, [R4,#(dword_20000134 - 0x2000012C)]
		MOVS	R2, #0xE20
		SUBS	R0, R2,	R0
		LSLS	R0, R0,	#2
		ADDS	R0, R0,	R6
		UXTH	R0, R0
		STRH	R0, [R4]
		STR	R0, [R5,#0x10]
		STR	R1, [R4,#(dword_20000130 - 0x2000012C)]
		STR	R1, [R4,#(dword_20000134 - 0x2000012C)]

locret_B762				; CODE XREF: ROM:0000B768j
					; ROM:0000B7A4j
		POP	{R3-R7,PC}
; ---------------------------------------------------------------------------

loc_B764				; CODE XREF: ROM:0000B6F0j
		LDR	R2, [R5,#0x14]
		LSLS	R2, R2,	#0x18
		BPL	locret_B762
		LDR	R2, [R5,#0x14]
		ORRS	R2, R0
		STR	R2, [R5,#0x14]
		LDR	R0, [R5,#0x18]
		LDRH	R2, [R4,#(word_2000012E	- 0x2000012C)]
		STRH	R0, [R4,#(word_2000012E	- 0x2000012C)]
		SUBS	R2, R0,	R2
		ADDS	R2, #2
		LSLS	R2, R2,	#0x10
		LDR	R5, [R4,#(dword_20000138 - 0x2000012C)]
		LSRS	R2, R2,	#0x12
		LSLS	R0, R5,	#0x1F
		BEQ	loc_B796
		MOV	R0, R2
		ADDS	R0, #0xFF
		SUBS	R2, #0xFF
		LDR	R3, =(loc_514+1)
		ADDS	R0, #0x91 ; ''
		SUBS	R2, #0xC3 ; 'Ã'
		CMP	R2, R3
		BCS	loc_B7A6
		B	loc_B7AA
; ---------------------------------------------------------------------------

loc_B796				; CODE XREF: ROM:0000B782j
		SUBS	R2, #0xFF
		SUBS	R2, #0x5F ; '_'
		CMP	R2, #0x65 ; 'e'
		BCS	loc_B7A6
		ADDS	R5, #1
		STR	R5, [R4,#(dword_20000138 - 0x2000012C)]
		CMP	R5, #0xC
		BCC	locret_B762

loc_B7A6				; CODE XREF: ROM:0000B792j
					; ROM:0000B79Cj
		STR	R1, [R4,#(dword_20000138 - 0x2000012C)]
		POP	{R3-R7,PC}
; ---------------------------------------------------------------------------

loc_B7AA				; CODE XREF: ROM:0000B794j
		MOVS	R1, #0x384
		CMP	R0, R1
		BCC	loc_B7B8
		LDR	R1, =loc_834
		CMP	R0, R1
		BLS	loc_B7BA

loc_B7B8				; CODE XREF: ROM:0000B7B0j
		MOV	R0, R1

loc_B7BA				; CODE XREF: ROM:0000B7B6j
		LDR	R1, =0xFFFFFA24
		ADDS	R0, R0,	R1
		LDR	R1, =dword_2710
		MULS	R0, R1
		MOVS	R1, #0x1F4
		BL	div_
		LSRS	R1, R5,	#1
		LSLS	R1, R1,	#2
		LDR	R2, =dword_1FFFFCC0
		ADDS	R5, #1
		STR	R0, [R2,R1]
		STR	R5, [R4,#(dword_20000138 - 0x2000012C)]
		POP	{R3-R7,PC}
; ---------------------------------------------------------------------------
dword_B7D8	DCD 0x4003A000		; DATA XREF: ROM:0000B6E2r
off_B7DC	DCD word_2000012C	; DATA XREF: ROM:0000B6ECr
					; ROM:0000B6FCr
dword_B7E0	DCD 0x400FF000		; DATA XREF: ROM:0000B6F8r
off_B7E4	DCD dword_1FFFFDE0	; DATA XREF: ROM:0000B70Cr
off_B7E8	DCD dword_2710		; DATA XREF: ROM:0000B718r
					; ROM:0000B7BEr
off_B7EC	DCD loc_44C		; DATA XREF: ROM:0000B71Er
off_B7F0	DCD loc_514+1		; DATA XREF: ROM:0000B78Ar
off_B7F4	DCD loc_834		; DATA XREF: ROM:0000B7B2r
dword_B7F8	DCD 0xFFFFFA24		; DATA XREF: ROM:loc_B7BAr
off_B7FC	DCD dword_1FFFFCC0	; DATA XREF: ROM:0000B7CEr

; =============== S U B	R O U T	I N E =======================================


ThrottleCurvePage			; DATA XREF: ROM:0000D33Co
					; ROM:0000D39Co ...
		PUSH	{R4,LR}
		LDR	R0, =byte_20000000
		LDR	R2, =0xD1A6	; a3
		LDR	R1, [R0,#(usedModelPtr - 0x20000000)]
		LDR	R0, =aThrottleCurve ; "Throttle curve"
		ADDS	R1, #0x2D ; '-'	; a2
		BL	showSingleValuePage
		POP	{R4,PC}
; End of function ThrottleCurvePage

; ---------------------------------------------------------------------------
		ALIGN 4
; int dword_B814
dword_B814	DCD 0xD1A6		; DATA XREF: ThrottleCurvePage+4r
off_B818	DCD byte_20000000	; DATA XREF: ThrottleCurvePage+2r
; _BYTE	*off_B81C
off_B81C	DCD aThrottleCurve	; DATA XREF: ThrottleCurvePage+8r
					; "Throttle curve"

; =============== S U B	R O U T	I N E =======================================


ThrottleHoldPage			; DATA XREF: ROM:0000D364o
					; ROM:0000D3BCo ...
		PUSH	{R3-R7,LR}
		MOVS	R5, #0
		LDR	R4, =byte_20000000
		MOVS	R7, #0x32 ; '2'
		MOVS	R6, #1

loc_B82A				; CODE XREF: ThrottleHoldPage+B0j
					; ThrottleHoldPage+CCj	...
		BL	callSetupDMAandSend
		LDR	R0, =0xD0BB
		BL	displayPageHeader
		MOVS	R3, #0		; a4
		MOVS	R2, #0x18	; y
		MOVS	R1, #0x10	; x
		LDR	R0, =aHold	; text
		BL	displayTextAt
		LDR	R0, [R4,#(usedModelPtr - 0x20000000)]
		ADDS	R0, #0x20 ; ' '
		LDRB	R0, [R0,#0x17]
		LSLS	R0, R0,	#0x1F
		BEQ	loc_B84E
		LDR	R0, =0xCA77
		B	loc_B850
; ---------------------------------------------------------------------------

loc_B84E				; CODE XREF: ThrottleHoldPage+28j
		LDR	R0, =aOff_0	; text

loc_B850				; CODE XREF: ThrottleHoldPage+2Cj
		MOVS	R3, #0		; a4
		MOVS	R2, #0x18	; y
		MOVS	R1, #0x50 ; 'P'	; x
		BL	displayTextAt
		MOVS	R3, #0		; a4
		MOVS	R2, #0x20 ; ' '	; y
		MOVS	R1, #0x10	; x
		LDR	R0, =aValue_0	; text
		BL	displayTextAt
		LDR	R0, [R4,#(usedModelPtr - 0x20000000)]
		MOVS	R2, #3		; length
		ADDS	R0, #0x20 ; ' '
		LDRB	R0, [R0,#0x19]	; sourceVal
		LDR	R1, =a100_0	; "100%"
		BL	intToString
		MOVS	R3, #0		; a4
		MOVS	R2, #0x20 ; ' '	; y
		MOVS	R1, #0x40 ; '@'	; x
		LDR	R0, =a100_0	; "100%"
		BL	displayTextAt
		BL	getInputStates
		LDR	R1, [R4,#(usedModelPtr - 0x20000000)]
		ADDS	R1, #0x20 ; ' '
		LDRB	R2, [R1,#0x18]
		MOV	R1, R6
		LSLS	R1, R2
		TST	R0, R1
		BEQ	loc_B8D6
		MOVS	R3, #0		; a4
		MOVS	R2, #0x30 ; '0'	; a3
		MOVS	R1, #0x40 ; '@'	; a2
		LDR	R0, =aEngaged	; "Engaged"

loc_B89A				; CODE XREF: ThrottleHoldPage+BEj
		BL	displayTextAt2
		LSLS	R2, R5,	#3
		ADDS	R2, #0x18
		MOVS	R1, #8
		LDR	R0, =arrow_gfx
		BL	displayGFX
		BL	LCD_updateCALL
		BL	getKeyCode
		CMP	R0, #8
		BEQ	loc_B8E0
		CMP	R0, #0x18
		BEQ	loc_B8E0
		CMP	R0, #9
		BEQ	loc_B920
		CMP	R0, #0x17
		BEQ	loc_B920
		CMP	R0, #0x16
		BEQ	loc_B950
		CMP	R0, #0xA
		BEQ	loc_B960
		CMP	R0, #0x19
		BEQ	loc_B96C
		CMP	R0, #0xB
		BNE	loc_B82A
		MOVS	R0, #0
		POP	{R3-R7,PC}
; ---------------------------------------------------------------------------

loc_B8D6				; CODE XREF: ThrottleHoldPage+70j
		MOVS	R3, #0
		MOVS	R2, #0x30 ; '0'
		MOVS	R1, #0x40 ; '@'
		LDR	R0, =0xD0C9
		B	loc_B89A
; ---------------------------------------------------------------------------

loc_B8E0				; CODE XREF: ThrottleHoldPage+94j
					; ThrottleHoldPage+98j
		LDR	R0, [R4,#0x2C]
		CMP	R5, #0
		BEQ	loc_B8FC
		ADDS	R0, #0x20 ; ' '
		LDRB	R1, [R0,#0x19]
		CMP	R1, #0
		BEQ	loc_B82A
		SUBS	R1, #1
		STRB	R1, [R0,#0x19]
		BL	sub_9BC0
		CMP	R0, #2
		BCC	loc_B82A
		B	loc_B90C
; ---------------------------------------------------------------------------

loc_B8FC				; CODE XREF: ThrottleHoldPage+C4j
		ADDS	R0, #0x20 ; ' '
		LDRB	R1, [R0,#0x17]
		EORS	R1, R6
		STRB	R1, [R0,#0x17]
		BL	sub_9BC0
		CMP	R0, #2
		BCC	loc_B82A

loc_B90C				; CODE XREF: ThrottleHoldPage+DAj
					; ThrottleHoldPage+11Aj ...
		MOVS	R0, #0x31 ; '1'
		MOVS	R1, #0xF
		LSLS	R0, R0,	#4
		BL	beep
		MOVS	R1, #0xF
		MOVS	R0, #0
		BL	beep

loc_B91E				; CODE XREF: ThrottleHoldPage+10Cj
					; ThrottleHoldPage+118j ...
		B	loc_B82A
; ---------------------------------------------------------------------------

loc_B920				; CODE XREF: ThrottleHoldPage+9Cj
					; ThrottleHoldPage+A0j
		CMP	R5, #0
		BEQ	loc_B93C
		LDR	R0, [R4,#0x2C]
		ADDS	R0, #0x20 ; ' '
		LDRB	R1, [R0,#0x19]
		CMP	R1, #0x64 ; 'd'
		BCS	loc_B91E
		ADDS	R1, #1
		STRB	R1, [R0,#0x19]
		BL	sub_9BC0
		CMP	R0, #2
		BCC	loc_B91E
		B	loc_B90C
; ---------------------------------------------------------------------------

loc_B93C				; CODE XREF: ThrottleHoldPage+102j
		LDR	R1, [R4,#0x2C]
		ADDS	R1, #0x20 ; ' '
		LDRB	R0, [R1,#0x17]
		EORS	R0, R6
		STRB	R0, [R1,#0x17]
		BL	sub_9BC0
		CMP	R0, #2
		BCC	loc_B91E
		B	loc_B90C
; ---------------------------------------------------------------------------

loc_B950				; CODE XREF: ThrottleHoldPage+A4j
		LDR	R0, [R4,#(usedModelPtr - 0x20000000)]
		ADDS	R0, #0x20 ; ' '
		STRB	R7, [R0,#0x19]
		BL	sub_9BC0
		CMP	R0, #2
		BCC	loc_B91E
		B	loc_B90C
; ---------------------------------------------------------------------------

loc_B960				; CODE XREF: ThrottleHoldPage+A8j
		EORS	R5, R6
		BL	sub_9BC0
		CMP	R0, #2
		BCC	loc_B91E
		B	loc_B90C
; ---------------------------------------------------------------------------

loc_B96C				; CODE XREF: ThrottleHoldPage+ACj
		MOVS	R0, #1
		POP	{R3-R7,PC}
; End of function ThrottleHoldPage

; ---------------------------------------------------------------------------
off_B970	DCD byte_20000000	; DATA XREF: ThrottleHoldPage+4r
dword_B974	DCD 0xD0BB		; DATA XREF: ThrottleHoldPage+Er
; _BYTE	*off_B978
off_B978	DCD aHold		; DATA XREF: ThrottleHoldPage+1Ar
					; "Hold"
dword_B97C	DCD 0xCA77		; DATA XREF: ThrottleHoldPage+2Ar
; _BYTE	*off_B980
off_B980	DCD aOff_0		; DATA XREF: ThrottleHoldPage:loc_B84Er
					; "Off"
; _BYTE	*off_B984
off_B984	DCD aValue_0		; DATA XREF: ThrottleHoldPage+40r
					; "Value"
; char *off_B988
off_B988	DCD a100_0		; DATA XREF: ThrottleHoldPage+4Er
					; ThrottleHoldPage+5Ar
					; "100%"
; _BYTE	*off_B98C
off_B98C	DCD aEngaged		; DATA XREF: ThrottleHoldPage+78r
					; "Engaged"
off_B990	DCD arrow_gfx		; DATA XREF: ThrottleHoldPage+84r
dword_B994	DCD 0xD0C9		; DATA XREF: ThrottleHoldPage+BCr

; =============== S U B	R O U T	I N E =======================================


TrainerModePage				; DATA XREF: ROM:0000D4BCo

var_20		= -0x20
var_1C		= -0x1C

		PUSH	{R4-R7,LR}
		LDR	R4, =rxsettings
		SUB	SP, SP,	#0xC
		LDRB	R0, [R4,#(trainerMode -	0x200002A4)] ; 0=OFF 1=ON
		STR	R0, [SP,#0x20+var_1C]
		LDRB	R0, [R4,#(trainerSW - 0x200002A4)] ; 16=A 17=B 18=C 19=D
		MOVS	R5, #0
		LDR	R7, =sw_X
		MOVS	R6, #1
		STR	R0, [SP,#0x20+var_20]

loc_B9AC				; CODE XREF: TrainerModePage+B0j
					; TrainerModePage+C8j ...
		BL	callSetupDMAandSend
		LDR	R0, =0xD0D5
		BL	displayPageHeader
		MOVS	R2, #0x18	; y
		MOVS	R3, #0		; a4
		MOV	R1, R2		; x
		LDR	R0, =aMode_1	; text
		BL	displayTextAt
		LDRB	R0, [R4,#(trainerMode -	0x200002A4)] ; 0=OFF 1=ON
		CMP	R0, #0
		BEQ	loc_B9CC
		LDR	R0, =0xCA77
		B	loc_B9CE
; ---------------------------------------------------------------------------

loc_B9CC				; CODE XREF: TrainerModePage+2Ej
		LDR	R0, =aOff_0	; text

loc_B9CE				; CODE XREF: TrainerModePage+32j
		MOVS	R3, #0		; a4
		MOVS	R2, #0x18	; y
		MOVS	R1, #0x50 ; 'P'	; x
		BL	displayTextAt
		MOVS	R3, #0		; a4
		MOVS	R2, #0x20 ; ' '	; y
		MOVS	R1, #0x18	; x
		LDR	R0, =aSwitch	; text
		BL	displayTextAt
		LDRB	R0, [R4,#(trainerSW - 0x200002A4)] ; 16=A 17=B 18=C 19=D
		MOVS	R3, #0		; a4
		ADDS	R0, #0x31 ; '1'
		STRB	R0, [R7,#(sw_X_val - 0x20000009)]
		MOVS	R2, #0x20 ; ' '	; y
		MOVS	R1, #0x50 ; 'P'	; x
		LDR	R0, =sw_X	; text
		BL	displayTextAt
		BL	getInputStates
		LDRB	R2, [R4,#(trainerSW - 0x200002A4)] ; 16=A 17=B 18=C 19=D
		MOV	R1, R6
		LSLS	R1, R2
		TST	R0, R1
		BEQ	loc_BA0E
		MOVS	R3, #0
		MOVS	R2, #0x28 ; '('
		MOVS	R1, #0x24 ; '$'
		LDR	R0, =aEngaged_0	; "Engaged"
		B	loc_BA16
; ---------------------------------------------------------------------------

loc_BA0E				; CODE XREF: TrainerModePage+6Aj
		MOVS	R3, #0		; a4
		MOVS	R2, #0x28 ; '('	; y
		MOVS	R1, #0x14	; x
		LDR	R0, =aNotEngaged_0 ; text

loc_BA16				; CODE XREF: TrainerModePage+74j
		BL	displayTextAt
		LSLS	R2, R5,	#3
		ADDS	R2, #0x18
		MOVS	R1, #0x10
		LDR	R0, =arrow_gfx
		BL	displayGFX
		BL	LCD_updateCALL
		BL	getKeyCode
		CMP	R0, #8
		BEQ	loc_BA58
		CMP	R0, #0x18
		BEQ	loc_BA58
		CMP	R0, #9
		BEQ	loc_BA92
		CMP	R0, #0x17
		BEQ	loc_BA92
		CMP	R0, #0xA
		BEQ	loc_BABA
		CMP	R0, #0x19
		BEQ	loc_BAC6
		CMP	R0, #0xB
		BNE	loc_B9AC
		LDR	R0, [SP,#0x20+var_1C]
		STRB	R0, [R4,#(trainerMode -	0x200002A4)] ; 0=OFF 1=ON
		LDR	R0, [SP,#0x20+var_20]
		STRB	R0, [R4,#(trainerSW - 0x200002A4)] ; 16=A 17=B 18=C 19=D
		MOVS	R0, #0
		ADD	SP, SP,	#0xC
		POP	{R4-R7,PC}
; ---------------------------------------------------------------------------

loc_BA58				; CODE XREF: TrainerModePage+98j
					; TrainerModePage+9Cj
		CMP	R5, #0
		BEQ	loc_BA70
		LDRB	R0, [R4,#5]
		CMP	R0, #0x10
		BLS	loc_B9AC
		SUBS	R0, #1
		STRB	R0, [R4,#5]
		BL	sub_9BC0
		CMP	R0, #2
		BCC	loc_B9AC
		B	loc_BA7E
; ---------------------------------------------------------------------------

loc_BA70				; CODE XREF: TrainerModePage+C2j
		LDRB	R0, [R4,#4]
		EORS	R0, R6
		STRB	R0, [R4,#4]
		BL	sub_9BC0
		CMP	R0, #2
		BCC	loc_B9AC

loc_BA7E				; CODE XREF: TrainerModePage+D6j
					; TrainerModePage+110j	...
		MOVS	R0, #0x31 ; '1'
		MOVS	R1, #0xF
		LSLS	R0, R0,	#4
		BL	beep
		MOVS	R1, #0xF
		MOVS	R0, #0
		BL	beep

loc_BA90				; CODE XREF: TrainerModePage+11Ej
					; TrainerModePage+12Aj
		B	loc_B9AC
; ---------------------------------------------------------------------------

loc_BA92				; CODE XREF: TrainerModePage+A0j
					; TrainerModePage+A4j
		CMP	R5, #0
		BEQ	loc_BAAA
		LDRB	R0, [R4,#5]
		CMP	R0, #0x13
		BCS	loc_B9AC
		ADDS	R0, #1
		STRB	R0, [R4,#5]
		BL	sub_9BC0
		CMP	R0, #2
		BCC	loc_B9AC
		B	loc_BA7E
; ---------------------------------------------------------------------------

loc_BAAA				; CODE XREF: TrainerModePage+FCj
		LDRB	R0, [R4,#4]
		EORS	R0, R6
		STRB	R0, [R4,#4]
		BL	sub_9BC0
		CMP	R0, #2
		BCC	loc_BA90
		B	loc_BA7E
; ---------------------------------------------------------------------------

loc_BABA				; CODE XREF: TrainerModePage+A8j
		EORS	R5, R6
		BL	sub_9BC0
		CMP	R0, #2
		BCC	loc_BA90
		B	loc_BA7E
; ---------------------------------------------------------------------------

loc_BAC6				; CODE XREF: TrainerModePage+ACj
		MOVS	R0, #1
		ADD	SP, SP,	#0xC
		POP	{R4-R7,PC}
; End of function TrainerModePage

; ---------------------------------------------------------------------------
off_BACC	DCD rxsettings		; DATA XREF: TrainerModePage+2r
; _BYTE	*off_BAD0
off_BAD0	DCD sw_X		; DATA XREF: TrainerModePage+Er
					; TrainerModePage+58r
dword_BAD4	DCD 0xD0D5		; DATA XREF: TrainerModePage+18r
; _BYTE	*off_BAD8
off_BAD8	DCD aMode_1		; DATA XREF: TrainerModePage+24r
					; "Mode"
dword_BADC	DCD 0xCA77		; DATA XREF: TrainerModePage+30r
; _BYTE	*off_BAE0
off_BAE0	DCD aOff_0		; DATA XREF: TrainerModePage:loc_B9CCr
					; "Off"
; _BYTE	*off_BAE4
off_BAE4	DCD aSwitch		; DATA XREF: TrainerModePage+46r
					; "Switch"
off_BAE8	DCD aEngaged_0		; DATA XREF: TrainerModePage+72r
					; "Engaged"
; _BYTE	*off_BAEC
off_BAEC	DCD aNotEngaged_0	; DATA XREF: TrainerModePage+7Cr
					; "Not engaged"
off_BAF0	DCD arrow_gfx		; DATA XREF: TrainerModePage+88r

; =============== S U B	R O U T	I N E =======================================


typeSelectPage				; DATA XREF: ROM:0000D49Co
		PUSH	{R3-R7,LR}
		LDR	R6, =rxsettings
		LDR	R5, =aModel00	; "Model 00"
		LDR	R7, =aT		; "TÕ"
		LDR	R4, =byte_20000000

loc_BAFE				; CODE XREF: typeSelectPage+9Ej
					; typeSelectPage+CAj ...
		BL	callSetupDMAandSend
		LDR	R0, =aTypeSelect ; "Type select"
		BL	displayPageHeader
		LDRB	R0, [R6,#(currentModel - 0x200002A4)]
		MOVS	R2, #2
		ADDS	R0, #1
		ADDS	R1, R5,	#6
		BL	printNumberAsStringAt
		MOVS	R3, #0		; a4
		MOVS	R2, #0xC	; y
		MOVS	R1, #0x20 ; ' '	; x
		LDR	R0, =aModel00	; "Model 00"
		BL	displayTextAt
		MOVS	R3, #0		; a4
		MOVS	R2, #0x14	; y
		MOVS	R1, #0x20 ; ' '	; x
		LDR	R0, [R4,#(usedModelPtr - 0x20000000)] ;	text
		BL	displayTextAt
		LDR	R0, [R4,#(usedModelPtr - 0x20000000)]
		LDRB	R0, [R0,#9]
		CMP	R0, #0
		BEQ	loc_BB98
		MOVS	R3, #0		; a4
		MOVS	R2, #0x1E	; a3
		MOVS	R1, #0x44 ; 'D'	; a2
		LDR	R0, =aHelicopter ; text
		BL	displayTextAt2
		MOVS	R2, #0x30 ; '0'
		MOVS	R1, #0x29 ; ')'
		LDR	R0, =heli_img

loc_BB46				; CODE XREF: typeSelectPage+C2j
		BL	displayGFX
		LDR	R0, [R4,#(usedModelPtr - 0x20000000)]
		MOVS	R3, #0		; a4
		LDRB	R0, [R0,#9]
		MOVS	R2, #0x26 ; '&'	; a3
		LSLS	R0, R0,	#2
		LDR	R0, [R7,R0]	; text
		MOVS	R1, #0x44 ; 'D'	; a2
		BL	displayTextAt2
		MOVS	R2, #0x1E
		MOVS	R1, #4
		LDR	R0, =arrow_gfx
		BL	displayGFX
		MOVS	R2, #0x26 ; '&'
		MOVS	R1, #4
		LDR	R0, =arrow_gfx
		BL	displayGFX
		BL	LCD_updateCALL
		BL	getKeyCode
		CMP	R0, #8
		BEQ	loc_BBB8
		CMP	R0, #0x18
		BEQ	loc_BBB8
		CMP	R0, #9
		BEQ	loc_BBE0
		CMP	R0, #0x17
		BEQ	loc_BBE0
		CMP	R0, #0xA
		BEQ	loc_BBF6
		CMP	R0, #0x19
		BEQ	loc_BBF6
		CMP	R0, #0xB
		BNE	loc_BAFE
		MOVS	R0, #0
		POP	{R3-R7,PC}
; ---------------------------------------------------------------------------

loc_BB98				; CODE XREF: typeSelectPage+3Ej
		MOVS	R3, #0		; a4
		MOVS	R2, #0x1E	; a3
		MOVS	R1, #0x44 ; 'D'	; a2
		LDR	R0, =aAirplane	; "Airplane"
		BL	displayTextAt2
		MOVS	R3, #0		; a4
		MOVS	R2, #0x26 ; '&'	; a3
		MOVS	R1, #0x44 ; 'D'	; a2
		LDR	R0, =aOrGlider	; text
		BL	displayTextAt2
		MOVS	R2, #0x30 ; '0'
		MOVS	R1, #0x29 ; ')'
		LDR	R0, =plain_img
		B	loc_BB46
; ---------------------------------------------------------------------------

loc_BBB8				; CODE XREF: typeSelectPage+86j
					; typeSelectPage+8Aj
		LDR	R0, [R4,#0x2C]
		LDRB	R1, [R0,#9]
		CMP	R1, #0
		BEQ	loc_BAFE
		SUBS	R1, #1
		STRB	R1, [R0,#9]
		BL	sub_9BC0
		CMP	R0, #2
		BCC	loc_BAFE

loc_BBCC				; CODE XREF: typeSelectPage+100j
		MOVS	R0, #0x31 ; '1'
		MOVS	R1, #0xF
		LSLS	R0, R0,	#4
		BL	beep
		MOVS	R1, #0xF
		MOVS	R0, #0
		BL	beep
		B	loc_BAFE
; ---------------------------------------------------------------------------

loc_BBE0				; CODE XREF: typeSelectPage+8Ej
					; typeSelectPage+92j
		LDR	R1, [R4,#0x2C]
		LDRB	R0, [R1,#9]
		CMP	R0, #5
		BCS	loc_BAFE
		ADDS	R0, #1
		STRB	R0, [R1,#9]
		BL	sub_9BC0
		CMP	R0, #2
		BCC	loc_BAFE
		B	loc_BBCC
; ---------------------------------------------------------------------------

loc_BBF6				; CODE XREF: typeSelectPage+96j
					; typeSelectPage+9Aj
		LDR	R0, [R4,#0x2C]
		MOVS	R2, #0xC
		LDR	R1, =0xD1B7
		ADDS	R0, #0x3E ; '>'
		BL	memcpy
		MOVS	R0, #1
		POP	{R3-R7,PC}
; End of function typeSelectPage

; ---------------------------------------------------------------------------
		ALIGN 4
off_BC08	DCD rxsettings		; DATA XREF: typeSelectPage+2r
; _BYTE	*off_BC0C
off_BC0C	DCD aModel00		; DATA XREF: typeSelectPage+4r
					; typeSelectPage+26r
					; "Model 00"
off_BC10	DCD aT			; DATA XREF: typeSelectPage+6r
					; "TÕ"
off_BC14	DCD byte_20000000	; DATA XREF: typeSelectPage+8r
off_BC18	DCD aTypeSelect		; DATA XREF: typeSelectPage+Er
					; "Type select"
; _BYTE	*off_BC1C
off_BC1C	DCD aHelicopter		; DATA XREF: typeSelectPage+46r
					; "Helicopter"
off_BC20	DCD heli_img		; DATA XREF: typeSelectPage+50r
off_BC24	DCD arrow_gfx		; DATA XREF: typeSelectPage+6Cr
					; typeSelectPage+76r
; _BYTE	*off_BC28
off_BC28	DCD aAirplane		; DATA XREF: typeSelectPage+AAr
					; "Airplane"
; _BYTE	*off_BC2C
off_BC2C	DCD aOrGlider		; DATA XREF: typeSelectPage+B6r
					; "or glider"
off_BC30	DCD plain_img		; DATA XREF: typeSelectPage+C0r
dword_BC34	DCD 0xD1B7		; DATA XREF: typeSelectPage+106r

; =============== S U B	R O U T	I N E =======================================


vTailPage				; DATA XREF: ROM:0000D354o
		PUSH	{R3-R7,LR}
		LDR	R4, =byte_20000000
		LDR	R0, [R4,#(usedModelPtr - 0x20000000)]
		ADDS	R0, #0x20 ; ' '
		LDRB	R0, [R0,#0x17]
		LSLS	R0, R0,	#0x1D
		BPL	loc_BC72
		BL	callSetupDMAandSend
		LDR	R0, =aVTail	; "V tail"
		BL	displayPageHeader
		MOVS	R3, #0		; a4
		MOVS	R2, #0x20 ; ' '	; a3
		MOVS	R1, #0x40 ; '@'	; a2
		LDR	R0, =aElevonEnabled ; "Elevon enabled"
		BL	displayTextAt2
		BL	LCD_updateCALL

loc_BC60				; CODE XREF: vTailPage+36j
		BL	getKeyCode
		CMP	R0, #0xA
		BEQ	loc_BD62
		CMP	R0, #0x19
		BEQ	loc_BD62
		CMP	R0, #0xB
		BNE	loc_BC60
		B	loc_BD62
; ---------------------------------------------------------------------------

loc_BC72				; CODE XREF: vTailPage+Cj
		MOVS	R7, #0x63 ; 'c'
		MOVS	R5, #0
		MVNS	R7, R7
		MOVS	R6, #2

loc_BC7A				; CODE XREF: vTailPage+128j
					; vTailPage:loc_BD7Aj ...
		BL	callSetupDMAandSend
		LDR	R0, =aVTail	; "V tail"
		BL	displayPageHeader
		MOVS	R3, #0		; a4
		MOVS	R2, #0x10	; y
		MOVS	R1, #0x1C	; x
		LDR	R0, =aVTail_0	; text
		BL	displayTextAt
		LDR	R0, [R4,#(usedModelPtr - 0x20000000)]
		ADDS	R0, #0x20 ; ' '
		LDRB	R0, [R0,#0x17]
		LSLS	R0, R0,	#0x1E
		BPL	loc_BC9E
		LDR	R0, =0xCA77
		B	loc_BCA0
; ---------------------------------------------------------------------------

loc_BC9E				; CODE XREF: vTailPage+60j
		LDR	R0, =aOff_0	; text

loc_BCA0				; CODE XREF: vTailPage+64j
		MOVS	R3, #0		; a4
		MOVS	R2, #0x10	; y
		MOVS	R1, #0x5C ; '\'	; x
		BL	displayTextAt
		MOVS	R3, #0		; a4
		MOVS	R2, #0x18	; y
		MOVS	R1, #0x1C	; x
		ADR	R0, unk_BE78	; text
		BL	displayTextAt
		LDR	R1, [R4,#(usedModelPtr - 0x20000000)]
		MOVS	R0, #0x4B ; 'K'
		LDRSB	R0, [R1,R0]	; sourceVal
		MOVS	R2, #4		; length
		LDR	R1, =a100_1	; "-100%"
		BL	intToString
		MOVS	R3, #0		; a4
		MOVS	R2, #0x18	; y
		MOVS	R1, #0x3C ; '<'	; x
		LDR	R0, =a100_1	; text
		BL	displayTextAt
		MOVS	R3, #0		; a4
		MOVS	R2, #0x20 ; ' '	; y
		MOVS	R1, #0x1C	; x
		ADR	R0, unk_BE80	; text
		BL	displayTextAt
		LDR	R1, [R4,#(usedModelPtr - 0x20000000)]
		MOVS	R0, #0x4A ; 'J'
		LDRSB	R0, [R1,R0]	; sourceVal
		MOVS	R2, #4		; length
		LDR	R1, =a100_1	; "-100%"
		BL	intToString
		MOVS	R3, #0		; a4
		MOVS	R2, #0x20 ; ' '	; y
		MOVS	R1, #0x3C ; '<'	; x
		LDR	R0, =a100_1	; text
		BL	displayTextAt
		LSLS	R2, R5,	#3
		ADDS	R2, #0x10
		MOVS	R1, #0x14
		LDR	R0, =arrow_gfx
		BL	displayGFX
		LDR	R0, [R4,#(usedModelPtr - 0x20000000)]
		ADDS	R0, #0x20 ; ' '
		LDRB	R0, [R0,#0x17]
		LSLS	R0, R0,	#0x1E
		BMI	loc_BD22
		MOVS	R3, #0		; a4
		MOVS	R2, #0x30 ; '0'	; y
		MOVS	R1, #0x18	; x
		ADR	R0, aCh2Ch2_0	; "CH2 <= CH2"
		BL	displayTextAt
		MOVS	R3, #0
		MOVS	R2, #0x38 ; '8'
		MOVS	R1, #0x18
		ADR	R0, aCh4Ch4	; "CH4 <= CH4"
		B	loc_BD36
; ---------------------------------------------------------------------------

loc_BD22				; CODE XREF: vTailPage+D2j
		MOVS	R3, #0		; a4
		MOVS	R2, #0x30 ; '0'	; y
		MOVS	R1, #8		; x
		ADR	R0, aCh2Ch2Ch4	; "CH2 <= CH2-CH4"
		BL	displayTextAt
		MOVS	R3, #0		; a4
		MOVS	R2, #0x38 ; '8'	; y
		MOVS	R1, #8		; x
		ADR	R0, aCh4Ch2Ch4	; "CH4 <= CH2+CH4"

loc_BD36				; CODE XREF: vTailPage+E8j
		BL	displayTextAt
		BL	LCD_updateCALL
		BL	getKeyCode
		CMP	R0, #8
		BEQ	loc_BD66
		CMP	R0, #0x18
		BEQ	loc_BD66
		CMP	R0, #9
		BEQ	loc_BDCA
		CMP	R0, #0x17
		BEQ	loc_BDCA
		CMP	R0, #0x16
		BEQ	loc_BE18
		CMP	R0, #0xA
		BEQ	loc_BE48
		CMP	R0, #0x19
		BEQ	loc_BE5C
		CMP	R0, #0xB
		BNE	loc_BC7A

loc_BD62				; CODE XREF: vTailPage+2Ej
					; vTailPage+32j ...
		MOVS	R0, #0
		POP	{R3-R7,PC}
; ---------------------------------------------------------------------------

loc_BD66				; CODE XREF: vTailPage+10Cj
					; vTailPage+110j
		CMP	R5, #0
		BEQ	loc_BD8A
		CMP	R5, #1
		BEQ	loc_BDB0
		LDR	R0, [R4,#0x2C]
		MOVS	R1, #0xA
		ADDS	R0, #0x40 ; '@'
		LDRSB	R1, [R0,R1]
		CMP	R1, R7
		BGT	loc_BD7C

loc_BD7A				; CODE XREF: vTailPage+14Ej
					; vTailPage+162j ...
		B	loc_BC7A
; ---------------------------------------------------------------------------

loc_BD7C				; CODE XREF: vTailPage+140j
		SUBS	R1, #1
		STRB	R1, [R0,#0xA]
		BL	sub_9BC0
		CMP	R0, #2
		BCC	loc_BD7A
		B	loc_BD9C
; ---------------------------------------------------------------------------

loc_BD8A				; CODE XREF: vTailPage+130j
		LDR	R0, [R4,#0x2C]
		ADDS	R0, #0x20 ; ' '
		LDRB	R1, [R0,#0x17]
		EORS	R1, R6
		STRB	R1, [R0,#0x17]
		BL	sub_9BC0
		CMP	R0, #2
		BCC	loc_BD7A

loc_BD9C				; CODE XREF: vTailPage+150j
					; vTailPage+190j ...
		MOVS	R0, #0x31 ; '1'
		MOVS	R1, #0xF
		LSLS	R0, R0,	#4
		BL	beep
		MOVS	R1, #0xF
		MOVS	R0, #0
		BL	beep
		B	loc_BC7A
; ---------------------------------------------------------------------------

loc_BDB0				; CODE XREF: vTailPage+134j
		LDR	R1, [R4,#0x2C]
		MOVS	R0, #0xB
		ADDS	R1, #0x40 ; '@'
		LDRSB	R0, [R1,R0]
		CMP	R0, R7
		BLE	loc_BD7A
		SUBS	R0, #1
		STRB	R0, [R1,#0xB]
		BL	sub_9BC0
		CMP	R0, #2
		BCC	loc_BD7A
		B	loc_BD9C
; ---------------------------------------------------------------------------

loc_BDCA				; CODE XREF: vTailPage+114j
					; vTailPage+118j
		CMP	R5, #0
		BEQ	loc_BDEC
		LDR	R1, [R4,#0x2C]
		CMP	R5, #1
		BEQ	loc_BE00
		ADDS	R1, #0x40 ; '@'
		MOVS	R0, #0xA
		LDRSB	R0, [R1,R0]
		CMP	R0, #0x64 ; 'd'
		BGE	loc_BD7A
		ADDS	R0, #1
		STRB	R0, [R1,#0xA]
		BL	sub_9BC0
		CMP	R0, #2
		BCC	loc_BD7A
		B	loc_BD9C
; ---------------------------------------------------------------------------

loc_BDEC				; CODE XREF: vTailPage+194j
		LDR	R0, [R4,#0x2C]
		ADDS	R0, #0x20 ; ' '
		LDRB	R1, [R0,#0x17]
		EORS	R1, R6
		STRB	R1, [R0,#0x17]
		BL	sub_9BC0
		CMP	R0, #2
		BCC	loc_BD7A
		B	loc_BD9C
; ---------------------------------------------------------------------------

loc_BE00				; CODE XREF: vTailPage+19Aj
		ADDS	R1, #0x40 ; '@'
		MOVS	R0, #0xB
		LDRSB	R0, [R1,R0]
		CMP	R0, #0x64 ; 'd'
		BGE	loc_BD7A
		ADDS	R0, #1
		STRB	R0, [R1,#0xB]
		BL	sub_9BC0
		CMP	R0, #2
		BCC	loc_BD7A
		B	loc_BD9C
; ---------------------------------------------------------------------------

loc_BE18				; CODE XREF: vTailPage+11Cj
		CMP	R5, #1
		BEQ	loc_BE32
		CMP	R5, #2
		BNE	loc_BD7A
		LDR	R1, [R4,#(usedModelPtr - 0x20000000)]
		MOVS	R0, #0x32 ; '2'
		ADDS	R1, #0x40 ; '@'
		STRB	R0, [R1,#0xA]
		BL	sub_9BC0
		CMP	R0, #2
		BCC	loc_BD7A
		B	loc_BD9C
; ---------------------------------------------------------------------------

loc_BE32				; CODE XREF: vTailPage+1E2j
		LDR	R1, [R4,#(usedModelPtr - 0x20000000)]
		MOVS	R0, #0x32 ; '2'
		ADDS	R1, #0x40 ; '@'
		STRB	R0, [R1,#0xB]
		BL	sub_9BC0
		CMP	R0, #2
		BCC	loc_BD7A
		B	loc_BD9C
; ---------------------------------------------------------------------------
		B	loc_BE48
; ---------------------------------------------------------------------------
		B	loc_BE5C
; ---------------------------------------------------------------------------

loc_BE48				; CODE XREF: vTailPage+120j
					; vTailPage+20Cj
		CMP	R5, #2
		BCC	loc_BE50
		MOVS	R5, #0
		B	loc_BE52
; ---------------------------------------------------------------------------

loc_BE50				; CODE XREF: vTailPage+212j
		ADDS	R5, #1

loc_BE52				; CODE XREF: vTailPage+216j
		BL	sub_9BC0
		CMP	R0, #2
		BCC	loc_BD7A
		B	loc_BD9C
; ---------------------------------------------------------------------------

loc_BE5C				; CODE XREF: vTailPage+124j
					; vTailPage+20Ej
		MOVS	R0, #1
		POP	{R3-R7,PC}
; End of function vTailPage

; ---------------------------------------------------------------------------
off_BE60	DCD byte_20000000	; DATA XREF: vTailPage+2r
off_BE64	DCD aVTail		; DATA XREF: vTailPage+12r
					; vTailPage+46r
					; "V tail"
; _BYTE	*off_BE68
off_BE68	DCD aElevonEnabled	; DATA XREF: vTailPage+1Er
					; "Elevon enabled"
; _BYTE	*off_BE6C
off_BE6C	DCD aVTail_0		; DATA XREF: vTailPage+52r
					; "V tail"
dword_BE70	DCD 0xCA77		; DATA XREF: vTailPage+62r
; _BYTE	*off_BE74
off_BE74	DCD aOff_0		; DATA XREF: vTailPage:loc_BC9Er
					; "Off"
unk_BE78	DCB 0x43 ; C		; DATA XREF: vTailPage+78o
		DCB 0x48, 0x32,	0
; char *off_BE7C
off_BE7C	DCD a100_1		; DATA XREF: vTailPage+86r
					; vTailPage+92r ...
					; "-100%"
unk_BE80	DCB 0x43 ; C		; DATA XREF: vTailPage+9Eo
		DCB 0x48, 0x34,	0
off_BE84	DCD arrow_gfx		; DATA XREF: vTailPage+C4r
aCh2Ch2_0	DCB "CH2 <= CH2",0      ; DATA XREF: vTailPage+DAo
		DCB 0
aCh4Ch4		DCB "CH4 <= CH4",0      ; DATA XREF: vTailPage+E6o
		DCB 0
aCh2Ch2Ch4	DCB "CH2 <= CH2-CH4",0  ; DATA XREF: vTailPage+F0o
		DCB 0
aCh4Ch2Ch4	DCB "CH4 <= CH2+CH4",0  ; DATA XREF: vTailPage+FCo
		DCB 0
; ---------------------------------------------------------------------------

VoltageAdjust				; DATA XREF: ROM:0000D284o
		PUSH	{R3-R7,LR}
		MOVS	R7, #0x7D ; '}'
		MOVS	R4, #0
		LDR	R6, =timer
		LSLS	R7, R7,	#3
		LDR	R5, =(stickAdjustData+0x20) ; 40 items

loc_BECC				; CODE XREF: ROM:0000BF42j
					; ROM:0000BF66j ...
		BL	callSetupDMAandSend
		LDR	R0, =aVoltageAdjust ; "Voltage adjust"
		BL	displayPageHeader
		LDR	R0, [R6]
		SUBS	R0, R0,	R4
		CMP	R0, #0xFA ; 'ú'
		BLS	loc_BF3C
		LDR	R4, [R6]
		MOVS	R3, #0
		MOVS	R2, #0x10
		MOVS	R1, #0x40 ; '@'
		LDR	R0, =0xD127
		BL	displayTextAt2
		MOVS	R3, #0
		MOVS	R2, #0x18
		MOVS	R1, #0x40 ; '@'
		LDR	R0, =0xD135
		BL	displayTextAt2
		LDR	R0, =stickAdjustData ; 40 items
		LDR	R2, =dword_2710
		LDRH	R1, [R0,#(stickAdjustData+0x26 - 0x20000E18)] ;	40 items
		LDR	R0, =ch1_ADC_VAL
		LDR	R0, [R0,#(voltageADC - 0x20000F00)]
		MULS	R0, R2
		BL	div__0
		MOV	R1, R7
		BL	div_Other
		STR	R1, [SP]
		MOVS	R2, #2
		LDR	R1, =a10_000v	; "10.000V"
		BL	intToString
		MOVS	R2, #3
		LDR	R1, =0x2000008F
		LDR	R0, [SP]
		BL	printNumberAsStringAt
		MOVS	R2, #0x28 ; '('
		MOVS	R3, #0
		MOV	R1, R2
		LDR	R0, =a10_000v	; "10.000V"
		BL	displayTextAt
		MOVS	R2, #0x28 ; '('
		MOVS	R1, #0x20 ; ' '
		LDR	R0, =arrow_gfx
		BL	displayGFX
		BL	LCD_updateCALL

loc_BF3C				; CODE XREF: ROM:0000BEDCj
		BL	sub_2574
		CMP	R0, #0xFF
		BEQ	loc_BECC
		BL	getKeyCode
		CMP	R0, #8
		BEQ	loc_BF6C
		CMP	R0, #0x18
		BEQ	loc_BF6C
		CMP	R0, #9
		BEQ	loc_BF84
		CMP	R0, #0x17
		BEQ	loc_BF84
		CMP	R0, #0x16
		BEQ	loc_BF9A
		CMP	R0, #0xA
		BEQ	loc_BFBC
		CMP	R0, #0x19
		BEQ	loc_BFBC
		CMP	R0, #0xB
		BNE	loc_BECC
		MOVS	R0, #0
		POP	{R3-R7,PC}
; ---------------------------------------------------------------------------

loc_BF6C				; CODE XREF: ROM:0000BF4Aj
					; ROM:0000BF4Ej
		LDR	R0, =stickAdjustData ; 40 items
		LDR	R1, =dword_2710
		LDRH	R0, [R0,#(stickAdjustData+0x26 - 0x20000E18)] ;	40 items
		CMP	R0, R1
		BCS	loc_BECC
		ADDS	R0, #0xA
		STRH	R0, [R5,#6]
		BL	sub_9BC0
		CMP	R0, #2
		BCC	loc_BECC
		B	loc_BFA8
; ---------------------------------------------------------------------------

loc_BF84				; CODE XREF: ROM:0000BF52j
					; ROM:0000BF56j
		LDR	R0, =stickAdjustData ; 40 items
		LDRH	R0, [R0,#(stickAdjustData+0x26 - 0x20000E18)] ;	40 items
; ---------------------------------------------------------------------------
		DCD 0xD09F2800
		DCB  0xA
		DCB 0x38, 0xE8,	0x80
		DCD 0xFE16F7FD
; ---------------------------------------------------------------------------
		CMP	R0, #2
		BCC	loc_BECC
		B	loc_BFA8
; ---------------------------------------------------------------------------

loc_BF9A				; CODE XREF: ROM:0000BF5Aj
		LDR	R1, =stickAdjustData ; 40 items
		LDR	R0, =dword_183C
		STRH	R0, [R1,#(stickAdjustData+0x26 - 0x20000E18)] ;	40 items
		BL	sub_9BC0
		CMP	R0, #2
		BCC	loc_BECC

loc_BFA8				; CODE XREF: ROM:0000BF82j
					; ROM:0000BF98j
		MOVS	R0, #0x31 ; '1'
		MOVS	R1, #0xF
		LSLS	R0, R0,	#4
		BL	beep
		MOVS	R1, #0xF
		MOVS	R0, #0
		BL	beep
		B	loc_BECC
; ---------------------------------------------------------------------------

loc_BFBC				; CODE XREF: ROM:0000BF5Ej
					; ROM:0000BF62j
		MOVS	R0, #1
		POP	{R3-R7,PC}
; ---------------------------------------------------------------------------
off_BFC0	DCD timer		; DATA XREF: ROM:0000BEC6r
off_BFC4	DCD stickAdjustData+0x20 ; DATA	XREF: ROM:0000BECAr
					; 40 items
off_BFC8	DCD aVoltageAdjust	; DATA XREF: ROM:0000BED0r
					; "Voltage adjust"
dword_BFCC	DCD 0xD127		; DATA XREF: ROM:0000BEE6r
dword_BFD0	DCD 0xD135		; DATA XREF: ROM:0000BEF2r
off_BFD4	DCD stickAdjustData	; DATA XREF: ROM:0000BEF8r
					; ROM:loc_BF6Cr ...
					; 40 items
off_BFD8	DCD ch1_ADC_VAL		; DATA XREF: ROM:0000BEFEr
off_BFDC	DCD dword_2710		; DATA XREF: ROM:0000BEFAr
					; ROM:0000BF6Er
off_BFE0	DCD a10_000v		; DATA XREF: ROM:0000BF12r
					; ROM:0000BF28r
					; "10.000V"
dword_BFE4	DCD 0x2000008F		; DATA XREF: ROM:0000BF1Ar
off_BFE8	DCD arrow_gfx		; DATA XREF: ROM:0000BF32r
timerHandlerAddress DCD	dword_183C	; DATA XREF: ROM:0000BF9Cr

; =============== S U B	R O U T	I N E =======================================


copy6Bytes				; CODE XREF: ChooseSensors+Ep
					; ChooseSensors+21Ep
		LDRB	R2, [R1]
		STRB	R2, [R0]
		LDRB	R3, [R1,#1]
		STRB	R3, [R0,#1]
		LDRB	R2, [R1,#2]
		STRB	R2, [R0,#2]
		LDRB	R2, [R1,#3]
		STRB	R2, [R0,#3]
		LDRB	R3, [R1,#4]
		STRB	R3, [R0,#4]
		LDRB	R2, [R1,#5]
		STRB	R2, [R0,#5]
		BX	LR
; End of function copy6Bytes


; =============== S U B	R O U T	I N E =======================================


isASCICodeSingleDigit			; CODE XREF: sub_1B2C+58p sub_1B2C+A8p
		SUBS	R0, #0x30 ; '0'
		CMP	R0, #0xA
		BCS	loc_C014
		MOVS	R0, #1
		BX	LR
; ---------------------------------------------------------------------------

loc_C014				; CODE XREF: isASCICodeSingleDigit+4j
		MOVS	R0, #0
		BX	LR
; End of function isASCICodeSingleDigit


; =============== S U B	R O U T	I N E =======================================

; Attributes: noreturn

main_screen				; CODE XREF: entryPoint-4Ep

var_10		= -0x10
var_C		= -0xC
var_8		= -8
var_4		= -4

		LDR	R0, =byte_20000000
		SUB	SP, SP,	#0x10
		MOVS	R4, #0
		STR	R4, [R0,#(dword_20000018 - 0x20000000)]
		STR	R4, [R0,#(dword_20000040 - 0x20000000)]
		LDR	R1, =0xFFFFFC18
		STR	R4, [R0,#(dword_20000020 - 0x20000000)]
		STR	R1, [R0,#(dword_2000001C - 0x20000000)]
		BL	kindOfInit
		BL	kindOfInit2
		LDR	R1, =stickAdjustData ; 40 items
		LDR	R0, =dword_2710
		STRH	R0, [R1,#(stickAdjustData+0x26 - 0x20000E18)] ;	40 items
		LDR	R5, =ch1_ADC_VAL
		LDR	R0, =0x2EE0
		MOVS	R6, #0
		STR	R0, [R5,#(voltageADC - 0x20000F00)]

loc_C03E				; CODE XREF: main_screen+4Cj
		LSLS	R1, R6,	#0xC
		MOVS	R2, #0x2A ; '*'	; len
		LDR	R0, =stickAdjustData ; target
		BL	readEeprom
		CMP	R0, #0
		BEQ	loc_C05C
		MOVS	R1, #0x28 ; '('	; length
		LDR	R0, =stickAdjustData ; startPTR
		BL	crcCheck
		LDR	R1, =stickAdjustData ; 40 items
		LDRH	R1, [R1,#(CRC_STICKDATA	- 0x20000E18)]
		CMP	R0, R1
		BEQ	loc_C070

loc_C05C				; CODE XREF: main_screen+32j
		BL	someSPImethod
		ADDS	R6, #1
		CMP	R6, #4
		BCC	loc_C03E
		MOVS	R2, #0x2A ; '*'
		LDR	R1, =0xD20B
		LDR	R0, =stickAdjustData ; 40 items
		BL	memcpy

loc_C070				; CODE XREF: main_screen+42j
		BL	loadTimerSettingsFromEeprom
		BL	LCD_clear
		LDR	R6, =rxsettings
		LDR	R1, =byte_20000160
		LDRB	R0, [R6,#(byte_200002AB	- 0x200002A4)]
		STRB	R0, [R1]
		LDR	R1, =studentMode
		MOVS	R0, #0
		STRB	R0, [R1]
		LDR	R1, =byte_20000000
		MOVS	R2, #1
		STRB	R2, [R1,#(byte_20000002	- 0x20000000)]
		LDR	R2, =byte_20000145
		MOV	R4, R0
		STRB	R0, [R2]
		LDR	R0, =timer
		LDR	R2, [R0]
		STR	R2, [SP,#0x10+var_8]
		LDR	R2, [R0]
		LDR	R0, [R0]
		LDR	R1, [R1,#(usedModelPtr - 0x20000000)]
		LSRS	R0, R7,	#8
		LDRB	R2, [R1,#0xA]
		LSLS	R0, R0,	#8
		ORRS	R0, R2
		MOVS	R2, #0xB
		LDRSB	R2, [R1,R2]
		MOVS	R3, #0xFF00
		LSLS	R2, R2,	#8
		BICS	R0, R3
		ANDS	R2, R3
		ORRS	R0, R2
		LDRB	R2, [R1,#0xC]
		LSLS	R3, R3,	#8
		LSLS	R2, R2,	#0x10
		BICS	R0, R3
		ANDS	R2, R3
		ORRS	R0, R2
		LDRB	R1, [R1,#0xD]
		LSLS	R0, R0,	#8
		LSRS	R0, R0,	#8
		LSLS	R1, R1,	#0x18
		ORRS	R0, R1
		STR	R0, [SP,#0x10+var_C]
		BL	calibrateADC
		BL	configurePINS
		LDRB	R0, [R6,#(lcdBrightnes - 0x200002A4)]
		BL	setLCDBrightnes
		BL	buzzerSetup
		BL	startupWarning
		BL	setupPortsC4_c5_c6_spi_DMA2_DMA3
		BL	configurePINandTimers
		LDRB	R0, [R6,#(currentModel - 0x200002A4)]
		MOVS	R1, #0x92 ; ''
		MULS	R0, R1
		ADDS	R0, R0,	R6
		ADDS	R0, #0x60 ; '`'
		LDRB	R0, [R0,#0xA]
		CMP	R0, #0
		BEQ	loc_C100
		BL	afhd2Init

loc_C100				; CODE XREF: main_screen+E2j
		BL	tpmMethod
		BL	sendPacketWithTimer
		MOVS	R1, #0x32 ; '2'
		LDR	R0, =0x20B
		BL	beep
		MOVS	R1, #0x32 ; '2'
		LDR	R0, =0x293
		BL	beep
		MOVS	R0, #0x31 ; '1'
		MOVS	R1, #0x32 ; '2'
		LSLS	R0, R0,	#4
		BL	beep
		MOVS	R1, #0x32 ; '2'
		LDR	R0, =0x417
		BL	beep
		LDRB	R0, [R6,#(stickModeSW -	0x200002A4)]
		CMP	R0, #1
		BEQ	loc_C134
		CMP	R0, #3
		BNE	loc_C150

loc_C134				; CODE XREF: main_screen+116j
		MOVS	R1, #1
		LDR	R2, [R5]
		LSLS	R1, R1,	#0xA
		CMP	R2, R1
		BCS	loc_C150
		LDR	R2, [R5,#(ch2_ADC_VAL -	0x20000F00)]
		CMP	R2, R1
		BCS	loc_C150
		LDR	R2, [R5,#(ch3_ADC_VAL -	0x20000F00)]
		CMP	R2, R1
		BCS	loc_C150
		LDR	R2, [R5,#(ch4_ADC_VAL -	0x20000F00)]
		CMP	R2, R1
		BCC	loc_C172

loc_C150				; CODE XREF: main_screen+11Aj
					; main_screen+124j ...
		CMP	R0, #0
		BEQ	loc_C158
		CMP	R0, #2
		BNE	loc_C188

loc_C158				; CODE XREF: main_screen+13Aj
		LDR	R0, =byte_BB8
		LDR	R1, [R5]
		CMP	R1, R0
		BLS	loc_C188
		LDR	R1, [R5,#(ch2_ADC_VAL -	0x20000F00)]
		CMP	R1, R0
		BLS	loc_C188
		LDR	R1, [R5,#(ch3_ADC_VAL -	0x20000F00)]
		CMP	R1, R0
		BLS	loc_C188
		LDR	R1, [R5,#(ch4_ADC_VAL -	0x20000F00)]
		CMP	R1, R0
		BLS	loc_C188

loc_C172				; CODE XREF: main_screen+136j
		LDR	R1, =byte_20000000
		MOVS	R0, #1
		STRB	R0, [R1,#(factoryMode -	0x20000000)]
		BL	tpmMethod

loc_C17C				; CODE XREF: main_screen+16Ej
		LDR	R2, =off_D248
		MOVS	R1, #0xB
		LDR	R0, =off_CC40
		BL	factoryModeMenu
		B	loc_C17C
; ---------------------------------------------------------------------------

loc_C188				; CODE XREF: main_screen+13Ej
					; main_screen+146j ...
		LDR	R0, =byte_20000000
		MOVS	R7, #0
		LDR	R6, =timer
		STRB	R7, [R0,#(factoryMode -	0x20000000)]
		LDR	R0, [R6]
		BL	sub_2574
		CMP	R0, #0xFF
		BEQ	loc_C1AC
		BL	getKeyCode
		CMP	R0, #0xC
		BNE	loc_C1AC
		MOVS	R0, #0
		BL	rxBindingPage
		BL	saveModelSettings

loc_C1AC				; CODE XREF: main_screen+180j
					; main_screen+188j
		LDR	R0, [R6]
		LDR	R1, =dword_1FFFF8A8
		MOVS	R0, #0
		STR	R0, [R1]
		LDR	R1, =dword_1FFFF8AC
		STR	R0, [R1]

loc_C1B8				; CODE XREF: main_screen+8B4j
					; main_screen+8F4j
		BL	callSetupDMAandSend
		LDR	R5, =rxsettings
		MOVS	R1, #0x92 ; ''
		LDRB	R0, [R5,#(currentModel - 0x200002A4)]
		MULS	R0, R1
		ADDS	R0, R0,	R5
		ADDS	R0, #0x60 ; '`'
		LDRB	R0, [R0,#0xA]
		CMP	R0, #0
		BEQ	loc_C2CC
		NOP
		NOP
		NOP
		NOP
		NOP
		NOP
		NOP
		NOP
		NOP
		NOP
		NOP
		NOP
		NOP
		NOP
		NOP
		NOP			; a4
		NOP			; y
		NOP			; x
		NOP			; text
		BL	printTimer
		LDR	R7, =byte_20000000
; ---------------------------------------------------------------------------
unk_C1FA	DCB 0xC0 ; À		; a4
		DCB 0x46 ; F
		DCB 0xC0 ; À		; y
		DCB 0x46 ; F
		DCB 0xC0 ; À		; x
		DCB 0x46 ; F
		DCB 0xC0 ; À		; text
		DCB 0x46 ; F
		DCB 0xC0 ; À
		DCB 0x46 ; F
		DCB 0xC0 ; À
		DCB 0x46 ; F
		DCB 0xC0 ; À
		DCB 0x46 ; F
		DCB 0xC0 ; À
		DCB 0x46 ; F
		DCB 0xC0 ; À
		DCB 0x46 ; F
		DCB 0xC0 ; À
		DCB 0x46 ; F
		DCB 0xC0 ; À
		DCB 0x46 ; F
continueModelDisplay			; CODE XREF: main_screen+27Aj
		DCB 0xC0 ; À
		DCB 0x46 ; F
		DCB 0xC0 ; À
		DCB 0x46 ; F
		DCB 0xC0 ; À
		DCB 0x46 ; F
		DCB 0xC0 ; À
		DCB 0x46 ; F
; ---------------------------------------------------------------------------
		LDR	R0, =stickAdjustData ; 40 items
		LDR	R2, =dword_2710
		LDRH	R1, [R0,#(stickAdjustData+0x26 - 0x20000E18)] ;	40 items
		LDR	R0, =ch1_ADC_VAL
		LDR	R0, [R0,#(voltageADC - 0x20000F00)]
		MULS	R0, R2
		BL	div__0
		MOV	R5, R0
		MOVS	R1, #0xA
		BL	div__0
		STR	R0, [SP,#0x10+var_10]
		CMP	R4, #0
		BEQ	loc_C242
		LDR	R0, [R6]
		MOVS	R1, #0x7D ; '}'
		SUBS	R0, R0,	R4
		LSLS	R1, R1,	#4
		CMP	R0, R1
		BCC	loc_C26C

loc_C242				; CODE XREF: main_screen+21Cj
		MOVS	R1, #100
		LDR	R0, [SP,#0x10+var_10]
		BL	div_Other
		LDR	R4, =voltage	; "7.71V"
		ADDS	R0, #0x30 ; '0'
		STRB	R0, [R4]	; "7.71V"
		MOVS	R1, #0xA
		LDR	R0, [SP,#0x10+var_10]
		BL	div_Other
		STR	R1, [SP,#0x10+var_10]
		MOVS	R1, #0xA
		BL	div_Other
		ADDS	R1, #0x30 ; '0'
		STRB	R1, [R4,#(voltage+2 - 0x20000070)] ; "71V"
		LDR	R1, [SP,#0x10+var_10]
		ADDS	R1, #0x30 ; '0'
		STRB	R1, [R4,#(voltage+3 - 0x20000070)] ; "1V"
		LDR	R4, [R6]

loc_C26C				; CODE XREF: main_screen+228j
		LDR	R0, =(byte_DA0+0x2C8)
		CMP	R5, R0
		BCS	loc_C284
		MOVS	R1, #0x7D0
		LDR	R0, [R6]
		BL	div_Other
		MOVS	R0, #0x3E8
		CMP	R1, R0
		BCS	loc_C308

loc_C284				; CODE XREF: main_screen+258j
		MOVS	R0, #0xFA0
		CMP	R5, R0
		BCS	loc_C294
		MOV	R5, R0
		B	loc_C29C
; ---------------------------------------------------------------------------

showPlain
		LDR	R0, =plain_img
		B	continueModelDisplay
; ---------------------------------------------------------------------------

loc_C294				; CODE XREF: main_screen+272j
		LDR	R0, =(byte_1426+0x34A)
		CMP	R5, R0
		BLS	loc_C29C
		MOV	R5, R0

loc_C29C				; CODE XREF: main_screen+276j
					; main_screen+280j
		MOVS	R2, #1
		MOVS	R1, #103
		LDR	R0, =unk_CBB0
		BL	displayGFX
		MOVS	R0, #0xFA0
		SUBS	R0, R5,	R0
		MOVS	R1, #0x13
		MULS	R0, R1
		MOVS	R1, #0x7D0
		BL	div_Other
		MOV	R2, R0
		MOVS	R1, #0
		STR	R1, [SP,#0x10+var_10]
		ADDS	R2, #0x67 ; 'g'
		MOVS	R3, #7
		MOVS	R1, #2
		MOVS	R0, #0x68 ; 'h'
		BL	fillRegion
		B	loc_C2CE
; ---------------------------------------------------------------------------

loc_C2CC				; CODE XREF: main_screen+1B4j
		B	loc_C5DC
; ---------------------------------------------------------------------------

loc_C2CE				; CODE XREF: main_screen+2B2j
		MOVS	R5, #1
		MOVS	R2, #0x6B ; 'k'
		MOVS	R3, #6
		MOVS	R1, #2
		MOV	R0, R2
		STR	R5, [SP,#0x10+var_10]
		BL	fillRegion
		MOVS	R2, #0x70 ; 'p'
		MOVS	R3, #6
		MOVS	R1, #2
		MOV	R0, R2
		STR	R5, [SP,#0x10+var_10]
		BL	fillRegion
		MOVS	R2, #0x75 ; 'u'
		MOVS	R3, #6
		MOVS	R1, #2
		MOV	R0, R2
		STR	R5, [SP,#0x10+var_10]
		BL	fillRegion
		MOVS	R2, #0x7A ; 'z'
		MOVS	R3, #6
		MOVS	R1, #2
		MOV	R0, R2
		STR	R5, [SP,#0x10+var_10]
		BL	fillRegion

loc_C308				; CODE XREF: main_screen+26Aj
		MOVS	R2, #2
; ---------------------------------------------------------------------------
		DCB 0x60 ; `
		DCB 0x21 ; !
; ---------------------------------------------------------------------------
		ADR	R0, unk_C484
		BL	displaySmallTextAt
		LDR	R1, [R6]
		LDR	R0, [SP,#0x10+var_8]
		SUBS	R1, R1,	R0
		LDR	R0, =byte_BB8
		CMP	R1, R0
		BCC	loc_C38E
		LDR	R1, [R7,#(usedModelPtr - 0x20000000)]
		MOVS	R2, #0xA
		LDR	R0, [SP,#0x10+var_C]
		LDRSB	R2, [R1,R2]
		SXTB	R0, R0
		CMP	R2, R0
		BNE	loc_C354
		LDR	R0, [SP,#0x10+var_C]
		MOVS	R3, #0xB
		LDRSB	R3, [R1,R3]
		LSLS	R0, R0,	#0x10
		ASRS	R0, R0,	#0x18
		CMP	R3, R0
		BNE	loc_C354
		LDR	R0, [SP,#0x10+var_C]
		MOVS	R3, #0xC
		LDRSB	R3, [R1,R3]
		LSLS	R0, R0,	#8
		ASRS	R0, R0,	#0x18
		CMP	R3, R0
		BNE	loc_C354
		MOVS	R0, #0xD
		LDR	R3, [SP,#0x10+var_C]
		LDRSB	R0, [R1,R0]
		ASRS	R3, R3,	#0x18
		CMP	R0, R3
		BEQ	loc_C38E

loc_C354				; CODE XREF: main_screen+312j
					; main_screen+320j ...
		LDR	R0, [R6]
		STR	R0, [SP,#0x10+var_8]
		LDR	R0, [SP,#0x10+var_C]
		UXTB	R2, R2
		LSRS	R0, R0,	#8
		LSLS	R0, R0,	#8
		ORRS	R0, R2
		MOVS	R2, #0xB
		LDRSB	R2, [R1,R2]
		MOVS	R3, #0xFF00
		LSLS	R2, R2,	#8
		BICS	R0, R3
		ANDS	R2, R3
		ORRS	R0, R2
		LDRB	R2, [R1,#0xC]
		LSLS	R3, R3,	#8
		LSLS	R2, R2,	#0x10
		BICS	R0, R3
		ANDS	R2, R3
		ORRS	R0, R2
		LDRB	R1, [R1,#0xD]
		LSLS	R0, R0,	#8
		LSRS	R0, R0,	#8
		LSLS	R1, R1,	#0x18
		ORRS	R0, R1
		STR	R0, [SP,#0x10+var_C]
		BL	saveModelSettings

loc_C38E				; CODE XREF: main_screen+304j
					; main_screen+33Aj
		LDR	R0, =studentMode
		LDRB	R0, [R0]
		CMP	R0, #0
		BEQ	loc_C3B0
		MOVS	R2, #9
		MOVS	R1, #0x42 ; 'B'
		ADR	R0, unk_C488
		BL	displaySmallTextAt
		MOVS	R0, #0
		STR	R0, [SP,#0x10+var_10]
		MOVS	R3, #0x10
		MOVS	R2, #0x4A ; 'J'
		MOVS	R1, #8
		MOVS	R0, #0x41 ; 'A'
		BL	drawLine

loc_C3B0				; CODE XREF: main_screen+37Cj
		LDR	R1, [R7,#(usedModelPtr - 0x20000000)]
		MOVS	R0, #0xC
		LDRSB	R0, [R1,R0]
		MOVS	R1, #0x26 ; '&'
		ADDS	R0, #0x78 ; 'x'
		MULS	R0, R1
		MOVS	R1, #0xF0 ; 'ð'
		BL	div__0
		MOVS	R5, #0
		STR	R0, [SP,#0x10+var_4]
		MOVS	R3, #0x3C ; '<'
		MOVS	R2, #3
		MOVS	R1, #0x14
		STR	R5, [SP,#0x10+var_10]
		MOVS	R0, #1
		BL	drawLine
		MOVS	R0, #1
		MOVS	R2, #2
		STR	R0, [SP,#0x10+var_10]
		MOVS	R3, #0x3B ; ';'
		MOVS	R1, #0x15
		MOV	R0, R2
		BL	fillRegion
		MOVS	R3, #0x28 ; '('
		MOVS	R2, #2
		MOV	R1, R3
		MOVS	R0, #1
		STR	R5, [SP,#0x10+var_10]
		BL	sub_4E8C
		LDR	R0, [SP,#0x10+var_4]
		MOVS	R1, #0x3B ; ';'
		SUBS	R1, R1,	R0
		STR	R5, [SP,#0x10+var_10]
		MOV	R3, R1
		MOVS	R2, #2
		MOVS	R0, #1
		BL	sub_4E8C
		LDR	R1, [R7,#(usedModelPtr - 0x20000000)]
		MOVS	R0, #0xD
		LDRSB	R0, [R1,R0]
		MOVS	R1, #0x26 ; '&'
		ADDS	R0, #0x78 ; 'x'
		MULS	R0, R1
		MOVS	R1, #0xF0 ; 'ð'
		B	loc_C48C
; ---------------------------------------------------------------------------
dword_C414	DCD 0xFFFFFC18		; DATA XREF: main_screen+Ar
off_C418	DCD byte_20000000	; DATA XREF: main_screenr
					; main_screen+6Er ...
off_C41C	DCD dword_2710		; DATA XREF: main_screen+1Ar
					; main_screen+202r
; _BYTE	*target
target		DCD stickAdjustData	; DATA XREF: main_screen+18r
					; main_screen+2Ar ...
					; 40 items
dword_C424	DCD 0x2EE0		; DATA XREF: main_screen+20r
off_C428	DCD ch1_ADC_VAL		; DATA XREF: main_screen+1Er
					; main_screen+206r
dword_C42C	DCD 0xD20B		; DATA XREF: main_screen+50r
off_C430	DCD rxsettings		; DATA XREF: main_screen+60r
					; main_screen+1A4r
off_C434	DCD byte_20000160	; DATA XREF: main_screen+62r
off_C438	DCD studentMode		; DATA XREF: main_screen+68r
					; main_screen:loc_C38Er
off_C43C	DCD byte_20000145	; DATA XREF: main_screen+74r
off_C440	DCD timer		; DATA XREF: main_screen+7Ar
					; main_screen+174r
dword_C444	DCD 0x20B		; DATA XREF: main_screen+F2r
dword_C448	DCD 0x293		; DATA XREF: main_screen+FAr
dword_C44C	DCD 0x417		; DATA XREF: main_screen+10Cr
off_C450	DCD byte_BB8		; DATA XREF: main_screen:loc_C158r
					; main_screen+300r
off_C454	DCD off_D248		; DATA XREF: main_screen:loc_C17Cr
off_C458	DCD off_CC40		; DATA XREF: main_screen+168r
off_C45C	DCD dword_1FFFF8A8	; DATA XREF: main_screen+196r
off_C460	DCD dword_1FFFF8AC	; DATA XREF: main_screen+19Cr
		DCD afhd2_logo
		DCD 0x30304D
		DCD heli_img
off_C470	DCD voltage		; DATA XREF: main_screen+232r
					; "7.71V"
off_C474	DCD byte_DA0+0x2C8	; DATA XREF: main_screen:loc_C26Cr
off_C478	DCD plain_img		; DATA XREF: main_screen:showPlainr
off_C47C	DCD byte_1426+0x34A	; DATA XREF: main_screen:loc_C294r
off_C480	DCD unk_CBB0		; DATA XREF: main_screen+288r
unk_C484	DCB 0x54 ; T		; DATA XREF: main_screen+2F4o
		DCB 0, 0, 0
unk_C488	DCB 0x73 ; s		; DATA XREF: main_screen+382o
		DCB 0, 0, 0
; ---------------------------------------------------------------------------

loc_C48C				; CODE XREF: main_screen+3FAj
		BL	div__0
		STR	R0, [SP,#0x10+var_4]
		MOVS	R3, #0x3E ; '>'
		MOVS	R2, #0x38 ; '8'
		MOVS	R1, #0x3C ; '<'
		STR	R5, [SP,#0x10+var_10]
		MOVS	R0, #0x10
		BL	drawLine
		MOVS	R0, #1
		MOVS	R3, #0x3D ; '='
		STR	R0, [SP,#0x10+var_10]
		MOVS	R2, #0x37 ; '7'
		MOV	R1, R3
		MOVS	R0, #0x11
		BL	fillRegion
		MOVS	R2, #0x24 ; '$'
		MOVS	R3, #0x3E ; '>'
		MOVS	R1, #0x3D ; '='
		MOV	R0, R2
		STR	R5, [SP,#0x10+var_10]
		BL	sub_4E8C
		LDR	R2, [SP,#0x10+var_4]
		MOVS	R3, #0x3E ; '>'
		ADDS	R2, #0x11
		STR	R5, [SP,#0x10+var_10]
		MOV	R0, R2
		MOVS	R1, #0x3D ; '='
		BL	sub_4E8C
		LDR	R1, [R7,#(usedModelPtr - 0x20000000)]
		MOVS	R0, #0xA
		LDRSB	R0, [R1,R0]
		MOVS	R1, #0x26 ; '&'
		ADDS	R0, #0x78 ; 'x'
		MULS	R0, R1
		MOVS	R1, #0xF0 ; 'ð'
		BL	div__0
		STR	R0, [SP,#0x10+var_4]
		MOVS	R3, #0x3E ; '>'
		MOVS	R2, #0x71 ; 'q'
		MOVS	R1, #0x3C ; '<'
		STR	R5, [SP,#0x10+var_10]
		MOVS	R0, #0x49 ; 'I'
		BL	drawLine
		MOVS	R0, #1
		MOVS	R3, #0x3D ; '='
		STR	R0, [SP,#0x10+var_10]
		MOVS	R2, #0x70 ; 'p'
		MOV	R1, R3
		MOVS	R0, #0x4A ; 'J'
		BL	fillRegion
		MOVS	R2, #0x5D ; ']'
		MOVS	R3, #0x3E ; '>'
		MOVS	R1, #0x3D ; '='
		MOV	R0, R2
		STR	R5, [SP,#0x10+var_10]
		BL	sub_4E8C
		LDR	R2, [SP,#0x10+var_4]
		MOVS	R3, #0x3E ; '>'
		ADDS	R2, #0x4A ; 'J'
		STR	R5, [SP,#0x10+var_10]
		MOV	R0, R2
		MOVS	R1, #0x3D ; '='
		BL	sub_4E8C
		LDR	R1, [R7,#(usedModelPtr - 0x20000000)]
		MOVS	R0, #0xB
		LDRSB	R0, [R1,R0]
		MOVS	R1, #0x26 ; '&'
		ADDS	R0, #0x78 ; 'x'
		MULS	R0, R1
		MOVS	R1, #0xF0 ; 'ð'
		BL	div__0
		MOV	R7, R0
		MOVS	R3, #0x3C ; '<'
		MOVS	R2, #0x7E ; '~'
		MOVS	R1, #0x14
		MOVS	R0, #0x7C ; '|'
		STR	R5, [SP,#0x10+var_10]
		BL	drawLine
		MOVS	R0, #1
		MOVS	R2, #0x7D ; '}'
		STR	R0, [SP,#0x10+var_10]
		MOVS	R3, #0x3B ; ';'
		MOVS	R1, #0x15
		MOV	R0, R2
		BL	fillRegion
		MOVS	R3, #0x28 ; '('
		MOVS	R2, #0x7E ; '~'
		MOV	R1, R3
		MOVS	R0, #0x7D ; '}'
		STR	R5, [SP,#0x10+var_10]
		BL	sub_4E8C
		MOVS	R0, #0x3B ; ';'
		SUBS	R1, R0,	R7
		MOV	R3, R1
		MOVS	R2, #0x7E ; '~'
		MOVS	R0, #0x7D ; '}'
		STR	R5, [SP,#0x10+var_10]
		BL	sub_4E8C
; ---------------------------------------------------------------------------
		DCB    9
		DCB 0x23 ; #
; ---------------------------------------------------------------------------
		MOVS	R2, #0x79 ; 'y'
		MOV	R1, R3
		MOVS	R0, #8
		STR	R5, [SP,#0x10+var_10]
		BL	drawLine
		MOVS	R2, #7
		MOVS	R3, #0x25 ; '%'
; ---------------------------------------------------------------------------
		DCB  0xA
		DCB 0x21 ; !
; ---------------------------------------------------------------------------
		MOV	R0, R2
		STR	R5, [SP,#0x10+var_10]
		BL	drawLine
		MOVS	R2, #7
		MOVS	R3, #0x39 ; '9'
; ---------------------------------------------------------------------------
		DCB 0x25 ; %
		DCB 0x21 ; !
; ---------------------------------------------------------------------------
		MOV	R0, R2
		STR	R5, [SP,#0x10+var_10]
		BL	drawLine
		MOVS	R2, #0x7A ; 'z'
		MOVS	R3, #0x39 ; '9'
; ---------------------------------------------------------------------------
		DCB  0xA
		DCB 0x21 ; !
; ---------------------------------------------------------------------------
		MOV	R0, R2
		STR	R5, [SP,#0x10+var_10]
		BL	drawLine
		MOVS	R3, #0x3A ; ':'
		MOVS	R2, #0xA
		MOV	R1, R3
		MOVS	R0, #8
		STR	R5, [SP,#0x10+var_10]
		BL	drawLine
		MOVS	R3, #0x3A ; ':'
		MOVS	R2, #0x79 ; 'y'
		MOV	R1, R3
		MOVS	R0, #0x77 ; 'w'
		STR	R5, [SP,#0x10+var_10]
		BL	drawLine
; ---------------------------------------------------------------------------
		DCB 0xC0 ; À
		DCB 0x46 ; F
		DCB 0xC0 ; À
		DCB 0x46 ; F
		DCB 0xC0 ; À
		DCB 0x46 ; F
		DCB 0xC0 ; À
		DCB 0x46 ; F
		DCB 0xC0 ; À
		DCB 0x46 ; F
		DCB 0xC0 ; À
		DCB 0x46 ; F
		DCB 0xC0 ; À
		DCB 0x46 ; F
		DCB 0xC0 ; À
		DCB 0x46 ; F
		DCB 0xC0 ; À
		DCB 0x46 ; F
		DCB 0xC0 ; À
		DCB 0x46 ; F
; ---------------------------------------------------------------------------
		BL	sensorsListMainScreen
		B	loc_C8BE
; ---------------------------------------------------------------------------

loc_C5DC				; CODE XREF: main_screen:loc_C2CCj
		MOVS	R2, #0
		MOVS	R1, #7
		LDR	R0, =afhd_logo
		BL	displayGFX
		LDRB	R0, [R5,#(currentModel - 0x200002A4)]
		MOVS	R2, #2
		ADDS	R0, #1
		LDR	R1, =0x2000009A
		BL	printNumberAsStringAt
		MOVS	R3, #0		; a4
		MOVS	R2, #0x28 ; '('	; y
		MOVS	R1, #8		; x
		LDR	R0, =aModel00	; "Model 00"
		BL	displayTextAt
		LDR	R7, =byte_20000000
		MOVS	R3, #0		; a4
		MOVS	R2, #0x30 ; '0'	; y
		MOVS	R1, #8		; x
		LDR	R0, [R7,#(usedModelPtr - 0x20000000)] ;	text
		BL	displayTextAt
		LDR	R0, [R7,#(usedModelPtr - 0x20000000)]
		LDRB	R0, [R0,#9]
		CMP	R0, #0
		BEQ	loc_C696
		LDR	R0, =heli_img

loc_C616				; CODE XREF: main_screen+680j
		MOVS	R2, #0x18
		MOVS	R1, #0x44 ; 'D'
		BL	displayGFX
		LDR	R0, =stickAdjustData ; 40 items
		LDR	R2, =dword_2710
		LDRH	R1, [R0,#(stickAdjustData+0x26 - 0x20000E18)] ;	40 items
		LDR	R0, =ch1_ADC_VAL
		LDR	R0, [R0,#(voltageADC - 0x20000F00)]
		MULS	R0, R2
		BL	div__0
		MOV	R5, R0
		MOVS	R1, #0xA
		BL	div__0
		STR	R0, [SP,#0x10+var_10]
		CMP	R4, #0
		BEQ	loc_C648
		LDR	R0, [R6]
		MOVS	R1, #0x7D ; '}'
		SUBS	R0, R0,	R4
		LSLS	R1, R1,	#4
		CMP	R0, R1
		BCC	loc_C672

loc_C648				; CODE XREF: main_screen+622j
		MOVS	R1, #0x64 ; 'd'
		LDR	R0, [SP,#0x10+var_10]
		BL	div_Other
		LDR	R4, =voltage	; "7.71V"
		ADDS	R0, #0x30 ; '0'
		STRB	R0, [R4]	; "7.71V"
		MOVS	R1, #0xA
		LDR	R0, [SP,#0x10+var_10]
		BL	div_Other
		STR	R1, [SP,#0x10+var_10]
		MOVS	R1, #0xA
		BL	div_Other
		ADDS	R1, #0x30 ; '0'
		STRB	R1, [R4,#(voltage+2 - 0x20000070)] ; "71V"
		LDR	R1, [SP,#0x10+var_10]
		ADDS	R1, #0x30 ; '0'
		STRB	R1, [R4,#(voltage+3 - 0x20000070)] ; "1V"
		LDR	R4, [R6]

loc_C672				; CODE XREF: main_screen+62Ej
		LDR	R0, =(byte_DA0+0x2C8)
		CMP	R5, R0
		BCS	loc_C68A
		MOVS	R1, #0x7D0
		LDR	R0, [R6]
		BL	div_Other
		MOVS	R0, #0x3E8
		CMP	R1, R0
		BCS	loc_C6DC

loc_C68A				; CODE XREF: main_screen+65Ej
		MOVS	R0, #0xFA0
		CMP	R5, R0
		BCS	loc_C69A
		MOV	R5, R0
		B	loc_C6A2
; ---------------------------------------------------------------------------

loc_C696				; CODE XREF: main_screen+5FAj
		LDR	R0, =plain_img
		B	loc_C616
; ---------------------------------------------------------------------------

loc_C69A				; CODE XREF: main_screen+678j
		LDR	R0, =(byte_1426+0x34A)
		CMP	R5, R0
		BLS	loc_C6A2
		MOV	R5, R0

loc_C6A2				; CODE XREF: main_screen+67Cj
					; main_screen+686j
		MOVS	R3, #0		; a4
		MOVS	R2, #0xC	; y
		MOVS	R1, #0x50 ; 'P'	; x
		LDR	R0, =voltage	; "7.71V"
		BL	displayTextAt
		MOVS	R2, #0
		MOVS	R1, #0x56 ; 'V'
		LDR	R0, =unk_CBA4
		BL	displayGFX
		MOVS	R0, #0xFA0
		SUBS	R0, R5,	R0
		MOVS	R1, #0x17
		MULS	R0, R1
		MOVS	R1, #0x7D0
		BL	div_Other
		MOV	R2, R0
		MOVS	R1, #2
		STR	R1, [SP,#0x10+var_10]
		ADDS	R2, #0x57 ; 'W'
		MOVS	R3, #8
		MOVS	R1, #1
		MOVS	R0, #0x57 ; 'W'
		BL	fillRegion

loc_C6DC				; CODE XREF: main_screen+670j
		LDR	R1, [R6]
		LDR	R0, [SP,#0x10+var_8]
		SUBS	R1, R1,	R0
		LDR	R0, =byte_BB8
		CMP	R1, R0
		BCC	loc_C758
		LDR	R1, [R7,#(usedModelPtr - 0x20000000)]
		MOVS	R2, #0xA
		LDR	R0, [SP,#0x10+var_C]
		LDRSB	R2, [R1,R2]
		SXTB	R0, R0
		CMP	R2, R0
		BNE	loc_C71E
		LDR	R3, [SP,#0x10+var_C]
		MOVS	R0, #0xB
		LDRSB	R0, [R1,R0]
		LSLS	R3, R3,	#0x10
		ASRS	R3, R3,	#0x18
		CMP	R0, R3
		BNE	loc_C71E
		LDR	R3, [SP,#0x10+var_C]
		MOVS	R0, #0xC
		LDRSB	R0, [R1,R0]
		LSLS	R3, R3,	#8
		ASRS	R3, R3,	#0x18
		CMP	R0, R3
		BNE	loc_C71E
		MOVS	R0, #0xD
		LDR	R3, [SP,#0x10+var_C]
		LDRSB	R0, [R1,R0]
		ASRS	R3, R3,	#0x18
		CMP	R0, R3
		BEQ	loc_C758

loc_C71E				; CODE XREF: main_screen+6DCj
					; main_screen+6EAj ...
		LDR	R0, [R6]
		STR	R0, [SP,#0x10+var_8]
		LDR	R0, [SP,#0x10+var_C]
		UXTB	R2, R2
		LSRS	R0, R0,	#8
		LSLS	R0, R0,	#8
		ORRS	R0, R2
		MOVS	R2, #0xB
		LDRSB	R2, [R1,R2]
		MOVS	R3, #0xFF00
		LSLS	R2, R2,	#8
		BICS	R0, R3
		ANDS	R2, R3
		ORRS	R0, R2
		LDRB	R2, [R1,#0xC]
		LSLS	R3, R3,	#8
		LSLS	R2, R2,	#0x10
		BICS	R0, R3
		ANDS	R2, R3
		ORRS	R0, R2
		LDRB	R1, [R1,#0xD]
		LSLS	R0, R0,	#8
		LSRS	R0, R0,	#8
		LSLS	R1, R1,	#0x18
		ORRS	R0, R1
		STR	R0, [SP,#0x10+var_C]
		BL	saveModelSettings

loc_C758				; CODE XREF: main_screen+6CEj
					; main_screen+704j
		LDR	R0, =studentMode
		LDRB	R0, [R0]
		CMP	R0, #0
		BEQ	loc_C77C
		MOVS	R3, #0		; a4
		MOVS	R2, #0x2C ; ','	; y
		MOVS	R1, #0x4D ; 'M'	; x
		ADR	R0, unk_C954	; text
		BL	displayTextAt
		MOVS	R0, #0
		STR	R0, [SP,#0x10+var_10]
		MOVS	R3, #0x34 ; '4'
		MOVS	R2, #0x55 ; 'U'
		MOVS	R1, #0x2A ; '*'
		MOVS	R0, #0x4C ; 'L'
		BL	drawLine

loc_C77C				; CODE XREF: main_screen+746j
		LDR	R1, [R7,#(usedModelPtr - 0x20000000)]
		MOVS	R0, #0xC
		LDRSB	R0, [R1,R0]
		MOVS	R1, #0x2E ; '.'
		ADDS	R0, #0x78 ; 'x'
		MULS	R0, R1
		MOVS	R1, #0xF0 ; 'ð'
		BL	div__0
		MOVS	R5, #0
		STR	R0, [SP,#0x10+var_4]
		MOVS	R3, #0x38 ; '8'
		MOVS	R2, #3
		MOVS	R1, #8
		STR	R5, [SP,#0x10+var_10]
		MOV	R0, R5
		BL	drawLine
		MOVS	R0, #1
		MOVS	R3, #0x37 ; '7'
		MOVS	R2, #2
		MOVS	R1, #9
		STR	R0, [SP,#0x10+var_10]
		BL	fillRegion
		MOVS	R3, #0x20 ; ' '
		MOVS	R2, #2
		MOV	R1, R3
		MOVS	R0, #1
		STR	R5, [SP,#0x10+var_10]
		BL	sub_4E8C
		LDR	R0, [SP,#0x10+var_4]
		MOVS	R1, #0x37 ; '7'
		SUBS	R3, R1,	R0
		STR	R5, [SP,#0x10+var_10]
		MOV	R1, R3
		MOVS	R2, #2
		MOVS	R0, #1
		BL	sub_4E8C
		LDR	R1, [R7,#(usedModelPtr - 0x20000000)]
		MOVS	R0, #0xD
		LDRSB	R0, [R1,R0]
		MOVS	R1, #0x2E ; '.'
		ADDS	R0, #0x78 ; 'x'
		MULS	R0, R1
		MOVS	R1, #0xF0 ; 'ð'
		BL	div__0
		STR	R0, [SP,#0x10+var_4]
		MOVS	R3, #0x3F ; '?'
		MOVS	R2, #0x37 ; '7'
		MOVS	R1, #0x3C ; '<'
		STR	R5, [SP,#0x10+var_10]
		MOVS	R0, #7
		BL	drawLine
		MOVS	R0, #1
		STR	R0, [SP,#0x10+var_10]
		MOVS	R3, #0x3E ; '>'
		MOVS	R2, #0x36 ; '6'
		MOVS	R1, #0x3D ; '='
		MOVS	R0, #8
		BL	fillRegion
		MOVS	R2, #0x1F
		MOVS	R3, #0x3E ; '>'
		MOVS	R1, #0x3D ; '='
		MOV	R0, R2
		STR	R5, [SP,#0x10+var_10]
		BL	sub_4E8C
		LDR	R2, [SP,#0x10+var_4]
		MOVS	R3, #0x3E ; '>'
		ADDS	R2, #8
		STR	R5, [SP,#0x10+var_10]
		MOV	R0, R2
		MOVS	R1, #0x3D ; '='
		BL	sub_4E8C
		LDR	R1, [R7,#(usedModelPtr - 0x20000000)]
		MOVS	R0, #0xA
		LDRSB	R0, [R1,R0]
		MOVS	R1, #0x2E ; '.'
		ADDS	R0, #0x78 ; 'x'
		MULS	R0, R1
		MOVS	R1, #0xF0 ; 'ð'
		BL	div__0
		STR	R0, [SP,#0x10+var_4]
		MOVS	R3, #0x3F ; '?'
		MOVS	R2, #0x78 ; 'x'
		MOVS	R1, #0x3C ; '<'
		STR	R5, [SP,#0x10+var_10]
		MOVS	R0, #0x48 ; 'H'
		BL	drawLine
		MOVS	R0, #1
		STR	R0, [SP,#0x10+var_10]
		MOVS	R3, #0x3E ; '>'
		MOVS	R2, #0x77 ; 'w'
		MOVS	R1, #0x3D ; '='
		MOVS	R0, #0x49 ; 'I'
		BL	fillRegion
		MOVS	R2, #0x60 ; '`'
		MOVS	R3, #0x3E ; '>'
		MOVS	R1, #0x3D ; '='
		MOV	R0, R2
		STR	R5, [SP,#0x10+var_10]
		BL	sub_4E8C
		LDR	R2, [SP,#0x10+var_4]
		MOVS	R3, #0x3E ; '>'
		ADDS	R2, #0x49 ; 'I'
		STR	R5, [SP,#0x10+var_10]
		MOV	R0, R2
		MOVS	R1, #0x3D ; '='
		BL	sub_4E8C
		LDR	R1, [R7,#(usedModelPtr - 0x20000000)]
		MOVS	R0, #0xB
		LDRSB	R0, [R1,R0]
		MOVS	R1, #0x2E ; '.'
		ADDS	R0, #0x78 ; 'x'
		MULS	R0, R1
		MOVS	R1, #0xF0 ; 'ð'
		BL	div__0
		MOV	R7, R0
		MOVS	R3, #0x38 ; '8'
		MOVS	R2, #0x7F ; ''
		MOVS	R1, #8
		MOVS	R0, #0x7C ; '|'
		STR	R5, [SP,#0x10+var_10]
		BL	drawLine
		MOVS	R0, #1
		STR	R0, [SP,#0x10+var_10]
		MOVS	R3, #0x37 ; '7'
		MOVS	R2, #0x7E ; '~'
		MOVS	R1, #9
		MOVS	R0, #0x7D ; '}'
		BL	fillRegion
		MOVS	R3, #0x20 ; ' '
		MOVS	R2, #0x7E ; '~'
		MOV	R1, R3
		MOVS	R0, #0x7D ; '}'
		STR	R5, [SP,#0x10+var_10]
		BL	sub_4E8C
		MOVS	R1, #0x37 ; '7'
		SUBS	R3, R1,	R7
		MOV	R1, R3
		MOVS	R2, #0x7E ; '~'
		MOVS	R0, #0x7D ; '}'
		STR	R5, [SP,#0x10+var_10]
		BL	sub_4E8C

loc_C8BE				; CODE XREF: main_screen+5C2j
		BL	LCD_updateCALL
		LDR	R7, [R6]
		LDR	R0, [R6]
		SUBS	R0, R0,	R7
		CMP	R0, #0x64 ; 'd'
		BCC	loc_C8CE
		B	loc_C1B8
; ---------------------------------------------------------------------------

loc_C8CE				; CODE XREF: main_screen+8B2j
		LDR	R5, =byte_20000000

loc_C8D0				; CODE XREF: main_screen+8F2j
		LDRB	R0, [R5]
		CMP	R0, #0
		BEQ	loc_C8DE
		MOVS	R0, #0
		STRB	R0, [R5]
		BL	saveModelSettings

loc_C8DE				; CODE XREF: main_screen+8BCj
		BL	sub_2574
		CMP	R0, #0xFF
		BEQ	loc_C904
		BL	getKeyCode
		CMP	R0, #0x16
		BNE	loc_C904
		MOVS	R1, #0x4B ; 'K'
		LDR	R0, =0x20B
		BL	beep
		MOVS	R0, #0x31 ; '1'
		MOVS	R1, #0x4B ; 'K'
		LSLS	R0, R0,	#4
		BL	beep
		BL	sub_68A8

loc_C904				; CODE XREF: main_screen+8CCj
					; main_screen+8D4j
		LDR	R0, [R6]
		SUBS	R0, R0,	R7
		CMP	R0, #0x64 ; 'd'
		BCC	loc_C8D0
		B	loc_C1B8
; End of function main_screen

; ---------------------------------------------------------------------------
		ALIGN 0x10
		DCB 0x52 ; R
		DCB 0, 0, 0
		DCD dword_58
off_C918	DCD afhd_logo		; DATA XREF: main_screen+5C8r
dword_C91C	DCD 0x2000009A		; DATA XREF: main_screen+5D4r
; _BYTE	*off_C920
off_C920	DCD aModel00		; DATA XREF: main_screen+5E0r
					; "Model 00"
off_C924	DCD byte_20000000	; DATA XREF: main_screen+5E6r
					; main_screen:loc_C8CEr
off_C928	DCD heli_img		; DATA XREF: main_screen+5FCr
off_C92C	DCD stickAdjustData	; DATA XREF: main_screen+606r
					; 40 items
off_C930	DCD ch1_ADC_VAL		; DATA XREF: main_screen+60Cr
off_C934	DCD dword_2710		; DATA XREF: main_screen+608r
; _BYTE	*off_C938
off_C938	DCD voltage		; DATA XREF: main_screen+638r
					; main_screen+690r
					; "7.71V"
off_C93C	DCD byte_DA0+0x2C8	; DATA XREF: main_screen:loc_C672r
off_C940	DCD plain_img		; DATA XREF: main_screen:loc_C696r
off_C944	DCD byte_1426+0x34A	; DATA XREF: main_screen:loc_C69Ar
off_C948	DCD unk_CBA4		; DATA XREF: main_screen+69Ar
off_C94C	DCD byte_BB8		; DATA XREF: main_screen+6CAr
off_C950	DCD studentMode		; DATA XREF: main_screen:loc_C758r
unk_C954	DCB 0x53 ; S		; DATA XREF: main_screen+74Eo
		DCB 0, 0, 0
dword_C958	DCD 0x20B		; DATA XREF: main_screen+8D8r
dword_C95C	DCD 0x80000000,	0xFFFFFFF8, 0xBF3FFFFF,	0xFFFFFFFF, 0xFFFFFFFF
					; DATA XREF: ROM:0000CB7Co
		DCD 0x9F9FBFBF,	0xFFFFBF9F, 0xFDFFFFFF,	0xB5B5B5FD, 0x95B5B5B5
		DCD 0x95959595,	0x95959595, 0x95959595,	0x1159595, 0xFFF00000
		DCD 0xFFFFFFFF,	0x7E7EFFFF, 0x7F7F7F7F,	0x7F7F7F7F, 0xFEFE7F7F
		DCD 0xFAFAFAFE,	0x5ADADAFA, 0x5A5A5A5A,	0x4A5A5A5A, 0x4A4A4A4A
		DCD 0x4A4A4A4A,	0x4A4A4A4A, 0xA, 0xFFFFFEE0, 0xFFFFFFFF
		DCD 0x700011F, 0x7F7F3F1F, 0xF8FCFFFF, 0xFCF8F8F8, 0xFFFFFFFF
		DCD 0xADAFBFBF,	0xADADADAD, 0xA5A5A5A5,	0xA5A5A5A5, 0xA5A5A5A5
		DCD 0x525A5, 0
		DCB    0
		DCB 0xF0, 0xFC,	0xFC
		DCD 0xF0FCFC1C,	0xFC000000, 0xCCCCFCFC,	0xCCC, 0xC0FCFCFC
		DCD 0xFCFCC0C0,	0xFC0000FC, 0xC0CFCFC, 0xF0F8FC, 0xFC7C3800
		DCD 0x98DCCCCC,	0, 0
		DCB  0xE
		DCB 0xF, 0xF, 3
		DCD 0xF0F0303, 0xF00000E, 0xF0F, 0
		DCB  0xF
		DCB 0xF, 0xF, 0
		DCD 0xF0F0000, 0xF00000F, 0xC0C0F0F, 0x3070F, 0xC0E0600
		DCD 0x70F0F0C, 0, 0
aNo		DCB "No",0              ; DATA XREF: sub_23F4+3Eo
					; ROM:off_24C4o
aOn_0		DCB "On",0              ; DATA XREF: SwitchesAssigPage+CCo
					; SwitchesAssigPage+110o ...
aOk_0		DCB "OK",0              ; DATA XREF: factoryModeMenu+1D2o
					; ROM:off_6D44o
aNo_0		DCB "No",0              ; DATA XREF: FailsafeReset+58o
					; ROM:off_4524o
; _BYTE	aCh[5]
aCh		DCB "Ch",0              ; DATA XREF: ReverseMenu+1Eo
					; ROM:off_9A48o
aYes		DCB "Yes",0             ; DATA XREF: sub_23F4+32o
					; ROM:off_24C0o
aOff_0		DCB "Off",0             ; DATA XREF: ElevonPage:loc_38FEo
					; ROM:off_3AD4o ...
aExp		DCB "Exp",0             ; DATA XREF: DualRateExp+82o
					; ROM:off_3514o
aYes_0		DCB "Yes",0             ; DATA XREF: FailsafeReset+4Co
					; ROM:off_4520o
aMix		DCB "Mix",0
aNor		DCB "Nor",0             ; DATA XREF: ReverseMenu+2Ao
					; ROM:off_9A4Co
aRev		DCB "Rev",0             ; DATA XREF: ReverseMenu+36o
					; ROM:off_9A50o
aUsed		DCB "Used",0
aRate		DCB "Rate",0            ; DATA XREF: DualRateExp+4Eo
					; ROM:off_3510o
aGyro		DCB "Gyro",0            ; DATA XREF: GyroscopePAge+2Eo
					; ROM:off_56E8o
aMode_0		DCB "Mode",0            ; DATA XREF: GyroscopePAge+54o
					; ROM:off_56F4o
aHold		DCB "Hold",0            ; DATA XREF: ThrottleHoldPage+1Ao
					; ROM:off_B978o
aMode_1		DCB "Mode",0            ; DATA XREF: TrainerModePage+24o
					; ROM:off_BAD8o
aSport		DCB "Sport",0           ; DATA XREF: SwitchesAssigPage+50o
					; ROM:off_B678o
aPitch		DCB "Pitch",0           ; DATA XREF: SwashAFRPage+8Co
					; ROM:off_2F28o
aSport_0	DCB "Sport",0           ; DATA XREF: DualRateExp+28o
					; ROM:off_3508o
aValue		DCB "Value",0           ; DATA XREF: GyroscopePAge+74o
					; ROM:off_5700o
aFirst		DCB "first",0           ; DATA XREF: factoryModeMenu+1C6o
					; ROM:off_6D40o
aSlave		DCB "Slave",0           ; DATA XREF: sub_6FE0+A0o
					; sub_6FE0:off_73ECo
aValue_0	DCB "Value",0           ; DATA XREF: ThrottleHoldPage+40o
					; ROM:off_B984o
aNormal_0	DCB "Normal",0          ; DATA XREF: showSingleValuePage+192o
					; ROM:off_4B9Co ...
aSource		DCB "Source",0
aNormal		DCB "Normal",0
aElevon_0	DCB "Elevon",0          ; DATA XREF: ElevonPage+12o
					; ElevonPage+46o ...
aElevon		DCB "Elevon",0          ; DATA XREF: ElevonPage+52o
					; ROM:off_3ACCo
aMixIs		DCB "Mix is",0          ; DATA XREF: sub_6FE0+38o
					; sub_6FE0:off_73D8o
aMaster		DCB "Master",0          ; DATA XREF: sub_6FE0+62o
					; sub_6FE0:off_73E4o
aOffset		DCB "Offset",0          ; DATA XREF: sub_6FE0+11Ao
					; sub_6FE0:off_73FCo
aSwitch		DCB "Switch",0          ; DATA XREF: TrainerModePage+46o
					; ROM:off_BAE4o
aVTail		DCB "V tail",0          ; DATA XREF: vTailPage+12o
					; vTailPage+46o ...
aVTail_0	DCB "V tail",0          ; DATA XREF: vTailPage+52o
					; ROM:off_BE6Co
aIdleUp		DCB "Idle up",0         ; DATA XREF: showSingleValuePage+2Eo
					; ROM:off_4B7Co ...
aAileron	DCB "Aileron",0         ; DATA XREF: SwashAFRPage+3Eo
					; ROM:off_2F20o
aDisplay	DCB "Display",0
aCopyTo		DCB "Copy to",0         ; DATA XREF: modelCopyPage+58o
					; ROM:off_75ACo
aReverse	DCB "Reverse",0         ; DATA XREF: ReverseMenu+12o
					; ROM:off_9A44o
aSubtrim	DCB "Subtrim",0         ; DATA XREF: SubtrimPage+18o
					; ROM:off_B390o
aEngaged	DCB "Engaged",0         ; DATA XREF: ThrottleHoldPage+78o
					; ROM:off_B98Co
aEngaged_0	DCB "Engaged",0         ; DATA XREF: TrainerModePage+72o
					; ROM:off_BAE8o
afhd_logo	DCD PendSV		; DATA XREF: main_screen+5C8o
					; ROM:off_C918o
		DCD dword_24
		DCD dword_C95C
afhd2_logo	DCB 0x52 ; R		; DATA XREF: main_screen+44Co
		DCB 0, 0, 0
		DCB  0xF
		DCB 0, 0, 0
		DCB 0x55 ; U
		DCB 0xD5 ; Õ
		DCB    0
		DCB    0
heli_img	DCB 0x34		; DATA XREF: LCDBrightM+32o
					; ROM:off_5C38o ...
		DCB    0
		DCB    0
		DCB    0
		DCB 0xE
		DCB    0
		DCB    0
		DCB    0
		DCW 0xD5F9
		DCB    0
		DCB    0
plain_img	DCB 0x34		; DATA XREF: LCDBrightM+28o
					; ROM:off_5C34o ...
		DCB    0
		DCB    0
		DCB    0
		DCB  0xE
		DCB 0
		DCB    0
		DCB    0
		DCW 0xD661
		DCB    0
		DCB    0
unk_CBA4	DCB 0x1C		; DATA XREF: main_screen+69Ao
					; ROM:off_C948o
		DCB 0, 0, 0
		DCB  0xA
		DCB 0, 0, 0
		DCB 0xC9 ; É
		DCB 0xD6, 0, 0
unk_CBB0	DCB 0x17		; DATA XREF: sensorsListMainScreen+C6o
					; ROM:off_6868o ...
		DCB    0
		DCB    0
		DCB    0
		DCB    7
		DCB 0, 0, 0
		DCB    1
		DCB 0xD7, 0, 0
dword_CBBC	DCD 0x2E		; DATA XREF: sub_68A8+2o sub_68A8+6r ...
		DCB  0xC
		DCB 0, 0, 0
		DCD dword_D718
off_CBC8	DCD IRQ0		; DATA XREF: sub_68A8+19Ao
					; ROM:off_6A98o
		DCB  0xC
		DCB 0, 0, 0
		DCD unk_D774
unk_CBD4	DCB 0x1E		; DATA XREF: sub_68A8+84o
					; ROM:off_6A74o
		DCB 0, 0, 0
		DCB 0x20
		DCB 0, 0, 0
		DCD off_D7F4
unk_CBE0	DCB 0x5D ; ]		; DATA XREF: sub_68A8+14Eo
					; sub_68A8+1A2o ...
		DCB 0, 0, 0
		DCB  0xC
		DCB 0, 0, 0
		DCD dword_D86C
unk_CBEC	DCB 0x1E		; DATA XREF: sub_68A8+8Eo
					; ROM:off_6A78o
		DCB 0, 0, 0
		DCB 0x20
		DCB 0, 0, 0
		DCB 0x26 ; &
		DCB 0xD9, 0, 0
arrow_gfx	DCB    8		; DATA XREF: sub_23F4+6Eo
					; ROM:off_24CCo ...
		DCB 0, 0, 0
		DCB    8
		DCB 0, 0, 0
		DCB 0x9E ; 
		DCB 0xD9, 0, 0
unk_CC04	DCB    8		; DATA XREF: ReverseMenu+44o
					; ROM:off_9A54o
		DCB 0, 0, 0
		DCB    8
		DCB 0, 0, 0
		DCB 0xA6 ; ¦
		DCB 0xD9, 0, 0
unk_CC10	DCB    5		; DATA XREF: SubtrimPage+92o
					; ROM:off_B398o
		DCB 0, 0, 0
		DCB    5
		DCB 0, 0, 0
		DCB 0xAE ; ®
		DCB 0xD9 ; Ù
		DCB    0
		DCB    0
unk_CC1C	DCB 0x10		; DATA XREF: ReverseMenu:loc_99BAo
					; ROM:off_9A5Co
		DCB 0, 0, 0
		DCB 0x20
		DCB 0, 0, 0
		DCB 0xB3 ; ³
		DCB 0xD9, 0, 0
unk_CC28	DCB 0x10		; DATA XREF: ReverseMenu+76o
					; ROM:off_9A58o
		DCB 0, 0, 0
		DCB 0x20
		DCB 0, 0, 0
		DCB 0xF3 ; ó
		DCB 0xD9, 0, 0
unk_CC34	DCB 0x20		; DATA XREF: SticksMode+30o
					; SticksMode+3Ao ...
		DCB 0, 0, 0
		DCB 0x20
		DCB 0, 0, 0
		DCB 0x33 ; 3
		DCB 0xDA, 0, 0
off_CC40	DCD dword_4C		; DATA XREF: main_screen+168o
					; main_screen:off_C458o
		DCB  0xC
		DCB 0, 0, 0
		DCB 0xB3 ; ³
		DCB 0xDA, 0, 0
aAreYouSure	DCB "Are you sure?",0   ; DATA XREF: sub_23F4+26o
					; ROM:off_24BCo
aAux_Channels_0	DCB "Aux. channels",0   ; DATA XREF: auxChannelsPage+32o
					; ROM:off_F628o
aChannel5	DCB "Channel 5",0
aChannel6	DCB "Channel 6",0
aChannel7	DCB "Channel 7",0
aChannel8	DCB "Channel 8",0
aChannel9	DCB "Channel 9",0
aChannel10	DCB "Channel10",0
aSwashAfr_0	DCB "Swash AFR",0       ; DATA XREF: SwashAFRPage+10o
					; ROM:off_2F18o
aSwashType	DCB "Swash type",0      ; DATA XREF: SwashAFRPage+1Co
					; ROM:off_2F1Co
aElevator	DCB "Elevator",0        ; DATA XREF: SwashAFRPage+66o
					; ROM:off_2F24o
aDualRateExp__0	DCB "Dual rate/exp.",0  ; DATA XREF: DualRateExp+22o
					; DualRateExp+1ECo ...
aVTailEnabled	DCB "V tail enabled",0  ; DATA XREF: ElevonPage+1Eo
					; ROM:off_3AC8o
aEndPoints_0	DCB "End points",0      ; DATA XREF: endpointsPage+24o
					; ROM:off_3CA4o
aFactoryReset	DCB "Factory reset",0
aThisWillRese_1	DCB "This will reset",0 ; DATA XREF: FactoryReset+14o
					; ROM:off_4044o ...
aAllParameters	DCB "all parameters",0  ; DATA XREF: FactoryReset+20o
					; ROM:off_4048o ...
aToTheir_0	DCB "to their",0        ; DATA XREF: FactoryReset+2Co
					; ROM:off_404Co ...
aFactoryDefault	DCB "factory default",0 ; DATA XREF: FactoryReset+38o
					; ROM:off_4050o ...
aPressOk_0	DCB "Press ",0x22,"OK",0x22,0 ; DATA XREF: FactoryReset+44o
					; ROM:off_4054o ...
aToProceed	DCB "to proceed",0      ; DATA XREF: FactoryReset+50o
					; ROM:off_4058o ...
aFirmwareVer_	DCB "Firmware ver.",0
aFlySkyFsI6	DCB "FLY SKY FS-i6",0   ; DATA XREF: FirmwareVerPAge+1Eo
					; ROM:off_36C8o
a1_125Nov2014	DCB "1.1 25-NOV-2014",0 ; DATA XREF: FirmwareVerPAge+2Ao
					; ROM:off_36CCo
aFirmwareUpdate	DCB "Firmware update",0
aThisWillEnter	DCB "This will enter",0 ; DATA XREF: FirmwareUpdatePage+12o
					; ROM:off_47D8o
aFirmwareUpda_0	DCB "firmware update",0 ; DATA XREF: FirmwareUpdatePage+1Eo
					; ROM:off_47DCo
aModeAndHalt	DCB "mode and halt",0   ; DATA XREF: FirmwareUpdatePage+2Ao
					; ROM:off_47E0o
aOtherFunctions	DCB "other functions",0 ; DATA XREF: FirmwareUpdatePage+36o
					; ROM:off_47E4o
aPressOk_1	DCB "Press ",0x22,"OK",0x22,0 ; DATA XREF: FirmwareUpdatePage+42o
					; ROM:off_47E8o
aToProceed_0	DCB "to proceed",0      ; DATA XREF: FirmwareUpdatePage+4Eo
					; ROM:off_47ECo
aUpdateModeOn	DCB "Update mode on",0  ; DATA XREF: FirmwareUpdatePage+7Co
					; ROM:off_47F0o
aSwitchOffAnd	DCB "switch off and",0  ; DATA XREF: FirmwareUpdatePage+88o
					; ROM:off_47F4o
aBackOnToExit	DCB "back on to exit",0 ; DATA XREF: FirmwareUpdatePage+94o
					; ROM:off_47F8o
aGyroscope	DCB "Gyroscope",0
aKeyTest	DCB "Key test",0
aLcdBrightnes_0	DCB "LCD brightness",0  ; DATA XREF: LCDBrightM+10o
					; ROM:off_5C30o
aSystemSetup	DCB "System setup",0
aFunctionsSetup	DCB "Functions setup",0 ; DATA XREF: sub_68A8+FEo
					; ROM:off_6A7Co
aForYouSafety	DCB "For you safety",0  ; DATA XREF: factoryModeMenu+1A2o
					; ROM:off_6D34o
aPleaseTurnOff	DCB "Please turn off",0 ; DATA XREF: factoryModeMenu+1AEo
					; ROM:off_6D38o
aTheReceiver	DCB "the receiver",0    ; DATA XREF: factoryModeMenu+1BAo
					; ROM:off_6D3Co
aThisWillRese_2	DCB "This will reset",0 ; DATA XREF: FailsafeReset+1Co
					; ROM:off_4510o
aAllChannel	DCB "all Channel",0     ; DATA XREF: FailsafeReset+28o
					; ROM:off_4514o
aToTheir	DCB "to their",0        ; DATA XREF: FailsafeReset+34o
					; ROM:off_4518o
aFactoryDefau_0	DCB "factory default",0 ; DATA XREF: FailsafeReset+40o
					; ROM:off_451Co
aPos_Mix	DCB "Pos. mix",0        ; DATA XREF: sub_6FE0+CAo
					; sub_6FE0:off_73F0o
aNeg_Mix	DCB "Neg. mix",0        ; DATA XREF: sub_6FE0+F2o
					; sub_6FE0:off_73F8o
aModelCopy_0	DCB "Model copy",0
aMenuToCopy	DCB 0x22,"MENU",0x22," to copy",0 ; DATA XREF: modelCopyPage+B2o
					; ROM:off_75B4o
aModelName_0	DCB "Model name",0
aModelReset	DCB "Model reset",0     ; DATA XREF: modelResetPage+Co
					; ROM:off_7870o
aOkToReset	DCB 0x22,"OK",0x22," to reset",0 ; DATA XREF: modelResetPage+18o
					; ROM:off_7874o
aModelSelect	DCB "Model select",0    ; DATA XREF: modelSelectPage+Eo
					; ROM:off_7A0Co
aPitchCurve_0	DCB "Pitch curve",0     ; DATA XREF: sub_7B14+8o ROM:namePtro
aWarning	DCB "!! Warning !!",0   ; DATA XREF: startupWarning+50o
					; ROM:off_7C88o
aPlaceAll	DCB "Place all",0       ; DATA XREF: startupWarning+5Co
					; ROM:off_7C8Co
aSwitchesIn	DCB "switches in",0     ; DATA XREF: startupWarning+68o
					; ROM:off_7C90o
aTheirUp	DCB "their up",0        ; DATA XREF: startupWarning+74o
					; ROM:off_7C94o
aPositionAnd	DCB "position and",0    ; DATA XREF: startupWarning+80o
					; ROM:off_7C98o
aLowerThe	DCB "lower the",0       ; DATA XREF: startupWarning+8Co
					; ROM:off_7C9Co
aThrottle	DCB "throttle",0        ; DATA XREF: startupWarning+98o
					; ROM:off_7CA0o
aSticksAdjust	DCB "Sticks adjust",0   ; DATA XREF: SticksAdjustPage+6o
					; ROM:off_AFC0o
aPlaceAllSticks	DCB "Place all sticks",0 ; DATA XREF: SticksAdjustPage+12o
					; ROM:off_AFC4o
aInTheirMiddle	DCB "in their middle",0 ; DATA XREF: SticksAdjustPage+1Eo
					; ROM:off_AFC8o
aPositionAnd_0	DCB "position and",0    ; DATA XREF: SticksAdjustPage+2Ao
					; ROM:off_AFCCo
aPressOk	DCB "Press ",0x22,"OK",0x22,0 ; DATA XREF: SticksAdjustPage+36o
					; ROM:off_AFD0o
aMoveAllSticks	DCB "Move all sticks",0 ; DATA XREF: SticksAdjustPage+B0o
					; ROM:off_AFE8o
aToTheirExtreme	DCB "to their extreme",0 ; DATA XREF: SticksAdjustPage+BCo
					; ROM:off_AFECo
aPositionsAnd	DCB "positions and",0   ; DATA XREF: SticksAdjustPage+C8o
					; ROM:off_AFF0o
aPressOk_2	DCB "Press ",0x22,"OK",0x22,0 ; DATA XREF: SticksAdjustPage+D4o
					; ROM:off_AFF4o
aDefSticksMode	DCB "Def sticks mode",0 ; DATA XREF: SticksMode+22o
					; ROM:off_B13Co
aSticksMode_0	DCB "Sticks mode",0
aStudentMode	DCB "Student mode",0
aThisWillEnte_0	DCB "This will enter",0 ; DATA XREF: StudentModePage+68o
					; ROM:off_B210o
aStudentMode_0	DCB "student mode",0    ; DATA XREF: StudentModePage+74o
					; ROM:off_B214o
aAllSettings	DCB "all settings",0    ; DATA XREF: StudentModePage+80o
					; ROM:off_B218o
aWillBeBypassed	DCB "will be bypassed",0 ; DATA XREF: StudentModePage+8Co
					; ROM:off_B21Co
aThisWillCancel	DCB "This will cancel",0 ; DATA XREF: StudentModePage+1Ao
					; ROM:off_B200o
aStudentMode_1	DCB "student mode",0    ; DATA XREF: StudentModePage+26o
					; ROM:off_B204o
aPressOk_3	DCB "Press ",0x22,"OK",0x22,0 ; DATA XREF: StudentModePage+32o
					; ROM:off_B208o
aToProceed_1	DCB "to proceed",0      ; DATA XREF: StudentModePage+3Eo
					; ROM:off_B20Co
aSwitchesAssign	DCB "Switches assign",0
aFlyMode	DCB "Fly mode",0        ; DATA XREF: SwitchesAssigPage+22o
					; ROM:off_B670o
aIdleMode	DCB "Idle mode",0       ; DATA XREF: SwitchesAssigPage+5Co
					; ROM:off_B67Co
aThro_Hold	DCB "Thro. hold",0      ; DATA XREF: SwitchesAssigPage+9Ao
					; ROM:off_B684o
aUfoMode	DCB "UFO mode",0        ; DATA XREF: SwitchesAssigPage+13Eo
					; ROM:off_B6A4o
aThrottleCurve	DCB "Throttle curve",0  ; DATA XREF: ThrottleCurvePage+8o
					; ROM:off_B81Co
aThrottleHold	DCB "Throttle hold",0
aNotEngaged	DCB "Not engaged",0
aTrainerMode	DCB "Trainer mode",0
aNotEngaged_0	DCB "Not engaged",0     ; DATA XREF: TrainerModePage+7Co
					; ROM:off_BAECo
aTypeSelect	DCB "Type select",0     ; DATA XREF: typeSelectPage+Eo
					; ROM:off_BC18o
aAirplane	DCB "Airplane",0        ; DATA XREF: typeSelectPage+AAo
					; ROM:off_BC28o
aOrGlider	DCB "or glider",0       ; DATA XREF: typeSelectPage+B6o
					; ROM:off_BC2Co
aHelicopter	DCB "Helicopter",0      ; DATA XREF: typeSelectPage+46o
					; ROM:off_BC1Co
aVoltageAdjust	DCB "Voltage adjust",0  ; DATA XREF: ROM:0000BED0o
					; ROM:off_BFC8o
aCurrentPower	DCB "Current power",0
aSupplyVoltage	DCB "supply voltage",0
aElevonEnabled	DCB "Elevon enabled",0  ; DATA XREF: vTailPage+1Eo
					; ROM:off_BE68o
aRxSetup	DCB "RX Setup",0        ; DATA XREF: RxSetupPage+6o
					; ROM:off_91C4o
aAfhds2a	DCB "AFHDS 2A",0        ; DATA XREF: RFStandardPage+1Co
					; ROM:off_9328o
aReceiver	DCB "Receiver",0
PPMOut_FullSTR	DCB "RX signals",0      ; DATA XREF: ROM:00009788o
aFlysky00	DCB "Flysky00",0
		ALIGN 4
		DCB    0
		DCB    0
		DCB    0
		DCB 0x10
byte_D188	DCB 0x64		; DATA XREF: DualRateExp+32Cr
		DCB 0x64 ; d
		DCB 0x64 ; d
		DCB 0x64 ; d
		DCB 0x64 ; d
		DCB 0x64 ; d
		DCB 0x64 ; d
		DCB 0x64 ; d
byte_D190	DCB 0			; DATA XREF: DualRateExp+310r
		DCB    0
		DCB    0
		DCB    0
		ALIGN 8
unk_D198	DCB    0		; DATA XREF: sub_7B14+4o ROM:a3o
		DCB 0x19, 0x32,	0x4B
		DCB 0x64 ; d
		DCB    0
		DCB 0x19
		DCB 0x32 ; 2
		DCB 0x4B ; K
		DCB 0x64 ; d
		DCB 0x32 ; 2
		DCB 0x32 ; 2
		DCB 0x32 ; 2
		DCB 0x11
		DCB    0
		DCB 0x19
		DCB 0x32 ; 2
		DCB 0x4B ; K
		DCB 0x64 ; d
		DCB    0
		DCB 0x19
		DCB 0x32 ; 2
		DCB 0x4B ; K
		DCB 0x64 ; d
		DCB    0
		DCB 0x13
		DCB 0x32 ; 2
		DCB 0x32 ; 2
		DCB 0x32 ; 2
		DCB    1
		DCB    2
		DCB 0x10
		DCB 0x32 ; 2
		DCB 0x32 ; 2
		DCB    0
		DCB 0x10
		DCB 0x32 ; 2
		DCB 0x32 ; 2
		DCB    0
		DCB 0x10
		DCB 0x32 ; 2
		DCB 0x32 ; 2
		DCB    0
		DCB 0x32 ; 2
		DCB 0x32 ; 2
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB 0x64 ; d
		DCB 0x64 ; d
		DCB 0x64 ; d
		DCB 0x64 ; d
		DCB 0x64 ; d
		DCB 0x64 ; d
		DCB 0x64 ; d
		DCB 0x64 ; d
		DCB 0x64 ; d
		DCB 0x64 ; d
		DCB 0x64 ; d
		DCB 0x64 ; d
		DCB    0
		DCB    0
		DCB    1
		DCB    0
		DCB    0
		DCB 0xFF
		DCB 0xFF
		DCB 0xFF
		DCB 0xFF
		DCB 0x32 ; 2
		DCB    0
		DCB 0xFF
		DCB 0x7F ; 
		DCB 0xFF
		DCB 0x7F ; 
		DCB 0xFF
		DCB 0x7F ; 
		DCB 0xFF
		DCB 0x7F ; 
		DCB 0xFF
		DCB 0x7F ; 
		DCB 0xFF
		DCB 0x7F ; 
		DCB    0
		DCB 0x90 ; 
		DCB    1
		DCB 0xA4 ; ¤
		DCB    1
		DCB 0xF4 ; ô
		DCB    1
		DCB    3
		DCB 0x38 ; 8
		DCB    4
		DCB 0xE8 ; è
		DCB    3
		DCB 0xFF
		DCB    0
		DCB 0xFF
		DCB    0
		DCB 0xFF
		DCB    0
		DCB 0xFF
		DCB 0x64 ; d
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
dword_D20C	DCD 0xFF080000,	0xF, 0xFFF08, 0xFF080000, 0xF, 0xFFF08
		DCD 0xFF080000,	0xF, 0x10FFF08,	0x183C28, 0x1020000, 0x2010003
		DCD 0x1020303, 0x2010300, 0
off_D248	DCD aSticksAdjust_0	; DATA XREF: factoryModeMenu+222o
					; ROM:off_6D4Co ...
					; "Sticks adjust"
		DCD SticksAdjustPage+1
		DCB 0x5E ; ^
		DCB 0xDB, 0, 0
		DCD SticksMode+1
		DCB 0x6E ; n
		DCB 0xDB, 0, 0
		DCD keyTestPage+1
		DCB 0x77 ; w
		DCB 0xDB, 0, 0
		DCD sub_5C3C+1
		DCD aLcdBrightness	; "LCD brightness"
		DCD LCDBrightM+1
		DCB 0x8F ; 
		DCB 0xDB, 0, 0
		DCD rxBindingShow+1
		DCD aRfFrequency_0	; "RF frequency"
		DCD sub_7CAC+1
		DCB 0xA1 ; ¡
		DCB 0xDB, 0, 0
		DCD VoltageAdjust+1
		DCB 0xEA ; ê
		DCB 0xDC, 0, 0
		DCD FirmwareUpdatePage+1
		DCD aRestart		; "Restart"
		DCD unk_9929
		DCD aFlashreset		; "FlashReset"
		DCD FactResConfirm+1
byte_D2A0	DCB 0x3D		; DATA XREF: SpeedDistancePage+2o
					; ROM:off_AC44o
		DCB 0xEE ; î
		DCB    0
		DCB    0
		DCB 0x59 ; Y
		DCB 0xAC ; ¬
		DCB    0
		DCB    0
		DCB    6
		DCB 0xEE ; î
		DCB    0
		DCB    0
		DCB 0x61 ; a
		DCB 0x9A ; 
		DCB    0
		DCB    0
		DCB 0x92 ; 
		DCB 0xED ; í
		DCB    0
		DCB    0
		DCB 0x31 ; 1
		DCB 0x98 ; 
		DCB    0
		DCB    0
		DCB 0xA2 ; ¢
		DCB 0xED ; í
		DCB    0
		DCB    0
		DCB 0xAD ; ­
		DCB 0x98 ; 
		DCB    0
		DCB    0
unk_D2C0	DCB 0xB2 ; ²		; DATA XREF: RxSetupPage+2o
					; ROM:pageNameo
		DCB 0xED ; í
		DCB    0
		DCB    0
		DCB 0xC9 ; É
		DCB 0x91 ; 
		DCB    0
		DCB    0
		DCB 0x66 ; f
		DCB 0xEE ; î
		DCB    0
		DCB    0
		DCB 0xAD ; ­
		DCB 0x96 ; 
		DCB    0
		DCB    0
		DCB 0x7E ; ~
		DCB 0xEE ; î
		DCB    0
		DCB    0
		DCB 0xC1 ; Á
		DCB 0xF0 ; ð
		DCB    0
		DCB    0
		DCB 0xE2 ; â
		DCB 0xED ; í
		DCB    0
		DCB    0
		DCB 0x69 ; i
		DCB 0x40 ; @
		DCB    0
		DCB    0
		DCB 0x59 ; Y
		DCB 0xEE ; î
		DCB    0
		DCB    0
		DCB 0xE1 ; á
		DCB 0x36 ; 6
		DCB    0
		DCB    0
		DCB 0x4A ; J
		DCB 0xEE ; î
		DCB    0
		DCB    0
		DCB 0x31 ; 1
		DCB 0x2F ; /
		DCB    0
		DCB    0
		DCB 0xD3 ; Ó
		DCB 0xED ; í
		DCB    0
		DCB    0
		DCB 0x35 ; 5
		DCB 0xAC ; ¬
		DCB    0
		DCB    0
		DCB 0x25 ; %
		DCB 0xEE ; î
		DCB    0
		DCB    0
		DCB 0x71 ; q
		DCB 0x94 ; 
		DCB    0
		DCB    0
		DCB 0x31 ; 1
		DCB 0xEE ; î
		DCB    0
		DCB    0
		DCB 0x35 ; 5
		DCB 0x93 ; 
		DCB    0
		DCB    0
unk_D308	DCB 0xC3 ; Ã		; DATA XREF: sub_68A8:loc_6A46o
					; ROM:off_6A9Co
		DCB 0xDB ; Û
		DCB    0
		DCB    0
		DCD ReverseMenu+1
		DCD 0xDBCB		; endpoints
		DCD 0x3B21
		DCD 0xDBD6		; Display
		DCD 0x3525
		DCD 0xDBDE		; Aux. channels
		DCD auxChannelsPage+1
		DCD aSubtrim_0		; "Subtrim"
		DCD SubtrimPage+1
		DCD aDualRateExp_	; "Dual rate/exp."
		DCD DualRateExp+1
		DCB    3
		DCB 0xDC, 0, 0
		DCD ThrottleCurvePage+1
		DCB 0x12
		DCB 0xDC, 0, 0
		DCD sub_6FE0+1
		DCB 0x16
		DCB 0xDC ; Ü
		DCB    0
		DCB    0
		DCD ElevonPage+1
		DCB 0x1D
		DCB 0xDC, 0, 0
		DCD vTailPage+1
		DCD aSwitchesAssi_0	; "Switches assign"
		DCD SwitchesAssigPage+1
		DCD aThrottleHold_0	; "Throttle hold"
		DCD ThrottleHoldPage+1
unk_D368	DCB 0xC3 ; Ã		; DATA XREF: sub_68A8+14Ao
					; ROM:off_6A84o
		DCB 0xDB, 0, 0
		DCD ReverseMenu+1
		DCB 0xCB ; Ë
		DCB 0xDB, 0, 0
		DCD endpointsPage+1
		DCB 0xD6 ; Ö
		DCB 0xDB, 0, 0
		DCD DisplayChannels+1
		DCB 0xDE ; Þ
		DCB 0xDB, 0, 0
		DCD auxChannelsPage+1
		DCD aSubtrim_0		; "Subtrim"
		DCD SubtrimPage+1
		DCD aDualRateExp_	; "Dual rate/exp."
		DCD DualRateExp+1
		DCB    3
		DCB 0xDC, 0, 0
		DCD ThrottleCurvePage+1
		DCB 0x12
		DCB 0xDC, 0, 0
		DCD sub_6FE0+1
		DCB 0x42 ; B
		DCB 0xDC ; Ü
		DCB    0
		DCB    0
		DCD GyroscopePAge+1
		DCD aSwitchesAssi_0	; "Switches assign"
		DCD SwitchesAssigPage+1
		DCD aThrottleHold_0	; "Throttle hold"
		DCD ThrottleHoldPage+1
unk_D3C0	DCB 0xC3 ; Ã		; DATA XREF: sub_68A8+1AEo
					; ROM:off_6AA0o
		DCB 0xDB ; Û
		DCB    0
		DCB    0
		DCD ReverseMenu+1
		DCB 0xCB ; Ë
		DCB 0xDB, 0, 0
		DCD endpointsPage+1
		DCB 0xD6 ; Ö
		DCB 0xDB, 0, 0
		DCD DisplayChannels+1
		DCB 0xDE ; Þ
		DCB 0xDB, 0, 0
		DCD auxChannelsPage+1
		DCD aSubtrim_0		; "Subtrim"
		DCD SubtrimPage+1
		DCD aDualRateExp_	; "Dual rate/exp."
		DCD DualRateExp+1
		DCB    3
		DCB 0xDC, 0, 0
		DCD ThrottleCurvePage+1
		DCD aPitchCurve		; "Pitch Curve"
		DCD sub_7B14+1
		DCB 0x12
		DCB 0xDC ; Ü
		DCB    0
		DCB    0
		DCB 0xE1 ; á
		DCB 0x6F ; o
		DCB    0
		DCB    0
		DCB 0x42 ; B
		DCB 0xDC ; Ü
		DCB    0
		DCB    0
		DCB 0x6D ; m
		DCB 0x55 ; U
		DCB    0
		DCB    0
		DCB 0x24 ; $
		DCB 0xDC ; Ü
		DCB    0
		DCB    0
		DCB 0xA1 ; ¡
		DCB 0xB3 ; ³
		DCB    0
		DCB    0
		DCB 0x34 ; 4
		DCB 0xDC ; Ü
		DCB    0
		DCB    0
		DCB 0x21 ; !
		DCB 0xB8 ; ¸
		DCB    0
		DCB    0
unk_D420	DCB 0xC3 ; Ã		; DATA XREF: sub_68A8:loc_6A62o
					; ROM:off_6AA4o
		DCB 0xDB, 0, 0
		DCD ReverseMenu+1
		DCB 0xCB ; Ë
		DCB 0xDB, 0, 0
		DCD endpointsPage+1
		DCB 0xD6 ; Ö
		DCB 0xDB, 0, 0
		DCD DisplayChannels+1
		DCB 0xDE ; Þ
		DCB 0xDB ; Û
		DCB    0
		DCB    0
		DCD auxChannelsPage+1
		DCD aSubtrim_0		; "Subtrim"
		DCD SubtrimPage+1
		DCD aDualRateExp_	; "Dual rate/exp."
		DCD DualRateExp+1
		DCB    3
		DCB 0xDC, 0, 0
		DCD ThrottleCurvePage+1
		DCD aPitchCurve		; "Pitch Curve"
		DCD sub_7B14+1
		DCD aSwashAfr		; "Swash AFR"
		DCD SwashAFRPage+1
		DCB 0x12
		DCB 0xDC, 0, 0
		DCD sub_6FE0+1
		DCB 0x42 ; B
		DCB 0xDC, 0, 0
		DCD GyroscopePAge+1
		DCD aSwitchesAssi_0	; "Switches assign"
		DCD SwitchesAssigPage+1
		DCD aThrottleHold_0	; "Throttle hold"
		DCD ThrottleHoldPage+1
unk_D488	DCB 0x62 ; b		; DATA XREF: sub_68A8:loc_6A3Eo
					; ROM:off_6A94o ...
		DCB 0xDC, 0, 0
		DCD modelSelectPage+1
		DCB 0x6F ; o
		DCB 0xDC, 0, 0
		DCD modelNamePAge+1
		DCB 0x7A ; z
		DCB 0xDC, 0, 0
		DCD typeSelectPage+1
		DCB 0x86 ; 
		DCB 0xDC, 0, 0
off_D4A4	DCD modelCopyPage+1	; DATA XREF: ibussetupmenu:loc_9530o
					; ROM:off_9658o
		DCB 0x91 ; 
		DCB 0xDC, 0, 0
		DCD modelResetPage+1
		DCD aRxSetup_0		; "RX Setup"
		DCD RxSetupPage+1
		DCB 0x9D ; 
		DCB 0xDC, 0, 0
		DCD TrainerModePage+1
		DCB 0xAA ; ª
		DCB 0xDC, 0, 0
		DCD StudentModePage+1
		DCB 0xB7 ; ·
		DCB 0xDC, 0, 0
		DCD timerConfiguration+1
		DCB 0xC1 ; Á
		DCB 0xDC, 0, 0
		DCD SticksMode+1
		DCB 0xCD ; Í
		DCB 0xDC, 0, 0
		DCD LCDBrightM+1
		DCD aFirmwareVer__0	; "Firmware ver."
		DCD FirmwareVerPAge+1
		DCB 0xEA ; ê
		DCB 0xDC, 0, 0
		DCD FirmwareUpdatePage+1
		DCB 0xFA ; ú
		DCB 0xDC, 0, 0
		DCD FactoryReset+1
aAssigningCh	DCB "Assigning Ch",0    ; DATA XREF: ibussetupmenu+C6o
		DCB 0, 0, 0
dword_D508	DCD 0			; DATA XREF: ibussetupmenu+D0r
aMot		DCB " Mot",0            ; DATA XREF: getSensorNameObsolet:loc_5328o
					; ROM:off_5350o
		DCB 0, 0, 0
aTem		DCB " Tem",0            ; DATA XREF: getSensorNameObsolet:loc_532Co
					; ROM:off_5354o
		DCB 0, 0, 0
aIntv		DCB "IntV",0            ; DATA XREF: getSensorNameObsolet:loc_5330o
					; ROM:off_5358o
		DCB 0, 0, 0
aExtv		DCB "ExtV",0            ; DATA XREF: getSensorNameObsolet:loc_5334o
					; ROM:off_535Co
		DCB 0, 0, 0
aOdo2		DCB "Odo2",0            ; DATA XREF: getSensorNameObsolet:loc_5338o
					; ROM:off_5360o
		DCB 0, 0, 0
aOdo1		DCB "Odo1",0            ; DATA XREF: getSensorNameObsolet:loc_533Co
					; ROM:off_5364o
		DCB 0, 0, 0
aSpe		DCB " Spe",0            ; DATA XREF: getSensorNameObsolet:loc_5340o
					; ROM:off_5368o
		DCB 0, 0, 0
aTx_v		DCB "Tx.V",0            ; DATA XREF: getSensorNameObsolet:loc_5344o
					; ROM:off_536Co
		DCB 0, 0, 0
aErr		DCB " Err",0            ; DATA XREF: getSensorNameObsolet:loc_5348o
					; ROM:off_5370o
		DCB 0, 0, 0
dword_D554	DCD 0xF8000000,	0x6FFFFFFF, 0xFFFFFFFF,	0xE7E7E7FF, 0x5FDFDFCF
					; DATA XREF: getSensorNameObsolet:loc_5324o
					; ROM:off_534Co ...
		DCD 0x5555555D,	0x55555555, 0x55555555,	0x15555555, 0x1F3E3105
		DCD 0x303E1F13,	0x93F3F00, 0x3F3F0001, 0x3F3F0404, 0x213F3F00
		DCD 0x26001E3F,	0x193D2D2F, 0x39310000,	0x262F29, 0x131F3E30
		DCD 0x70303E1F,	0x1F7F7F7F, 0x3C1C0007,	0x7179793D, 0x7F7F7B73
		DCD 0x55555F5F,	0x55555555, 0x55555555,	0x1051555, 0, 0
		DCD 0, 0, 0, 0,	0, 0, 0, 0, 0, 0
		DCB    0
		DCB 1, 1, 1
		DCB    1
		DCB 1, 0x81, 0xC1
		DCB 0xE1 ; á
		DCB 0xE1, 0xF1,	0xF1
		DCB 0xE9 ; é
		DCB 0xE9, 0xC5,	0xC5
		DCB 0x45 ; E
		DCB 0x3F ; ?
		DCB    7
		DCB 0x85 ; 
		DCB 0x45 ; E
		DCB 0x25 ; %
		DCB 0x95 ; 
		DCB 0x9D ; 
		DCB 0x49 ; I
		DCB 0x49 ; I
		DCB 0x51 ; Q
		DCB 0x11
		DCB 0x91 ; 
		DCB 0x91 ; 
		DCB 0xA1 ; ¡
		DCB 0xA1 ; ¡
		DCB 0xA1 ; ¡
		DCB 0xA1 ; ¡
		DCB 0xA1 ; ¡
		DCB 0xA0 ;  
		DCB 0xA0 ;  
		DCB 0xA0 ;  
		DCB 0xA0 ;  
		DCB 0xA0 ;  
		DCB 0xA0 ;  
		DCB 0xA0 ;  
		DCB 0xA0 ;  
		DCB 0xA0 ;  
		DCB 0xA0 ;  
		DCB 0xA0 ;  
		DCB 0xE0 ; à
		DCB 0xA0 ;  
		DCB 0xA0 ;  
		DCB 0xFF
		DCB 0xEF ; ï
		DCB 0xE0 ; à
		DCB 0x40 ; @
		DCB    0
		DCB    0
		DCB    0
		DCB    2
		DCB    3
		DCB 0x33 ; 3
		DCB 0x27 ; '
		DCB 0x25 ; %
		DCB 0x29 ; )
		DCB 0x29 ; )
		DCB 0x29 ; )
		DCB 0x29 ; )
		DCB 0x29 ; )
		DCB 0x39 ; 9
		DCB 0x28 ; (
		DCB 0x28 ; (
		DCB 0x28 ; (
		DCB 0x29 ; )
		DCB 0x28 ; (
		DCB 0x3A ; :
		DCB 0x2D ; -
		DCB 0x2C ; ,
		DCB 0x22 ; "
		DCB 0x22 ; "
		DCB    1
		DCB    1
		DCB    1
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB 0x1E, 0x1F,	0
		DCD 0xA040FE00,	0xF0F0F020, 0xFCFCF8F8,	0x8080808, 0x51929214
		DCD 0x51515151,	0x12929291, 0x808080C, 0x10080808, 0x10101010
		DCD 0x20201010,	0x20202020, 0xBF818698,	0xFFF, 0x7030101
		DCD 0x7070707, 0x60C3434, 0x4040405, 0x4040404,	0x5040404
		DCD 0x2060505, 0x2020202, 0x2020202, 0x2020202,	0x1B060202
		DCD 0x202021A, 0x101FF01, 0x1FF0101, 0xFF010101, 0x1010101
		DCD 0x10101FF, 0x101FF01, 0x78FF0101, 0x2020378, 0x2030202
		DCD 0x3020202, 0x2020202, 0x2020203, 0x2020302,	0x30202
		DCD 0x41417F00,	0x417F4141, 0x7F414141,	0x41414141, 0x4141417F
		DCD 0x1C1C7F41
dword_D718	DCD 0xFC0FFFFF,	0xFCE000E0, 0xFFFF0F, 0x63FFFF00, 0x63636363
					; DATA XREF: ROM:0000CBC4o
		DCD 0x6363, 0x1C0EFFFF,	0x80E070
		DCD 0xFFFF
		DCD 0xFFFF, 0
		DCD 0xF0FFFFF, 0xF070000, 0xF000007, 0xF00000F,	0xC0C0C0F
		DCD 0xC0C0C0C, 0xF0F0000, 0
		DCB    3
		DCB 7, 0xF, 0xF
		DCD 0x7030000, 0xC0C0C0E, 0x3070E0C
unk_D774	DCB 0x1C		; DATA XREF: ROM:0000CBD0o
		DCB 0x3E, 0x33,	0x73
		DCB 0x63 ; c
		DCB 0x63, 0xE7,	0xCE
		DCB 0x8C ; 
		DCB 0, 3, 7
		DCB 0x1E
		DCB 0x38, 0xE0,	0xE0
		DCB 0x38 ; 8
		DCB 0x1E, 7, 3
		DCB    0
		DCB 0x1C, 0x3E,	0x33
		DCB 0x73 ; s
		DCB 0x63, 0x63,	0xE7
		DCB 0xCE ; Î
		DCB 0x8C, 0, 3
		DCD 0xFF030303,	0x30303FF, 0xFFFF0003, 0x63636363, 0x636363
		DCD 0xFFFFF00, 0xE000E0FC, 0xFFFF0FFC, 0xC0E0703, 0x70E0C0C
		DCD 3, 0xF0F0000, 0
		DCB    0
		DCB 3, 7, 0xE
		DCD 0xE0C0C0C, 0x307, 0xF000000, 0xF, 0xF0F0000, 0xC0C0C0C
		DCD 0xC0C0C, 0xF0F00, 0x70F0700, 0xF0F0000
off_D7F4	DCD dword_80		; DATA XREF: ROM:0000CBDCo
		DCD 0x8888F000,	0x8888C8C8, 0xFFFFEA88,	0x888888EA, 0x8888C8C8
		DCD 0xF0, 0xF9F08000, 0x4183260E, 0x43212141, 0x8288D47
		DCD 0x28090A0C,	0x2143478D, 0x83414121,	0xF0F90E26, 0x4680FFFF
		DCD 0x46202019,	0x19202046, 0x23E30046,	0x201906E0, 0x20464620
		DCD 0x80461920,	0xBF9FFFFF, 0xE5A5A1B3,	0xE1E1E1E1, 0xA1A1A1A1
		DCD 0xA1A1A1A1,	0xEDE1ADA1, 0xEDE1EDE1,	0x9FBFB3A1
dword_D86C	DCD 0x6363FFFF,	0x3636363, 0xFFFF0000, 0 ; DATA	XREF: ROM:0000CBE8o
		DCD 0xFFFF0000,	0xFFFF0000, 0xE0701C0E,	0xFFFF0080, 0xFEF80000
		DCD 0x3030306, 0x40E0703, 0x3030300, 0x3FFFF03,	0x30303
		DCD 0xFFFF, 0x306FEF8, 0x6030303, 0xF8FE, 0x1C0EFFFF, 0x80E070
		DCD 0xFFFF, 0x73333E1C,	0xCEE76363, 0xF0F8C, 0
		DCD 0x3000000, 0xC0C0E07, 0x70E0C0C, 0xF000003,	0xF, 0xF070300
		DCD 0x100000F, 0xC0C0607, 0x70E0C0C, 2,	0xF0F0000, 0
		DCB    0
		DCB 0xF, 0xF, 0
		DCD 0x6070100, 0xC0C0C0C, 0x10706, 0xF0F00, 0x3000000
		DCD 0xF0F07, 0xE070300,	0xE0C0C0C, 0x307, 0xFCF80000, 0xC0E0FFFE
		DCD 0x80808080,	0xE0C08080, 0xF8FCFEFF,	0, 0
		DCB 0x80 ; 
		DCB 0x80, 0x80,	0x80
		DCD 0x7030180, 0xFFFF1F0F, 0xFFFFFFFF, 0x43478F1F, 0x40404041
		DCD 0x40404040,	0x3038040, 0x1030303, 0x1010101, 0xFEFEFEFE
		DCD 0x301FEFE, 0x5050504, 0x5050505, 0x3040505,	0, 0
		DCD 0xFFFF0000,	0xFFFFFFFF, 0, 0, 0
		DCD 0x1C1C0000,	0x1C3E7F1C, 0x18080008,	0x183F7F3F, 0xC040008
		DCD 0xFE040C1F,	0xF9F9F103, 0xF9F9F9F9,	0xF1F9F9F9, 0xFF00FE03
		DCD 0x7E7E3F00,	0x7E7E7E7E, 0x3F7E7E7E,	0xFF00FF00, 0
		DCD 0, 0
		DCB    0
		DCB 0xFF, 0, 0x3F
		DCB "`@@@@@@@@@@@`?",0
		DCB 0xFE
		DCB    3
		DCB 1, 1, 1
		DCD 0x1010101, 0x1010101, 0xFF00FE03, 0, 0, 0
		DCB    0
		DCB 0xFF, 0, 0xFF
		DCD 0xDFDFFE00,	0xDFDFDFDF, 0xFEDFDFDF,	0x3F00FF00, 0x4F4F4740
		DCD 0x4F4F4F4F,	0x474F4F4F, 0x3F60, 0xE0800000,	0xC183070
		DCD 0x606060C, 0xFFFF0706, 0x6060607, 0x180C0C06, 0x80E07030
		DCD 0xE0000000,	0x80839FFC, 0x80808080,	0x80808080, 0x7F7FE0C0
		DCD 0x8080C0E0,	0x80808080, 0x83808080,	0x7E0FC9F, 0x1C1F93F
		DCD 0x1010101, 0x1010101, 0xFEFE0703, 0x1010307, 0x1010101
		DCD 0xC1010101,	0x73FF9, 0x7010000, 0x38180C0E,	0x60607030
		DCD 0xFFFFC060,	0x606060C0, 0x18303060,	0x1070E0C, 0xFF000000
		DCD 0x636363FF,	0x36363, 0xFCE00000, 0xFC9F839F, 0xE0
		DCD 0x306FEF8, 0x7030303, 0x300040E, 0xFF030303, 0x30303FF
		DCD 0xFEF80003,	0x3030306, 0xF8FE0603, 0xFFFF0000, 0xE3636363
		DCD 0x1C3EB7E3,	0x1E070300, 0x38E0E038,	0xF03071E, 0xF
		DCD 0
		DCB    8
		DCB 0xF, 7, 1
		DCD 0x1010101, 0x80F07,	0xC060701, 0xE0C0C0C, 0x207, 0xF000000
		DCD 0xF, 0x7010000, 0xC0C0C06, 0x107060C, 0xF0F0000, 0
		DCB    1
		DCB 7, 0xF, 0xC
		DCD 8, 0xF0F00,	0x4E000000, 0x656E6F
aSticksAdjust_0	DCB "Sticks adjust",0   ; DATA XREF: ROM:off_D248o
		DCB 0x44 ; D
aEfSticksMode	DCB "ef sticks mode",0
aKeyTest_0	DCB "Key test",0
		DCB 0x4C
		DCD 0x74204443
		DCB 0x65 ; e
		DCB 0x73, 0x74,	0
aLcdBrightness	DCB "LCD brightness",0  ; DATA XREF: ROM:0000D268o
aBind_0		DCB "Bind",0
aRfFrequency_0	DCB "RF frequency",0    ; DATA XREF: ROM:0000D278o
aVoltageAdjus_0	DCB "Voltage adjust",0
aRestart	DCB "Restart",0         ; DATA XREF: ROM:0000D290o
aFlashreset	DCB "FlashReset",0      ; DATA XREF: ROM:0000D298o
aReverse_0	DCB "Reverse",0
aEndPoints	DCB "End points",0
aDisplay_0	DCB "Display",0
aAux_Channels	DCB "Aux. channels",0
aSubtrim_0	DCB "Subtrim",0         ; DATA XREF: ROM:0000D328o
					; ROM:0000D388o ...
aDualRateExp_	DCB "Dual rate/exp.",0  ; DATA XREF: ROM:0000D330o
					; ROM:0000D390o ...
aThrottleCurv_0	DCB "Throttle Curve",0
		DCB 0x4D ; M
		DCB 0x69
		DCD 0x6C450078,	0x6E6F7665, 0x74205600,	0x6C6961
aSwitchesAssi_0	DCB "Switches assign",0 ; DATA XREF: ROM:0000D358o
					; ROM:0000D3B0o ...
aThrottleHold_0	DCB "Throttle hold",0   ; DATA XREF: ROM:0000D360o
					; ROM:0000D3B8o ...
		DCB 0x47 ; G
aYroscope	DCB "yroscope",0
aPitchCurve	DCB "Pitch Curve",0     ; DATA XREF: ROM:0000D3F8o
					; ROM:0000D458o
aSwashAfr	DCB "Swash AFR",0       ; DATA XREF: ROM:0000D460o
		DCB 0x4D ; M
aOdelSelect_0	DCB "odel select",0
		DCB 0x4D
		DCD 0x6C65646F
		DCB 0x20
aName		DCB "name",0
aTypeSelect_0	DCB "Type select",0
aModelCopy	DCB "Model copy",0
		DCB 0x4D, 0x6F,	0x64
		DCD 0x72206C65
		DCB 0x65 ; e
		DCB 0x73, 0x65,	0x74
		DCD 0x61725400,	0x72656E69, 0x646F6D20,	0x74530065, 0x6E656475
		DCD 0x6F6D2074,	0x54006564, 0x72656D69,	0, 0x69745300
		DCD 0x20736B63,	0x65646F6D, 0x44434C00
		DCD 0x69726220
		DCB 0x67 ; g
aHtness		DCB "htness",0
aFirmwareVer__0	DCB "Firmware ver.",0   ; DATA XREF: ROM:0000D4E0o
		DCB 0x46 ; F
aIrmwareUpdate	DCB "irmware update",0
aFactoryReset_0	DCB "Factory reset",0
aRxSetup_0	DCB "RX Setup",0        ; DATA XREF: ROM:0000D4B0o
		DCB 3, 1, 2
		DCD 0x2010000, 0x2010003, 0x2010303, 0x1020300,	0x2010000
		DCD 0x1020303, 0x2010000, 3, 0
		DCB    0
		DCB 0x7E, 0x81,	0x95
dword_DD3C	DCD 0x8195B1B1,	0xEBFF7E7E, 0xFFEBCFCF,	0x3F1F0E7E, 0xE1F3F7E
		DCD 0x3E1C0800,	0x81C3E7F, 0x9F3A3800, 0x383A9FFF, 0xBE3C1800
		DCD 0x183CBEFF,	0x18000000, 0x183C3C, 0xE7FFFF00, 0xFFE7C3C3
		DCD 0x663C00FF,	0x3C664242, 0x99C3FF00,	0xC399BDBD, 0x88F870FF
		DCD 0x77FFD88, 0x5F4E000F, 0x4E5FF1F1, 0xFFE0C000, 0x705057F
		DCD 0x7FFFC007,	0x7F650505, 0x3C5A5A3F,	0x5A3CE7E7, 0x3E3E7F5A
		DCD 0x8081C1C, 0x1C080800, 0x7F3E3E1C, 0x66240000, 0x2466FFFF
		DCD 0x5F5F0000,	0x5F5F0000, 0x90F0600, 0x7F017F7F, 0xBF9A407F
		DCD 0x59FDA5A5,	0x70700002, 0x70707070,	0xB6948000, 0x94B6FFFF
		DCD 0x6040080, 0x4067F7F, 0x30100000, 0x10307F7F, 0x8080800
		DCD 0x81C3E2A, 0x3E1C0800, 0x808082A, 0x203C3C00, 0x20202020
		DCD 0x3E1C0800,	0x1C3E0808, 0x3C383008,	0x383C3E3E, 0x1E0E0630
		DCD 0xE1E3E3E, 6, 0
		DCD 0x6000000, 0x65F5F,	0x7030000, 0x3070000, 0x7F7F1400
		DCD 0x147F7F14,	0x2E240000, 0x123A6B6B,	0x30664600, 0x62660C18
		DCD 0x4F7A3000,	0x487A375D, 0x4000000, 0x307, 0x1C000000
		DCD 0x41633E, 0x41000000, 0x1C3E63, 0x3E2A0800,	0x2A3E1C1C
		DCD 0x8080008, 0x8083E3E, 0x80000000, 0x60E0, 0x8080000
		DCD 0x8080808, 0
		DCB 0x60 ; `
		DCB 0x60, 0, 0
		DCB    0
		DCB 0x60, 0x30,	0x18
		DCD 0x103060C, 0x633E1C00, 0x1C3E6349, 0x42400000, 0x40407F7F
		DCD 0x71634200,	0x666F4959, 0x49632200,	0x367F4949, 0x161C1800
		DCD 0x507F7F53,	0x496F2F00, 0x31794949,	0x4B7E3C00, 0x30784949
		DCD 0x71030300,	0x3070D79, 0x497F3600, 0x367F4949, 0x494F0600
		DCD 0x1E3F6949,	0
		DCB 0x66 ; f
		DCB 0x66, 0, 0
		DCD 0x80000000,	0x66E6,	0x8000000, 0x4163361C, 0x24240000
		DCD 0x24242424,	0x63410000, 0x81C36, 0x1030200,	0x2075D59
		DCD 0x417F3E00,	0x1E1F5D5D, 0xB7E7C00, 0x7C7E0B09, 0x7F7F4100
		DCD 0x367F4949,	0x633E1C00, 0x22634141,	0x7F7F4100, 0x1C3E6341
		DCD 0x7F7F4100,	0x63415D49, 0x7F7F4100,	0x3011D49, 0x633E1C00
		DCD 0x72335141,	0x87F7F00, 0x7F7F0808, 0x41000000, 0x417F7F
		DCD 0x40703000,	0x13F7F41, 0x7F7F4100, 0x63771C08, 0x7F7F4100
		DCD 0x70604041,	0xE7F7F00, 0x7F7F0E1C, 0x67F7F00, 0x7F7F180C
		DCD 0x417F3E00,	0x3E7F4141, 0x7F7F4100,	0x60F0949, 0x417F3E00
		DCD 0xBEFFE141,	0x7F7F4100, 0x667F1909,	0x67220000, 0x2273594D
		DCD 0x43070000,	0x7437F7F, 0x407F3F00, 0x3F7F4040, 0x603F1F00
		DCD 0x1F3F6040,	0x607F3F00, 0x3F7F6038,	0x1C776300, 0x63771C08
		DCD 0x4F070000,	0x74F7878, 0x71634700, 0x73674D59, 0x7F000000
		DCD 0x41417F, 0x6030100, 0x6030180C, 0x41000000, 0x7F7F41
		DCD 0x60C0800, 0x80C0603, 0x80808000, 0x80808080, 0x1000080
		DCD 0x40603, 0x54742000, 0x40783C54, 0x3F7F4100, 0x387C4444
		DCD 0x447C3800,	0x286C4444, 0x447C3800,	0x407F3F45, 0x547C3800
		DCD 0x185C5454,	0x7F7E4800, 0x2030949, 0xA4BC9800, 0x47CF8A4
		DCD 0x7F7F4100,	0x787C0408, 0x44000000,	0x407D7D, 0xE0600000
		DCD 0x7DFD8080,	0x7F7F4100, 0x446C3810,	0x41000000, 0x407F7F
		DCD 0xC7C7C00, 0x787C0C78, 0x787C0400, 0x787C0404, 0x447C3800
		DCD 0x387C4444,	0xF8FC8400, 0x183C24A4,	0x243C1800, 0x84FCF8A4
		DCD 0x787C4400,	0x80C044C, 0x545C4800, 0x24745454, 0x3F040400
		DCD 0x2064447F,	0x407C3C00, 0x407C3C40,	0x603C1C00, 0x1C3C6040
		DCD 0x607C3C00,	0x3C7C6038, 0x386C4400,	0x446C3810, 0xA0BC9C00
		DCD 0x7CFCA0A0,	0x644C0000, 0x644C5C74,	0x8080000, 0x4141773E
		DCD 0
		DCB 0x7F ; 
		DCB 0x7F, 0, 0
		DCD 0x41410000,	0x8083E77, 0x1030200, 0x1030203, 0x4C787000
		DCD 0x70784C46,	0xA1BF1E00, 0x1273E1A1,	0x407D3D00, 0x407D3D40
		DCD 0x547C3800,	0x185D5756, 0x55752200,	0x42793D55, 0x54752100
		DCD 0x41793C54,	0x55742000, 0x40783E57,	0x57742000, 0x40783C57
		DCD 0xA43C1800,	0x2464E4A4, 0x557D3A00,	0x1A5D5555, 0x547D3900
		DCD 0x195D5454,	0x557C3800, 0x185C5657,	0x45010000, 0x1417C7C
		DCD 0x45010200,	0x2417D7D, 0x49000000, 0x407A7B, 0x167D7900
		DCD 0x797D1612,	0x177E7800, 0x787E1715,	0x567C7C00, 0x44445557
		DCD 0x54547000,	0x5C54547C, 0xB7E7C00, 0x497F7F09, 0x457D3A00
		DCD 0x3A7D4545,	0x447D3900, 0x397D4444,	0x457C3800, 0x387C4647
		DCD 0x41793A00,	0x407A3941, 0x437D3C00,	0x407C3C42, 0xA0BD9D00
		DCD 0x7DFDA0A0,	0x663D1900, 0x193D6642,	0x407D3D00, 0x3D7D4040
		DCD 0x647CB800,	0x3A7C4C54, 0x7F7E4800,	0x20664349, 0x733E5C00
		DCD 0x1D3E6749,	0x1C362200, 0x22361C08,	0x48602000, 0x3093F7E
		DCD 0x56742002,	0x40783D57, 0x48000000,	0x417B7A, 0x447C3800
		DCD 0x387D4746,	0x427C3C00, 0x407C3D43,	0x717B0A00, 0x717B0A0B
		DCD 0x197B7A00,	0x797B6233, 0x2F260000,	0x282F2F29, 0x2F260000
		DCD 0x262F29, 0x70200000, 0x60404D5D, 0xBD817E20, 0x81A99595
		DCD 0x808087E, 0x38380808, 0x3F6F4200, 0xBBEECC18, 0x3F6F4291
		DCD 0xFBD66C58,	0x30000041, 0x307D7D, 0x361C0800, 0x361C0822
		DCD 0x1C362222,	0x1C362208, 0x5500AA08,	0x5500AA00, 0xAA55AA00
		DCD 0xAA55AA55,	0x55FFAA55, 0x55FFAAFF,	0xFF, 0xFFFF, 0x10101000
		DCD 0xFFFF, 0x2F7A7000,	0x70782C25, 0x2D797200,	0x72792D25
		DCD 0x2C787000,	0x707A2F25, 0x99817E00,	0x81A5A5A5, 0xF714147E
		DCD 0xFFFF00F7,	0xFF000000, 0xFFFF00FF,	0xF4141400, 0xFCFC04F4
		DCD 0x17141400,	0x1F1F1017, 0x243C1800,	0x2424E7E7, 0x2F2B0000
		DCD 0x2B2FFCFC,	0x10101000, 0xF0F0, 0
		DCB 0x1F
		DCB 0x1F, 0x10,	0x10
		DCD 0x10101010,	0x10101F1F, 0x10101010,	0x1010F0F0, 0x10
		DCD 0x1010FFFF,	0x10101010, 0x10101010,	0x10101010, 0x1010FFFF
		DCD 0x55772210,	0x797F5657, 0x2D7B7200,	0x717B2E27, 0x1F000000
		DCD 0x1717101F,	0xFC000014, 0xF4F404FC,	0x17141414, 0x17171017
		DCD 0xF4141414,	0xF4F404F4, 0xFF000014,	0xF7F700FF, 0x14141414
		DCD 0x14141414,	0xF7141414, 0xF7F700F7,	0x247E5A14, 0x5A7E2424
		DCD 0x4B7A3000,	0x23E7E4B, 0x7F7F4900, 0x1C3E6349, 0x557D7E00
		DCD 0x46555555,	0x547D7D00, 0x45555454,	0x557C7C00, 0x44545657
		DCD 0x44000000,	0x407C7C, 0x44000000, 0x457F7E,	0x45020000
		DCD 0x2457D7D, 0x45010000, 0x1457C7C, 0x10101000, 0x1F1F
		DCD 0
		DCD 0x1010F0F0,	0xFFFFFF10, 0xFFFFFFFF,	0xF0F0F0FF, 0xF0F0F0F0
		DCD 0xF0, 0xE7E7, 0x45000000, 0x447E7F,	0xF0F0F00, 0xF0F0F0F
		DCD 0x6F3A100F,	0x10386C45, 0x17F7E00, 0x20765F09, 0x6D391200
		DCD 0x12396D45,	0x6C381000, 0x123B6D44,	0x457F3A00, 0x397F4647
		DCD 0x6D3B1200,	0x113B6E47, 0x7CFC8000,	0x3C7C4040, 0xFFFF8100
		DCD 0x183C24A4,	0x7F7F4100, 0x81C1455, 0x427C3C00, 0x3C7C4143
		DCD 0x41793A00,	0x3A794141, 0x437D3C00,	0x3C7C4042, 0xA2BC9C00
		DCD 0x7CFCA1A3,	0x5C0C0000, 0xC5D7372, 0x1010100, 0x1010101
		DCD 0x4000001, 0x10306,	0x8080000, 0x8080808, 0x44440000
		DCD 0x44445F5F,	0xA0A0A000, 0xA0A0A0A0,	0x3F5595A0, 0xFAD4685A
		DCD 0x90F0641, 0x7F017F7F, 0xBF9A407F, 0x59FDA5A5, 0x8080002
		DCD 0x8082A2A, 0x80000000, 0x40E0A0, 0xF060000,	0x60F09
		DCD 0x20200, 0x2020000,	0
		DCD loc_808
		DCD 0x12000000,	0x101F1F, 0x15110000, 0xA1F15, 0x19110000
		DCD 0x12171D, 0x3C000000, 0x3C3C3C, 0, 0, 0, 0,	0, 0, 0
		DCD 0, 0
		DCD 0x11000000,	0x151D2E2A, 0x22, 0, 0,	0, 0, 0, 0, 0
		DCD 0, 0, 0
		DCB    0
		DCB 0x1F, 0, 0
		ALIGN 8
		DCB    0
		DCB 0xC, 0xC, 0
		DCD 0x8040201, 0x15110E10, 0x40E1115, 0x404040C, 0x3031E0E
		DCD 0x1E1F180E,	0x1011E01, 0x12120A1E, 0x1F021F12, 0x1010E10
		DCD 0x1E100E1E,	0x1F0E1111, 0x4040201, 0xE110E04, 0xE0E1111
		DCD 0x11010F11,	0xE, 0x40004, 0, 0, 0, 0, 0, 0,	0, 0
		DCB    0
		DCB    0
		DCB    0
		DCB  0xC
		DCB 0x12
		DCB 0x21 ; !
		DCB 0x3F ; ?
		DCB 0x21 ; !
		DCB 0x21 ; !
		DCB 0x3E ; >
		DCB 0x11
		DCB 0x1E
		DCB 0x11
		DCB 0x11
		DCB 0x3E ; >
		DCB 0x1E
		DCB 0x21 ; !
		DCB 0x20
		DCB 0x20
		DCB 0x21 ; !
		DCB 0x1E
		DCB 0x3E ; >
		DCB 0x11
		DCB 0x11
		DCB 0x11
		DCB 0x11
		DCB 0x3E ; >
		DCB 0x3F ; ?
		DCB 0x20
		DCB 0x3E ; >
		DCB 0x20
		DCB 0x20
		DCB 0x3F ; ?
		DCB 0x3F ; ?
		DCB 0x20
		DCB 0x3E ; >
		DCB 0x20
		DCB 0x20
		DCB 0x20
		DCB 0x1E
		DCB 0x21 ; !
		DCB 0x20
		DCB 0x23 ; #
		DCB 0x21 ; !
		DCB 0x1E
		DCB 0x21 ; !
		DCB 0x21 ; !
		DCB 0x3F ; ?
		DCB 0x21 ; !
		DCB 0x21 ; !
		DCB 0x21 ; !
		DCB  0xE
		DCB    4
		DCB    4
		DCB    4
		DCB    4
		DCB  0xE
		DCB 0x1E
		DCB    4
		DCB    4
		DCB    4
		DCB 0x14
		DCB    8
		DCB 0x22 ; "
		DCB 0x24 ; $
		DCB 0x38 ; 8
		DCB 0x28 ; (
		DCB 0x24 ; $
		DCB 0x23 ; #
		DCB 0x20
		DCB 0x20
		DCB 0x20
		DCB 0x20
		DCB 0x21 ; !
		DCB 0x3F ; ?
		DCB 0x33 ; 3
		DCB 0x33 ; 3
		DCB 0x2D ; -
		DCB 0x2D ; -
		DCB 0x21 ; !
		DCB 0x21 ; !
		DCB 0x21 ; !
		DCB 0x31 ; 1
		DCB 0x29 ; )
		DCB 0x25 ; %
		DCB 0x23 ; #
		DCB 0x21 ; !
		DCB 0x1E
		DCB 0x21 ; !
		DCB 0x21 ; !
		DCB 0x21 ; !
		DCB 0x21 ; !
		DCB 0x1E
		DCB 0x3E ; >
		DCB 0x11
		DCB 0x11
		DCB 0x1E
		DCB 0x10
		DCB 0x10
		DCB 0x1E
		DCB 0x21 ; !
		DCB 0x21 ; !
		DCB 0x25 ; %
		DCB 0x23 ; #
		DCB 0x1E
		DCB 0x3E ; >
		DCB 0x21 ; !
		DCB 0x21 ; !
		DCB 0x3E ; >
		DCB 0x22 ; "
		DCB 0x21 ; !
		DCB 0x1E
		DCB 0x20
		DCB 0x3E ; >
		DCB    1
		DCB    1
		DCB 0x3E ; >
		DCB 0x1F
		DCB    4
		DCB    4
		DCB    4
		DCB    4
		DCB    4
		DCB 0x21 ; !
		DCB 0x21 ; !
		DCB 0x21 ; !
		DCB 0x21 ; !
		DCB 0x21 ; !
		DCB 0x1E
		DCB 0x21 ; !
		DCB 0x21 ; !
		DCB 0x21 ; !
		DCB 0x21 ; !
		DCB 0x12
		DCB  0xC
		DCB 0x21 ; !
		DCB 0x21 ; !
		DCB 0x21 ; !
		DCB 0x2D ; -
		DCB 0x2D ; -
		DCB 0x12
		DCB 0x21 ; !
		DCB 0x12
		DCB  0xC
		DCB  0xC
		DCB 0x12
		DCB 0x21 ; !
		DCB 0x21 ; !
		DCB 0x12
		DCB  0xC
		DCB  0xC
		DCB  0xC
		DCB  0xC
		DCB 0x3F ; ?
		DCB    2
		DCB    4
		DCB    8
		DCB 0x10
		DCB 0x3F ; ?
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB  0xC
		DCB 2, 0xE, 0x12
		DCB  0xD
		DCB    0
		DCB 0x10
		DCB 0x10
		DCB 0x1E
		DCB 0x11
		DCB 0x1E
		DCB    0
		DCB  0xE
		DCB 0x11
		DCB 0x10
		DCB 0x11
		DCB  0xE
		DCB    1
		DCB    1
		DCB  0xF
		DCB 0x11
		DCB 0x11
		DCB  0xF
		DCB    0
		DCB  0xE
		DCB 0x11
		DCB 0x1E
		DCB 0x10
		DCB  0xF
		DCB    0
		DCB    3
		DCB    4
		DCB    4
		DCB 0x1F
		DCB    4
		DCB    0
		DCB  0xE
		DCB 0x11
		DCB  0xF
		DCB    1
		DCB  0xE
		DCB    0
		DCB 0x10
		DCB 0x16
		DCB 0x19
		DCB 0x11
		DCB 0x11
		DCB    0
		DCB    4
		DCB    0
		DCB    4
		DCB    4
		DCB    4
		DCB    2
		DCB    0
		DCB    2
		DCB    2
		DCB 0x12
		DCB  0xC
		DCB 0x10
		DCB 0x11
		DCB 0x12
		DCB 0x1C
		DCB 0x12
		DCB 0x11
		DCB    4
		DCB    4
		DCB    4
		DCB    4
		DCB    4
		DCB    4
		DCB    0
		DCB  0xA
		DCB 0x15
		DCB 0x15
		DCB 0x15
		DCB 0x15
		DCB    0
		DCB 0x1E
		DCB 0x11
		DCB 0x11
		DCB 0x11
		DCB 0x11
		DCB    0
		DCB  0xE
		DCB 0x11
		DCB 0x11
		DCB 0x11
		DCB  0xE
		DCB    0
		DCB 0x1E
		DCB 0x11
		DCB 0x1E
		DCB 0x10
		DCB 0x10
		DCB    0
		DCB  0xF
		DCB 0x11
		DCB  0xF
		DCB    1
		DCB    1
		DCB    0
		DCB  0xE
		DCB    8
		DCB    8
		DCB    8
		DCB    8
		DCB    0
		DCB  0xF
		DCB 0x10
		DCB  0xE
		DCB    1
		DCB 0x1E
		DCB    8
		DCB 0x1E
		DCB    8
		DCB    8
		DCB    8
		DCB    6
		DCB    0
		DCB 0x12
		DCB 0x12
		DCB 0x12
		DCB 0x12
		DCB  0xD
		DCB 0x11
		DCB 0x11
		DCB  0xA
		DCB  0xA
		DCB    4
		DCB    4
		DCB    0
		DCB 0x11
		DCB 0x11
		DCB 0x15
		DCB 0x15
		DCB  0xA
		DCB    0
		DCB 0x11
		DCB  0xA
		DCB    4
		DCB  0xA
		DCB 0x11
		DCB 0x11
		DCB 0x11
		DCB 0x11
		DCB  0xF
		DCB    1
		DCB 0x1E
		DCB    0
		DCB 0x1F
		DCB    2
		DCB    4
		DCB    8
		DCB 0x1F
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
unk_E76C	DCB    0		; DATA XREF: ROM:0000E7B0o
		DCB    0
		DCB    0
		DCB    0
		DCB    2
		DCB 0x1F, 0, 0
		DCB    0
		DCB 0x19, 0x15,	0x12
dword_E778	DCD 0x11000000,	0x1F15,	0x1C080F00, 0x17000000,	0x915
					; DATA XREF: ROM:0000E7C8o
					; ROM:0000E7E0o
		DCD 0x1D151F00,	0x11000000, 0x30D, 0x1F151F00, 0x7000000
		DCD 0x1F021F05,	0x1F111F00
unk_E7A8	DCB    6		; DATA XREF: DisplayChannels+1Eo
					; ROM:off_363Co
		DCB 0, 0, 0
		DCB    5
		DCB 0, 0, 0
		DCD unk_E76C
		DCB    6
		DCB 0, 0, 0
		DCB    6
		DCB 0, 0, 0
		DCB 0x72 ; r
		DCB 0xE7, 0, 0
		DCB    6
		DCB 0, 0, 0
		DCB    6
		DCB 0, 0, 0
		DCD dword_E778
		DCB    6
		DCB 0, 0, 0
		DCB    6
		DCB 0, 0, 0
		DCB 0x7E ; ~
		DCB 0xE7, 0, 0
		DCB    6
		DCB 0, 0, 0
		DCB    6
		DCB 0, 0, 0
		DCD dword_E778+0xC
		DCB    6
		DCB 0, 0, 0
		DCB    6
		DCB 0, 0, 0
		DCB 0x8A ; 
		DCB 0xE7, 0, 0
		DCB    6
		DCB 0, 0, 0
		DCB    6
		DCB 0, 0, 0
		DCD dword_E778+0x18
		DCB    6
		DCB 0, 0, 0
		DCB    6
		DCB 0, 0, 0
		DCB 0x96 ; 
		DCB 0xE7, 0, 0
		DCB    6
		DCB 0, 0, 0
		DCB    6
		DCB 0, 0, 0
		DCD dword_E778+0x24
		DCB    6
		DCB 0, 0, 0
		DCB    6
		DCB 0, 0, 0
		DCB 0xA2 ; ¢
		DCB 0xE7, 0, 0
dword_E820	DCD 0xA9		; DATA XREF: sendPacketToRadio:loc_8454o
					; sendPacketToRadio+2FAr ...
dword_E824	DCD 0xAA		; DATA XREF: sub_8AD4:loc_8CACo
					; sub_8AD4+1DCr ...
dword_E828	DCD 0x10210000,	0x30632042, 0x50A54084,	0x70E760C6, 0x91298108
					; DATA XREF: crcCheck+8o ROM:off_A0A0o
		DCD 0xB16BA14A,	0xD1ADC18C, 0xF1EFE1CE,	0x2101231, 0x22523273
		DCD 0x429452B5,	0x62D672F7, 0x83189339,	0xA35AB37B, 0xC39CD3BD
		DCD 0xE3DEF3FF,	0x34432462, 0x14010420,	0x74C764E6, 0x548544A4
		DCD 0xB54BA56A,	0x95098528, 0xF5CFE5EE,	0xD58DC5AC, 0x26723653
		DCD 0x6301611, 0x66F676D7, 0x46B45695, 0xA77AB75B, 0x87389719
		DCD 0xE7FEF7DF,	0xC7BCD79D, 0x58E548C4,	0x78A76886, 0x18610840
		DCD 0x38232802,	0xD9EDC9CC, 0xF9AFE98E,	0x99698948, 0xB92BA90A
		DCD 0x4AD45AF5,	0x6A967AB7, 0xA501A71, 0x2A123A33, 0xCBDCDBFD
		DCD 0xEB9EFBBF,	0x8B589B79, 0xAB1ABB3B,	0x7C876CA6, 0x5CC54CE4
		DCD 0x3C032C22,	0x1C410C60, 0xFD8FEDAE,	0xDDCDCDEC, 0xBD0BAD2A
		DCD 0x9D498D68,	0x6EB67E97, 0x4EF45ED5,	0x2E323E13, 0xE701E51
		DCD 0xEFBEFF9F,	0xCFFCDFDD, 0xAF3ABF1B,	0x8F789F59, 0x81A99188
		DCD 0xA1EBB1CA,	0xC12DD10C, 0xE16FF14E,	0xA11080, 0x20E330C2
		DCD 0x40255004,	0x60677046, 0x939883B9,	0xB3DAA3FB, 0xD31CC33D
		DCD 0xF35EE37F,	0x129002B1, 0x32D222F3,	0x52144235, 0x72566277
		DCD 0xA5CBB5EA,	0x858995A8, 0xE54FF56E,	0xC50DD52C, 0x24C334E2
		DCD 0x48114A0, 0x64477466, 0x44055424, 0xB7FAA7DB, 0x97B88799
		DCD 0xF77EE75F,	0xD73CC71D, 0x36F226D3,	0x16B00691, 0x76766657
		DCD 0x56344615,	0xC96DD94C, 0xE92FF90E,	0x89E999C8, 0xA9ABB98A
		DCD 0x48655844,	0x68277806, 0x8E118C0, 0x28A33882, 0xDB5CCB7D
		DCD 0xFB1EEB3F,	0x9BD88BF9, 0xBB9AABBB,	0x5A544A75, 0x7A166A37
		DCD 0x1AD00AF1,	0x3A922AB3, 0xED0FFD2E,	0xCD4DDD6C, 0xAD8BBDAA
		DCD 0x8DC99DE8,	0x6C077C26, 0x4C455C64,	0x2C833CA2, 0xCC11CE0
		DCD 0xFF3EEF1F,	0xDF7CCF5D, 0xBFBAAF9B,	0x9FF88FD9, 0x7E366E17
		DCD 0x5E744E55,	0x3EB22E93, 0x1EF00ED1
; int ADCH_Values[]
ADCH_Values	DCD 7			; DATA XREF: adc_setup+66o
					; ROM:off_2274o ...
		DCD 6
		DCD 5
		DCD 11
		DCD 3
		DCD 7
		DCD 4
		DCD 14
dword_EA48	DCD 0x54060000,	0x12AC575, 0x14140342, 0x1F502516, 0x342010F
					; DATA XREF: sub_8AD4+62o
					; ROM:off_8D34o
		DCD 0x25161425
unk_EA60	DCB    0		; DATA XREF: setSensorValue+5Eo
					; ROM:off_5954o
		DCB 0x1F, 0xF, 1
dword_EA64	DCD 0x14250342,	0x1F002516, 0x340011E, 0x25061424, 0x11E1F00
		DCD 0x141C0342,	0x1F002516, 0x242011E, 0x4140300, 0x8000700
		DCD 0xA000900, 0xC010B00, 0xE050D3C, 0x10500F00, 0x124B119E
		DCD 0x14021300,	0x162B1516, 0x18001712,	0x1A801962, 0x1C001B80
		DCD 0x1E321D0A,	0x200F1FC3, 0x22C3211C,	0x25002400, 0x273B2600
		DCD 0x29172800,	0x2B802A47, 0x2D012C03,	0x2F182E45, 0x31013000
		DCD 0x64415A0F,	0x781E6E14, 0x8C328228,	0x3746963C, 0x63405950
		DCD 0x771D6D13,	0x8B318127, 0x3645953B,	0x623F584F, 0x761C6C12
		DCD 0x8A308026,	0x3544943A, 0x613E574E,	0x751B6B11, 0x892F7F25
		DCD 0x34439339,	0x603D564D, 0x741A6A10,	0x882E7E24, 0x29429238
		DCD 0x5F3C554C,	0x7319690F, 0x872D7D23,	0x28419137, 0x5E3B544B
		DCD 0x7218680E,	0x862C7C22, 0x27409036,	0x5D3A534A, 0x7117670D
		DCD 0x852B7B21,	0x263F8F35, 0x5C395249,	0x7016660C, 0x842A7A20
		DCD 0x253E8E34,	0x5B385148, 0x6F15650B,	0x8329791F, 0x203D8D33
		DCD 0x3000147, 0x7040502, 0xB080906, 0xF0C0D0A,	0xC0F0E0E
		DCD 0x80B0A0D, 0x4070609, 0x30205, 0xF000101, 0xD02030E
		DCD 0xB04050C, 0x906070A, 0x6090808, 0x40B0A07,	0x20D0C05
		DCD 0xF0E03, 0x1060701,	0x30E0F00, 0xB040502, 0xD08090A
		DCD 0x80D0C0C, 0x40B0A09, 0xE030205, 0x601000F,	0x70E0F07
		DCD 0x5000106, 0x90A0B04, 0x30C0D08, 0xC030202,	0xA09080D
		DCD 0x5040B, 0xE070601,	0xD0E0F0F, 0x70A0B0C, 0x9000106
		DCD 0x3040508, 0x4030202, 0x90805, 0xA070601, 0xE0D0C0B
		DCD 0xB0C0D0F, 0x70E0F0A, 0x5000106, 0x3080904,	0x8030202
		DCD 0x50409, 0xE070601,	0xC0B0A0F, 0x10C0D0D, 0x30A0B00
		DCD 0x70E0F02, 0x9040506, 0x4090808, 0xE070605,	0xA03020F
		DCD 0xC01000B, 0x10C0D0D, 0xB0E0F00, 0x506070A,	0x3080904
		DCD 0x8030202, 0x6050409, 0xE0B0A07, 0xC01000F,	0x302010D
		DCD 0x7060504, 0xB0A0908, 0xF0E0D0C, 0x2100110,	0x40E030F
		DCD 0x60C050D, 0x80A070B, 0xF081009, 0xD060E07,	0xB040C05
		DCD 0x9020A03, 0xC0E1001, 0x406080A, 0xB0D0F02,	0x3050709
		DCD 0x7040101, 0x2100D0A, 0xE0B0805, 0xC090603,	0x90C0F0F
		DCD 0xB0E0306, 0x10020508, 0x4070A0D, 0x7040101, 0x3100D0A
		DCD 0xF0C0906, 0xB080502, 0x906030E, 0x4010F0C,	0x100D0A07
		DCD 0xB080502, 0xFF17000E, 0xFF5AFF40, 0xFF93FF7C, 0xFFD0FFA7
		DCD 0xFF31FFEC,	0xFF76FF57, 0xFFADFF98,	0xFFDEFFC1, 0xFF45FFFB
		DCD 0xFF88FF68,	0xFFBCFFAB, 0xFFF1FFD0,	0xFF500001, 0xFF9CFF6F
		DCD 0xFFCDFFB8,	0xFFFBFFDD
		DCB  0xD
		DCB 0
word_ED3E	DCW 4			; DATA XREF: sub_1B2C+22o
					; ROM:off_1C60o
		DCD sub_800
		ALIGN 8
		DCB    0
		DCB 2, 0, 1
byte_ED4C	DCB 0			; 0
		DCB    0
		DCB 0x10
unk_ED4F	DCB 0x43 ; C		; DATA XREF: RAM:off_200000F4o
		DCB 0x61 ; a
		DCB 0x72 ; r
		DCB 0x72 ; r
		DCB 0x69 ; i
		DCB 0x65 ; e
		DCB 0x72 ; r
		DCB 0x20
		DCB 0x2B ; +
		DCB 0x20
		DCB 0x6D ; m
		DCB 0x6F ; o
		DCB 0x64 ; d
		DCB 0x75 ; u
		DCB 0x6C ; l
		DCB 0x2E ; .
		DCB    0
		DCB 0x4C ; L		; DATA XREF: ROM:0000EF98o
		DCB 0x65 ; e
		DCB 0x66 ; f
		DCB 0x74 ; t
		DCB 0x20
		DCB 0x61 ; a
		DCB 0x6E ; n
		DCB 0x74 ; t
		DCB 0x2E ; .
		DCB    0
		DCB 0x52 ; R
		DCB 0x69 ; i
		DCB 0x67 ; g
		DCB 0x68 ; h
		DCB 0x74 ; t
		DCB 0x20
		DCB 0x61 ; a
		DCB 0x6E ; n
		DCB 0x74 ; t
		DCB 0x2E ; .
		DCB    0
		DCB 0x53 ; S
		DCB 0x77 ; w
		DCB 0x61 ; a
		DCB 0x73 ; s
		DCB 0x68 ; h
		DCB 0x20
unk_ED7B	DCB 0x31 ; 1
		DCB 0x32 ; 2
		DCB 0x30 ; 0
		DCB    0
		DCB 0x53 ; S
		DCB 0x77 ; w
		DCB 0x61 ; a
		DCB 0x73 ; s
		DCB 0x68 ; h
		DCB 0x20
unk_ED85	DCB 0x31 ; 1
		DCB 0x34 ; 4
		DCB 0x30 ; 0
		DCB    0
		DCB 0x53 ; S
		DCB 0x77 ; w
		DCB 0x61 ; a
		DCB 0x73 ; s
		DCB 0x68 ; h
		DCB 0x20
unk_ED8F	DCB 0x39 ; 9
		DCB 0x30 ; 0
		DCB    0
		DCB 0x52 ; R
		DCB 0x65 ; e
		DCB 0x73 ; s
		DCB 0x65 ; e
		DCB 0x74 ; t
		DCB 0x20
		DCB 0x6F ; o
		DCB 0x64 ; d
		DCB 0x6F ; o
		DCB 0x6D ; m
		DCB 0x65 ; e
		DCB 0x74 ; t
		DCB 0x65 ; e
		DCB 0x72 ; r
		DCB 0x31 ; 1
		DCB    0
		DCB 0x52 ; R
		DCB 0x65 ; e
		DCB 0x73 ; s
		DCB 0x65 ; e
		DCB 0x74 ; t
		DCB 0x20
		DCB 0x6F ; o
		DCB 0x64 ; d
		DCB 0x6F ; o
		DCB 0x6D ; m
		DCB 0x65 ; e
		DCB 0x74 ; t
		DCB 0x65 ; e
		DCB 0x72 ; r
		DCB 0x32 ; 2
		DCB    0
		DCB 0x41 ; A
		DCB 0x46 ; F
		DCB 0x48 ; H
		DCB 0x44 ; D
		DCB 0x53 ; S
		DCB 0x20
		DCB 0x32 ; 2
		DCB 0x41 ; A
		DCB    0
		DCB 0x56 ; V
		DCB 0x72 ; r
		DCB 0x41 ; A
		DCB    0
		DCB 0x53 ; S
		DCB 0x77 ; w
		DCB 0x41 ; A
		DCB    0
		DCB 0x56 ; V
		DCB 0x72 ; r
		DCB 0x42 ; B
		DCB    0
		DCB 0x53 ; S
		DCB 0x77 ; w
		DCB 0x42 ; B
		DCB    0
		DCB 0x53 ; S
		DCB 0x77 ; w
		DCB 0x43 ; C
		DCB    0
		DCB 0x53 ; S
		DCB 0x77 ; w
		DCB 0x44 ; D
		DCB    0
		DCB 0x53 ; S
		DCB 0x70 ; p
		DCB 0x65 ; e
		DCB 0x65 ; e
		DCB 0x64 ; d
		DCB 0x2D ; -
		DCB 0x64 ; d
		DCB 0x69 ; i
		DCB 0x73 ; s
		DCB 0x74 ; t
		DCB 0x61 ; a
		DCB 0x6E ; n
		DCB 0x63 ; c
		DCB 0x65 ; e
		DCB    0
		DCB 0x46 ; F
		DCB 0x61 ; a
		DCB 0x69 ; i
		DCB 0x6C ; l
		DCB 0x73 ; s
		DCB 0x61 ; a
		DCB 0x66 ; f
		DCB 0x65 ; e
		DCB    0
		DCB 0x46 ; F
		DCB 0x69 ; i
		DCB 0x78 ; x
		DCB 0x65 ; e
		DCB 0x64 ; d
		DCB 0x20
		DCB 0x70 ; p
		DCB 0x69 ; i
		DCB 0x74 ; t
		DCB 0x63 ; c
		DCB 0x68 ; h
		DCB    0
		DCB 0x56 ; V
		DCB 0x61 ; a
		DCB 0x72 ; r
		DCB 0x69 ; i
		DCB 0x61 ; a
		DCB 0x62 ; b
		DCB 0x6C ; l
		DCB 0x65 ; e
		DCB 0x20
		DCB 0x70 ; p
		DCB 0x69 ; i
		DCB 0x74 ; t
		DCB 0x63 ; c
		DCB 0x68 ; h
		DCB    0
		DCB 0x52 ; R
		DCB 0x6F ; o
		DCB 0x74 ; t
		DCB 0x61 ; a
		DCB 0x74 ; t
		DCB 0x69 ; i
		DCB 0x6F ; o
		DCB 0x6E ; n
		DCB 0x20
		DCB 0x6C ; l
		DCB 0x65 ; e
		DCB 0x6E ; n
		DCB 0x67 ; g
		DCB 0x74 ; t
		DCB 0x68 ; h
		DCB    0
unk_EE16	DCB 0x46 ; F		; DATA XREF: RAM:off_200000F4o
		DCB 0x72 ; r
		DCB 0x65 ; e
		DCB 0x71 ; q
		DCB 0x75 ; u
		DCB 0x65 ; e
		DCB 0x6E ; n
		DCB 0x63 ; c
		DCB 0x79 ; y
		DCB 0x20
		DCB 0x73 ; s
		DCB 0x63 ; c
		DCB 0x61 ; a
		DCB 0x6E ; n
		DCB    0
		DCB 0x69 ; i
		DCB 0x2D ; -
		DCB 0x42 ; B
		DCB 0x55 ; U
		DCB 0x53 ; S
		DCB 0x20
		DCB 0x53 ; S
		DCB 0x65 ; e
		DCB 0x74 ; t
		DCB 0x75 ; u
		DCB 0x70 ; p
		DCB    0
		DCB 0x53 ; S
		DCB 0x65 ; e
		DCB 0x72 ; r
		DCB 0x76 ; v
		DCB 0x6F ; o
		DCB 0x73 ; s
		DCB 0x20
		DCB 0x46 ; F
		DCB 0x72 ; r
		DCB 0x65 ; e
		DCB 0x71 ; q
		DCB    0
		DCB 0x53 ; S
		DCB 0x70 ; p
		DCB 0x65 ; e
		DCB 0x65 ; e
		DCB 0x64 ; d
		DCB 0x20
		DCB 0x73 ; s
		DCB 0x65 ; e
		DCB 0x6E ; n
		DCB 0x73 ; s
		DCB 0x6F ; o
		DCB 0x72 ; r
		DCB    0
		DCB 0x43 ; C
		DCB 0x68 ; h
		DCB 0x6F ; o
		DCB 0x6F ; o
		DCB 0x73 ; s
		DCB 0x65 ; e
		DCB 0x20
		DCB 0x73 ; s
		DCB 0x65 ; e
		DCB 0x6E ; n
		DCB 0x73 ; s
		DCB 0x6F ; o
		DCB 0x72 ; r
		DCB 0x73 ; s
		DCB    0
		DCB 0x53 ; S
		DCB 0x65 ; e
		DCB 0x6E ; n
		DCB 0x73 ; s
		DCB 0x6F ; o
		DCB 0x72 ; r
		DCB 0x73 ; s
		DCB 0x20
		DCB 0x6C ; l
		DCB 0x69 ; i
		DCB 0x73 ; s
		DCB 0x74 ; t
		DCB    0
		DCB 0x50 ; P
		DCB 0x50 ; P
		DCB 0x4D ; M
		DCB 0x20
		DCB 0x6F ; o
		DCB 0x75 ; u
		DCB 0x74 ; t
		DCB 0x70 ; p
		DCB 0x75 ; u
		DCB 0x74 ; t
		DCB    0
unk_EE71	DCB 0x43 ; C		; DATA XREF: RAM:off_200000F4o
		DCB 0x61 ; a
		DCB 0x72 ; r
		DCB 0x72 ; r
		DCB 0x69 ; i
		DCB 0x65 ; e
		DCB 0x72 ; r
		DCB 0x20
		DCB 0x6F ; o
		DCB 0x6E ; n
		DCB 0x6C ; l
		DCB 0x79 ; y
		DCB    0
		DCB 0x52 ; R
		DCB 0x58 ; X
		DCB 0x20
		DCB 0x42 ; B
		DCB 0x61 ; a
		DCB 0x74 ; t
		DCB 0x74 ; t
		DCB 0x65 ; e
		DCB 0x72 ; r
		DCB 0x79 ; y
		DCB    0
unk_EE89	DCB 0x2D ; -
		DCB 0x20
		DCB 0x4F ; O
		DCB 0x72 ; r
		DCB 0x69 ; i
		DCB 0x67 ; g
		DCB 0x69 ; i
		DCB 0x6E ; n
		DCB 0x61 ; a
		DCB 0x6C ; l
		DCB 0x20
		DCB 0x46 ; F
		DCB 0x69 ; i
		DCB 0x72 ; r
		DCB 0x6D ; m
		DCB 0x77 ; w
		DCB 0x61 ; a
		DCB 0x72 ; r
		DCB 0x65 ; e
		DCB 0x20
		DCB 0x2D ; -
		DCB    0
unk_EE9F	DCB 0x2D ; -
		DCB 0x20
		DCB 0x4D ; M
		DCB 0x6F ; o
		DCB 0x64 ; d
		DCB 0x69 ; i
		DCB 0x66 ; f
		DCB 0x69 ; i
		DCB 0x65 ; e
		DCB 0x64 ; d
		DCB 0x20
		DCB 0x46 ; F
		DCB 0x69 ; i
		DCB 0x72 ; r
		DCB 0x6D ; m
		DCB 0x77 ; w
		DCB 0x61 ; a
		DCB 0x72 ; r
		DCB 0x65 ; e
		DCB 0x20
		DCB 0x2D ; -
		DCB    0
aFlyplusBeta	DCB "FlyPlus Beta",0    ; DATA XREF: FirmwareVerPAge+42o
					; ROM:off_36D8o
a200116827	DCB "20/01/16 8:27",0   ; DATA XREF: FirmwareVerPAge+4Eo
					; ROM:off_36DCo
unk_EED0	DCB 0x10
		DCB 0xEF ; ï
		DCB    0
		DCB    0
		DCB 0x80 ; 
		DCB 0xF8 ; ø
		DCB 0xFF
		DCB 0x1F
		DCB 0x40 ; @
		DCB    0
		DCB    0
		DCB    0
		DCB 0x20
		DCB 0x19
		DCB    0
		DCB    0
		DCB 0x14
		DCB 0xEF ; ï
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB 0x20
		DCB 0xA4 ; ¤
		DCB    1
		DCB    0
		DCB    0
		DCB    4
		DCB 0x19
		DCB    0
		DCB    0
		DCB 0x14
		DCB 0xEF ; ï
		DCB    0
		DCB    0
		DCB 0xC0 ; À
		DCB 0xF8 ; ø
		DCB 0xFF
		DCB 0x1F
		DCB 0x80 ; 
		DCB    5
		DCB    0
		DCB    0
		DCB 0x20
		DCB 0x19
		DCB    0
		DCB    0
		DCB 0xB8 ; ¸
		DCB 0xF0 ; ð
		DCB    0
		DCB    0
		DCB 0xA4 ; ¤
		DCB    1
		DCB    0
		DCB 0x20
		DCB 0x9C ; 
		DCB 0x14
		DCB    0
		DCB    0
		DCB 0x20
		DCB 0x19
		DCB    0
		DCB    0
unk_EF10	DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB 0x43, 0x68,	0x31
		DCD 0x41775300,	0x41725600, 0, 0, 0, 0,	0, 0, 0, 0, 0
		DCD 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0
		DCB 0x31 ; 1
		DCB 0x30, 0x30,	0x25
		DCD 0x32314C00
		DCD 0x312D4833
		DCB 0x30 ; 0
		DCB 0x30, 0x25,	0
a6_00v		DCB "6.00V",0
aL100		DCB "L 100%",0
		DCB 0x4D, 0x69,	0x78
		DCD 0x312320
		DCD unk_ED60
		DCD 0xED6A, 0x302E3031,	0x563030, 0x65646F4D, 0x3030206C
		DCD 0
		DCD dword_D554
		DCB 0xEB ; ë
		DCB 0xED ; í
		DCB    0
		DCB    0
		DCB 0xF7 ; ÷
		DCB 0xED ; í
		DCB    0
		DCB    0
		DCB 0x89 ; 
		DCB 0xED ; í
		DCB    0
		DCB    0
		DCB 0x75 ; u
		DCB 0xED ; í
		DCB    0
		DCB    0
		DCB 0x7F ; 
		DCB 0xED ; í
		DCB    0
		DCB    0
		DCB 0x4B ; K
		DCB 0xDB ; Û
		DCB    0
		DCB    0
		DCB 0xBB ; »
		DCB 0xED ; í
		DCB    0
		DCB    0
		DCB 0xC3 ; Ã
		DCB 0xED ; í
		DCB    0
		DCB    0
		DCB 0xBF ; ¿
		DCB 0xED ; í
		DCB    0
		DCB    0
		DCB 0xC7 ; Ç
		DCB 0xED ; í
		DCB    0
		DCB    0
		DCB 0xCB ; Ë
		DCB 0xED ; í
		DCB    0
		DCB    0
		DCB 0xCF ; Ï
		DCB 0xED ; í
		DCB    0
		DCB    0
		DCB 0x8F ; 
		DCB 0xED ; í
		DCB    0
		DCB    0
		DCB 0x7B ; {
		DCB 0xED ; í
		DCB    0
		DCB    0
		DCB 0x85 ; 
		DCB 0xED ; í
		DCB    0
		DCB    0
		DCB 0x37 ; 7
		DCB    0
		DCB    0
		DCB    0
		DCB 0x48 ; H
		DCB    0
		DCB    0
		DCB    0
		DCB 0x59 ; Y
		DCB    0
		DCB    0
		DCB    0
		DCB 0x6A ; j
		DCB    0
		DCB    0
		DCB    0
		DCB 0x7B ; {
		DCB    0
		DCB    0
		DCB    0
		DCB 0x71 ; q
		DCB 0xEE ; î
		DCB    0
		DCB    0
		DCB 0x4F ; O
		DCB 0xED ; í
		DCB    0
		DCB    0
		DCB 0x16
		DCB 0xEE ; î
		DCB    0
		DCB    0
		DCB 0x4D ; M
		DCB 0x6F ; o
		DCB 0x64 ; d
		DCB 0x65 ; e
		DCB 0x20
		DCB 0x31 ; 1
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0

; =============== S U B	R O U T	I N E =======================================


RemapSensorIndex			; CODE XREF: sensorsListMainScreen+204p
					; GetSensorName:loc_FB60p
		PUSH	{LR}
		CMP	R0, #0
		BLT	loc_F066
		CMP	R0, #0xFF
		BGT	loc_F066
		CMP	R0, #0x41 ; 'A'
		BNE	loc_F030
		MOVS	R0, #0xF

loc_F030				; CODE XREF: RemapSensorIndex+Cj
		CMP	R0, #0xF
		BLE	loc_F060
		CMP	R0, #0x7C ; '|'
		BLT	loc_F066
		CMP	R0, #0x7F ; ''
		BGT	loc_F03E
		B	loc_F048
; ---------------------------------------------------------------------------

loc_F03E				; CODE XREF: RemapSensorIndex+1Aj
		CMP	R0, #0x89 ; ''
		BLE	loc_F04E
		CMP	R0, #0xF9 ; 'ù'
		BGE	loc_F054
		B	loc_F066
; ---------------------------------------------------------------------------

loc_F048				; CODE XREF: RemapSensorIndex+1Cj
		SUBS	R0, #0x7C ; '|'
		ADDS	R1, #0x80 ; ''
		B	loc_F060
; ---------------------------------------------------------------------------

loc_F04E				; CODE XREF: RemapSensorIndex+20j
		SUBS	R0, #0x80 ; ''
		ADDS	R1, #0xA0 ; ' '
		B	loc_F05A
; ---------------------------------------------------------------------------

loc_F054				; CODE XREF: RemapSensorIndex+24j
		SUBS	R0, #0xF9 ; 'ù'
		ADDS	R1, #0xC8 ; 'È'
		B	loc_F060
; ---------------------------------------------------------------------------

loc_F05A				; CODE XREF: RemapSensorIndex+32j
		LSLS	R0, R0,	#2
		ADDS	R0, R1,	R0
		B	locret_F06A
; ---------------------------------------------------------------------------

loc_F060				; CODE XREF: RemapSensorIndex+12j
					; RemapSensorIndex+2Cj	...
		LSLS	R0, R0,	#3
		ADDS	R0, R1,	R0
		B	locret_F06A
; ---------------------------------------------------------------------------

loc_F066				; CODE XREF: RemapSensorIndex+4j
					; RemapSensorIndex+8j ...
		MOVS	R0, #0xE0 ; 'à'
		ADDS	R0, R1,	R0

locret_F06A				; CODE XREF: RemapSensorIndex+3Ej
					; RemapSensorIndex+44j
		POP	{PC}
; End of function RemapSensorIndex

; ---------------------------------------------------------------------------
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
; ROM		ends

		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB 0xFF
		DCB 0xFF
		DCB 0xFF
		DCB 0xFF
		DCB 0xFF
		DCB 0xFF
		DCB 0xFF
		DCB 0xFF
		DCB 0xF0 ; ð
		DCB 0xB5 ; µ
		DCB 0x83 ; 
		DCB 0xB0 ; °
		DCB    0
		DCB 0x25 ; %
		DCB 0xEB ; ë
		DCB 0x4C ; L
		DCB 0x24 ; $
		DCB 0x68 ; h
		DCB 0x62 ; b
		DCB 0x34 ; 4
		DCB 0xF3 ; ó
		DCB 0xF7 ; ÷
		DCB 0x72 ; r
		DCB 0xFA ; ú
		DCB 0xE9 ; é
		DCB 0xA0 ;  
		DCB 0xF7 ; ÷
		DCB 0xF7 ; ÷
		DCB 0x43 ; C
		DCB 0xFE ; þ
		DCB    0
		DCB 0x23 ; #
		DCB  0xC
		DCB 0x22 ; "
		DCB    8
		DCB 0x21 ; !
		DCB 0xE9 ; é
		DCB 0xA0 ;  
		DCB 0xF5 ; õ
		DCB 0xF7 ; ÷
		DCB 0xBD ; ½
		DCB 0xFF
		DCB    0
		DCB 0x23 ; #
		DCB 0x17
		DCB 0x22 ; "
		DCB    8
		DCB 0x21 ; !
		DCB 0xE8 ; è
		DCB 0xA0 ;  
		DCB 0xF5 ; õ
		DCB 0xF7 ; ÷
; ===========================================================================

; Segment type:	Pure code
		AREA ROM, CODE,	READWRITE, ALIGN=0
		; ORG 0xF0EC
		CODE16
		DCB 0xB7 ; ·
		DCB 0xFF
		DCB    0
		DCB 0x23 ; #
		DCB 0x22 ; "
		DCB 0x22 ; "
		DCB    8
		DCB 0x21 ; !
		DCB 0xE7 ; ç
		DCB 0xA0 ;  
		DCB 0xF5 ; õ
		DCB 0xF7 ; ÷
		DCB 0xB1 ; ±
		DCB 0xFF
		DCB    0
		DCB 0x23 ; #
		DCB 0x2D ; -
		DCB 0x22 ; "
		DCB    8
		DCB 0x21 ; !
		DCB 0xF0 ; ð
		DCB 0xA0 ;  
		DCB 0xF5 ; õ
		DCB 0xF7 ; ÷
		DCB 0xAB ; «
		DCB 0xFF
		DCB    0
		DCB 0x23 ; #
		DCB 0x38 ; 8
		DCB 0x22 ; "
		DCB    8
		DCB 0x21 ; !
		DCB 0xEE ; î
		DCB 0xA0 ;  
		DCB 0xF5 ; õ
		DCB 0xF7 ; ÷
		DCB 0xA5 ; ¥
		DCB 0xFF
		DCB 0x21 ; !
		DCB 0x78 ; x
		DCB 0x89 ; 
		DCB    7
		DCB 0xC9 ; É
		DCB  0xF
		DCB 0xDF ; ß
		DCB 0xA0 ;  
		DCB    0
		DCB 0x29 ; )
		DCB    0
		DCB 0xD0 ; Ð
		DCB 0xDF ; ß
		DCB 0xA0 ;  
		DCB    0
		DCB 0x23 ; #
		DCB  0xC
		DCB 0x22 ; "
		DCB 0x40 ; @
		DCB 0x21 ; !
		DCB 0xF5 ; õ
		DCB 0xF7 ; ÷
		DCB 0x99 ; 
		DCB 0xFF
		DCB 0x21 ; !
		DCB 0x78 ; x
		DCB 0xC9 ; É
		DCB    7
		DCB 0xC9 ; É
		DCB  0xF
		DCB 0xDD ; Ý
		DCB 0xA0 ;  
		DCB    0
		DCB 0x29 ; )
		DCB    0
		DCB 0xD0 ; Ð
		DCB 0xDA ; Ú
		DCB 0xA0 ;  
		DCB    0
		DCB 0x23 ; #
		DCB  0xC
		DCB 0x22 ; "
		DCB 0x60 ; `
		DCB 0x21 ; !
		DCB 0xF5 ; õ
		DCB 0xF7 ; ÷
		DCB 0x8D ; 
		DCB 0xFF
		DCB 0x20
		DCB 0x78 ; x
		DCB    0
		DCB    9
		DCB    0
		DCB 0x28 ; (
		DCB    3
		DCB 0xD1 ; Ñ
		DCB 0x20
		DCB 0x78 ; x
		DCB 0x40 ; @
		DCB 0x30 ; 0
		DCB 0x20
		DCB 0x70 ; p
		DCB    4
		DCB 0x20
		DCB    2
		DCB 0x22 ; "
		DCB 0x69 ; i
		DCB 0x46 ; F
		DCB 0xFB ; û
		DCB 0xF7 ; ÷
		DCB 0xA7 ; §
		DCB 0xF8 ; ø
		DCB 0x68 ; h
		DCB 0x46 ; F
		DCB    0
		DCB 0x23 ; #
		DCB 0x17
		DCB 0x22 ; "
		DCB 0x50 ; P
		DCB 0x21 ; !
		DCB 0xF5 ; õ
		DCB 0xF7 ; ÷
		DCB 0x7B ; {
		DCB 0xFF
		DCB 0xA0 ;  
		DCB 0x8A ; 
		DCB  0xA
		DCB 0x21 ; !
		DCB    0
		DCB 0x90 ; 
		DCB 0xF2 ; ò
		DCB 0xF7 ; ÷
		DCB 0x77 ; w
		DCB 0xFE ; þ
		DCB  0xE
		DCB 0x46 ; F
		DCB  0xA
		DCB 0x21 ; !
		DCB 0xF2 ; ò
		DCB 0xF7 ; ÷
		DCB 0x73 ; s
		DCB 0xFE ; þ
		DCB  0xF
		DCB 0x46 ; F
		DCB 0x64 ; d
		DCB 0x21 ; !
		DCB    0
		DCB 0x98 ; 
		DCB 0xF2 ; ò
		DCB 0xF7 ; ÷
		DCB 0x6E ; n
		DCB 0xFE ; þ
		DCB    2
		DCB 0x46 ; F
		DCB 0x3B ; ;
		DCB 0x46 ; F
		DCB 0xCA ; Ê
		DCB 0xA1 ; ¡
		DCB    1
		DCB 0xA8 ; ¨
		DCB    0
		DCB 0x96 ; 
		DCB 0xF2 ; ò
		DCB 0xF7 ; ÷
		DCB 0x34 ; 4
		DCB 0xFC ; ü
		DCB    0
		DCB 0x23 ; #
		DCB 0x24 ; $
		DCB 0x22 ; "
		DCB 0x20
		DCB 0x21 ; !
		DCB    1
		DCB 0xA8 ; ¨
		DCB 0xF5 ; õ
		DCB 0xF7 ; ÷
		DCB 0x60 ; `
		DCB 0xFF
		DCB 0xE0 ; à
		DCB 0x8A ; 
		DCB  0xA
		DCB 0x21 ; !
		DCB    0
		DCB 0x90 ; 
		DCB 0xF2 ; ò
		DCB 0xF7 ; ÷
		DCB 0x5C ; \
		DCB 0xFE ; þ
		DCB  0xE
		DCB 0x46 ; F
		DCB  0xA
		DCB 0x21 ; !
		DCB 0xF2 ; ò
		DCB 0xF7 ; ÷
		DCB 0x58 ; X
		DCB 0xFE ; þ
		DCB  0xF
		DCB 0x46 ; F
		DCB 0x64 ; d
		DCB 0x21 ; !
		DCB    0
		DCB 0x98 ; 
		DCB 0xF2 ; ò
		DCB 0xF7 ; ÷
		DCB 0x53 ; S
		DCB 0xFE ; þ
		DCB    2
		DCB 0x46 ; F
		DCB 0x3B ; ;
		DCB 0x46 ; F
		DCB 0xBC ; ¼
		DCB 0xA1 ; ¡
		DCB    1
		DCB 0xA8 ; ¨
		DCB    0
		DCB 0x96 ; 
		DCB 0xF2 ; ò
		DCB 0xF7 ; ÷
		DCB 0x19
		DCB 0xFC ; ü
		DCB    0
		DCB 0x23 ; #
		DCB 0x2E ; .
		DCB 0x22 ; "
		DCB 0x20
		DCB 0x21 ; !
		DCB    1
		DCB 0xA8 ; ¨
		DCB 0xF5 ; õ
		DCB 0xF7 ; ÷
		DCB 0x45 ; E
		DCB 0xFF
		DCB 0x20
		DCB 0x8B ; 
		DCB  0xA
		DCB 0x21 ; !
		DCB    0
		DCB 0x90 ; 
		DCB 0xF2 ; ò
		DCB 0xF7 ; ÷
		DCB 0x41 ; A
		DCB 0xFE ; þ
		DCB  0xE
		DCB 0x46 ; F
		DCB  0xA
		DCB 0x21 ; !
		DCB 0xF2 ; ò
		DCB 0xF7 ; ÷
		DCB 0x3D ; =
		DCB 0xFE ; þ
		DCB  0xF
		DCB 0x46 ; F
		DCB 0x64 ; d
		DCB 0x21 ; !
		DCB    0
		DCB 0x98 ; 
		DCB 0xF2 ; ò
		DCB 0xF7 ; ÷
		DCB 0x38 ; 8
		DCB 0xFE ; þ
		DCB    2
		DCB 0x46 ; F
		DCB 0x3B ; ;
		DCB 0x46 ; F
		DCB 0xAF ; ¯
		DCB 0xA1 ; ¡
		DCB    1
		DCB 0xA8 ; ¨
		DCB    0
		DCB 0x96 ; 
		DCB 0xF2 ; ò
		DCB 0xF7 ; ÷
		DCB 0xFE ; þ
		DCB 0xFB ; û
		DCB    0
		DCB 0x23 ; #
		DCB 0x38 ; 8
		DCB 0x22 ; "
		DCB 0x20
		DCB 0x21 ; !
		DCB    1
		DCB 0xA8 ; ¨
		DCB 0xF5 ; õ
		DCB 0xF7 ; ÷
		DCB 0x2A ; *
		DCB 0xFF
		DCB 0x20
		DCB 0x78 ; x
		DCB    0
		DCB    9
		DCB    0
		DCB 0x28 ; (
		DCB 0x5C ; \
		DCB 0xD0 ; Ð
		DCB 0xA0 ;  
		DCB 0x8A ; 
		DCB 0x21 ; !
		DCB 0x78 ; x
		DCB    9
		DCB    9
		DCB 0xF2 ; ò
		DCB 0xF7 ; ÷
		DCB 0x22 ; "
		DCB 0xFE ; þ
		DCB  0xA
		DCB 0x21 ; !
		DCB    0
		DCB 0x90 ; 
		DCB 0xF2 ; ò
		DCB 0xF7 ; ÷
		DCB 0x1E
		DCB 0xFE ; þ
		DCB  0xE
		DCB 0x46 ; F
		DCB  0xA
		DCB 0x21 ; !
		DCB 0xF2 ; ò
		DCB 0xF7 ; ÷
		DCB 0x1A
		DCB 0xFE ; þ
		DCB  0xF
		DCB 0x46 ; F
		DCB 0x64 ; d
		DCB 0x21 ; !
		DCB    0
		DCB 0x98 ; 
		DCB 0xF2 ; ò
		DCB 0xF7 ; ÷
		DCB 0x15
		DCB 0xFE ; þ
		DCB    2
		DCB 0x46 ; F
		DCB 0x3B ; ;
		DCB 0x46 ; F
		DCB 0x9F ; 
		DCB 0xA1 ; ¡
		DCB    1
		DCB 0xA8 ; ¨
		DCB    0
		DCB 0x96 ; 
		DCB 0xF2 ; ò
		DCB 0xF7 ; ÷
		DCB 0xDB ; Û
		DCB 0xFB ; û
		DCB    0
		DCB 0x23 ; #
		DCB 0x24 ; $
		DCB 0x22 ; "
		DCB 0x50 ; P
		DCB 0x21 ; !
		DCB    1
		DCB 0xA8 ; ¨
		DCB 0xF5 ; õ
		DCB 0xF7 ; ÷
		DCB    7
		DCB 0xFF
		DCB 0xE0 ; à
		DCB 0x8A ; 
		DCB 0x21 ; !
		DCB 0x78 ; x
		DCB    9
		DCB    9
		DCB 0xF2 ; ò
		DCB 0xF7 ; ÷
		DCB    3
		DCB 0xFE ; þ
		DCB  0xA
		DCB 0x21 ; !
		DCB    0
		DCB 0x90 ; 
		DCB 0xF2 ; ò
		DCB 0xF7 ; ÷
		DCB 0xFF
		DCB 0xFD ; ý
		DCB  0xE
		DCB 0x46 ; F
		DCB  0xA
		DCB 0x21 ; !
		DCB 0xF2 ; ò
		DCB 0xF7 ; ÷
		DCB 0xFB ; û
		DCB 0xFD ; ý
		DCB  0xF
		DCB 0x46 ; F
		DCB 0x64 ; d
		DCB 0x21 ; !
		DCB    0
		DCB 0x98 ; 
		DCB 0xF2 ; ò
		DCB 0xF7 ; ÷
		DCB 0xF6 ; ö
		DCB 0xFD ; ý
		DCB    2
		DCB 0x46 ; F
		DCB 0x3B ; ;
		DCB 0x46 ; F
		DCB 0x90 ; 
		DCB 0xA1 ; ¡
		DCB    1
		DCB 0xA8 ; ¨
		DCB    0
		DCB 0x96 ; 
		DCB 0xF2 ; ò
		DCB 0xF7 ; ÷
		DCB 0xBC ; ¼
		DCB 0xFB ; û
		DCB    0
		DCB 0x23 ; #
		DCB 0x2E ; .
		DCB 0x22 ; "
		DCB 0x50 ; P
		DCB 0x21 ; !
		DCB    1
		DCB 0xA8 ; ¨
		DCB 0xF5 ; õ
		DCB 0xF7 ; ÷
		DCB 0xE8 ; è
		DCB 0xFE ; þ
		DCB 0x20
		DCB 0x8B ; 
		DCB 0x21 ; !
		DCB 0x78 ; x
		DCB    9
		DCB    9
		DCB 0xF2 ; ò
		DCB 0xF7 ; ÷
		DCB 0xE4 ; ä
		DCB 0xFD ; ý
		DCB  0xA
		DCB 0x21 ; !
		DCB    0
		DCB 0x90 ; 
		DCB 0xF2 ; ò
		DCB 0xF7 ; ÷
		DCB 0xE0 ; à
		DCB 0xFD ; ý
		DCB  0xE
		DCB 0x46 ; F
		DCB  0xA
		DCB 0x21 ; !
		DCB 0xF2 ; ò
		DCB 0xF7 ; ÷
		DCB 0xDC ; Ü
		DCB 0xFD ; ý
		DCB  0xF
		DCB 0x46 ; F
		DCB 0x64 ; d
		DCB 0x21 ; !
		DCB    0
		DCB 0x98 ; 
		DCB 0xF2 ; ò
		DCB 0xF7 ; ÷
		DCB 0xD7 ; ×
		DCB 0xFD ; ý
		DCB    2
		DCB 0x46 ; F
		DCB 0x3B ; ;
		DCB 0x46 ; F
		DCB 0x80 ; 
		DCB 0xA1 ; ¡
		DCB    1
		DCB 0xA8 ; ¨
		DCB    0
		DCB 0x96 ; 
		DCB 0xF2 ; ò
		DCB 0xF7 ; ÷
		DCB 0x9D ; 
		DCB 0xFB ; û
		DCB    0
		DCB 0x23 ; #
		DCB 0x38 ; 8
		DCB 0x22 ; "
		DCB 0x50 ; P
		DCB 0x21 ; !
		DCB    1
		DCB 0xA8 ; ¨
		DCB 0xF5 ; õ
		DCB 0xF7 ; ÷
		DCB 0xC9 ; É
		DCB 0xFE ; þ
		DCB 0x2A ; *
		DCB 0x46 ; F
		DCB  0xB
		DCB 0x20
		DCB 0x42 ; B
		DCB 0x43 ; C
		DCB  0xC
		DCB 0x32 ; 2
		DCB    0
		DCB 0x21 ; !
		DCB 0x7D ; }
		DCB 0x48 ; H
		DCB 0xF5 ; õ
		DCB 0xF7 ; ÷
		DCB 0x63 ; c
		DCB 0xFC ; ü
		DCB 0xF3 ; ó
		DCB 0xF7 ; ÷
		DCB 0x6F ; o
		DCB 0xF9 ; ù
		DCB 0xF3 ; ó
		DCB 0xF7 ; ÷
		DCB 0x29 ; )
		DCB 0xF9 ; ù
		DCB  0xA
		DCB 0x28 ; (
		DCB 0x10
		DCB 0xD0 ; Ð
		DCB    8
		DCB 0x28 ; (
		DCB 0x14
		DCB 0xD0 ; Ð
		DCB 0x18
		DCB 0x28 ; (
		DCB 0x12
		DCB 0xD0 ; Ð
		DCB    9
		DCB 0x28 ; (
		DCB 0x52 ; R
		DCB 0xD0 ; Ð
		DCB 0x17
		DCB 0x28 ; (
		DCB 0x50 ; P
		DCB 0xD0 ; Ð
		DCB 0x16
		DCB 0x28 ; (
		DCB 0x79 ; y
		DCB 0xD0 ; Ð
		DCB 0x19
		DCB 0x28 ; (
		DCB 0x78 ; x
		DCB 0xD0 ; Ð
		DCB  0xB
		DCB 0x28 ; (
		DCB 0xFF
		DCB 0xD0 ; Ð
		DCB    0
		DCB 0x20
		DCB    3
		DCB 0xB0 ; °
		DCB 0xF0 ; ð
		DCB 0xBD ; ½
		DCB    4
		DCB 0x2D ; -
		DCB    1
		DCB 0xD3 ; Ó
		DCB    0
		DCB 0x25 ; %
		DCB    0
		DCB 0xE0 ; à
		DCB    1
		DCB 0x35 ; 5
		DCB 0x88 ; 
		DCB 0xE0 ; à
		DCB    0
		DCB 0x2D ; -
		DCB  0xF
		DCB 0xD0 ; Ð
		DCB    1
		DCB 0x2D ; -
		DCB 0x15
		DCB 0xD0 ; Ð
		DCB    2
		DCB 0x2D ; -
		DCB 0x2D ; -
		DCB 0xD0 ; Ð
		DCB    3
		DCB 0x2D ; -
		DCB 0x31 ; 1
		DCB 0xD0 ; Ð
		DCB    4
		DCB 0x2D ; -
		DCB 0x59 ; Y
		DCB 0xD1 ; Ñ
		DCB 0xE2 ; â
		DCB 0x8A ; 
		DCB 0x21 ; !
		DCB 0x8B ; 
		DCB  0xA
		DCB 0x32 ; 2
		DCB 0x91 ; 
		DCB 0x42 ; B
		DCB 0x54 ; T
		DCB 0xD9 ; Ù
		DCB    1
		DCB 0x39 ; 9
		DCB 0x21 ; !
		DCB 0x83 ; 
		DCB 0x76 ; v
		DCB 0xE0 ; à
		DCB 0x20
		DCB 0x78 ; x
		DCB    1
		DCB    7
		DCB    9
		DCB  0xF
		DCB    0
		DCB 0x29 ; )
		DCB 0x4C ; L
		DCB 0xD0 ; Ð
		DCB    1
		DCB 0x38 ; 8
		DCB 0x20
		DCB 0x70 ; p
		DCB 0x6E ; n
		DCB 0xE0 ; à
		DCB 0x26 ; &
		DCB 0x78 ; x
		DCB 0x37 ; 7
		DCB    9
		DCB    1
		DCB 0x2F ; /
		DCB 0x45 ; E
		DCB 0xD0 ; Ð
		DCB 0x10
		DCB 0x3E ; >
		DCB 0x26 ; &
		DCB 0x70 ; p
		DCB 0x36 ; 6
		DCB    9
		DCB 0xA0 ;  
		DCB 0x8A ; 
		DCB 0x70 ; p
		DCB 0x43 ; C
		DCB 0x39 ; 9
		DCB    0
		DCB 0xF2 ; ò
		DCB 0xF7 ; ÷
		DCB 0x7F ; 
		DCB 0xFD ; ý
		DCB 0xA0 ;  
		DCB 0x82 ; 
		DCB 0xE0 ; à
		DCB 0x8A ; 
		DCB 0x70 ; p
		DCB 0x43 ; C
		DCB 0x39 ; 9
		DCB    0
		DCB 0xF2 ; ò
		DCB 0xF7 ; ÷
		DCB 0x79 ; y
		DCB 0xFD ; ý
		DCB 0xE0 ; à
		DCB 0x82 ; 
		DCB 0x20
		DCB 0x8B ; 
		DCB 0x70 ; p
		DCB 0x43 ; C
		DCB 0x39 ; 9
		DCB    0
		DCB 0xF2 ; ò
		DCB 0xF7 ; ÷
		DCB 0x73 ; s
		DCB 0xFD ; ý
		DCB 0x20
		DCB 0x83 ; 
		DCB 0x54 ; T
		DCB 0xE0 ; à
		DCB 0xA1 ; ¡
		DCB 0x8A ; 
		DCB    0
		DCB 0x29 ; )
		DCB 0x2C ; ,
		DCB 0xD0 ; Ð
		DCB    1
		DCB 0x39 ; 9
		DCB 0xA1 ; ¡
		DCB 0x82 ; 
		DCB 0x4E ; N
		DCB 0xE0 ; à
		DCB 0xA2 ; ¢
		DCB 0x8A ; 
		DCB 0xE1 ; á
		DCB 0x8A ; 
		DCB  0xA
		DCB 0x32 ; 2
		DCB 0x91 ; 
		DCB 0x42 ; B
		DCB 0x24 ; $
		DCB 0xD9 ; Ù
		DCB    1
		DCB 0x39 ; 9
		DCB 0xE1 ; á
		DCB 0x82 ; 
		DCB 0x46 ; F
		DCB 0xE0 ; à
		DCB    0
		DCB 0x2D ; -
		DCB  0xF
		DCB 0xD0 ; Ð
		DCB    1
		DCB 0x2D ; -
		DCB 0x15
		DCB 0xD0 ; Ð
		DCB    2
		DCB 0x2D ; -
		DCB 0x1C
		DCB 0xD0 ; Ð
		DCB    3
		DCB 0x2D ; -
		DCB 0x24 ; $
		DCB 0xD0 ; Ð
		DCB    4
		DCB 0x2D ; -
		DCB 0x17
		DCB 0xD1 ; Ñ
		DCB 0x21 ; !
		DCB 0x8B ; 
		DCB 0x7D ; }
		DCB 0x22 ; "
		DCB 0x92 ; 
		DCB    1
		DCB 0x91 ; 
		DCB 0x42 ; B
		DCB 0x12
		DCB 0xD2 ; Ò
		DCB    1
		DCB 0x31 ; 1
		DCB 0x21 ; !
		DCB 0x83 ; 
		DCB 0x34 ; 4
		DCB 0xE0 ; à
		DCB 0x20
		DCB 0x78 ; x
		DCB    1
		DCB    7
		DCB    9
		DCB  0xF
		DCB    3
		DCB 0x29 ; )
		DCB  0xA
		DCB 0xD0 ; Ð
		DCB    1
		DCB 0x30 ; 0
		DCB 0x20
		DCB 0x70 ; p
		DCB 0x2C ; ,
		DCB 0xE0 ; à
		DCB 0x26 ; &
		DCB 0x78 ; x
		DCB 0x37 ; 7
		DCB    9
		DCB  0xF
		DCB 0x2F ; /
		DCB    3
		DCB 0xD0 ; Ð
		DCB 0x10
		DCB 0x36 ; 6
		DCB 0x26 ; &
		DCB 0x70 ; p
		DCB 0x36 ; 6
		DCB    9
		DCB 0xBC ; ¼
		DCB 0xE7 ; ç
		DCB 0x76 ; v
		DCB 0xE6 ; æ
		DCB 0xE2 ; â
		DCB 0x8A ; 
		DCB 0xA1 ; ¡
		DCB 0x8A ; 
		DCB  0xA
		DCB 0x3A ; :
		DCB 0x91 ; 
		DCB 0x42 ; B
		DCB 0xF9 ; ù
		DCB 0xDA ; Ú
		DCB    1
		DCB 0x31 ; 1
		DCB 0xA1 ; ¡
		DCB 0x82 ; 
		DCB 0x1B
		DCB 0xE0 ; à
		DCB    8
		DCB 0xE0 ; à
		DCB 0x3D ; =
		DCB 0xE0 ; à
		DCB 0x22 ; "
		DCB 0x8B ; 
		DCB 0xE1 ; á
		DCB 0x8A ; 
		DCB  0xA
		DCB 0x3A ; :
		DCB 0x91 ; 
		DCB 0x42 ; B
		DCB 0xEF ; ï
		DCB 0xDA ; Ú
		DCB    1
		DCB 0x31 ; 1
		DCB 0xE1 ; á
		DCB 0x82 ; 
		DCB 0x11
		DCB 0xE0 ; à
		DCB    2
		DCB 0x2D ; -
		DCB 0x1D
		DCB 0xD0 ; Ð
		DCB    3
		DCB 0x2D ; -
		DCB 0x26 ; &
		DCB 0xD0 ; Ð
		DCB    4
		DCB 0x2D ; -
		DCB    0
		DCB 0xD0 ; Ð
		DCB 0x5D ; ]
		DCB 0xE6 ; æ
		DCB 0x20
		DCB 0x78 ; x
		DCB 0x7D ; }
		DCB 0x22 ; "
		DCB 0xC1 ; Á
		DCB    7
		DCB 0xC9 ; É
		DCB  0xF
		DCB    0
		DCB 0x29 ; )
		DCB    1
		DCB 0xD0 ; Ð
		DCB 0xC8 ; È
		DCB 0x32 ; 2
		DCB 0x4B ; K
		DCB 0x32 ; 2
		DCB    0
		DCB    9
		DCB 0x50 ; P
		DCB 0x43 ; C
		DCB 0x20
		DCB 0x83 ; 
		DCB 0xFA ; ú
		DCB 0xF7 ; ÷
		DCB 0xCB ; Ë
		DCB 0xFB ; û
		DCB    2
		DCB 0x28 ; (
		DCB 0xD6 ; Ö
		DCB 0xD3 ; Ó
		DCB 0x31 ; 1
		DCB 0x20
		DCB  0xF
		DCB 0x21 ; !
		DCB    0
		DCB    1
		DCB 0xFA ; ú
		DCB 0xF7 ; ÷
		DCB    2
		DCB 0xFC ; ü
		DCB  0xF
		DCB 0x21 ; !
		DCB    0
		DCB 0x20
		DCB 0xFA ; ú
		DCB 0xF7 ; ÷
		DCB 0xFE ; þ
		DCB 0xFB ; û
		DCB 0x44 ; D
		DCB 0xE6 ; æ
		DCB 0x20
		DCB 0x78 ; x
		DCB 0x64 ; d
		DCB 0x22 ; "
		DCB 0xC1 ; Á
		DCB    7
		DCB 0xC9 ; É
		DCB  0xF
		DCB    0
		DCB 0x29 ; )
		DCB    0
		DCB 0xD0 ; Ð
		DCB 0xDC ; Ü
		DCB 0x32 ; 2
		DCB    0
		DCB    9
		DCB 0x50 ; P
		DCB 0x43 ; C
		DCB 0xA0 ;  
		DCB 0x82 ; 
		DCB 0xE6 ; æ
		DCB 0xE7 ; ç
		DCB 0x20
		DCB 0x78 ; x
		DCB 0x69 ; i
		DCB 0x22 ; "
		DCB 0xC1 ; Á
		DCB    7
		DCB 0xC9 ; É
		DCB  0xF
		DCB    0
		DCB 0x29 ; )
		DCB    0
		DCB 0xD0 ; Ð
		DCB 0xF5 ; õ
		DCB 0x32 ; 2
		DCB    0
		DCB    9
		DCB 0x50 ; P
		DCB 0x43 ; C
		DCB 0xE0 ; à
		DCB 0x82 ; 
		DCB 0xDB ; Û
		DCB 0xE7 ; ç
		DCB    1
		DCB 0x20
		DCB    3
		DCB 0xB0 ; °
		DCB 0xF0 ; ð
		DCB 0xBD ; ½
		DCB 0x2C ; ,
		DCB    0
		DCB    0
		DCB 0x20
aRxBattery	DCB "RX Battery",0
		DCB    0
aType		DCB "Type",0
		DCB    0
		DCB    0
		DCB    0
aCells		DCB "Cells",0
		ALIGN 4
		DCB 0x4C ; L
		DCB 0x6F, 0, 0
		DCB 0x49 ; I
		DCB 0x6E, 0x74,	0
		DCD 0x747845, 0x6F50694C, 0
		DCB 0x4E ; N
		DCB 0x69, 0x4D,	0x48
		ALIGN 0x10
		DCB 0x25 ; %
aU_UU		DCB "u.%u%u",0
aU_UU_0		DCB "(%u.%u%u)",0
		ALIGN 4
		DCB 0x41 ; A
		DCB 0x6C, 0, 0
		DCB 0x48 ; H
		DCB 0x69, 0, 0
		DCD arrow_gfx

; =============== S U B	R O U T	I N E =======================================


auxChannelsPage				; DATA XREF: ROM:0000D324o
					; ROM:0000D384o ...

ch5BytePtr	= -0x30
var_2C		= -0x2C
var_28		= -0x28
var_24		= -0x24
var_20		= -0x20
var_1C		= -0x1C

		PUSH	{R3-R7,LR}
		MOVS	R4, #0
		LDR	R7, =usedModelPtr
		SUB	SP, SP,	#0x18
		LDR	R3, [R7]
		ADDS	R3, #0x3C ; '<'
		LDRB	R0, [R3]
		STR	R0, [SP,#0x30+ch5BytePtr]
		LDRB	R0, [R3,#1]
		STR	R0, [SP,#0x30+var_2C]
		ADDS	R3, #0x51 ; 'Q'
		LDRB	R0, [R3]
		LSLS	R1, R0,	#0x1C
		LSRS	R1, R1,	#0x1C
		STR	R1, [SP,#0x30+var_28]
		LSRS	R0, R0,	#4
		STR	R0, [SP,#0x30+var_24]
		LDRB	R0, [R3,#4]
		LSLS	R1, R0,	#0x1C
		LSRS	R1, R1,	#0x1C
		STR	R1, [SP,#0x30+var_20]
		LSRS	R0, R0,	#4
		STR	R0, [SP,#0x30+var_1C]

loc_F4FE				; CODE XREF: auxChannelsPage+DCj
					; auxChannelsPage+F2j ...
		BL	callSetupDMAandSend
		LDR	R0, =aAux_Channels_0 ; aux channels header
		BL	displayPageHeader
		MOVS	R6, #0
		ADR	R5, ch5PTr

loc_F50C				; CODE XREF: auxChannelsPage+ACj
		MOVS	R3, #0		; a4
		LSLS	R2, R6,	#3
		ADDS	R2, #0xC	; y
		MOVS	R1, #8		; x
		LDR	R0, [R5]	; text
		BL	displayTextAt
		LDR	R0, [R7]
		LDRB	R1, [R0,#9]
		CMP	R6, #0
		BNE	loc_F532
		CMP	R1, #0
		BEQ	loc_F53E
		MOVS	R2, #0x37 ; '7'
		LDRB	R2, [R2,R0]
		LSLS	R2, R2,	#0x1C
		BPL	loc_F53E
		LDR	R0, =0xCA9F
		B	loc_F56A
; ---------------------------------------------------------------------------

loc_F532				; CODE XREF: auxChannelsPage+50j
		CMP	R6, #1
		BNE	loc_F53E
		CMP	R1, #2
		BCC	loc_F53E
		LDR	R0, =0xCA9F
		B	loc_F56A
; ---------------------------------------------------------------------------

loc_F53E				; CODE XREF: auxChannelsPage+54j
					; auxChannelsPage+5Cj ...
		LSLS	R1, R6,	#2
		MOV	R0, SP
		LDR	R0, [R0,R1]
		CMP	R0, #7
		BLT	loc_F554
		SUBS	R0, #7
		MOVS	R1, #6
		MULS	R1, R0
		ADR	R0, aSwaB	; "SwA+B"
		ADDS	R0, R0,	R1
		B	loc_F56A
; ---------------------------------------------------------------------------

loc_F554				; CODE XREF: auxChannelsPage+76j
		LSLS	R0, R0,	#2
		LDR	R1, =dword_200000B8 ; addess of	switch
		LDR	R0, [R1,R0]	; text
		B	loc_F56A
; ---------------------------------------------------------------------------

A_plus_B
		NOP
		NOP

b_plus_c
		NOP
		NOP

c_plus_d
		NOP
		NOP

a_plus_d
		NOP

loc_F56A				; CODE XREF: auxChannelsPage+60j
					; auxChannelsPage+6Cj ...
		MOVS	R3, #0		; a4
		LSLS	R2, R6,	#3
		ADDS	R2, #0xC	; y
		MOVS	R1, #0x58 ; 'X'	; x
		BL	displayTextAt
		ADDS	R6, #1
		ADDS	R5, #4
		CMP	R6, #6
		BCC	loc_F50C
		LSLS	R2, R4,	#3
		ADDS	R2, #0xC
		MOVS	R1, #0
		LDR	R0, =arrow_gfx
		BL	displayGFX
		BL	LCD_updateCALL
		BL	getKeyCode
		CMP	R0, #8
		BEQ	loc_F5E8
		CMP	R0, #0x18
		BEQ	loc_F5E8
		CMP	R0, #9
		BEQ	loc_F5D8
		CMP	R0, #0x17
		BEQ	loc_F5D8
		CMP	R0, #0xA
		BEQ	loc_F5B4
		CMP	R0, #0x19
		BEQ	loc_F5F8
		CMP	R0, #0xB
		BNE	loc_F4FE
		MOVS	R0, #0
		ADD	SP, SP,	#0x18
		POP	{R3-R7,PC}
; ---------------------------------------------------------------------------

loc_F5B4				; CODE XREF: auxChannelsPage+D4j
		ADDS	R4, #1
		CMP	R4, #6
		BNE	loc_F5BC
		MOVS	R4, #0

loc_F5BC				; CODE XREF: auxChannelsPage+E8j
					; auxChannelsPage+116j	...
		BL	sub_9BC0
		CMP	R0, #2
		BCC	loc_F4FE
		MOVS	R0, #0x31 ; '1'
		MOVS	R1, #0xF
		LSLS	R0, R0,	#4
		BL	beep
		MOVS	R1, #0xF
		MOVS	R0, #0
		BL	beep
		B	loc_F4FE
; ---------------------------------------------------------------------------

loc_F5D8				; CODE XREF: auxChannelsPage+CCj
					; auxChannelsPage+D0j
		ADD	R1, SP,	#0x30+ch5BytePtr
		LSLS	R2, R4,	#2
		LDR	R0, [R1,R2]
		CMP	R0, #0xB
		BCS	loc_F4FE
		ADDS	R0, #1
		STR	R0, [R1,R2]
		B	loc_F5BC
; ---------------------------------------------------------------------------

loc_F5E8				; CODE XREF: auxChannelsPage+C4j
					; auxChannelsPage+C8j
		ADD	R1, SP,	#0x30+ch5BytePtr
		LSLS	R2, R4,	#2
		LDR	R0, [R1,R2]
		CMP	R0, #0
		BLS	loc_F4FE
		SUBS	R0, #1
		STR	R0, [R1,R2]
		B	loc_F5BC
; ---------------------------------------------------------------------------

loc_F5F8				; CODE XREF: auxChannelsPage+D8j
		LDR	R3, [R7]
		ADDS	R3, #0x3C ; '<'
		LDR	R1, [SP,#0x30+ch5BytePtr]
		STRB	R1, [R3]
		LDR	R1, [SP,#0x30+var_2C]
		STRB	R1, [R3,#1]
		LDR	R1, [SP,#0x30+var_28]
		LDR	R0, [SP,#0x30+var_24]
		LSLS	R0, R0,	#4
		ORRS	R0, R1
		ADDS	R3, #0x51 ; 'Q'
		STRB	R0, [R3]
		LDR	R1, [SP,#0x30+var_20]
		LDR	R0, [SP,#0x30+var_1C]
		LSLS	R0, R0,	#4
		ORRS	R0, R1
		STRB	R0, [R3,#4]
		MOVS	R0, #1
		ADD	SP, SP,	#0x18
		POP	{R3-R7,PC}
; End of function auxChannelsPage

; ---------------------------------------------------------------------------
off_F620	DCD dword_200000B8	; DATA XREF: auxChannelsPage+86r
					; addess of switch
off_F624	DCD usedModelPtr	; DATA XREF: auxChannelsPage+4r
off_F628	DCD aAux_Channels_0	; DATA XREF: auxChannelsPage+32r
					; "Aux. channels"
dword_F62C	DCD 0xCA9F		; DATA XREF: auxChannelsPage+5Er
					; auxChannelsPage+6Ar
ch5PTr		DCD 0xCC68		; DATA XREF: auxChannelsPage+3Ao
					; auxChannelsPage+44r
ch6ptr		DCD 0xCC72
ch7ptr		DCD 0xCC7C
ch8ptr		DCD 0xCC86
ch9ptr		DCD 0xCC90
ch10ptr		DCW 0xCC9A
		DCB    0
		DCB    0
off_F648	DCD arrow_gfx		; DATA XREF: auxChannelsPage+B4r
aSwaB		DCB "SwA+B",0           ; DATA XREF: auxChannelsPage+7Eo
		ALIGN 4
aBC		DCB "B+C",0
aSwcD		DCB "SwC+D",0
aSwaD_0		DCB "SwA+D",0
aSwaD		DCB "Error",0
		ALIGN 4

; =============== S U B	R O U T	I N E =======================================


; int *__fastcall createPacketsForCH7_10(unsigned int switch_1)
createPacketsForCH7_10			; CODE XREF: createRadioPacket+58Ap
					; createRadioPacket+5A0p ...
		PUSH	{R3-R7,LR}
		B	loc_F758
; ---------------------------------------------------------------------------
		NOP

loc_F672				; CODE XREF: ROM:0000F75Ej
		CMP	R0, #7
		BEQ	loc_F6A0
		CMP	R0, #8
		BEQ	loc_F6A6
		CMP	R0, #9
		BEQ	loc_F6AC
		CMP	R0, #0xA
		BEQ	loc_F6B2
		CMP	R0, #2
		BHI	loc_F698
		SUBS	R0, #1
		LSLS	R0, R0,	#2
		LDR	R1, =VARA_ADC_0	; Dave keeps additional	channel	information here - I am	not sure if it is channel data or mix data
		LDR	R0, [R0,R1]
		LDR	R1, =dword_2710
		MULS	R0, R1
		LSRS	R0, R0,	#0xB
		SUBS	R0, R0,	R1
		B	locret_F6EE
; ---------------------------------------------------------------------------

loc_F698				; CODE XREF: createPacketsForCH7_10+18j
		SUBS	R0, #3
		BL	channelDataHelper
		B	locret_F6EE
; ---------------------------------------------------------------------------

loc_F6A0				; CODE XREF: createPacketsForCH7_10+8j
		MOVS	R0, #0
		MOVS	R3, #1
		B	loc_F6B8
; ---------------------------------------------------------------------------

loc_F6A6				; CODE XREF: createPacketsForCH7_10+Cj
		MOVS	R0, #2
		MOVS	R3, #1
		B	loc_F6D0
; ---------------------------------------------------------------------------

loc_F6AC				; CODE XREF: createPacketsForCH7_10+10j
		MOVS	R0, #2
		MOVS	R3, #3
		B	loc_F6D0
; ---------------------------------------------------------------------------

loc_F6B2				; CODE XREF: createPacketsForCH7_10+14j
		MOVS	R0, #0
		MOVS	R3, #3
		B	loc_F6B8
; ---------------------------------------------------------------------------

loc_F6B8				; CODE XREF: createPacketsForCH7_10+38j
					; createPacketsForCH7_10+4Aj
		BL	channelDataHelper
		MOVS	R4, R0
		MOVS	R0, R3
		BL	channelDataHelper
		LSLS	R0, R0,	#1
		ADDS	R0, R0,	R4
		MOVS	R1, #3
		BL	div_
		B	locret_F6EE
; ---------------------------------------------------------------------------

loc_F6D0				; CODE XREF: createPacketsForCH7_10+3Ej
					; createPacketsForCH7_10+44j
		BL	channelDataHelper
		LSLS	R0, R0,	#1
		MOVS	R4, R0
		MOVS	R0, R3
		BL	channelDataHelper
		ADDS	R4, R4,	R0
		LSLS	R0, R0,	#1
		ADDS	R0, R0,	R4
		MOVS	R1, #5
		BL	div_
		B	locret_F6EE
; ---------------------------------------------------------------------------

loc_F6EC				; CODE XREF: ROM:0000F75Aj
		MOVS	R0, #0

locret_F6EE				; CODE XREF: createPacketsForCH7_10+2Aj
					; createPacketsForCH7_10+32j ...
		POP	{R3-R7,PC}
; End of function createPacketsForCH7_10


; =============== S U B	R O U T	I N E =======================================


channelDataHelper			; CODE XREF: createPacketsForCH7_10+2Ep
					; createPacketsForCH7_10:loc_F6B8p ...
		PUSH	{R3-R7,LR}
		LDR	R5, =inputStates
		LDR	R5, [R5]
		MOV	R3, R0
		ADDS	R3, #0x10
		MOVS	R4, #1
		LSLS	R4, R3
		TST	R4, R5
		BEQ	loc_F706
		LDR	R0, =dword_2710
		B	locret_F718
; ---------------------------------------------------------------------------

loc_F706				; CODE XREF: channelDataHelper+10j
		CMP	R0, #2
		BNE	loc_F712
		MOVS	R4, #0x100000
		TST	R4, R5
		BEQ	loc_F716

loc_F712				; CODE XREF: channelDataHelper+18j
		LDR	R0, =0xFFFFD8F0
		B	locret_F718
; ---------------------------------------------------------------------------

loc_F716				; CODE XREF: channelDataHelper+20j
		MOVS	R0, #0

locret_F718				; CODE XREF: channelDataHelper+14j
					; channelDataHelper+24j
		POP	{R3-R7,PC}
; End of function channelDataHelper

; ---------------------------------------------------------------------------
		ALIGN 4
off_F71C	DCD VARA_ADC_0		; DATA XREF: createPacketsForCH7_10+1Er
					; Dave keeps additional	channel	information here - I am	not sure if it is channel data or mix data
off_F720	DCD dword_2710		; DATA XREF: createPacketsForCH7_10+22r
					; channelDataHelper+12r
off_F724	DCD inputStates		; DATA XREF: channelDataHelper+2r
dword_F728	DCD 0xFFFFD8F0		; DATA XREF: channelDataHelper:loc_F712r

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame fpd=8

loadTimerSettingsFromEeprom		; CODE XREF: main_screen:loc_C070p

var_4		= -4

		PUSH	{LR}
		BL	settingsValidation
		LDR	R0, =(sensorsArrayInRam+0xD0)
		ADDS	R0, #6		; target
		MOVS	R1, #0x30 ; '0'	; offset
		MOVS	R2, #4		; len
		BL	readEeprom
		POP	{PC}
; ---------------------------------------------------------------------------

loc_F740				; CODE XREF: timerConfiguration+AAp
		PUSH	{LR}
		LDR	R0, =(sensorsArrayInRam+0xD0)
		ADDS	R0, #6		; text
		MOVS	R1, #0x30 ; '0'	; x
		MOVS	R2, #4		; y
		BL	saveEepromData
		BL	someSPImethod
		POP	{PC}
; ---------------------------------------------------------------------------
off_F754	DCD sensorsArrayInRam+0xD0 ; DATA XREF:	loadTimerSettingsFromEeprom+6r
					; loadTimerSettingsFromEeprom+16r
; End of function loadTimerSettingsFromEeprom

; ---------------------------------------------------------------------------

loc_F758				; CODE XREF: createPacketsForCH7_10+2j
		CMP	R0, #0
		BEQ	loc_F6EC
		CMP	R0, #0xB
		BNE	loc_F672
		MOVS	R2, #0		; a3
		MOVS	R1, #0		; index

loc_F764				; sensorID
		MOVS	R0, #0xFE ; 'þ'
		BL	sensorsFunction
		LDR	R1, aTestPage	; "\x10'ÿÿ"
		MOVS	R2, #0x32 ; '2'
		CMP	R0, R1
		BEQ	a4+2
		MOVS	R1, #0xC8 ; 'È'
		CMP	R0, R2
		BGT	loc_F77E
		SUBS	R0, R2,	R0
		MULS	R0, R1
		B	locret_F6EE
; ---------------------------------------------------------------------------

loc_F77E				; CODE XREF: ROM:0000F776j
		SUBS	R0, R0,	R2
; ---------------------------------------------------------------------------
		DCD 0x42404348
; _BYTE	*a4
a4		DCD 0x4802E7B3		; CODE XREF: ROM:0000F770j
		DCD 0xE7B04240
aTestPage	DCB 0,"",0,0,0x10,"'",0,0,"ÿÿ" ; DATA XREF: ROM:0000F76Ar
		ALIGN 4
aModelName	DCB "ÿÿÿÿÿÿÿÿÿÿÿÿ"
varModelName	DCD 0x2000002C
		DCB 0
unk_F7A9	DCB    0
		DCB    0
		DCB 0xF8 ; ø
unk_F7AC	DCB 0x49 ; I
		DCB 0x6E ; n
		DCB 0x74 ; t
		DCB 0x56 ; V
		DCB    0
		DCB 0x20
		DCB 0x54 ; T
		DCB 0x65 ; e
		DCB 0x6D ; m
		DCB    0
		DCB 0x20
		DCB 0x4D ; M
		DCB 0x6F ; o
		DCB 0x74 ; t
		DCB    0
		DCB 0x45 ; E
		DCB 0x78 ; x
		DCB 0x74 ; t
		DCB 0x56 ; V
		DCB    0
		DCB 0x20
		DCB 0x20
		DCB 0x20
		DCB 0x20
		DCB    0
unk_F7C5	DCB 0x4F ; O
		DCB 0x64 ; d
		DCB 0x6F ; o
		DCB 0x31 ; 1
		DCB    0
		DCB 0x4F ; O
		DCB 0x64 ; d
		DCB 0x6F ; o
		DCB 0x32 ; 2
		DCB    0
		DCB 0x20
		DCB 0x53 ; S
		DCB 0x70 ; p
		DCB 0x65 ; e
		DCB    0
		DCB 0x54 ; T
		DCB 0x78 ; x
		DCB 0x2E ; .
		DCB 0x56 ; V
		DCB    0
		DCB 0x20
		DCB 0x20
		DCB 0x20
		DCB 0x20
		DCB    0
unk_F7DE	DCB 0x20
		DCB 0x53 ; S
		DCB 0x4E ; N
		DCB 0x52 ; R
		DCB    0
		DCB 0x4E ; N
		DCB 0x6F ; o
		DCB 0x69 ; i
		DCB 0x2E ; .
		DCB    0
		DCB 0x52 ; R
		DCB 0x53 ; S
		DCB 0x53 ; S
		DCB 0x49 ; I
		DCB    0
		DCB 0x20
		DCB 0x20
		DCB 0x20
		DCB 0x20
		DCB    0
		DCB 0x20
		DCB 0x45 ; E
		DCB 0x52 ; R
		DCB 0x52 ; R
		DCB    0
		DCB    0
aIbusPwm	DCB "IBUS/PWM",0        ; DATA XREF: PPMOutMenu+1Eo ROM:texto
		DCB 0x49 ; I
		DCB 0x42 ; B
		DCB 0x55 ; U
		DCB 0x53 ; S
		DCB 0x2F ; /
		DCB 0x50 ; P
		DCB 0x50 ; P
		DCB 0x4D ; M
		DCB    0
		DCB 0x53 ; S
		DCB 0x42 ; B
		DCB 0x55 ; U
		DCB 0x53 ; S
		DCB 0x2F ; /
		DCB 0x50 ; P
		DCB 0x57 ; W
		DCB 0x4D ; M
		DCB    0
		DCB 0x53 ; S
		DCB 0x42 ; B
		DCB 0x55 ; U
		DCB 0x53 ; S
		DCB 0x2F ; /
		DCB 0x50 ; P
		DCB 0x50 ; P
		DCB 0x4D ; M
		DCB    0

; =============== S U B	R O U T	I N E =======================================


printTimer				; CODE XREF: main_screen+1DCp
		PUSH	{R4-R7,LR}
		LDR	R7, =(sensorsArrayInRam+0xD0)
		LDR	R6, =0xE000E018
		LDR	R4, [R6]
		LDR	R5, [R7]
		CMP	R5, #0
		BEQ	loc_F850
		CMP	R4, R5
		BGT	loc_F832
		SUBS	R5, R5,	R4
		B	loc_F83A
; ---------------------------------------------------------------------------

loc_F832				; CODE XREF: printTimer+10j
		LDR	R3, =0xFFFFFF
		SUBS	R3, R3,	R4
		ADDS	R3, R3,	R5
		ADDS	R5, R3,	#0

loc_F83A				; CODE XREF: printTimer+14j
		LDR	R3, =0x2DC347
		CMP	R5, R3
		BLT	loc_F89E
		SUBS	R5, R5,	R3
		ADDS	R5, R5,	R4
		CMP	R5, R3
		STR	R5, [R7]
		LDRH	R4, [R7,#(sensorsArrayInRam+0xD4 - 0x20000274)]
		ADDS	R4, #1
		STRH	R4, [R7,#(sensorsArrayInRam+0xD4 - 0x20000274)]
		B	loc_F864
; ---------------------------------------------------------------------------

loc_F850				; CODE XREF: printTimer+Cj
		BL	isTimerActive
		CMP	R0, #0
		BEQ	loc_F89A
		LDR	R3, =0x2DC347
		CMP	R4, R3
		BGT	loc_F862
		LDR	R3, =0xFFFFFF
		ADDS	R4, R4,	R3

loc_F862				; CODE XREF: printTimer+40j
		STR	R4, [R7]

loc_F864				; CODE XREF: printTimer+32j
		MOVS	R0, R7
		ADDS	R0, #0xA
		LDR	R1, =0xF9E6
		MOVS	R2, #0
		MOVS	R3, #0
		LDRH	R4, [R7,#(sensorsArrayInRam+0xD4 - 0x20000274)]

loc_F870				; CODE XREF: printTimer+5Ej
		LDR	R5, =(byte_DA0+0x70)
		CMP	R4, R5
		BLT	loc_F87C
		ADDS	R2, #1
		SUBS	R4, R4,	R5
		B	loc_F870
; ---------------------------------------------------------------------------

loc_F87C				; CODE XREF: printTimer+58j
					; printTimer+6Aj
		MOVS	R5, #0x3C ; '<'
		CMP	R4, R5
		BLT	loc_F888
		ADDS	R3, #1
		SUBS	R4, R4,	R5
		B	loc_F87C
; ---------------------------------------------------------------------------

loc_F888				; CODE XREF: printTimer+64j
		MOVS	R5, #0x3F ; '?'
		ANDS	R4, R5
		ANDS	R3, R5
		ANDS	R2, R5
		PUSH	{R4}
		BL	sprintf
		POP	{R4}
		B	loc_F89E
; ---------------------------------------------------------------------------

loc_F89A				; CODE XREF: printTimer+3Aj
		LDR	R0, =(off_F9F4+1)
		B	loc_F8A2
; ---------------------------------------------------------------------------

loc_F89E				; CODE XREF: printTimer+22j
					; printTimer+7Cp
		MOVS	R0, R7
		ADDS	R0, #0xA

loc_F8A2				; CODE XREF: printTimer+80j
		MOVS	R1, #1

loc_F8A4
		MOVS	R2, #2
		MOVS	R3, #0

loc_F8A8
		BL	displaySmallTextAt
		POP	{R4-R7,PC}
; End of function printTimer


; =============== S U B	R O U T	I N E =======================================


isTimerActive				; CODE XREF: printTimer:loc_F850p
		PUSH	{R4-R7,LR}
; End of function isTimerActive

		LDR	R7, =(sensorsArrayInRam+0xD0)
		LDR	R6, =word_1FFFFD9D
		ADDS	R7, #6
		LDRH	R4, [R7,#(sensorsArrayInRam+0xD8 - 0x2000027A)]
		LDR	R2, =0xFFFF
		CMP	R4, R2
		BEQ	loc_F8EE
		LDR	R2, =0x3E8
		CMP	R4, R2
		BLT	loc_F8EE
		LDR	R2, =0x7D0
		CMP	R4, R2
		BGT	loc_F8EE
		LDRH	R5, [R7]
		MOVS	R2, #0xF
		ANDS	R5, R2
		CMP	R5, #0
		BLE	loc_F8EE
		CMP	R5, #0xA
		BGT	loc_F8EE
		SUBS	R7, #6
		SUBS	R5, #1
		MOVS	R3, #2
		MULS	R5, R3
		ADDS	R6, R6,	R5
		LDRB	R2, [R6]
		LDRB	R1, [R6,#1]
		LSLS	R1, R1,	#8
		ORRS	R2, R1
		CMP	R2, R4
		BGE	loc_F8F2

loc_F8EE				; CODE XREF: ROM:0000F8BCj
					; ROM:0000F8C2j ...
		MOVS	R0, #0
		B	locret_F8F4
; ---------------------------------------------------------------------------

loc_F8F2				; CODE XREF: ROM:0000F8ECj
		MOVS	R0, #1

locret_F8F4				; CODE XREF: ROM:0000F8F0j
		POP	{R4-R7,PC}

; =============== S U B	R O U T	I N E =======================================


timerConfiguration			; DATA XREF: ROM:0000D4CCo
		PUSH	{R4-R7,LR}
		LDR	R6, =(sensorsArrayInRam+0xD0)
		ADDS	R6, #6
		LDRH	R5, [R6]
		LDRH	R4, [R6,#(sensorsArrayInRam+0xD8 - 0x2000027A)]
		SUBS	R6, #6
		MOVS	R2, #0xF
		ANDS	R5, R2

loc_F906				; CODE XREF: timerConfiguration+90j
					; timerConfiguration+BEj ...
		BL	callSetupDMAandSend
		LDR	R0, =aTimer	; "Timer"
		BL	displayPageHeader
		MOVS	R7, #0
		LDR	R2, =0xFFFF
		CMP	R4, R2
		BEQ	loc_F952
		LDR	R2, =0x3E8
		CMP	R4, R2
		BLT	loc_F952
		LDR	R2, =0x7D0
		CMP	R4, R2
		BGT	loc_F952
		CMP	R5, #0
		BLE	loc_F952
		CMP	R5, #0xA
		BGT	loc_F952
		LDR	R0, =aStartWhen	; text
		MOVS	R1, #0xA	; x
		MOVS	R2, #0xF	; y
		BL	displayTextAt
		MOVS	R0, R6
		ADDS	R0, #0xC
		LDR	R1, =63998
		MOVS	R2, R5
		MOVS	R3, R4
		BL	sprintf
		MOVS	R0, R6
		ADDS	R0, #0xC	; text
		MOVS	R1, #0xA	; x
		MOVS	R2, #0x1E	; y
		BL	displayTextAt
		B	loc_F95E
; ---------------------------------------------------------------------------

loc_F952				; CODE XREF: timerConfiguration+20j
					; timerConfiguration+26j ...
		MOVS	R7, #1
		LDR	R0, =aOff_1	; text
		MOVS	R1, #0xA	; x
		MOVS	R2, #0x1E	; y
		BL	displayTextAt

loc_F95E				; CODE XREF: timerConfiguration+5Aj
		BL	LCD_updateCALL
		BL	getKeyCode
		CMP	R0, #9
		BEQ	loc_F9BA
		CMP	R0, #0x17
		BEQ	loc_F9BA
		CMP	R0, #8
		BEQ	loc_F9A6
		CMP	R0, #0x18
		BEQ	loc_F9AA
		CMP	R0, #0xA
		BEQ	locret_F9CE
		CMP	R0, #0xB
		BEQ	locret_F9CE
		CMP	R0, #0x16
		BEQ	loc_F988
		CMP	R0, #0x19
		BEQ	loc_F990
		B	loc_F906
; ---------------------------------------------------------------------------

loc_F988				; CODE XREF: timerConfiguration+8Aj
		MOVS	R0, #0
		STR	R0, [R6]
		STRH	R0, [R6,#4]
		B	locret_F9CE
; ---------------------------------------------------------------------------

loc_F990				; CODE XREF: timerConfiguration+8Ej
		CMP	R7, #1
		BNE	loc_F998
		MOVS	R5, #3
		LDR	R4, =0xFFFF

loc_F998				; CODE XREF: timerConfiguration+9Cj
		ADDS	R6, #6
		STRH	R5, [R6]
		STRH	R4, [R6,#2]
		SUBS	R6, #6
		BL	loc_F740
		B	locret_F9CE
; ---------------------------------------------------------------------------

loc_F9A6				; CODE XREF: timerConfiguration+7Aj
		ADDS	R4, #0xA
		B	loc_F9AC
; ---------------------------------------------------------------------------

loc_F9AA				; CODE XREF: timerConfiguration+7Ej
		ADDS	R4, #0x64 ; 'd'

loc_F9AC				; CODE XREF: timerConfiguration+B2j
		CMP	R7, #1
		BEQ	loc_F9C8
		LDR	R2, =0x7D0
		CMP	R4, R2
		BLE	loc_F906
		LDR	R4, =0xFFFF
		B	loc_F906
; ---------------------------------------------------------------------------

loc_F9BA				; CODE XREF: timerConfiguration+72j
					; timerConfiguration+76j
		ADDS	R5, #1
		CMP	R7, #1
		BEQ	loc_F9C8
		CMP	R5, #0xA
		BLE	loc_F906
		MOVS	R5, #1
		B	loc_F906
; ---------------------------------------------------------------------------

loc_F9C8				; CODE XREF: timerConfiguration+B8j
					; timerConfiguration+C8j
		MOVS	R5, #3
		LDR	R4, =0x3E8
		B	loc_F906
; ---------------------------------------------------------------------------

locret_F9CE				; CODE XREF: timerConfiguration+82j
					; timerConfiguration+86j ...
		POP	{R4-R7,PC}
; End of function timerConfiguration

; ---------------------------------------------------------------------------
aOff_1		DCB "Off",0             ; DATA XREF: timerConfiguration+5Eo
					; ROM:off_FA44o
aStartWhen	DCB "Start when:",0     ; DATA XREF: timerConfiguration+36o
					; ROM:off_FA3Co
aTimer		DCB "Timer",0           ; DATA XREF: timerConfiguration+14o
					; ROM:off_FA38o
aU02u02u	DCB "%u:%02u:%02u",0
		DCB    0
off_F9F4	DCD 0x303A3000		; DATA XREF: printTimer:loc_F89Ao
		DCD 0x30303A30
dword_F9FC	DCD 0x48430000
		DCD 0x7525203A
		DCB 0x20
		DCB 0x3E ; >
		DCB 0x20
		DCB 0x25 ; %
		DCB 0x75 ; u
		DCB 0x25 ; %
		DCB    0
		DCB    0
off_FA0C	DCD sensorsArrayInRam+0xD0 ; DATA XREF:	printTimer+2r
					; ROM:0000F8B0r ...
dword_FA10	DCD 0xE000E018		; DATA XREF: printTimer+4r
dword_FA14	DCD 0xFFFFFF		; DATA XREF: printTimer:loc_F832r
					; printTimer+42r
dword_FA18	DCD 0x2DC347		; DATA XREF: printTimer:loc_F83Ar
					; printTimer+3Cr
dword_FA1C	DCD 0xF9E6		; DATA XREF: printTimer+4Cr
off_FA20	DCD byte_DA0+0x70	; DATA XREF: printTimer:loc_F870r
off_FA24	DCD off_F9F4+1		; DATA XREF: printTimer:loc_F89Ar
off_FA28	DCD word_1FFFFD9D	; DATA XREF: ROM:0000F8B2r
dword_FA2C	DCD 0xFFFF		; DATA XREF: ROM:0000F8B8r
					; timerConfiguration+1Cr ...
dword_FA30	DCD 0x3E8		; DATA XREF: ROM:0000F8BEr
					; timerConfiguration+22r ...
dword_FA34	DCD 0x7D0		; DATA XREF: ROM:0000F8C4r
					; timerConfiguration+28r ...
off_FA38	DCD aTimer		; DATA XREF: timerConfiguration+14r
					; "Timer"
; _BYTE	*off_FA3C
off_FA3C	DCD aStartWhen		; DATA XREF: timerConfiguration+36r
					; "Start when:"
dword_FA40	DCD 63998		; DATA XREF: timerConfiguration+44r
; _BYTE	*off_FA44
off_FA44	DCD aOff_1		; DATA XREF: timerConfiguration+5Er
					; "Off"
		DCB 0xFF, 0xFF,	0xFF, 0xFF, 0xFF, 0xFF,	0xFF, 0xFF; 0
aIntv_0		DCB "IntV",0            ; DATA XREF: ChooseSensors+6Eo
					; ROM:sensorNameso ...
		DCB    0
		DCB    0
		DCB    0
aTemp		DCB "Temp",0
		DCB    0
		DCB    0
		DCB    0
aMot_0		DCB " Mot",0
		DCB    0
		DCB    0
		DCB    0
aExtv_0		DCB "ExtV",0
		DCB    0
		DCB    0
		DCB    0
		DCB 0x48 ; H
		DCB 0x65 ; e
		DCB 0x61 ; a
		DCB 0x64 ; d
		DCB 0x69 ; i
		DCB 0x6E ; n
		DCB 0x67 ; g
		DCB    0
		DCB 0x43 ; C
		DCB 0x75 ; u
		DCB 0x72 ; r
		DCB 0x72 ; r
		DCB 0x65 ; e
		DCB 0x6E ; n
		DCB 0x74 ; t
		DCB    0
		DCB 0x43 ; C
		DCB 0x6C ; l
		DCB 0x69 ; i
		DCB 0x6D ; m
		DCB 0x62 ; b
		DCB    0
		DCB    0
		DCB    0
		DCB 0x41 ; A
		DCB 0x63 ; c
		DCB 0x63 ; c
		DCB 0x20
		DCB 0x5A ; Z
		DCB    0
		DCB    0
		DCB    0
		DCB 0x41 ; A
		DCB 0x63 ; c
		DCB 0x63 ; c
		DCB 0x20
		DCB 0x59 ; Y
		DCB    0
		DCB    0
		DCB    0
		DCB 0x41 ; A
		DCB 0x63 ; c
		DCB 0x63 ; c
		DCB 0x20
		DCB 0x58 ; X
		DCB    0
		DCB    0
		DCB    0
		DCB 0x56 ; V
		DCB 0x53 ; S
		DCB 0x70 ; p
		DCB 0x65 ; e
		DCB 0x65 ; e
		DCB 0x64 ; d
		DCB    0
		DCB    0
		DCB 0x53 ; S
		DCB 0x70 ; p
		DCB 0x65 ; e
		DCB 0x65 ; e
		DCB 0x64 ; d
		DCB    0
		DCB    0
		DCB    0
		DCB 0x44 ; D
		DCB 0x69 ; i
		DCB 0x73 ; s
		DCB 0x74 ; t
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB 0x41 ; A
		DCB 0x72 ; r
		DCB 0x6D ; m
		DCB 0x65 ; e
		DCB 0x64 ; d
		DCB    0
		DCB    0
		DCB    0
		DCB 0x4D ; M
		DCB 0x6F ; o
		DCB 0x64 ; d
		DCB 0x65 ; e
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB 0x50 ; P
		DCB 0x72 ; r
		DCB 0x65 ; e
		DCB 0x73 ; s
		DCB 0x73 ; s
		DCB 0x2E ; .
		DCB    0
		DCB    0
		DCB 0x4F ; O
		DCB 0x64 ; d
		DCB 0x6F ; o
		DCB 0x31 ; 1
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB 0x4F ; O
		DCB 0x64 ; d
		DCB 0x6F ; o
		DCB 0x32 ; 2
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB 0x20
		DCB 0x53 ; S
		DCB 0x70 ; p
		DCB 0x65 ; e
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB 0x54 ; T
		DCB 0x78 ; x
		DCB 0x20
		DCB 0x56 ; V
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB 0x43 ; C
		DCB 0x6F ; o
		DCB 0x47 ; G
		DCB    0
		DCB 0x47 ; G
		DCB 0x50 ; P
		DCB 0x53 ; S
		DCB    0
		DCB 0x4C ; L
		DCB 0x61 ; a
		DCB 0x74 ; t
		DCB    0
		DCB 0x4C ; L
		DCB 0x6F ; o
		DCB 0x6E ; n
		DCB    0
		DCB 0x41 ; A
		DCB 0x6C ; l
		DCB 0x74 ; t
		DCB    0
		DCB 0x73 ; s
		DCB 0x38 ; 8
		DCB 0x35 ; 5
		DCB    0
		DCB 0x73 ; s
		DCB 0x38 ; 8
		DCB 0x36 ; 6
		DCB    0
		DCB 0x73 ; s
		DCB 0x38 ; 8
		DCB 0x37 ; 7
		DCB    0
		DCB 0x73 ; s
		DCB 0x38 ; 8
		DCB 0x38 ; 8
		DCB    0
		DCB 0x73 ; s
		DCB 0x38 ; 8
		DCB 0x39 ; 9
		DCB    0
		DCB 0x47 ; G
		DCB 0x41 ; A
		DCB 0x6C ; l
		DCB 0x74 ; t
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB 0x53 ; S
		DCB 0x4E ; N
		DCB 0x52 ; R
		DCB 0x20
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB 0x4E ; N
		DCB 0x6F ; o
		DCB 0x69 ; i
		DCB 0x73 ; s
		DCB 0x65 ; e
		DCB    0
		DCB    0
		DCB    0
		DCB 0x52 ; R
		DCB 0x53 ; S
		DCB 0x53 ; S
		DCB 0x49 ; I
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB 0x53 ; S
		DCB 0x65 ; e
		DCB 0x6E ; n
		DCB 0x73 ; s
		DCB 0x20
		DCB 0x46 ; F
		DCB 0x44 ; D
		DCB    0
		DCB 0x45 ; E
		DCB 0x72 ; r
		DCB 0x72 ; r
		DCB 0x6F ; o
		DCB 0x72 ; r
		DCB    0
		DCB    0
		DCB    0
		DCB 0x4E ; N
		DCB 0x6F ; o
		DCB 0x6E ; n
		DCB 0x65 ; e
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB 0x55 ; U
		DCB 0x6E ; n
		DCB 0x6B ; k
		DCB 0x6E ; n
		DCB 0x6F ; o
		DCB 0x77 ; w
		DCB 0x6E ; n
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0

; =============== S U B	R O U T	I N E =======================================


GetSensorName				; CODE XREF: SensorsList+8Ap
					; sensorsListMainScreen+174p
		PUSH	{R1,LR}
		LDR	R1, =aIntv_0	; "IntV"

loc_FB60
		BL	RemapSensorIndex
		POP	{R1,PC}
; End of function GetSensorName

; ---------------------------------------------------------------------------
		DCB    0
		DCB    0
off_FB68	DCD aIntv_0		; DATA XREF: GetSensorName+2r
					; "IntV"

; =============== S U B	R O U T	I N E =======================================


formatSensorValue			; CODE XREF: formatSensorData+4Cp
		PUSH	{R4-R7,LR}
		MOVS	R7, R0
		MOVS	R6, R1
		MOVS	R5, R2
		MOVS	R3, #0
		CMP	R6, #4
		BEQ	loc_FBD6
		CMP	R6, #5
		BEQ	loc_FBDE
		CMP	R6, #6
		BEQ	loc_FBDA
		CMP	R6, #7
		BEQ	loc_FBDE
		CMP	R6, #8
		BEQ	loc_FBDE
		CMP	R6, #9
		BEQ	loc_FBDE
		CMP	R6, #0xA
		BEQ	loc_FBDA
		CMP	R6, #0xB
		BEQ	loc_FBDA
		CMP	R6, #0xC
		BEQ	loc_FC20
		CMP	R6, #0xD
		BEQ	loc_FBE6
		CMP	R6, #0xE
		BEQ	loc_FBF0
		CMP	R6, #0xF
		BEQ	loc_FC2C
		CMP	R6, #0x80 ; ''
		BEQ	loc_FBD6
		CMP	R6, #0x81 ; ''
		BEQ	loc_FBC8
		CMP	R6, #0x84 ; ''
		BEQ	loc_FBE2
		CMP	R6, #0xF9 ; 'ù'
		BEQ	loc_FBE2
		CMP	R6, #0xFD ; 'ý'
		BEQ	loc_FBC4
		CMP	R6, #0xFA ; 'ú'
		BEQ	loc_FC24
		BGT	loc_FC28
		B	loc_FC2C
; ---------------------------------------------------------------------------
		POP	{R4-R7,PC}
; ---------------------------------------------------------------------------

loc_FBC4				; CODE XREF: formatSensorValue+4Cj
		LDR	R1, =0xFC36
		B	loc_FC30
; ---------------------------------------------------------------------------

loc_FBC8				; CODE XREF: formatSensorValue+40j
		LDR	R1, =0xFC3F
		MOVS	R4, #0xFF
		MOVS	R3, R2
		LSRS	R3, R3,	#8
		ANDS	R3, R4
		ANDS	R2, R4
		B	loc_FC30
; ---------------------------------------------------------------------------

loc_FBD6				; CODE XREF: formatSensorValue+Cj
					; formatSensorValue+3Cj
		LDR	R1, =0xFC47
		B	loc_FC30
; ---------------------------------------------------------------------------

loc_FBDA				; CODE XREF: formatSensorValue+14j
					; formatSensorValue+24j ...
		LDR	R4, =0xFC62
		B	loc_FBFE
; ---------------------------------------------------------------------------

loc_FBDE				; CODE XREF: formatSensorValue+10j
					; formatSensorValue+18j ...
		LDR	R4, =0xFC47
		B	loc_FBFE
; ---------------------------------------------------------------------------

loc_FBE2				; CODE XREF: formatSensorValue+44j
					; formatSensorValue+48j
		LDR	R4, =0xFC52
		B	loc_FBFE
; ---------------------------------------------------------------------------

loc_FBE6				; CODE XREF: formatSensorValue+30j
		LDR	R1, =0xFC83
		CMP	R2, #0
		BEQ	loc_FC30
		LDR	R1, =0xFC7B
		B	loc_FC30
; ---------------------------------------------------------------------------

loc_FBF0				; CODE XREF: formatSensorValue+34j
		LDR	R1, =0xFC8B
		CMP	R2, #9
		BGT	loc_FC30
		LDR	R1, =0xFC93
		LSLS	R2, R2,	#3
		ADDS	R1, R2,	R1
		BGT	loc_FC30

loc_FBFE				; CODE XREF: formatSensorValue+70j
					; formatSensorValue+74j ...
		SXTH	R0, R2
		CMP	R0, #0
		BGE	loc_FC10
		NEGS	R0, R0
		SXTH	R0, R0
		MOVS	R1, #0x2D ; '-'
		STRB	R1, [R7]
		ADDS	R7, #1
		B	loc_FC10
; ---------------------------------------------------------------------------

loc_FC10				; CODE XREF: formatSensorValue+96j
					; formatSensorValue+A2j
		MOVS	R1, #0x64 ; 'd'
		BL	div_
		MOVS	R3, R1
		MOVS	R2, R0
		MOVS	R1, R4
		MOVS	R0, R7
		B	loc_FC30
; ---------------------------------------------------------------------------

loc_FC20				; CODE XREF: formatSensorValue+2Cj
		LDR	R1, =0xFC52
		B	loc_FC30
; ---------------------------------------------------------------------------

loc_FC24				; CODE XREF: formatSensorValue+50j
		LDR	R1, =0xFC56
		B	loc_FC30
; ---------------------------------------------------------------------------

loc_FC28				; CODE XREF: formatSensorValue+52j
		LDR	R1, =0xFC5B
		B	loc_FC30
; ---------------------------------------------------------------------------

loc_FC2C				; CODE XREF: formatSensorValue+38j
					; formatSensorValue+54j
		LDR	R1, =0xFC4F
		B	loc_FC30
; ---------------------------------------------------------------------------

loc_FC30				; CODE XREF: formatSensorValue+5Aj
					; formatSensorValue+68j ...
		BL	sprintf
		POP	{R4-R7,PC}
; End of function formatSensorValue

; ---------------------------------------------------------------------------
aNotImpl	DCB "NOT IMPL",0
aU02u		DCB "%u %02u",0
aU_02u		DCB "%u.%02u",0
aU_1		DCB "%u",0
aUm		DCB "%um",0
aUdb		DCB "%udB",0
aUdbm		DCB "-%udBm",0
aU_02uMS	DCB "%u.%02u m/s",0
aU02u02u_0	DCB "%u %02u'%02u",0
aArmed		DCB "Armed",0
		DCB    0
		DCB    0
aUnarmed	DCB "Unarmed",0
aUnknown	DCB "Unknown",0
aStab		DCB "Stab",0
		DCB 0
		DCB    0
		DCB    0
aAcro		DCB "Acro",0
		DCB 0
		DCB    0
		DCB    0
aAhold		DCB "AHold",0
		DCB    0
		DCB    0
aAuto		DCB "Auto",0
		DCB    0
		DCB    0
		DCB    0
aGuided		DCB "Guided",0
		DCB    0
aLoiter		DCB "Loiter",0
		DCB    0
aRtl		DCB "RTL",0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
aCircle		DCB "Circle",0
		DCB    0
aPoshold	DCB "PosHold",0
aLand		DCB "Land",0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
dword_FCE4	DCD 0xFC36		; DATA XREF: formatSensorValue:loc_FBC4r
dword_FCE8	DCD 0xFC3F		; DATA XREF: formatSensorValue:loc_FBC8r
dword_FCEC	DCD 0xFC47		; DATA XREF: formatSensorValue:loc_FBD6r
					; formatSensorValue:loc_FBDEr
dword_FCF0	DCD 0xFC62		; DATA XREF: formatSensorValue:loc_FBDAr
dword_FCF4	DCD 0xFC52		; DATA XREF: formatSensorValue:loc_FBE2r
					; formatSensorValue:loc_FC20r
dword_FCF8	DCD 0xFC83		; DATA XREF: formatSensorValue:loc_FBE6r
dword_FCFC	DCD 0xFC7B		; DATA XREF: formatSensorValue+80r
dword_FD00	DCD 0xFC8B		; DATA XREF: formatSensorValue:loc_FBF0r
dword_FD04	DCD 0xFC93		; DATA XREF: formatSensorValue+8Ar
dword_FD08	DCD 0xFC56		; DATA XREF: formatSensorValue:loc_FC24r
dword_FD0C	DCD 0xFC5B		; DATA XREF: formatSensorValue:loc_FC28r
dword_FD10	DCD 0xFC4F		; DATA XREF: formatSensorValue:loc_FC2Cr
		DCB 0xFF
		DCB 0xFF
		DCB 0xFF
		DCB 0xFF
		DCB 0xFF
		DCB 0xFF
		DCB 0xFF
		DCB 0xFF
		DCB 0xFF
		DCB 0xFF
		DCB 0xFF
		DCB 0xFF
		DCB 0xFF
		DCB 0xFF
		DCB 0xFF
		DCB 0xFF
		DCB 0xFF
		DCB 0xFF
		DCB 0xFF
		DCB 0xFF
		DCB 0xFF
		DCB 0xFF
		DCB 0xFF
		DCB 0xFF
		DCB 0xFF
		DCB 0xFF
		DCB 0xFF
		DCB 0xFF
		DCB 0xFF
		DCB 0xFF
		DCB 0xFF
		DCB 0xFF
		DCB 0xFF
		DCB 0xFF
		DCB 0xFF
		DCB 0xFF
		DCB 0xFF
		DCB 0xFF
		DCB 0xFF
		DCB 0xFF
		DCB 0xFF
		DCB 0xFF
		DCB 0xFF
		DCB 0xFF
		DCB 0xFF
		DCB 0xFF
		DCB 0xFF
		DCB 0xFF
		DCB 0xFF
		DCB 0xFF
		DCB 0xFF
		DCB 0xFF
		DCB 0xFF
		DCB 0xFF
		DCB 0xFF
		DCB 0xFF
		DCB 0xFF
		DCB 0xFF
		DCB 0xFF
		DCB 0xFF
		DCB 0xFF
		DCB 0xFF
		DCB 0xFF
		DCB 0xFF
		DCB 0xFF
		DCB 0xFF
		DCB 0xFF
		DCB 0xFF
		DCB 0xFF
		DCB 0xFF
		DCB 0xFF
		DCB 0xFF
		DCB 0xFF
		DCB 0xFF
		DCB 0xFF
		DCB 0xFF
unk_FD60	DCB    3
unk_FD61	DCB  0xC
		DCB 0xFF
		DCB 0xFF
		DCB 0xFF
		DCB 0xFF
		DCB 0xFF
		DCB 0xFF
		DCB 0xFF
		DCB 0xFF
		DCB 0xFF
		DCB 0xFF
		DCB 0xFF
		DCB 0xFF
		DCB 0xFF
		DCB 0xFF
		DCB 0xFF
		DCB 0xFF
		DCB 0xFF
		DCB 0xFF
		DCB 0xFF
		DCB 0xFF
		DCB 0xFF
		DCB 0xFF
		DCB 0xFF
		DCB 0xFF
		DCB 0xFF
		DCB 0xFF
		DCB 0xFF
		DCB 0xFF
		DCB 0xFF
		DCB 0xFF
		DCB 0xFF
		DCB 0xFF
		DCB 0xFF
		DCB 0xFF
		DCB 0xFF
		DCB 0xFF
		DCB 0xFF
		DCB 0xFF
		DCB 0xFF
		DCB 0xFF
		DCB 0xFF
		DCB 0xFF
		DCB 0xFF
		DCB 0xFF
		DCB 0xFF
		DCB 0xFF
		DCB 0xFF
		DCB 0xFF
		DCB 0xFF
		DCB 0xFF
		DCB 0xFF
		DCB 0xFF
		DCB 0xFF
		DCB 0xFF
		DCB 0xFF
		DCB 0xFF
		DCB 0xFF
		DCB 0xFF
		DCB 0xFF
		DCB 0xFF
		DCB 0xFF
		DCB 0xFF
		DCB 0xFF
		DCB 0xFF
		DCB 0xFF
		DCB 0xFF
		DCB 0xFF
		DCB 0xFF
		DCB 0xFF
		DCB 0xFF
		DCB 0xFF
		DCB 0xFF
		DCB 0xFF
		DCB 0xFF
		DCB 0xFF
		DCB 0xFF
		DCB 0xFF
		DCB 0xFF
		DCB 0xFF
		DCB 0xFF
		DCB 0xFF
		DCB 0xFF
		DCB 0xFF
		DCB 0xFF
		DCB 0xFF
		DCB 0xFF
		DCB 0xFF
		DCB 0xFF
		DCB 0xFF
		DCB 0xFF
		DCB 0xFF
		DCB 0xFF
		DCB 0xFF
		DCB 0xFF
		DCB 0xFF
		DCB 0xFF
		DCB 0xFF
		DCB 0xFF
		DCB 0xFF
		DCB 0xFF
		DCB 0xFF
		DCB 0xFF
		DCB 0xFF
		DCB 0xFF
		DCB 0xFF
		DCB 0xFF
		DCB 0xFF
		DCB 0xFF
		DCB 0xFF
		DCB 0xFF
		DCB 0xFF
		DCB 0xFF
		DCB 0xFF
		DCB 0xFF
		DCB 0xFF
		DCB 0xFF
		DCB 0xFF
		DCB 0xFF
		DCB 0xFF
		DCB 0xFF
		DCB 0xFF
		DCB 0xFF
		DCB 0xFF
		DCB 0xFF
		DCB 0xFF
		DCB 0xFF
		DCB 0xFF
		DCB 0xFF
		DCB 0xFF
		DCB 0xFF
		DCB 0xFF
		DCB 0xFF
		DCB 0xFF
		DCB 0xFF
		DCB 0xFF
		DCB 0xFF
		DCB 0xFF
		DCB 0xFF
		DCB 0xFF
		DCB 0xFF
		DCB 0xFF
		DCB 0xFF
		DCB 0xFF
		DCB 0xFF
		DCB 0xFF
		DCB 0xFF
		DCB 0xFF
		DCB 0xFF
		DCB 0xFF
		DCB 0xFF
		DCB 0xFF
		DCB 0xFF
		DCB 0xFF
		DCB 0xFF
		DCB 0xFF
		DCB 0xFF
		DCB 0xFF
		DCB 0xFF
		DCB 0xFF
		DCB 0xFF
		DCB 0xFF
		DCB 0xFF
		DCB 0xFF
		DCB 0xFF
		DCB 0xFF
		DCB 0xFF
		DCB 0xFF
		DCB 0xFF
		DCB 0xFF
		DCB 0xFF
		DCB 0xFF
		DCB 0xFF
		DCB 0xFF
		DCB 0xFF
		DCB 0xFF
		DCB 0xFF
		DCB 0xFF
		DCB 0xFF
		DCB 0xFF
		DCB 0xFF
		DCB 0xFF
		DCB 0xFF
		DCB 0xFF
		DCB 0xFF
		DCB 0xFF
		DCB 0xFF
		DCB 0xFF
		DCB 0xFF
		DCB 0xFF
		DCB 0xFF
		DCB 0xFF
		DCB 0xFF
		DCB 0xFF
		DCB 0xFF
		DCB 0xFF
		DCB 0xFF
		DCB 0xFF
		DCB 0xFF
		DCB 0xFF
		DCB 0xFF
		DCB 0xFF
		DCB 0xFF
		DCB 0xFF
		DCB 0xFF
		DCB 0xFF
		DCB 0xFF
		DCB 0xFF
		DCB 0xFF
		DCB 0xFF
		DCB 0xFF
		DCB 0xFF
		DCB 0xFF
		DCB 0xFF
		DCB 0xFF
		DCB 0xFF
		DCB 0xFF
		DCB 0xFF
		DCB 0xFF
		DCB 0xFF
		DCB 0xFF
		DCB 0xFF
		DCB 0xFF
		DCB 0xFF
		DCB 0xFF
		DCB 0xFF
		DCB 0xFF
		DCB 0xFF
		DCB 0xFF
		DCB 0xFF
		DCB 0xFF
		DCB 0xFF
		DCB 0xFF
		DCB 0xFF
		DCB 0xFF
		DCB 0xFF
		DCB 0xFF
		DCB 0xFF
		DCB 0xFF
		DCB 0xFF
		DCB 0xFF
		DCB 0xFF
		DCB 0xFF
		DCB 0xFF
		DCB 0xFF
		DCB 0xFF
		DCB 0xFF
		DCB 0xFF
		DCB 0xFF
		DCB 0xFF
		DCB 0xFF
		DCB 0xFF
		DCB 0xFF
		DCB 0xFF
		DCB 0xFF
		DCB 0xFF
		DCB 0xFF
		DCB 0xFF
		DCB 0xFF
		DCB 0xFF
		DCB 0xFF
		DCB 0xFF
		DCB 0xFF
		DCB 0xFF
		DCB 0xFF
		DCB 0xFF
		DCB 0xFF
		DCB 0xFF
		DCB 0xFF
		DCB 0xFF
		DCB 0xFF
		DCB 0xFF
		DCB 0xFF
		DCB 0xFF
		DCB 0xFF
		DCB 0xFF
		DCB 0xFF
		DCB 0xFF
		DCB 0xFF
		DCB 0xFF
		DCB 0xFF
		DCB 0xFF
		DCB 0xFF
		DCB 0xFF
		DCB 0xFF
		DCB 0xFF
		DCB 0xFF
		DCB 0xFF
		DCB 0xFF
		DCB 0xFF
		DCB 0xFF
		DCB 0xFF
		DCB 0xFF
		DCB 0xFF
		DCB 0xFF
		DCB 0xFF
		DCB 0xFF
		DCB 0xFF
		DCB 0xFF
		DCB 0xFF
		DCB 0xFF
		DCB 0xFF
		DCB 0xFF
		DCB 0xFF
		DCB 0xFF
		DCB 0xFF
		DCB 0xFF
		DCB 0xFF
		DCB 0xFF
		DCB 0xFF
		DCB 0xFF
		DCB 0xFF
		DCB 0xFF
		DCB 0xFF
		DCB 0xFF
		DCB 0xFF
		DCB 0xFF
		DCB 0xFF
		DCB 0xFF
		DCB 0xFF
		DCB 0xFF
		DCB 0xFF
		DCB 0xFF
		DCB 0xFF
		DCB 0xFF
		DCB 0xFF
		DCB 0xFF
		DCB 0xFF
		DCB 0xFF
		DCB 0xFF
		DCB 0xFF
		DCB 0xFF
		DCB 0xFF
		DCB 0xFF
		DCB 0xFF
		DCB 0xFF
		DCB 0xFF
		DCB 0xFF
		DCB 0xFF
		DCB 0xFF
		DCB 0xFF
		DCB 0xFF
		DCB 0xFF
		DCB 0xFF
		DCB 0xFF
		DCB 0xFF
		DCB 0xFF
		DCB 0xFF
		DCB 0xFF
		DCB 0xFF
		DCB 0xFF
		DCB 0xFF
		DCB 0xFF
		DCB 0xFF
		DCB 0xFF
		DCB 0xFF
		DCB 0xFF
		DCB 0xFF
		DCB 0xFF
		DCB 0xFF
		DCB 0xFF
		DCB 0xFF
		DCB 0xFF
		DCB 0xFF
		DCB 0xFF
		DCB 0xFF
		DCB 0xFF
		DCB 0xFF
		DCB 0xFF
		DCB 0xFF
		DCB 0xFF
		DCB 0xFF
		DCB 0xFF
		DCB 0xFF
		DCB 0xFF
		DCB 0xFF
		DCB 0xFF
		DCB 0xFF
		DCB 0xFF
		DCB 0xFF
		DCB 0xFF
		DCB 0xFF
		DCB 0xFF
		DCB 0xFF
		DCB 0xFF
		DCB 0xFF
		DCB 0xFF
		DCB 0xFF
		DCB 0xFF
		DCB 0xFF
		DCB 0xFF
		DCB 0xFF
		DCB 0xFF
		DCB 0xFF
		DCB 0xFF
		DCB 0xFF
		DCB 0xFF
		DCB 0xFF
		DCB 0xFF
		DCB 0xFF
		DCB 0xFF
		DCB 0xFF
		DCB 0xFF
		DCB 0xFF
		DCB 0xFF
		DCB 0xFF
		DCB 0xFF
		DCB 0xFF
		DCB 0xFF
		DCB 0xFF
		DCB 0xFF
		DCB 0xFF
		DCB 0xFF
		DCB 0xFF
		DCB 0xFF
		DCB 0xFF
		DCB 0xFF
		DCB 0xFF
		DCB 0xFF
		DCB 0xFF
		DCB 0xFF
		DCB 0xFF
		DCB 0xFF
		DCB 0xFF
		DCB 0xFF
		DCB 0xFF
		DCB 0xFF
		DCB 0xFF
		DCB 0xFF
		DCB 0xFF
		DCB 0xFF
		DCB 0xFF
		DCB 0xFF
		DCB 0xFF
		DCB 0xFF
		DCB 0xFF
		DCB 0xFF
		DCB 0xFF
		DCB 0xFF
		DCB 0xFF
		DCB 0xFF
		DCB 0xFF
		DCB 0xFF
		DCB 0xFF
		DCB 0xFF
		DCB 0xFF
		DCB 0xFF
		DCB 0xFF
		DCB 0xFF
		DCB 0xFF
		DCB 0xFF
		DCB 0xFF
		DCB 0xFF
		DCB 0xFF
		DCB 0xFF
		DCB 0xFF
		DCB 0xFF
		DCB 0xFF
		DCB 0xFF
		DCB 0xFF
		DCB 0xFF
		DCB 0xFF
		DCB 0xFF
		DCB 0xFF
		DCB 0xFF
		DCB 0xFF
		DCB 0xFF
		DCB 0xFF
		DCB 0xFF
		DCB 0xFF
		DCB 0xFF
		DCB 0xFF
		DCB 0xFF
		DCB 0xFF
		DCB 0xFF
		DCB 0xFF
		DCB 0xFF
		DCB 0xFF
		DCB 0xFF
		DCB 0xFF
		DCB 0xFF
		DCB 0xFF
		DCB 0xFF
		DCB 0xFF
		DCB 0xFF
		DCB 0xFF
		DCB 0xFF
		DCB 0xFF
		DCB 0xFF
		DCB 0xFF
		DCB 0xFF
		DCB 0xFF
		DCB 0xFF
		DCB 0xFF
		DCB 0xFF
		DCB 0xFF
		DCB 0xFF
		DCB 0xFF
		DCB 0xFF
		DCB 0xFF
		DCB 0xFF
		DCB 0xFF
		DCB 0xFF
		DCB 0xFF
		DCB 0xFF
		DCB 0xFF
		DCB 0xFF
		DCB 0xFF
		DCB 0xFF
		DCB 0xFF
		DCB 0xFF
		DCB 0xFF
		DCB 0xFF
		DCB 0xFF
		DCB 0xFF
		DCB 0xFF
		DCB 0xFF
		DCB 0xFF
		DCB 0xFF
		DCB 0xFF
		DCB 0xFF
		DCB 0xFF
		DCB 0xFF
		DCB 0xFF
		DCB 0xFF
		DCB 0xFF
		DCB 0xFF
		DCB 0xFF
		DCB 0xFF
		DCB 0xFF
		DCB 0xFF
		DCB 0xFF
		DCB 0xFF
		DCB 0xFF
		DCB 0xFF
		DCB 0xFF
		DCB 0xFF
		DCB 0xFF
		DCB 0xFF
		DCB 0xFF
		DCB 0xFF
		DCB 0xFF
		DCB 0xFF
		DCB 0xFF
		DCB 0xFF
		DCB 0xFF
		DCB 0xFF
		DCB 0xFF
		DCB 0xFF
		DCB 0xFF
		DCB 0xFF
		DCB 0xFF
		DCB 0xFF
		DCB 0xFF
		DCB 0xFF
		DCB 0xFF
		DCB 0xFF
		DCB 0xFF
		DCB 0xFF
		DCB 0xFF
		DCB 0xFF
		DCB 0xFF
		DCB 0xFF
		DCB 0xFF
		DCB 0xFF
		DCB 0xFF
		DCB 0xFF
		DCB 0xFF
		DCB 0xFF
		DCB 0xFF
		DCB 0xFF
		DCB 0xFF
		DCB 0xFF
		DCB 0xFF
		DCB 0xFF
		DCB 0xFF
		DCB 0xFF
		DCB 0xFF
		DCB 0xFF
		DCB 0xFF
		DCB 0xFF
		DCB 0xFF
		DCB 0xFF
		DCB 0xFF
		DCB 0xFF
		DCB 0xFF
		DCB 0xFF
		DCD 0xFFFFFFFF,	0xFFFFFFFF, 0xFFFFFFFF,	0xFFFFFFFF, 0xFFFFFFFF
		DCD 0xFFFFFFFF,	0xFFFFFFFF, 0xFFFFFFFF,	0xFFFFFFFF, 0xFFFFFFFF
		DCD 0xFFFFFFFF,	0xFFFFFFFF, 0xFFFFFFFF,	0xFFFFFFFF, 0xFFFFFFFF
		DCD 0xFFFFFFFF,	0xFFFFFFFF, 0xFFFFFFFF,	0xFFFFFFFF, 0xFFFFFFFF
dword_FFFC	DCD 0xFFFFFFFF		; DATA XREF: rxpacketHandle+48o
					; ROM:off_658Co ...
; ROM		ends

; ===========================================================================

; Segment type:	Regular
		AREA RAM, DATA,	ALIGN=0
		; ORG 0x1FFFF800
dword_1FFFF800	DCD 0			; DATA XREF: BOOT:00000540o
					; BOOT:00000542w ...
dword_1FFFF804	DCD 0			; DATA XREF: BOOT:00000544w
					; BOOT:00000A4Ar ...
		DCB 0x97 ; 
		DCB 0xCD ; Í
		DCB    7
		DCB 0x98 ; 
		DCB 0x80 ; 
		DCB 0xDE ; Þ
		DCB 0x70 ; p
		DCB 0xF4 ; ô
		DCB 0x74 ; t
		DCB 0xEA ; ê
		DCB 0xC0 ; À
		DCB 0x10
		DCB 0x4C ; L
		DCB 0x48 ; H
		DCB 0x35 ; 5
		DCB 0x2D ; -
		DCB 0x56 ; V
		DCB 0xC5 ; Å
		DCB 0x6A ; j
		DCB 0x76 ; v
		DCB 0x40 ; @
		DCB 0x12
		DCB 0x60 ; `
		DCB 0x98 ; 
		DCB    0
		DCB 0x43 ; C
		DCB 0x44 ; D
		DCB 0xB0 ; °
		DCB 0x89 ; 
		DCB 0x29 ; )
		DCB 0xEF ; ï
		DCB    8
		DCB 0x79 ; y
		DCB 0xAA ; ª
		DCB 0xCF ; Ï
		DCB 0xFC ; ü
		DCB 0xD8 ; Ø
		DCB 0xBD ; ½
		DCB 0x41 ; A
		DCB 0x4A ; J
		DCB 0xFE ; þ
		DCB 0xBF ; ¿
		DCB 0x7A ; z
		DCB 0x92 ; 
		DCB 0x44 ; D
		DCB 0xDE ; Þ
		DCB 0xAC ; ¬
		DCB 0x88 ; 
		DCB 0x2A ; *
		DCB 0x50 ; P
		DCB 0xB3 ; ³
		DCB 0x37 ; 7
		DCB 0xA1 ; ¡
		DCB 0x21 ; !
		DCB 0x8F ; 
		DCB 0x30 ; 0
		DCB 0xA9 ; ©
		DCB 0xA1 ; ¡
		DCB 0xAE ; ®
		DCB 0x42 ; B
		DCB 0xF5 ; õ
		DCB 0xF1 ; ñ
		DCB 0xB5 ; µ
		DCB    1
		DCB 0x53 ; S
		DCB 0x30 ; 0
		DCB 0xFC ; ü
		DCB 0xD5 ; Õ
		DCB 0x94 ; 
		DCB 0xE3 ; ã
		DCB 0xC0 ; À
		DCB 0xF4 ; ô
		DCB 0x49 ; I
		DCB 0x93 ; 
		DCB 0xCA ; Ê
		DCB 0xFD ; ý
		DCB 0x42 ; B
		DCB 0x25 ; %
		DCB 0x45 ; E
		DCB 0xC3 ; Ã
		DCB 0xE7 ; ç
		DCB 0x32 ; 2
		DCB 0xD3 ; Ó
		DCB 0xFA ; ú
		DCB 0x36 ; 6
		DCB 0xFC ; ü
		DCB 0x14
		DCB 0x6E ; n
		DCB 0x87 ; 
		DCB 0xED ; í
		DCB 0x4E ; N
		DCB 0x5A ; Z
		DCB 0x51 ; Q
		DCB 0x51 ; Q
		DCB 0xAA ; ª
		DCB 0xB4 ; ´
		DCB 0xE9 ; é
		DCB  0xC
		DCB 0x2F ; /
		DCB 0xFC ; ü
		DCB 0xD8 ; Ø
		DCB 0x39 ; 9
		DCB 0xA5 ; ¥
		DCB 0x68 ; h
		DCB 0xD0 ; Ð
		DCB 0x59 ; Y
		DCB 0x69 ; i
		DCB 0xEE ; î
		DCB 0xA0 ;  
		DCB 0x37 ; 7
		DCB 0x5C ; \
		DCB 0x54 ; T
		DCB 0x56 ; V
		DCB 0x8B ; 
		DCB 0x7A ; z
		DCB 0x89 ; 
		DCB 0x16
		DCB 0x12
		DCB 0x13
		DCB 0xBB ; »
byte_1FFFF880	DCB 0			; DATA XREF: sub_24D0+8o sub_24D0+Ar ...
		DCB    0
		DCB    0
		DCB    0
dword_1FFFF884	DCD 0x4194A286		; DATA XREF: afhd2Init+Ao afhd2Init+Ew ...
dword_1FFFF888	DCD 4			; DATA XREF: sub_9BC0o	sub_9BC0+2r ...
dword_1FFFF88C	DCD 4			; DATA XREF: sub_9BC0+4r
					; buzzerSetup+8w ...
dword_1FFFF890	DCD 0			; DATA XREF: buzzerSetup+4w
					; TMP1_method_beep_modulation+4r ...
byte_1FFFF894	DCB 3			; DATA XREF: sub_24D0+2o ROM:off_2528o ...
byte_1FFFF895	DCB 0x13		; DATA XREF: sub_24D0+6w main+294r ...
byte_1FFFF896	DCB 1			; DATA XREF: main+FEw
					; configurePINS+A8w ...
byte_1FFFF897	DCB 3			; DATA XREF: main+10r main+16w ...
tempInputs	DCD 0			; DATA XREF: main+34r main+3Cw ...
inputStates	DCD 0xF0000		; DATA XREF: getInputStates+2r
					; main:loc_28DCr ...
; unsigned __int16 inputStates2[2]
inputStates2	DCD 0			; DATA XREF: main+E8w main+25Er ...
counterMain	DCD 0x8336		; DATA XREF: main+E2r main+ECw ...
dword_1FFFF8A8	DCD 0			; DATA XREF: sub_24D0:loc_2502r
					; getKeyCode+4r ...
dword_1FFFF8AC	DCD 0			; DATA XREF: sub_24D0+28r sub_24D0+3Ar ...
; unsigned int timer
timer		DCD 0x8337		; DATA XREF: sub_24D0+20r sub_24D0+50r ...
lastTimerCheck	DCD 0			; DATA XREF: sub_24D0+22w sub_24D0+52w ...
; _BYTE	byte_1FFFF8B8[8]
byte_1FFFF8B8	DCB 0x10, 0x11,	0x12, 0x13, 0, 0, 0, 0 ; DATA XREF: sub_24D0+38o
					; ROM:off_2530o ...
; char GFX_ARRAY[]
GFX_ARRAY	DCB 0			; DATA XREF: displayGFX+6Ao
					; ROM:off_4C6Co ...
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    4
		DCB    4
		DCB 0xFC ; ü
		DCB    4
		DCB    4
		DCB    0
		DCB 0x84 ; 
		DCB 0x48 ; H
		DCB 0x30 ; 0
		DCB 0x30 ; 0
		DCB 0x48 ; H
		DCB 0x84 ; 
		DCB    0
		DCB    0
		DCB 0xFE ; þ
		DCB 0xFE ; þ
		DCB 0xFE ; þ
		DCB 0xFE ; þ
		DCB 0x82 ; 
		DCB 0xFE ; þ
		DCB 0xFE ; þ
		DCB 0xFE ; þ
		DCB 0xFE ; þ
		DCB 0x82 ; 
		DCB 0xFE ; þ
		DCB 0xFE ; þ
		DCB 0xFE ; þ
		DCB 0xFE ; þ
		DCB 0x82 ; 
		DCB 0xFE ; þ
		DCB 0xFE ; þ
		DCB 0xFE ; þ
		DCB 0xFE ; þ
		DCB 0x82 ; 
		DCB 0xFE ; þ
		DCB 0x38 ; 8
		DCB 0x38 ; 8
		DCB    0
		DCB    0
		DCB    0
		DCB 0x38 ; 8
		DCB 0x7C ; |
		DCB 0xC6 ; Æ
		DCB 0x92 ; 
		DCB 0xC6 ; Æ
		DCB 0x7C ; |
		DCB 0x38 ; 8
		DCB    0
		DCB 0x38 ; 8
		DCB 0x7C ; |
		DCB 0xC6 ; Æ
		DCB 0x92 ; 
		DCB 0xC6 ; Æ
		DCB 0x7C ; |
		DCB 0x38 ; 8
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB 0xCC ; Ì
		DCB 0xCC ; Ì
		DCB    0
		DCB    0
		DCB    0
		DCB 0x38 ; 8
		DCB 0x7C ; |
		DCB 0xC6 ; Æ
		DCB 0x92 ; 
		DCB 0xC6 ; Æ
		DCB 0x7C ; |
		DCB 0x38 ; 8
		DCB    0
		DCB 0x38 ; 8
		DCB 0x7C ; |
		DCB 0xC6 ; Æ
		DCB 0x92 ; 
		DCB 0xC6 ; Æ
		DCB 0x7C ; |
		DCB 0x38 ; 8
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB 0xCC ; Ì
		DCB 0xCC ; Ì
		DCB    0
		DCB    0
		DCB    0
		DCB 0x38 ; 8
		DCB 0x7C ; |
		DCB 0xC6 ; Æ
		DCB 0x92 ; 
		DCB 0xC6 ; Æ
		DCB 0x7C ; |
		DCB 0x38 ; 8
		DCB    0
		DCB 0x38 ; 8
		DCB 0x7C ; |
		DCB 0xC6 ; Æ
		DCB 0x92 ; 
		DCB 0xC6 ; Æ
		DCB 0x7C ; |
		DCB 0x38 ; 8
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB 0xFC ; ü
		DCB 0x24 ; $
		DCB 0x24 ; $
		DCB 0x24 ; $
		DCB 0x64 ; d
		DCB 0x98 ; 
		DCB    0
		DCB 0x84 ; 
		DCB 0x48 ; H
		DCB 0x30 ; 0
		DCB 0x30 ; 0
		DCB 0x48 ; H
		DCB 0x84 ; 
		DCB    0
		DCB    0
		DCB 0xFE ; þ
		DCB 0xFE ; þ
		DCB 0xFE ; þ
		DCB 0xFE ; þ
		DCB 0x82 ; 
		DCB 0xFE ; þ
		DCB 0xFE ; þ
		DCB 0xFE ; þ
		DCB 0xFE ; þ
		DCB 0x82 ; 
		DCB 0xFE ; þ
		DCB 0xFE ; þ
		DCB 0xFE ; þ
		DCB 0xFE ; þ
		DCB 0x82 ; 
		DCB 0xFE ; þ
		DCB 0xFE ; þ
		DCB 0xFE ; þ
		DCB 0xFE ; þ
		DCB 0x82 ; 
		DCB 0xFE ; þ
		DCB 0x38 ; 8
		DCB 0x38 ; 8
		DCB    0
		DCB    0
		DCB    0
		DCB 0xF0 ; ð
		DCB 0x10
		DCB 0xF0 ; ð
		DCB    0
		DCB 0x10
		DCB 0xF0 ; ð
		DCB 0xF0 ; ð
		DCB 0x90 ; 
		DCB 0xD0 ; Ð
		DCB 0x10
		DCB 0x30 ; 0
		DCB    0
		DCB    0
		DCB    0
		DCB 0x10
		DCB 0xF0 ; ð
		DCB 0xF0 ; ð
		DCB    0
		DCB    0
		DCB    0
		DCB 0xC0 ; À
		DCB 0xC0 ; À
		DCB    0
		DCB    0
		DCB    0
		DCB 0xC0 ; À
		DCB 0xC0 ; À
		DCB    0
		DCB 0x80 ; 
		DCB 0xC0 ; À
		DCB 0x40 ; @
		DCB 0x40 ; @
		DCB 0x40 ; @
		DCB 0x40 ; @
		DCB 0x40 ; @
		DCB    0
		DCB 0x10
		DCB 0xF0 ; ð
		DCB 0xF0 ; ð
		DCB    0
		DCB 0x80 ; 
		DCB 0xC0 ; À
		DCB 0x40 ; @
		DCB    0
		DCB 0xC0 ; À
		DCB 0xC0 ; À
		DCB    0
		DCB    0
		DCB    0
		DCB 0xC0 ; À
		DCB 0xC0 ; À
		DCB    0
		DCB 0xC0 ; À
		DCB 0xE0 ; à
		DCB 0x30 ; 0
		DCB 0x90 ; 
		DCB 0x30 ; 0
		DCB 0xE0 ; à
		DCB 0xC0 ; À
		DCB    0
		DCB    0
		DCB    0
		DCB 0x20
		DCB 0xF0 ; ð
		DCB 0xF0 ; ð
		DCB    0
		DCB    0
		DCB    0
		DCB 0xFC ; ü
		DCB 0x80 ; 
		DCB 0x40 ; @
		DCB 0x40 ; @
		DCB 0xE0 ; à
		DCB 0xE0 ; à
		DCB 0xE0 ; à
		DCB 0xF0 ; ð
		DCB 0xF0 ; ð
		DCB 0xF8 ; ø
		DCB 0xF8 ; ø
		DCB 0x10
		DCB 0x10
		DCB 0x10
		DCB 0x10
		DCB 0x28 ; (
		DCB 0x24 ; $
		DCB 0x24 ; $
		DCB 0xA2 ; ¢
		DCB 0xA2 ; ¢
		DCB 0xA2 ; ¢
		DCB 0xA2 ; ¢
		DCB 0xA2 ; ¢
		DCB 0x22 ; "
		DCB 0x24 ; $
		DCB 0x24 ; $
		DCB 0x24 ; $
		DCB 0x18
		DCB 0x10
		DCB 0x10
		DCB 0x10
		DCB 0x10
		DCB 0x10
		DCB 0x10
		DCB 0x20
		DCB 0x20
		DCB 0x20
		DCB 0x20
		DCB 0x20
		DCB 0x20
		DCB 0x20
		DCB 0x40 ; @
		DCB 0x40 ; @
		DCB 0x40 ; @
		DCB 0x40 ; @
		DCB 0x40 ; @
		DCB 0x40 ; @
		DCB 0x30 ; 0
		DCB  0xC
		DCB    2
		DCB 0x7E ; ~
		DCB 0xFE ; þ
		DCB    0
		DCB    0
		DCB    0
		DCB 0xF0 ; ð
		DCB 0x10
		DCB 0xF0 ; ð
		DCB    0
		DCB    0
		DCB 0xFF
		DCB    0
		DCB 0xFF
		DCB    0
		DCB    4
		DCB    7
		DCB    7
		DCB    4
		DCB    1
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    4
		DCB    7
		DCB    7
		DCB    4
		DCB    0
		DCB    0
		DCB    9
		DCB  0xB
		DCB  0xA
		DCB  0xA
		DCB  0xA
		DCB  0xF
		DCB    7
		DCB    0
		DCB    4
		DCB    5
		DCB    5
		DCB    5
		DCB    5
		DCB    7
		DCB    2
		DCB    0
		DCB    4
		DCB    7
		DCB    7
		DCB    1
		DCB    3
		DCB    6
		DCB    4
		DCB    0
		DCB    9
		DCB  0xB
		DCB  0xA
		DCB  0xA
		DCB  0xA
		DCB  0xF
		DCB    7
		DCB    0
		DCB    1
		DCB    3
		DCB    6
		DCB    4
		DCB    6
		DCB    3
		DCB    1
		DCB    0
		DCB    0
		DCB    4
		DCB    4
		DCB    7
		DCB    7
		DCB    4
		DCB    4
		DCB    0
		DCB 0x1F
		DCB    0
		DCB    1
		DCB    2
		DCB    3
		DCB    7
		DCB  0xF
		DCB  0xF
		DCB  0xF
		DCB  0xF
		DCB  0xF
		DCB 0x68 ; h
		DCB 0x68 ; h
		DCB 0x18
		DCB  0xC
		DCB  0xA
		DCB    9
		DCB    9
		DCB    8
		DCB    8
		DCB    8
		DCB    8
		DCB    8
		DCB    9
		DCB    9
		DCB    9
		DCB  0xA
		DCB  0xA
		DCB  0xA
		DCB  0xC
		DCB    4
		DCB    4
		DCB    4
		DCB    4
		DCB    4
		DCB    4
		DCB    4
		DCB    4
		DCB    4
		DCB    4
		DCB    4
		DCB    4
		DCB    4
		DCB    4
		DCB    4
		DCB  0xC
		DCB 0x36 ; 6
		DCB 0x35 ; 5
		DCB    5
		DCB    5
		DCB    5
		DCB    3
		DCB    0
		DCB    0
		DCB    0
		DCB 0xFF
		DCB    0
		DCB 0xFF
		DCB    0
		DCB    0
		DCB 0xFF
		DCB    0
		DCB 0xFF
		DCB    0
		DCB 0x80 ; 
		DCB 0x80 ; 
		DCB 0xBE ; ¾
		DCB 0x81 ; 
		DCB 0x81 ; 
		DCB    1
		DCB    1
		DCB    1
		DCB    1
		DCB    1
		DCB    1
		DCB 0xF9 ; ù
		DCB 0xF9 ; ù
		DCB 0x31 ; 1
		DCB 0x61 ; a
		DCB 0xC1 ; Á
		DCB 0xF9 ; ù
		DCB 0xF9 ; ù
		DCB    1
		DCB 0xC1 ; Á
		DCB 0xE1 ; á
		DCB 0x21 ; !
		DCB 0x21 ; !
		DCB 0x21 ; !
		DCB 0xE1 ; á
		DCB 0xC1 ; Á
		DCB    1
		DCB    1
		DCB    1
		DCB 0x21 ; !
		DCB 0xE9 ; é
		DCB 0xE9 ; é
		DCB    1
		DCB    1
		DCB    1
		DCB 0x41 ; A
		DCB 0xE1 ; á
		DCB 0xA1 ; ¡
		DCB 0xA1 ; ¡
		DCB 0xA1 ; ¡
		DCB 0xA1 ; ¡
		DCB 0x21 ; !
		DCB    1
		DCB    1
		DCB    1
		DCB 0x11
		DCB 0xF9 ; ù
		DCB 0xF9 ; ù
		DCB    1
		DCB    1
		DCB    1
		DCB    1
		DCB    1
		DCB    1
		DCB 0x31 ; 1
		DCB 0x31 ; 1
		DCB    1
		DCB    1
		DCB    1
		DCB    1
		DCB 0x41 ; A
		DCB 0x41 ; A
		DCB 0x41 ; A
		DCB 0x41 ; A
		DCB 0x41 ; A
		DCB 0x41 ; A
		DCB    1
		DCB    1
		DCB    1
		DCB 0x11
		DCB 0xF9 ; ù
		DCB 0xF9 ; ù
		DCB    1
		DCB    1
		DCB    1
		DCB 0xE1 ; á
		DCB 0xF1 ; ñ
		DCB 0x19
		DCB 0x49 ; I
		DCB 0x19
		DCB 0xF1 ; ñ
		DCB 0xE1 ; á
		DCB    1
		DCB 0xE1 ; á
		DCB 0xF1 ; ñ
		DCB 0x19
		DCB 0x49 ; I
		DCB 0x19
		DCB 0xF1 ; ñ
		DCB 0xE1 ; á
		DCB    1
		DCB 0xC1 ; Á
		DCB 0xE1 ; á
		DCB 0x21 ; !
		DCB 0x29 ; )
		DCB 0xF9 ; ù
		DCB 0xF9 ; ù
		DCB    1
		DCB    1
		DCB    9
		DCB 0xF9 ; ù
		DCB 0xF9 ; ù
		DCB 0x49 ; I
		DCB 0x49 ; I
		DCB 0xF9 ; ù
		DCB 0xB1 ; ±
		DCB    1
		DCB 0xE1 ; á
		DCB 0xE1 ; á
		DCB 0x61 ; a
		DCB 0xC1 ; Á
		DCB 0x61 ; a
		DCB 0xE1 ; á
		DCB 0xC1 ; Á
		DCB    1
		DCB    1
		DCB    1
		DCB 0xFE ; þ
		DCB    0
		DCB 0xFF
		DCB    0
		DCB 0xFF
		DCB    0
		DCB    0
		DCB 0xFF
		DCB    1
		DCB 0xFF
		DCB    0
		DCB 0x5F ; _
		DCB 0x84 ; 
		DCB    4
		DCB    4
		DCB 0x8C ; 
		DCB 0x53 ; S
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB  0xB
		DCB 0xFB ; û
		DCB 0xF8 ; ø
		DCB 0x48 ; H
		DCB 0xC8 ; È
		DCB 0xFB ; û
		DCB 0x33 ; 3
		DCB    0
		DCB    1
		DCB 0x13
		DCB 0x3A ; :
		DCB 0x6A ; j
		DCB 0xCA ; Ê
		DCB 0x9B ; 
		DCB 0x11
		DCB    0
		DCB    0
		DCB 0x10
		DCB 0x3A ; :
		DCB 0x6B ; k
		DCB 0xCB ; Ë
		DCB 0x9A ; 
		DCB 0x10
		DCB    0
		DCB    2
		DCB    2
		DCB  0xA
		DCB 0xFA ; ú
		DCB 0xFA ; ú
		DCB  0xB
		DCB    1
		DCB    0
		DCB    0
		DCB    2
		DCB 0x12
		DCB 0xFB ; û
		DCB 0xFB ; û
		DCB    2
		DCB    2
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB 0x33 ; 3
		DCB 0x33 ; 3
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB 0x40 ; @
		DCB 0x40 ; @
		DCB 0x40 ; @
		DCB 0x40 ; @
		DCB 0x40 ; @
		DCB 0x40 ; @
		DCB    0
		DCB 0xE0 ; à
		DCB 0xF2 ; ò
		DCB 0x5A ; Z
		DCB 0x4B ; K
		DCB 0x4B ; K
		DCB 0xC2 ; Â
		DCB 0x82 ; 
		DCB    0
		DCB 0xE0 ; à
		DCB 0xF1 ; ñ
		DCB 0x1B
		DCB 0x4A ; J
		DCB 0x1B
		DCB 0xF1 ; ñ
		DCB 0xE0 ; à
		DCB    0
		DCB 0xC0 ; À
		DCB 0xE1 ; á
		DCB 0x23 ; #
		DCB 0x2A ; *
		DCB 0xFB ; û
		DCB 0xF9 ; ù
		DCB    0
		DCB    0
		DCB    9
		DCB 0xFB ; û
		DCB 0xFA ; ú
		DCB 0x4A ; J
		DCB 0x49 ; I
		DCB 0xFB ; û
		DCB 0xB2 ; ²
		DCB    0
		DCB 0xE2 ; â
		DCB 0xE3 ; ã
		DCB 0x63 ; c
		DCB 0xC2 ; Â
		DCB 0x62 ; b
		DCB 0xE3 ; ã
		DCB 0xC1 ; Á
		DCB    0
		DCB    3
		DCB    3
		DCB    0
		DCB    3
		DCB    0
		DCB    3
		DCB    3
		DCB    0
		DCB    0
		DCB    0
		DCB 0xFF
		DCB    0
		DCB 0xFF
		DCB    1
		DCB 0xFF
		DCB    0
		DCB    0
		DCB 0xFF
		DCB    0
		DCB 0xFF
		DCB    0
		DCB    8
		DCB    4
		DCB 0xF3 ; ó
		DCB    3
		DCB    4
		DCB    8
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    2
		DCB 0x3B ; ;
		DCB 0x1B
		DCB 0xF8 ; ø
		DCB 0xF8 ; ø
		DCB 0x1B
		DCB 0x3B ; ;
		DCB    0
		DCB 0x20
		DCB 0x61 ; a
		DCB 0xC3 ; Ã
		DCB 0x82 ; 
		DCB 0xC2 ; Â
		DCB 0x63 ; c
		DCB 0x21 ; !
		DCB    0
		DCB    0
		DCB    1
		DCB    3
		DCB    2
		DCB    2
		DCB    3
		DCB    1
		DCB    0
		DCB 0xF8 ; ø
		DCB 0xF8 ; ø
		DCB    2
		DCB    3
		DCB    3
		DCB 0xFA ; ú
		DCB 0xF8 ; ø
		DCB    0
		DCB    0
		DCB    2
		DCB 0x12
		DCB 0xFB ; û
		DCB 0xFB ; û
		DCB    2
		DCB    2
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB 0x33 ; 3
		DCB 0x33 ; 3
		DCB    0
		DCB    0
		DCB    0
		DCB 0x18
		DCB 0x18
		DCB 0x88 ; 
		DCB 0xC8 ; È
		DCB 0x68 ; h
		DCB 0x38 ; 8
		DCB 0x18
		DCB    0
		DCB    1
		DCB    3
		DCB    2
		DCB    2
		DCB    2
		DCB    3
		DCB    1
		DCB    0
		DCB 0x18
		DCB 0x19
		DCB 0x8B ; 
		DCB 0xCA ; Ê
		DCB 0x6B ; k
		DCB 0x39 ; 9
		DCB 0x18
		DCB    0
		DCB    1
		DCB    3
		DCB 0x12
		DCB 0xFA ; ú
		DCB 0xF9 ; ù
		DCB    3
		DCB    2
		DCB    0
		DCB 0xFA ; ú
		DCB 0xFB ; û
		DCB    3
		DCB    2
		DCB    2
		DCB 0xFB ; û
		DCB 0xF9 ; ù
		DCB    0
		DCB    3
		DCB    3
		DCB    0
		DCB    3
		DCB    0
		DCB    3
		DCB    3
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB 0xFF
		DCB    0
		DCB 0xFF
		DCB    0
		DCB 0xFF
		DCB    0
		DCB    0
		DCB 0x1F
		DCB 0x10
		DCB 0x1F
		DCB    0
		DCB    0
		DCB    0
		DCB    3
		DCB    4
		DCB    4
		DCB    4
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB 0x70 ; p
		DCB 0x50 ; P
		DCB 0x52 ; R
		DCB 0x53 ; S
		DCB 0x53 ; S
		DCB 0x52 ; R
		DCB 0x50 ; P
		DCB 0x50 ; P
		DCB 0x52 ; R
		DCB 0x53 ; S
		DCB 0x51 ; Q
		DCB 0x50 ; P
		DCB 0x51 ; Q
		DCB 0x53 ; S
		DCB 0x52 ; R
		DCB 0x50 ; P
		DCB 0x50 ; P
		DCB 0x50 ; P
		DCB 0x50 ; P
		DCB 0x53 ; S
		DCB 0x73 ; s
		DCB 0x50 ; P
		DCB 0x50 ; P
		DCB 0x50 ; P
		DCB 0x50 ; P
		DCB 0x51 ; Q
		DCB 0x53 ; S
		DCB 0x52 ; R
		DCB 0x53 ; S
		DCB 0x51 ; Q
		DCB 0x50 ; P
		DCB 0x50 ; P
		DCB 0x50 ; P
		DCB 0x52 ; R
		DCB 0x52 ; R
		DCB 0x53 ; S
		DCB 0x53 ; S
		DCB 0x52 ; R
		DCB 0x52 ; R
		DCB 0x50 ; P
		DCB 0x70 ; p
		DCB    0
		DCB    0
		DCB    3
		DCB    3
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    3
		DCB    3
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB 0x70 ; p
		DCB 0x50 ; P
		DCB 0x53 ; S
		DCB 0x53 ; S
		DCB 0x50 ; P
		DCB 0x50 ; P
		DCB 0x50 ; P
		DCB 0x50 ; P
		DCB 0x50 ; P
		DCB 0x53 ; S
		DCB 0x53 ; S
		DCB 0x50 ; P
		DCB 0x50 ; P
		DCB 0x50 ; P
		DCB 0x50 ; P
		DCB 0x50 ; P
		DCB 0x52 ; R
		DCB 0x52 ; R
		DCB 0x53 ; S
		DCB 0x53 ; S
		DCB 0x72 ; r
		DCB 0x52 ; R
		DCB 0x50 ; P
		DCB 0x50 ; P
		DCB 0x51 ; Q
		DCB 0x53 ; S
		DCB 0x52 ; R
		DCB 0x53 ; S
		DCB 0x51 ; Q
		DCB 0x50 ; P
		DCB 0x50 ; P
		DCB 0x50 ; P
		DCB 0x50 ; P
		DCB 0x50 ; P
		DCB 0x50 ; P
		DCB 0x50 ; P
		DCB 0x50 ; P
		DCB 0x50 ; P
		DCB 0x50 ; P
		DCB 0x50 ; P
		DCB 0x70 ; p
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    4
		DCB    4
		DCB    4
		DCB    3
		DCB    0
		DCB 0x1F
		DCB 0x10
		DCB 0x1F
		DCB    0
; _DWORD dword_1FFFFCC0[6]
dword_1FFFFCC0	DCD 0xFFFFD8F0,	0x1BBC,	0x1BBC,	0x1464,	0x1BBC,	0x1464
					; DATA XREF: createRadioPacket+A2o
					; createRadioPacket:off_A76Co ...
; _WORD	dword_1FFFFCD8[14]
dword_1FFFFCD8	DCD 0xDC05DF58		; DATA XREF: sendSettingsPacket+10o
					; sendSettingsPacket+38o ...
dword_1FFFFCDC	DCD 0xDD03E805
		DCD 0xD0073F05
dword_1FFFFCE4	DCD 0xD007D007
		DCD 0xC605DC07
		DCD 0xDC05DC07
		DCD 0xDC05DC05
; _BYTE	dword_1FFFFCF4[30]
dword_1FFFFCF4	DCD 0xFFFF9A05		; DATA XREF: sendSettingsPacket+Eo
					; ROM:off_8008o ...
		DCB 0xFF
		DCB 0xFF
		DCB 0xFF
		DCB 0xFF
		DCB 0xFF
		DCB 0xFF
		DCB 0xFF
		DCB 0xFF
		DCB 0xFF
		DCB 0xFF
		DCB 0xFF
		DCB 0xFF
		DCB 0xFF
		DCB 0xFF
		DCB 0xFF
		DCB 0xFF
		DCB 0xFF
		DCB 0xFF
		DCB 0xFF
		DCB 0xFF
		DCB 0xFF
		DCB 0xFF
		DCB 0xFF
		DCB 0xFF
		DCB 0xFF
		DCB 0xFF
; _WORD	word_1FFFFD12[32]
word_1FFFFD12	DCW 0x20B, 0x32, 0x293,	0x32, 0x310, 0x32, 0x417, 0x32 ; DATA XREF: beep+22o
					; ROM:off_9C80o ...
		DCW 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0
		DCW 0, 0, 0, 0,	0, 0, 0
		DCB    0
		DCB    0
; _DWORD byte_1FFFFD54[18]
byte_1FFFFD54	DCB 0xDE		; DATA XREF: createRadioPacket+1D2o
					; createRadioPacket:off_A780o
		DCB    7
		DCB    0
		DCB    0
		DCB 0x20
		DCB    7
		DCB    0
		DCB    0
		DCB 0x34 ; 4
		DCB    1
		DCB    0
		DCB    0
		DCB 0x2F ; /
		DCB    8
		DCB    0
		DCB    0
		DCB 0xA7 ; §
		DCB    8
		DCB    0
		DCB    0
		DCB 0xF0 ; ð
		DCB  0xB
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
; _DWORD dword_1FFFFD7C[8]
dword_1FFFFD7C	DCD 0, 0, 0x33,	0, 0xFFFFD8F0, 0xB, 0x2710, 0x2710
					; DATA XREF: endpointsPage+9Co
					; ROM:off_3CACo ...
byte_1FFFFD9C	DCB 0x58		; DATA XREF: sendPacketToRadio+1E4o
					; ROM:off_84F4o ...
					; packet data??
; __int16 word_1FFFFD9D[]
word_1FFFFD9D	DCW 0x5DF		; DATA XREF: ROM:0000F8B2o
					; ROM:off_FA28o
		DCW 0x5DC
		DCW 0x3E8
		DCW 0x5DD
		DCW 0x73F
		DCW 0x7D0
		DCW 0x7D0
		DCW 0x7D0
		DCW 0x5DC
		DCW 0x7C6
		DCW 0x5DC
		DCW 0x5DC
		DCW 0x5DC
		DCB 0xDC
		DCB 5
byte_1FFFFDB9	DCB 5			; DATA XREF: sendPAcket:loc_89CEo
					; ROM:off_8AC8o ...
byte_1FFFFDBA	DCB 0x58		; DATA XREF: sendPAcket+45Ew
byte_1FFFFDBB	DCB 0x50		; DATA XREF: sendPAcket+458o
					; sendPAcket+47Aw ...
byte_1FFFFDBC	DCB 0x89		; DATA XREF: sendPAcket+47Ew
					; sendPAcket+4CEw
byte_1FFFFDBD	DCB 0x36		; DATA XREF: sendPAcket+482w
					; sendPAcket+4D2w
byte_1FFFFDBE	DCB 0x77		; DATA XREF: sendPAcket+486w
					; sendPAcket+4D6w
word_1FFFFDBF	DCW 0xA286		; DATA XREF: sendPAcket+490w
					; sendPAcket+4E4w ...
byte_1FFFFDC1	DCB 0x94		; DATA XREF: sendPAcket+498w
					; sendPAcket+4ECw
byte_1FFFFDC2	DCB 0x41		; DATA XREF: sendPAcket+49Cw
					; sendPAcket+4F0w
word_1FFFFDC3	DCW 0x5DF		; DATA XREF: sendPAcket+4A2o
					; ROM:off_8ACCo
		DCW 0x5DC
		DCW 0x3E8
		DCW 0x5DD
		DCW 0x73F
		DCW 0x7D0
		DCW 0x7D0
		DCW 0x7D0
		DCW 0x5DC
		DCW 0x7C6
		DCW 0x5DC
		DCW 0x5DC
		DCW 0x5DC
		DCB 0xDC
		DCB    5
		DCB    0
; _DWORD dword_1FFFFDE0[136]
dword_1FFFFDE0	DCD 0x33		; DATA XREF: sub_21D8o	ROM:off_21DCo ...
dword_1FFFFDE4	DCD 0			; DATA XREF: FailsafeMEnu+274r
					; createRadioPacket+792w
dword_1FFFFDE8	DCD 0xFFFFD8F0		; DATA XREF: FailsafeMEnu+296r
					; createRadioPacket+7A6w
dword_1FFFFDEC	DCD 0xB			; DATA XREF: FailsafeMEnu+2B8r
					; createRadioPacket+7BAw
dword_1FFFFDF0	DCD 0x1BBC		; DATA XREF: FailsafeMEnu+2E0r
					; createRadioPacket+7CEw
dword_1FFFFDF4	DCD 0x2710		; DATA XREF: FailsafeMEnu+302r
					; createRadioPacket:loc_AB28w
dword_1FFFFDF8	DCD 0x2710		; DATA XREF: createRadioPacket+822w
dword_1FFFFDFC	DCD 0x2710		; DATA XREF: createRadioPacket+830w
dword_1FFFFE00	DCD 0			; DATA XREF: createRadioPacket+840w
dword_1FFFFE04	DCD 0x2648		; DATA XREF: createRadioPacket+84Ew
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB 0xE0 ; à
		DCB 0xFD ; ý
		DCB 0xFF
		DCB 0x1F
		DCB 0x71 ; q
		DCB 0x19
		DCB    0
		DCB    0
unk_1FFFFE40	DCB 0xE7 ; ç		; DATA XREF: get1FFFFE40o
					; get1FFFFE40+4o ...
		DCB 0x7F ; 
		DCB 0x62 ; b
		DCB 0x69 ; i
		DCB 0xA7 ; §
		DCB 0xE2 ; â
		DCB 0xBA ; º
		DCB 0x9A ; 
		DCB 0x42 ; B
		DCB 0xBF ; ¿
		DCB 0x38 ; 8
		DCB 0x79 ; y
		DCB 0x29 ; )
		DCB 0x76 ; v
		DCB 0x79 ; y
		DCB 0x68 ; h
		DCB 0xFF
		DCB 0x3D ; =
		DCB 0xD9 ; Ù
		DCB 0x9D ; 
		DCB    3
		DCB 0xFD ; ý
		DCB 0x8B ; 
		DCB    3
		DCB 0x97 ; 
		DCB  0xB
		DCB 0x27 ; '
		DCB 0xCA ; Ê
		DCB 0xAA ; ª
		DCB 0xC0 ; À
		DCB  0xA
		DCB 0x2B ; +
		DCB 0xD1 ; Ñ
		DCB 0x9B ; 
		DCB 0xFF
		DCB    0
		DCB 0xD8 ; Ø
		DCB 0x10
		DCB 0x29 ; )
		DCB 0x16
		DCB 0xA8 ; ¨
		DCB 0xE9 ; é
		DCB 0x88 ; 
		DCB 0xC8 ; È
		DCB 0x22 ; "
		DCB 0xBF ; ¿
		DCB 0x58 ; X
		DCB 0xDE ; Þ
		DCB 0xCC ; Ì
		DCB 0x2E ; .
		DCB 0x4C ; L
		DCB 0x28 ; (
		DCB 0x4E ; N
		DCB 0xF0 ; ð
		DCB    0
		DCB 0x25 ; %
		DCB 0x59 ; Y
		DCB 0x7D ; }
		DCB 0x4B ; K
		DCB 0x3B ; ;
		DCB 0x38 ; 8
		DCB 0xA6 ; ¦
		DCB 0x4E ; N
		DCB 0x84 ; 
		DCB    8
		DCB  0xB
		DCB 0xD5 ; Õ
		DCB 0x89 ; 
		DCB 0x19
		DCB 0xDE ; Þ
		DCB 0xB8 ; ¸
		DCB 0xD1 ; Ñ
		DCB 0xB7 ; ·
		DCB 0x5E ; ^
		DCB 0x96 ; 
		DCB 0xDC ; Ü
		DCB 0xC2 ; Â
		DCB 0x99 ; 
		DCB 0xED ; í
		DCB 0x34 ; 4
		DCB 0x32 ; 2
		DCB 0xEB ; ë
		DCB    9
		DCB 0x66 ; f
		DCB 0xD1 ; Ñ
		DCB 0x68 ; h
		DCB 0xCA ; Ê
		DCB 0xAF ; ¯
		DCB 0x54 ; T
		DCB 0x24 ; $
		DCB 0xB3 ; ³
		DCB 0x8B ; 
		DCB 0x51 ; Q
		DCB 0x51 ; Q
		DCB 0x83 ; 
		DCB 0x50 ; P
		DCB 0x19
		DCB 0xFA ; ú
		DCB 0x97 ; 
		DCB 0xF4 ; ô
		DCB 0x2E ; .
		DCB 0xD6 ; Ö
		DCB    9
		DCB 0x7B ; {
		DCB 0xED ; í
		DCB 0xE6 ; æ
		DCB 0x95 ; 
		DCB 0x9A ; 
		DCB 0xB0 ; °
		DCB 0x10
		DCB 0x66 ; f
		DCB 0x1F
		DCB 0xE1 ; á
		DCB 0xA5 ; ¥
		DCB 0x54 ; T
		DCB 0x46 ; F
		DCB 0x92 ; 
		DCB 0xD0 ; Ð
		DCB 0x19
		DCB 0xB1 ; ±
		DCB 0x9A ; 
		DCB 0x4B ; K
		DCB 0xE1 ; á
		DCB 0xE0 ; à
		DCB 0xD1 ; Ñ
		DCB 0xC2 ; Â
		DCB 0xFD ; ý
		DCB 0x4C ; L
		DCB 0x72 ; r
		DCB 0xC3 ; Ã
		DCB 0xFA ; ú
		DCB 0x31 ; 1
		DCB 0x1E
		DCB 0xF9 ; ù
		DCB 0x94 ; 
		DCB 0x34 ; 4
		DCB 0x2F ; /
		DCB  0xD
		DCB 0xF8 ; ø
		DCB 0x9B ; 
		DCB 0x7C ; |
		DCB 0x1D
		DCB 0x4E ; N
		DCB 0xCC ; Ì
		DCB 0xCE ; Î
		DCB 0xFD ; ý
		DCB 0xE6 ; æ
		DCB 0x58 ; X
		DCB 0x4C ; L
		DCB 0x65 ; e
		DCB 0xD8 ; Ø
		DCB    6
		DCB 0xA0 ;  
		DCB 0xE4 ; ä
		DCB 0x68 ; h
		DCB 0xCD ; Í
		DCB 0xF9 ; ù
		DCB 0xD4 ; Ô
		DCB 0x6B ; k
		DCB 0xD8 ; Ø
		DCB 0xED ; í
		DCB 0xED ; í
		DCB 0x87 ; 
		DCB 0x1E
		DCB 0x8D ; 
		DCB 0xB0 ; °
		DCB 0x57 ; W
		DCB 0x61 ; a
		DCB 0x8E ; 
		DCB 0xF5 ; õ
		DCB 0xB9 ; ¹
		DCB 0x3D ; =
		DCB 0x98 ; 
		DCB 0xDD ; Ý
		DCB 0xF3 ; ó
		DCB 0xB9 ; ¹
		DCB 0x60 ; `
		DCB 0x97 ; 
		DCB 0x30 ; 0
		DCB 0x92 ; 
		DCB 0xC0 ; À
		DCB 0xE9 ; é
		DCB 0x17
		DCB  0xC
		DCB 0xE0 ; à
		DCB 0x99 ; 
		DCB 0xAD ; ­
		DCB 0xD5 ; Õ
		DCB 0x9A ; 
		DCB 0x11
		DCB 0x6F ; o
		DCB 0x91 ; 
		DCB 0x18
		DCB 0xF5 ; õ
		DCB 0x91 ; 
		DCB 0x6E ; n
		DCB 0xD8 ; Ø
		DCB 0x74 ; t
		DCB 0xD8 ; Ø
		DCB 0x61 ; a
		DCB 0xE2 ; â
		DCB 0x21 ; !
		DCB 0x81 ; 
		DCB 0xF8 ; ø
		DCB 0x45 ; E
		DCB 0x11
		DCB 0x59 ; Y
		DCB 0x9C ; 
		DCB 0x91 ; 
		DCB 0xAA ; ª
		DCB 0xB4 ; ´
		DCB 0xA4 ; ¤
		DCB 0xA0 ;  
		DCB 0x43 ; C
		DCB 0xE6 ; æ
		DCB 0xE8 ; è
		DCB 0xE1 ; á
		DCB 0xF4 ; ô
		DCB 0x66 ; f
		DCB 0x5F ; _
		DCB 0x1E
		DCB 0x53 ; S
		DCB 0x7D ; }
		DCB 0x42 ; B
		DCB    9
		DCB 0x3C ; <
		DCB 0xE8 ; è
		DCB 0x26 ; &
		DCB 0xB5 ; µ
		DCB 0x76 ; v
		DCB 0xC8 ; È
		DCB 0x53 ; S
		DCB 0x34 ; 4
		DCB 0x70 ; p
		DCB 0xCF ; Ï
		DCB 0xC0 ; À
		DCB 0x44 ; D
		DCB 0x5F ; _
		DCB 0x77 ; w
		DCB 0x5F ; _
		DCB 0x63 ; c
		DCB 0x61 ; a
		DCB 0x2D ; -
		DCB 0x30 ; 0
		DCB 0xCF ; Ï
		DCB 0x8C ; 
		DCB 0xE5 ; å
		DCB 0x89 ; 
		DCB 0xD9 ; Ù
		DCB 0x95 ; 
		DCB    0
		DCB 0x55 ; U
		DCB 0xD4 ; Ô
		DCB 0xBD ; ½
		DCB 0x84 ; 
		DCB 0x69 ; i
		DCB 0xE9 ; é
		DCB 0x78 ; x
		DCB  0xF
		DCB 0x62 ; b
		DCB 0x92 ; 
		DCB 0xBC ; ¼
		DCB 0x59 ; Y
		DCB 0x14
		DCB    6
		DCB 0x68 ; h
		DCB 0xC5 ; Å
		DCB 0x20
		DCB 0xBC ; ¼
		DCB 0xF7 ; ÷
		DCB 0xE1 ; á
		DCB 0x8B ; 
		DCB 0xA8 ; ¨
		DCB 0xD4 ; Ô
		DCB 0x2F ; /
		DCB 0x4F ; O
		DCB 0x64 ; d
		DCB 0xE4 ; ä
		DCB 0xCB ; Ë
		DCB 0xFF
		DCB 0x69 ; i
		DCB 0xAE ; ®
		DCB 0x4C ; L
		DCB 0xAF ; ¯
		DCB 0xDC ; Ü
		DCB 0x24 ; $
		DCB 0xBB ; »
		DCB 0x14
		DCB 0xD1 ; Ñ
		DCB 0x1C
		DCB  0xE
		DCB 0x3F ; ?
		DCB 0x79 ; y
		DCB 0x81 ; 
		DCB    7
		DCB 0x40 ; @
		DCB 0x86 ; 
		DCB 0x60 ; `
		DCB 0xD9 ; Ù
		DCB 0x89 ; 
		DCB 0xA7 ; §
		DCB 0xF6 ; ö
		DCB 0x6B ; k
		DCB 0xAF ; ¯
		DCB  0xC
		DCB    3
		DCB 0x1F
		DCB 0x24 ; $
		DCB 0xA2 ; ¢
		DCB 0xAA ; ª
		DCB 0xB1 ; ±
		DCB 0xE3 ; ã
		DCB 0xA2 ; ¢
		DCB  0xE
		DCB 0x2B ; +
		DCB 0x28 ; (
		DCB 0xA8 ; ¨
		DCB 0xF8 ; ø
		DCB 0x38 ; 8
		DCB 0x36 ; 6
		DCB 0x7D ; }
		DCB 0x4E ; N
		DCB 0x51 ; Q
		DCB 0xE8 ; è
		DCB 0xF4 ; ô
		DCB    1
		DCB 0x63 ; c
		DCB 0x62 ; b
		DCB 0x9F ; 
		DCB  0xF
		DCB 0x10
		DCB 0x85 ; 
		DCB 0xF7 ; ÷
		DCB 0x53 ; S
		DCB 0xFB ; û
		DCB 0x15
		DCB 0x18
		DCB 0xAC ; ¬
		DCB 0x9D ; 
		DCB 0x1D
		DCB 0xD4 ; Ô
		DCB 0x2C ; ,
		DCB 0x60 ; `
		DCB 0x48 ; H
		DCB  0xB
		DCB 0x28 ; (
		DCB 0x54 ; T
		DCB 0x39 ; 9
		DCB  0xC
		DCB 0x14
		DCB 0x97 ; 
		DCB    5
		DCB 0x22 ; "
		DCB 0x7C ; |
		DCB 0x3B ; ;
		DCB 0x3B ; ;
		DCB 0xE5 ; å
		DCB 0x1D
		DCB 0xD7 ; ×
		DCB 0xF1 ; ñ
		DCB 0x87 ; 
		DCB 0x47 ; G
		DCB 0x84 ; 
		DCB 0x65 ; e
		DCB 0x9C ; 
		DCB 0x4F ; O
		DCB 0x35 ; 5
		DCB 0x94 ; 
		DCB 0x3A ; :
		DCB 0xD5 ; Õ
		DCB 0xDA ; Ú
		DCB 0xC9 ; É
		DCB 0x3E ; >
		DCB 0x5C ; \
		DCB 0x48 ; H
		DCB 0x82 ; 
		DCB 0x2E ; .
		DCB 0xC1 ; Á
		DCB 0xFF
		DCB 0xB4 ; ´
		DCB 0xE9 ; é
		DCB 0xCB ; Ë
		DCB 0xEF ; ï
		DCB 0x21 ; !
		DCB 0xD4 ; Ô
		DCB 0xE4 ; ä
		DCB 0xDC ; Ü
		DCB 0x2A ; *
		DCB 0x7D ; }
		DCB 0x8C ; 
		DCB 0x9B ; 
		DCB    0
		DCB 0xEE ; î
		DCB 0xE0 ; à
		DCB 0xBC ; ¼
		DCB 0xC3 ; Ã
		DCB 0x99 ; 
		DCB 0x19
		DCB 0xF5 ; õ
		DCB 0x29 ; )
		DCB 0x13
		DCB    7
		DCB 0x9A ; 
		DCB 0x71 ; q
		DCB 0xDE ; Þ
		DCB 0xE0 ; à
		DCB 0x74 ; t
		DCB 0x92 ; 
		DCB 0x20
		DCB 0x8C ; 
		DCB 0xBF ; ¿
		DCB 0x79 ; y
		DCB 0x77 ; w
		DCB  0xD
		DCB 0x5E ; ^
		DCB 0xF5 ; õ
		DCB 0xCA ; Ê
		DCB    6
		DCB 0x62 ; b
		DCB 0x15
		DCB 0x7D ; }
		DCB 0x9C ; 
		DCB    0
		DCB 0x21 ; !
		DCB 0xA6 ; ¦
		DCB 0xBE ; ¾
		DCB 0xBC ; ¼
		DCB 0xE2 ; â
		DCB 0x92 ; 
		DCB 0x17
		DCB 0x22 ; "
		DCB 0x48 ; H
		DCB 0x75 ; u
		DCB 0x6E ; n
		DCB 0xC9 ; É
		DCB  0xD
		DCB 0xD2 ; Ò
		DCB    8
		DCB 0x12
		DCB 0xB4 ; ´
		DCB 0x76 ; v
		DCB 0x67 ; g
		DCB 0x92 ; 
		DCB 0x2F ; /
		DCB 0x94 ; 
		DCB    3
		DCB 0x37 ; 7
		DCB 0x7C ; |
byte_20000000	DCB 0			; DATA XREF: BOOT:000004E8o
					; BOOT:000004EAr ...
factoryMode	DCB 0			; DATA XREF: BOOT:000004ECo
					; BOOT:loc_530o ...
byte_20000002	DCB 1			; DATA XREF: BOOT:00000A0Ew
					; main:loc_2B94o ...
byte_20000003	DCB 1			; DATA XREF: BOOT:00000A12w
					; rxpacketHandle+20w ...
byte_20000004	DCB 0			; DATA XREF: BOOT:00000A16w
					; failsafeOnOff+3Ew ...
byte_20000005	DCB 0x43		; DATA XREF: BOOT:000004F6w
					; BOOT:loc_514w ...
byte_20000006	DCB 0x68		; DATA XREF: BOOT:000004FAw
					; BOOT:00000518w
byte_20000007	DCB 0x31		; DATA XREF: BOOT:000004FEw
					; BOOT:0000051Cw ...
byte_20000008	DCB 0			; DATA XREF: BOOT:00000502w
					; BOOT:00000520w
sw_X		DCB 0x53		; DATA XREF: BOOT:00000504w
					; BOOT:00000522w ...
byte_2000000A	DCB 0x77		; DATA XREF: BOOT:00000508w
					; BOOT:00000526w
sw_X_val	DCB 0x41		; DATA XREF: BOOT:0000050Cw
					; BOOT:0000052Aw ...
byte_2000000C	DCB 0			; DATA XREF: BOOT:00000510w
					; BOOT:0000052Ew
var_X		DCB 0x56		; DATA XREF: BOOT:00000A18w
					; sub_6FE0:loc_7068o ...
		DCB 0x72 ; r
var_X_val	DCB 0x41		; DATA XREF: sub_6FE0+8Cw
byte_20000010	DCB 0			; DATA XREF: BOOT:00000A1Ao
					; BOOT:00000A1Ew ...
byte_20000011	DCB 0			; DATA XREF: BOOT:00000A24w
byte_20000012	DCB 0			; DATA XREF: BOOT:00000A28w
byte_20000013	DCB 0			; DATA XREF: BOOT:00000A2Cw
dword_20000014	DCD 0x8337		; DATA XREF: rxpacketHandle+Ew
dword_20000018	DCD 0			; DATA XREF: main_screen+6w
dword_2000001C	DCD 33548		; DATA XREF: sub_61EC:loc_6278r
					; rxpacketHandle+1DAw ...
dword_20000020	DCD 32828		; DATA XREF: rxpacketHandle+E8r
					; rxpacketHandle+10Cw ...
activeSensors	DCD 8			; DATA XREF: BOOT:00000A36w
					; ChooseSensors+16r ...
dword_20000028	DCD 0			; DATA XREF: BOOT:00000668w
					; BOOT:0000067Cw ...
usedModelPtr	DCD 0x200002AE		; DATA XREF: sub_237C+18o sub_237C+1Ar ...
dword_20000030	DCD 0			; DATA XREF: sub_3A0o sub_3A0+2r ...
dword_20000034	DCD 0			; DATA XREF: sub_3A0+Cw sub_3C0+10r ...
dword_20000038	DCD 0			; DATA XREF: sub_800:loc_808o
					; sub_800+2Ar ...
dword_2000003C	DCD 0			; DATA XREF: sub_800+Aw sub_800+28r ...
dword_20000040	DCD 0x7D14		; DATA XREF: sub_800+Cr sub_800+12w ...
dword_20000044	DCD 0			; CODE XREF: sub_36C+Ep
					; DATA XREF: sub_354+8o ...
dword_20000048	DCD 0			; DATA XREF: sub_7CAC+Aw sub_7CAC+5Er	...
dword_2000004C	DCD 0			; DATA XREF: sub_7CAC+10w sub_7CAC+7Ar ...
dword_20000050	DCD 0			; DATA XREF: rxpacketHandle:loc_649Ar
					; rxpacketHandle+FEw ...
dword_20000054	DCD 0			; DATA XREF: afhd2Init+72w
					; afhd2Init:loc_6154r ...
dword_20000058	DCD 0
dword_2000005C	DCD 0
a100_0		DCB "100%",0            ; DATA XREF: GyroscopePAge+84o
					; GyroscopePAge+90o ...
		DCB 0x4C ; L
		DCB 0x31 ; 1
		DCB 0x32 ; 2
		DCB 0x33 ; 3
		DCB 0x48 ; H
a100_1		DCB "-100%",0           ; DATA XREF: ElevonPage+86o
					; ElevonPage+92o ...
voltage		DCB "7.71V",0           ; DATA XREF: main_screen+232o
					; main_screen+236w ...
aL100_0		DCB "L 100%",0          ; DATA XREF: showSingleValuePage:loc_495Co
					; showSingleValuePage+42w ...
aMix1		DCB "Mix #1",0          ; DATA XREF: sub_6FE0+20o sub_6FE0+2Co ...
; _BYTE	*aA[2]
aA		DCB "`í",0              ; DATA XREF: sub_7CAC+80o
					; ROM:off_7E94o
		DCB    0
		DCB 0x6A ; j
		DCB 0xED ; í
		DCB    0
		DCB    0
a10_000v	DCB "10.000V",0         ; DATA XREF: ROM:0000BF12o
					; ROM:0000BF28o ...
aModel00	DCB "Model 00",0        ; DATA XREF: modelCopyPage+24o
					; modelCopyPage+6Eo ...
		DCB    0
		DCB    0
		DCB    0
; _BYTE	*aT[6]
aT		DCB "TÕ",0              ; DATA XREF: typeSelectPage+6o
					; ROM:off_BC10o
		DCB    0
		DCB 0xEB ; ë
		DCB 0xED ; í
		DCB    0
		DCB    0
		DCB 0xF7 ; ÷
		DCB 0xED ; í
		DCB    0
		DCB    0
		DCB 0x89 ; 
		DCB 0xED ; í
		DCB    0
		DCB    0
		DCB 0x75 ; u
		DCB 0xED ; í
		DCB    0
		DCB    0
		DCB 0x7F ; 
		DCB 0xED ; í
		DCB    0
		DCB    0
; _DWORD dword_200000B8[7]
dword_200000B8	DCD 0xDB4B		; DATA XREF: auxChannelsPage+86o
					; ROM:off_F620o
					; addess of switch
		DCD 0xEDBB		; 000b8	->SW
		DCD 0xEDC3
		DCD 0xEDBF
		DCD 0xEDC7
		DCD 0xEDCB
		DCD 0xEDCF
; _BYTE	*dword_200000D4[3]
dword_200000D4	DCD 0xED8F		; DATA XREF: SwashAFRPage+8o
					; ROM:off_2F10o
		DCD 0xED7B
		DCD 0xED85
unk_200000E0	DCB 0x37 ; 7		; DATA XREF: showSingleValuePage+FAo
					; ROM:off_4B8Co
		DCB    0
		DCB    0
		DCB    0
dword_200000E4	DCD 0x48		; DATA XREF: showSingleValuePage+12Cr
		DCB 0x59 ; Y
		DCB    0
		DCB    0
		DCB    0
		DCB 0x6A ; j
		DCB    0
		DCB    0
		DCB    0
		DCB 0x7B ; {
		DCB    0
		DCB    0
		DCB    0
; _BYTE	*off_200000F4[3]
off_200000F4	DCD unk_EE71, unk_ED4F,	unk_EE16 ; DATA	XREF: sub_7CAC+18o
					; ROM:off_7E60o
aMode1		DCB "Mode 1",0          ; DATA XREF: SticksMode+42o
					; SticksMode+ACo ...
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
byte_20000114	DCB 0			; DATA XREF: sub_25A4o	ROM:off_25B0o ...
byte_20000115	DCB 0			; DATA XREF: i2cMethod+Cw
					; i2cInterrupt+14r
byte_20000116	DCB 1			; DATA XREF: i2cMethod+14w
					; i2cInterrupt+42w ...
byte_20000117	DCB 1			; DATA XREF: sub_25A4+6w
					; readEeprom+14w ...
byte_20000118	DCB 1			; DATA XREF: sub_25A4+2w
					; readEeprom:loc_3E46r	...
		DCB    0
		DCB    0
		DCB    0
dword_2000011C	DCD 0x25A5		; DATA XREF: i2cMethod+10w
					; i2cInterrupt+AEr
dword_20000120	DCD 0x2000027A		; DATA XREF: i2cMethod+8w
					; i2cInterrupt+16r
dword_20000124	DCD 4			; DATA XREF: i2cMethod+Aw
					; i2cMethod+48r ...
dword_20000128	DCD 4			; DATA XREF: i2cMethod+42w
					; i2cMethod:loc_3D06w ...
word_2000012C	DCW 0xC800		; DATA XREF: tpmMethod+7Ao
					; tpmMethod+7Cw ...
word_2000012E	DCW 0xC4A9		; DATA XREF: ROM:0000B772r
					; ROM:0000B774w
dword_20000130	DCD 0			; DATA XREF: ROM:0000B706r
					; ROM:0000B72Ew ...
dword_20000134	DCD 0			; DATA XREF: ROM:0000B730r
					; ROM:loc_B734w ...
dword_20000138	DCD 1			; DATA XREF: ROM:0000B77Cr
					; ROM:0000B7A0w ...
byte_2000013C	DCB 1			; DATA XREF: afhd2Init+10o
					; afhd2Init+12r ...
resend1FFFFCF5	DCB 0			; DATA XREF: sendSettingsPacket+6r
					; sendSettingsPacket+18w ...
sendingPacket	DCB 0			; DATA XREF: afhd2Init+18o
					; afhd2Init+1Cw ...
byte_2000013F	DCB 0			; DATA XREF: afhd2Init+68o
					; afhd2Init+6Ar ...
dword_20000140	DCD 0x11B		; DATA XREF: afhd2Init+2o afhd2Init+8w ...
studentMode	DCB 0			; DATA XREF: sendPacketWithTimer+6o
					; ROM:off_9F6Co ...
; unsigned __int8 byte_20000145[3]
byte_20000145	DCB 0, 0, 0		; DATA XREF: DisplayChannels:loc_35F0o
					; DisplayChannels+D0w ...
dword_20000148	DCD 2			; DATA XREF: sendPacketWithTimer+20r
					; timerSendPacket+34r ...
dword_2000014C	DCD 0			; DATA XREF: sendPacketWithTimer+2Cr
					; sendPacketWithTimer+38w ...
dword_20000150	DCD 0			; DATA XREF: DisplayChannels+100o
					; DisplayChannels+104w	...
dword_20000154	DCD 0			; DATA XREF: sub_A158+2r sub_A158+14w	...
dword_20000158	DCD 0x804E8100		; DATA XREF: sub_A158+Cw sub_A190+10r
dword_2000015C	DCD 0xDA382100		; DATA XREF: sendPacketWithTimer+Ar
					; sendPacketWithTimer+16w ...
byte_20000160	DCB 1			; DATA XREF: main_screen+62o
					; main_screen+66w ...
		DCB    0
		DCB    0
		DCB    0
adcFlag		DCB 0			; DATA XREF: adc_setup+2o adc_setup+6r ...
byte_20000165	DCB 0			; DATA XREF: adc_setup+40w
					; adc_setup+54w ...
		DCB    0
		DCB    0
adcChannelIndex	DCD 0			; DATA XREF: adc_setup+Cr
					; adc_setup+38w ...
byte_2000016C	DCB 0			; DATA XREF: sub_7E9Co	ROM:off_7EC4o ...
byte_2000016D	DCB 1			; DATA XREF: sendPAcket+2r
					; sub_8AD4+248w
byte_2000016E	DCB 1			; DATA XREF: sendPAcket+8r
					; sendPAcket+16w ...
byte_2000016F	DCB 0			; DATA XREF: sendPacketToRadio+1EEw
					; sendPAcket+450r ...
byte_20000170	DCB 0			; DATA XREF: sendPAcket+504r
					; sendPAcket+50Ew ...
byte_20000171	DCB 2			; DATA XREF: sub_7E9C+2r sub_7E9C+22w	...
byte_20000172	DCB 2			; DATA XREF: sub_7E9C+1Ar
					; sendPacketToRadio+1Ar ...
byte_20000173	DCB 2			; DATA XREF: sendPacketToRadio+2Cw
					; sendPacketToRadio+12Cw ...
byte_20000174	DCB 0			; DATA XREF: sendPacketToRadio+2CCw
					; sendPacketToRadio+32Ew ...
byte_20000175	DCB 4			; DATA XREF: methodOnTPM_Event+2D4w
byte_20000176	DCB 0x43		; DATA XREF: sendPacketToRadio+350w
					; methodOnTPM_Event+9Er
byte_20000177	DCB 0			; DATA XREF: sendPAcket+2DEr
					; sendPAcket+500w ...
byte_20000178	DCB 0			; DATA XREF: sub_7E9C:loc_7EACr
					; sendPacketToRadio+16r ...
byte_20000179	DCB 0			; DATA XREF: sendPacketToRadio+B6w
					; sendPAcket+362r ...
byte_2000017A	DCB 0			; DATA XREF: sub_7E9C+18w
					; sendPAcket+2Ar ...
byte_2000017B	DCB 1			; DATA XREF: methodOnTPM_Event+138r
					; methodOnTPM_Event+13Er ...
byte_2000017C	DCB 0			; DATA XREF: sendPacketToRadio+362w
					; sendPacketToRadio:loc_84ECw
byte_2000017D	DCB 0xF0		; DATA XREF: sendPAcket+48w
					; sendPAcket+4Co ...
word_2000017E	DCW 1			; DATA XREF: sendPAcket+31Cr
byte_20000180	DCB 0xF			; DATA XREF: sendPacketToRadio+2A2o
					; sendPacketToRadio+2A4w ...
byte_20000181	DCB 0x43		; DATA XREF: sendPacketToRadio+2A6w
					; sub_8AD4+9Aw	...
		DCB    0
		DCB    0
dword_20000184	DCD 0x20086A5		; DATA XREF: sendPacketToRadio+36w
					; sendPacketToRadio+CEw ...
packetSendAt	DCD 0xDA504A00		; DATA XREF: sendPAcket+516w
					; sendPAcket+51Er ...
dword_2000018C	DCD 0x4194A286		; DATA XREF: sendPacketToRadio+20Cw
					; sendPacketToRadio+26Cr ...
dword_20000190	DCD 0x17		; DATA XREF: sendPacketToRadio:loc_8424r
					; sendPacketToRadio+328w ...
dword_20000194	DCD 0x17		; DATA XREF: sendPacketToRadio+2C0w
					; sendPacketToRadio+2C6w ...
dword_20000198	DCD 0x10		; DATA XREF: sendPAcket+36Ar
dword_2000019C	DCD 0			; DATA XREF: sendPacketToRadio+18Cr
					; sendPAcket+46w ...
dword_200001A0	DCD 0			; DATA XREF: sendPacketToRadio+33Ew
; char sensorsArrayInRam[]
sensorsArrayInRam DCB 0, 0, 0x49, 4, 0x3C, 0x80, 0, 0, 3, 2, 0x61, 4, 0x3C; 0
					; DATA XREF: ChooseSensors+18o
					; ChooseSensors+32o ...
		DCB 0x80, 0, 0,	0xA, 1,	0xBA, 0xAD, 0x3C, 0x80,	0, 0, 0x7F; 13
		DCB 0, 3, 3, 0x14, 0x7D, 0, 0, 0xFA, 0,	0x28, 0, 0x3C; 25
		DCB 0x80, 0, 0,	0xFB, 0, 0x64, 0, 0x3C,	0x80, 0, 0, 0xFC; 37
		DCB 0, 0x3C, 0,	0x3C, 0x80, 0, 0, 0xFE,	0, 1, 0, 0x3C; 49
		DCB 0x80, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0; 61
		DCB 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0; 77
		DCB 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0; 94
		DCB 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0; 111
		DCB 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0; 128
		DCB 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0; 145
		DCB 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0; 162
		DCB 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0; 179
		DCB 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0; 196
		DCB 0, 3, 0, 0xB0, 4, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0; 213
		DCB 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0; 229
		DCB 0, 0, 0, 0,	0, 0, 0, 0, 0, 0; 246
; char rxsettings[]
rxsettings	DCD 0xD8		; DATA XREF: FactoryReset+72o
					; ROM:varRXsettingso ...
trainerMode	DCB 0			; DATA XREF: setFactVal+Aw
					; createRadioPacket+66r ...
					; 0=OFF	1=ON
trainerSW	DCB 0x13		; DATA XREF: setFactVal+Ew
					; createRadioPacket+6Ar ...
					; 16=A 17=B 18=C 19=D
stickModeSW	DCB 1			; DATA XREF: startupWarning+34r
					; startupWarning+E0r ...
byte_200002AB	DCB 1			; DATA XREF: setFactVal+1Cw
					; main_screen+64r
lcdBrightnes	DCB 0x28		; DATA XREF: LCDBrightM+6r
					; LCDBrightM+38r ...
currentModel	DCB 0			; DATA XREF: FactoryReset+76r
					; FailsafeMEnu+3Ar ...
modelname	DCB "Flysky01",0        ; DATA XREF: setFactVal+4Ao
					; ROM:off_9824o
heli_plane	DCB    0		; 1=heli 0=plane
settings_10	DCB 2			; DATA XREF: setFactVal+4Ew
					; some settings	related	to word_1FFFF89C no idea what
settings_11	DCB 0			; DATA XREF: setFactVal+50w
settings_12	DCB 0			; DATA XREF: setFactVal+52w
settings_13	DCB 0			; DATA XREF: setFactVal+54w
		DCB 0x10
		DCB 0x64 ; d
		DCB 0x64 ; d
		DCB 0x64 ; d
		DCB 0x64 ; d
		DCB 0x64 ; d
		DCB 0x64 ; d
		DCB 0x64 ; d
		DCB 0x64 ; d
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB 0x19
		DCB 0x32 ; 2
		DCB 0x4B ; K
		DCB 0x64 ; d
		DCB    0
		DCB 0x19
		DCB 0x32 ; 2
		DCB 0x4B ; K
		DCB 0x64 ; d
		DCB 0x32 ; 2
		DCB 0x32 ; 2
		DCB 0x32 ; 2
		DCB 0x11
		DCB    0
		DCB 0x19
		DCB 0x32 ; 2
		DCB 0x4B ; K
		DCB 0x64 ; d
		DCB    0
		DCB 0x19
		DCB 0x32 ; 2
		DCB 0x4B ; K
		DCB 0x64 ; d
		DCB    0
		DCB 0x13
		DCB 0x32 ; 2
		DCB 0x32 ; 2
		DCB 0x32 ; 2
		DCB    9
		DCB    3
mix		DCB 0x10
mix_0		DCB 0x32 ; 2
mix_1		DCB 0x32 ; 2
mix_2		DCB    0
		DCB 0x10
		DCB 0x32 ; 2
		DCB 0x32 ; 2
		DCB    0
		DCB 0x10
		DCB 0x32 ; 2
		DCB 0x32 ; 2
		DCB    0
		DCB 0x32 ; 2
		DCB 0x32 ; 2
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB 0x64 ; d
		DCB 0x64 ; d
		DCB 0x64 ; d
		DCB 0x64 ; d
		DCB 0x64 ; d
		DCB 0x64 ; d
		DCB 0x64 ; d
		DCB 0x64 ; d
		DCB 0x58 ; X
		DCB 0x47 ; G
		DCB 0x64 ; d
		DCB 0x64 ; d
		DCB    0
		DCB    0
AFHDS_2A	DCB    1
PPM_ON_OFF	DCB    1
		DCB 0x31 ; 1
		DCB 0x86 ; 
		DCB 0xA2 ; ¢
		DCB 0x94 ; 
		DCB 0x41 ; A
servoFreqL	DCB 0x32 ; 2
servoFreqH	DCB    0
FailSafeCH1L	DCB 0xFF		; DATA XREF: setFactVal+24w
FailSafeCH1H	DCB 0x7F		; DATA XREF: setFactVal+28w
FailSafeCH2L	DCB 0xFF		; DATA XREF: setFactVal+2Aw
FailSafeCH2H	DCB 0x7F		; DATA XREF: setFactVal+2Ew
FailSafeCH3L	DCB 8			; DATA XREF: setFactVal+30w
FailSafeCH3H	DCB 0xD5		; DATA XREF: setFactVal+34w
FailSafeCH4L	DCB 0xFF		; DATA XREF: setFactVal+36w
FailSafeCH4H	DCB 0x7F		; DATA XREF: setFactVal+3Aw
FailSafeCH5L	DCB 0xFF		; DATA XREF: setFactVal+3Cw
FailSafeCH5H	DCB 0x7F		; DATA XREF: setFactVal+40w
FailSafeCH6L	DCB 0xFF		; DATA XREF: setFactVal+42w
FailSafeCH6H	DCB 0x7F		; DATA XREF: setFactVal+46w
		DCB    0
		DCB 0x2C ; ,
		DCB    1
		DCB 0x3B ; ;
		DCB    1
		DCB 0x77 ; w
		DCB    1
		DCB    3
		DCB 0x38 ; 8
		DCB    4
		DCB 0xE8 ; è
		DCB    3
sensor129	DCB 0xFB
sensor130_index	DCB    0
sensor131	DCB 0xFC ; ü
sensor132_index	DCB    0
sensor133	DCB 0x7F
sensor134_index	DCB    0
sensor135	DCB 0xFF
sensor136	DCB 0x64 ; d
sensorat137	DCB    0
sensorat138	DCB    0		; odometer 1 formating data
sensorat139	DCB    0
sensroat140	DCB    0
auxCh		DCB 0b1100100
sensor142	DCB    0		; odometer 2 sensor data used for formatting
sensor143	DCB    0
sensor144	DCB    0
auxCh_0		DCB 0xB0 ; °
aFlysky02	DCB "Flysky02",0,0,0,0,0,0,0x10,"dddddddd",0,0,0,0,0,0,0,0,0,0x19,"2Kd",0,0x19,"2Kd222",0x11,0,0x19,"2Kd",0
		DCB 0x19,"2Kd",0,0x13,"222",1,2,0x10,"22",0,0x10,"22",0,0x10,"22",0,"22",0,0,0,0,0,0,"dddddddddddd",0,0
		DCB 1,0,0,"ÿÿÿÿ2",0,"ÿÿÿÿÿÿ",0,"",1,"¤",1,"ô",1,3,"8",4,"è",3,"ÿ",0,"ÿ",0,"ÿ"
		DCB 0,"ÿd",0,0,0,0,0,0,0,0,0,"Flysky03",0,0,0,0,0,0,0x10,"dddddddd",0,0,0,0,0,0,0,0,0,0x19,"2Kd",0,0x19,"2K"
		DCB "d222",0x11,0,0x19,"2Kd",0,0x19,"2Kd",0,0x13,"222",1,2,0x10,"22",0,0x10,"22",0,0x10,"22",0,"22",0,0,0,0,0,0
		DCB "dddddddddddd",0,0,1,0,0,"ÿÿÿÿ2",0,"ÿÿÿÿÿÿ",0,"",1,"¤",1,"ô",1,3,"8",4
		DCB "è",3,"ÿ",0,"ÿ",0,"ÿ",0,"ÿd",0,0,0,0,0,0,0,0,0,"Flysky04",0,0,0,0,0,0,0x10,"dddddddd",0,0,0
		DCB 0,0,0,0,0,0,0x19,"2Kd",0,0x19,"2Kd222",0x11,0,0x19,"2Kd",0,0x19,"2Kd",0,0x13,"222",1,2,0x10,"22",0,0x10,"22",0,0x10
		DCB "22",0,"22",0,0,0,0,0,0,"dddddddddddd",0,0,1,0,0,"ÿÿÿÿ2",0,"ÿÿÿÿÿÿ",0,"",1
		DCB "¤",1,"ô",1,3,"8",4,"è",3,"ÿ",0,"ÿ",0,"ÿ",0,"ÿd",0,0,0,0,0,0,0,0,0,"Flysky05",0,0,0,0,0
		DCB 0,0x10,"dddddddd",0,0,0,0,0,0,0,0,0,0x19,"2Kd",0,0x19,"2Kd222",0x11,0,0x19,"2Kd",0,0x19,"2Kd",0,0x13,"222",1
		DCB 2,0x10,"22",0,0x10,"22",0,0x10,"22",0,"22",0,0,0,0,0,0,"dddddddddddd",0,0,1,0,0,"ÿÿÿÿ2",0,"ÿ"
		DCB "ÿÿÿÿÿ",0,"",1,"¤",1,"ô",1,3,"8",4,"è",3,"ÿ",0,"ÿ",0,"ÿ",0,"ÿd",0,0,0,0,0,0
		DCB 0,0,0,"Flysky06",0,0,0,0,0,0,0x10,"dddddddd",0,0,0,0,0,0,0,0,0,0x19,"2Kd",0,0x19,"2Kd222",0x11,0,0x19,"2K"
		DCB "d",0,0x19,"2Kd",0,0x13,"222",1,2,0x10,"22",0,0x10,"22",0,0x10,"22",0,"22",0,0,0,0,0,0,"dddddddddd"
		DCB "dd",0,0,1,0,0,"ÿÿÿÿ2",0,"ÿÿÿÿÿÿ",0,"",1,"¤",1,"ô",1,3,"8",4,"è",3,"ÿ",0
		DCB "ÿ",0,"ÿ",0,"ÿd",0,0,0,0,0,0,0,0,0,"Flysky07",0,0,0,0,0,0,0x10,"dddddddd",0,0,0,0,0,0,0,0,0,0x19,"2"
		DCB "Kd",0,0x19,"2Kd222",0x11,0,0x19,"2Kd",0,0x19,"2Kd",0,0x13,"222",1,2,0x10,"22",0,0x10,"22",0,0x10,"22",0,"2"
		DCB "2",0,0,0,0,0,0,"dddddddddddd",0,0,1,0,0,"ÿÿÿÿ2",0,"ÿÿÿÿÿÿ",0,"",1,"¤",1,"ô"
		DCB 1,3,"8",4,"è",3,"ÿ",0,"ÿ",0,"ÿ",0,"ÿd",0,0,0,0,0,0,0,0,0,"Flysky08",0,0,0,0,0,0,0x10,"ddddd"
		DCB "ddd",0,0,0,0,0,0,0,0,0,0x19,"2Kd",0,0x19,"2Kd222",0x11,0,0x19,"2Kd",0,0x19,"2Kd",0,0x13,"222",1,2,0x10,"22",0
		DCB 0x10,"22",0,0x10,"22",0,"22",0,0,0,0,0,0,"dddddddddddd",0,0,1,0,0,"ÿÿÿÿ2",0,"ÿÿÿÿÿ"
		DCB "ÿ",0,"",1,"¤",1,"ô",1,3,"8",4,"è",3,"ÿ",0,"ÿ",0,"ÿ",0,"ÿd",0,0,0,0,0,0,0,0,0,"Fly"
		DCB "sky09",0,0,0,0,0,0,0x10,"dddddddd",0,0,0,0,0,0,0,0,0,0x19,"2Kd",0,0x19,"2Kd222",0x11,0,0x19,"2Kd",0,0x19,"2"
		DCB "Kd",0,0x13,"222",1,2,0x10,"22",0,0x10,"22",0,0x10,"22",0,"22",0,0,0,0,0,0,"dddddddddddd",0,0,1,0
		DCB 0,"ÿÿÿÿ2",0,"ÿÿÿÿÿÿ",0,"",1,"¤",1,"ô",1,3,"8",4,"è",3,"ÿ",0,"ÿ",0,"ÿ",0
		DCB "ÿd",0,0,0,0,0,0,0,0,0,"Flysky10",0,0,0,0,0,0,0x10,"dddddddd",0,0,0,0,0,0,0,0,0,0x19,"2Kd",0,0x19,"2Kd"
		DCB "222",0x11,0,0x19,"2Kd",0,0x19,"2Kd",0,0x13,"222",1,2,0x10,"22",0,0x10,"22",0,0x10,"22",0,"22",0,0,0,0,0,0,"d"
		DCB "ddddddddddd",0,0,1,0,0,"ÿÿÿÿ2",0,"ÿÿÿÿÿÿ",0,"",1,"¤",1,"ô",1,3,"8",4,"è"
		DCB 3,"ÿ",0,"ÿ",0,"ÿ",0,"ÿd",0,0,0,0,0,0,0,0,0,"Flysky11",0,0,0,0,0,0,0x10,"dddddddd",0,0,0,0,0,0,0
		DCB 0,0,0x19,"2Kd",0,0x19,"2Kd222",0x11,0,0x19,"2Kd",0,0x19,"2Kd",0,0x13,"222",1,2,0x10,"22",0,0x10,"22",0,0x10,"22"
		DCB 0,"22",0,0,0,0,0,0,"dddddddddddd",0,0,1,0,0,"ÿÿÿÿ2",0,"ÿÿÿÿÿÿ",0,"",1,"¤",1
		DCB "ô",1,3,"8",4,"è",3,"ÿ",0,"ÿ",0,"ÿ",0,"ÿd",0,0,0,0,0,0,0,0,0,"Flysky12",0,0,0,0,0,0,0x10,"d"
		DCB "ddddddd",0,0,0,0,0,0,0,0,0,0x19,"2Kd",0,0x19,"2Kd222",0x11,0,0x19,"2Kd",0,0x19,"2Kd",0,0x13,"222",1,2,0x10,"2"
		DCB "2",0,0x10,"22",0,0x10,"22",0,"22",0,0,0,0,0,0,"dddddddddddd",0,0,1,0,0,"ÿÿÿÿ2",0,"ÿÿÿ"
		DCB "ÿÿÿ",0,"",1,"¤",1,"ô",1,3,"8",4,"è",3,"ÿ",0,"ÿ",0,"ÿ",0,"ÿd",0,0,0,0,0,0,0,0,0
		DCB "Flysky13",0,0,0,0,0,0,0x10,"dddddddd",0,0,0,0,0,0,0,0,0,0x19,"2Kd",0,0x19,"2Kd222",0x11,0,0x19,"2Kd",0
		DCB 0x19,"2Kd",0,0x13,"222",1,2,0x10,"22",0,0x10,"22",0,0x10,"22",0,"22",0,0,0,0,0,0,"dddddddddddd",0,0
		DCB 1,0,0,"ÿÿÿÿ2",0,"ÿÿÿÿÿÿ",0,"",1,"¤",1,"ô",1,3,"8",4,"è",3,"ÿ",0,"ÿ",0,"ÿ"
		DCB 0,"ÿd",0,0,0,0,0,0,0,0,0,"Flysky14",0,0,0,0,0,0,0x10,"dddddddd",0,0,0,0,0,0,0,0,0,0x19,"2Kd",0,0x19,"2K"
		DCB "d222",0x11,0,0x19,"2Kd",0,0x19,"2Kd",0,0x13,"222",1,2,0x10,"22",0,0x10,"22",0,0x10,"22",0,"22",0,0,0,0,0,0
		DCB "dddddddddddd",0,0,1,0,0,"ÿÿÿÿ2",0,"ÿÿÿÿÿÿ",0,"",1,"¤",1,"ô",1,3,"8",4
		DCB "è",3,"ÿ",0,"ÿ",0,"ÿ",0,"ÿd",0,0,0,0,0,0,0,0,0,"Flysky15",0,0,0,0,0,0,0x10,"dddddddd",0,0,0
		DCB 0,0,0,0,0,0,0x19,"2Kd",0,0x19,"2Kd222",0x11,0,0x19,"2Kd",0,0x19,"2Kd",0,0x13,"222",1,2,0x10,"22",0,0x10,"22",0,0x10
		DCB "22",0,"22",0,0,0,0,0,0,"dddddddddddd",0,0,1,0,0,"ÿÿÿÿ2",0,"ÿÿÿÿÿÿ",0,"",1
		DCB "¤",1,"ô",1,3,"8",4,"è",3,"ÿ",0,"ÿ",0,"ÿ",0,"ÿd",0,0,0,0,0,0,0,0,0,"Flysky16",0,0,0,0,0
		DCB 0,0x10,"dddddddd",0,0,0,0,0,0,0,0,0,0x19,"2Kd",0,0x19,"2Kd222",0x11,0,0x19,"2Kd",0,0x19,"2Kd",0,0x13,"222",1
		DCB 2,0x10,"22",0,0x10,"22",0,0x10,"22",0,"22",0,0,0,0,0,0,"dddddddddddd",0,0,1,0,0,"ÿÿÿÿ2",0,"ÿ"
		DCB "ÿÿÿÿÿ",0,"",1,"¤",1,"ô",1,3,"8",4,"è",3,"ÿ",0,"ÿ",0,"ÿ",0,"ÿd",0,0,0,0,0,0
		DCB 0,0,0,"Flysky17",0,0,0,0,0,0,0x10,"dddddddd",0,0,0,0,0,0,0,0,0,0x19,"2Kd",0,0x19,"2Kd222",0x11,0,0x19,"2K"
		DCB "d",0,0x19,"2Kd",0,0x13,"222",1,2,0x10,"22",0,0x10,"22",0,0x10,"22",0,"22",0,0,0,0,0,0,"dddddddddd"
		DCB "dd",0,0,1,0,0,"ÿÿÿÿ2",0,"ÿÿÿÿÿÿ",0,"",1,"¤",1,"ô",1,3,"8",4,"è",3,"ÿ",0
		DCB "ÿ",0,"ÿ",0,"ÿd",0,0,0,0,0,0,0,0,0,"Flysky18",0,0,0,0,0,0,0x10,"dddddddd",0,0,0,0,0,0,0,0,0,0x19,"2"
		DCB "Kd",0,0x19,"2Kd222",0x11,0,0x19,"2Kd",0,0x19,"2Kd",0,0x13,"222",1,2,0x10,"22",0,0x10,"22",0,0x10,"22",0,"2"
		DCB "2",0,0,0,0,0,0,"dddddddddddd",0,0,1,0,0,"ÿÿÿÿ2",0,"ÿÿÿÿÿÿ",0,"",1,"¤",1,"ô"
		DCB 1,3,"8",4,"è",3,"ÿ",0,"ÿ",0,"ÿ",0,"ÿd",0,0,0,0,0,0,0,0,0,"Flysky19",0,0,0,0,0,0,0x10,"ddddd"
		DCB "ddd",0,0,0,0,0,0,0,0,0,0x19,"2Kd",0,0x19,"2Kd222",0x11,0,0x19,"2Kd",0,0x19,"2Kd",0,0x13,"222",1,2,0x10,"22",0
		DCB 0x10,"22",0,0x10,"22",0,"22",0,0,0,0,0,0,"dddddddddddd",0,0,1,0,0,"ÿÿÿÿ2",0,"ÿÿÿÿÿ"
		DCB "ÿ",0,"",1,"¤",1,"ô",1,3,"8",4,"è",3,"ÿ",0,"ÿ",0,"ÿ",0,"ÿd",0,0,0,0,0,0,0,0,0,"Fly"
		DCB "sky20",0,0,0,0,0,0,0x10,"dddddddd",0,0,0,0,0,0,0,0,0,0x19,"2Kd",0,0x19,"2Kd222",0x11,0,0x19,"2Kd",0,0x19,"2"
		DCB "Kd",0,0x13,"222",1,2,0x10,"22",0,0x10,"22",0,0x10,"22",0,"22",0,0,0,0,0,0,"dddddddddddd",0,0,1,0
		DCB 0,"ÿÿÿÿ2",0,"ÿÿÿÿÿÿ",0,"",1,"¤",1,"ô",1,3,"8",4,"è",3,"ÿ",0,"ÿ",0,"ÿ",0
		DCB "ÿd",0,0,0,0,0,0,0,0,0
settingsCRC	DCW 0x29AB		; DATA XREF: settingsValidation+24r
					; saveModelSettings+6Aw
; __int16 stickAdjustData[]
stickAdjustData	DCB 0xCC, 0, 0xCA, 7, 0xBD, 0xE, 6, 0, 0x20, 7,	0xBF, 0xE; 0
					; DATA XREF: sub_618C+1Eo
					; ROM:off_61E0o ...
		DCB 0x57, 1, 0xA7, 8, 0xFF, 0xF, 0x8E, 1, 0x1A,	8, 0x24; 12 ; 40 items
		DCB 0xF, 0, 0, 0, 8, 0xFF, 0xF,	0, 0, 0, 8, 0xFF, 0xF; 23
		DCB 1, 0x28, 0xC2, 0x14	; 36
CRC_STICKDATA	DCW 0x2FCC		; DATA XREF: factoryModeMenu+234w
					; showNavigationPage+18Ew ...
tmpModelData	DCB 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0; 0
					; DATA XREF: factoryModeMenu+20Ao
					; factoryModeMenu+268o	...
		DCB 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0; 17
		DCB 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0; 34
		DCB 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0; 51
		DCB 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0; 68
		DCB 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0; 85
		DCB 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0; 102
		DCB 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0; 119
		DCB 0, 0, 0, 0,	0, 0, 0, 0, 0, 0; 136
; _DWORD settingRelatedValue[4]
settingRelatedValue DCD	0xD7		; DATA XREF: settingsValidation+6o
					; ROM:off_60A8o ...
		DCD 0xD6
		DCD 0xD8
		DCD 0xD5
; char RX_BUFFER[]
RX_BUFFER	DCB 0			; 0 ; DATA XREF: rxpacketHandle:loc_6426o
					; rxpacketHandle+94w ...
byte_20000EE5	DCB 0			; DATA XREF: rxpacketHandle+98w
byte_20000EE6	DCB 0x48		; DATA XREF: rxpacketHandle+9Cw
byte_20000EE7	DCB 4			; DATA XREF: rxpacketHandle+A0w
byte_20000EE8	DCB 0xA			; DATA XREF: rxpacketHandle+B4w
byte_20000EE9	DCB 1			; DATA XREF: rxpacketHandle+B8w
byte_20000EEA	DCB 0xBA		; DATA XREF: rxpacketHandle+BCw
byte_20000EEB	DCB 0xAD		; DATA XREF: rxpacketHandle+C0w
byte_20000EEC	DCB 3			; DATA XREF: rxpacketHandle+D0w
byte_20000EED	DCB 2			; DATA XREF: rxpacketHandle+D4w
byte_20000EEE	DCB 0x64		; DATA XREF: rxpacketHandle+D8w
byte_20000EEF	DCB 4			; DATA XREF: rxpacketHandle+DCw
		DCB 0xFB ; û
		DCB    0
		DCB 0x64 ; d
		DCB    0
		DCB 0xFA ; ú
		DCB    0
		DCB 0x28 ; (
		DCB    0
		DCB  0xA
		DCB    1
		DCB 0xBA ; º
		DCB 0xAD ; ­
		DCB    3
		DCB    2
		DCB 0x64 ; d
		DCB    4
; _DWORD ch1_ADC_VAL
ch1_ADC_VAL	DCD 2014		; DATA XREF: adc_setup+24o
					; ROM:off_2270o ...
ch2_ADC_VAL	DCD 1823		; DATA XREF: SticksAdjustPage+F4r
					; main_screen+126r ...
ch3_ADC_VAL	DCD 307			; DATA XREF: startupWarning+40r
					; startupWarning+ECr ...
ch4_ADC_VAL	DCD 2094		; DATA XREF: SticksAdjustPage+118r
					; main_screen+132r ...
; _DWORD VARA_ADC_0[2]
VARA_ADC_0	DCD 2215		; DATA XREF: createPacketsForCH7_10+1Eo
					; ROM:off_F71Co
					; Dave keeps additional	channel	information here - I am	not sure if it is channel data or mix data
VARB_ADC_0	DCD 3055
voltageADC	DCD 4095		; DATA XREF: controlBackLight+12r
					; LCD_clear+D2r ...
SWC_ADC		DCD 0xFFF		; DATA XREF: main+ACr
; int ADC_Results[]
ADC_Results	DCD 2014		; 0 ; DATA XREF: adc_setup+12o
					; ROM:off_2268o
					; results of ADC 7 items?
		DCD 1824
		DCD 307
		DCD 2095
		DCD 2216
		DCD 3056
		DCD 4095
		DCD 4095
heap		DCB    0		; DATA XREF: get1FFFFE40+6o
					; ROM:off_19F4o
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
unk_20001000	DCB    0		; DATA XREF: Get20001000o
					; BOOT:off_344o
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
unk_20001060	DCB    0		; DATA XREF: get0x2000146020001060+6o
					; BOOT:off_1E4o
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB 0x2C ; ,
		DCB    1
		DCB    0
		DCB 0x20
		DCB    0
		DCB 0xA0 ;  
		DCB    3
		DCB 0x40 ; @
		DCB 0x34 ; 4
		DCB 0xCF ; Ï
		DCB    0
		DCB    0
		DCB    5
		DCB    0
		DCB    0
		DCB    0
		DCB 0xF4 ; ô
		DCB    1
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB 0xF4 ; ô
		DCB    1
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB 0xFF
		DCB 0xFF
		DCB 0xFF
		DCB 0xFF
		DCB 0x1F
		DCB 0xB7 ; ·
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    6
		DCB    0
		DCB    0
		DCB    0
		DCB    6
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB  0xF
		DCB    0
		DCB 0x14
		DCB    0
		DCB    0
		DCB    0
		DCB 0xAE ; ®
		DCB    2
		DCB    0
		DCB 0x20
		DCB    1
		DCB    0
		DCB    0
		DCB    0
		DCB 0x10
		DCB 0x27 ; '
		DCB    0
		DCB    0
		DCB 0xE0 ; à
		DCB 0xFD ; ý
		DCB 0xFF
		DCB 0x1F
		DCB 0x11
		DCB    0
		DCB    0
		DCB    0
		DCB 0xFF
		DCB 0xFF
		DCB 0xFF
		DCB 0xFF
		DCB 0x9F ; 
		DCB 0xF6 ; ö
		DCB    0
		DCB    0
		DCB 0xFE ; þ
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB 0x10
		DCB 0x27 ; '
		DCB    0
		DCB    0
		DCB    6
		DCB    0
		DCB    0
		DCB    0
		DCB 0xFE ; þ
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    6
		DCB    0
		DCB    0
		DCB    0
		DCB 0xAE ; ®
		DCB    2
		DCB    0
		DCB 0x20
		DCB 0x14
		DCB    0
		DCB    0
		DCB    0
		DCB 0xAE ; ®
		DCB    2
		DCB    0
		DCB 0x20
		DCB 0x6B ; k
		DCB 0xF7 ; ÷
		DCB    0
		DCB    0
		DCB 0x10
		DCB 0x27 ; '
		DCB    0
		DCB    0
		DCB    6
		DCB    0
		DCB    0
		DCB    0
		DCB 0xAE ; ®
		DCB    2
		DCB    0
		DCB 0x20
		DCB 0x14
		DCB    0
		DCB    0
		DCB    0
		DCB 0xAE ; ®
		DCB    2
		DCB    0
		DCB 0x20
		DCB 0x95 ; 
		DCB 0xAB ; «
		DCB    0
		DCB    0
		DCB 0x33 ; 3
		DCB    0
		DCB    0
		DCB    0
		DCB 0xFA ; ú
		DCB 0xFF
		DCB 0xFF
		DCB 0xFF
		DCB 0xF0 ; ð
		DCB 0xD8 ; Ø
		DCB 0xFF
		DCB 0xFF
		DCB  0xB
		DCB    0
		DCB    0
		DCB    0
		DCB 0x10
		DCB 0x27 ; '
		DCB    0
		DCB    0
		DCB 0x10
		DCB 0x27 ; '
		DCB    0
		DCB    0
		DCB 0x33 ; 3
		DCB    0
		DCB    0
		DCB    0
		DCB 0xFA ; ú
		DCB 0xFF
		DCB 0xFF
		DCB 0xFF
		DCB 0xF0 ; ð
		DCB 0xD8 ; Ø
		DCB 0xFF
		DCB 0xFF
		DCB  0xB
		DCB    0
		DCB    0
		DCB    0
		DCB 0xBC ; ¼
		DCB 0x1B
		DCB    0
		DCB    0
		DCB 0x10
		DCB 0x27 ; '
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB 0xCE ; Î
		DCB    2
		DCB    0
		DCB 0x20
		DCB 0x94 ; 
		DCB 0xF8 ; ø
		DCB 0xFF
		DCB 0x1F
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB 0xD9 ; Ù
		DCB 0xFC ; ü
		DCB 0xFF
		DCB 0x1F
		DCB 0xD8 ; Ø
		DCB 0xFC ; ü
		DCB 0xFF
		DCB 0x1F
		DCB 0x6C ; l
		DCB    1
		DCB    0
		DCB 0x20
		DCB 0x3B ; ;
		DCB 0x1D
		DCB    0
		DCB    0
		DCB 0x10
		DCB 0x27 ; '
		DCB    0
		DCB    0
		DCB 0xD9 ; Ù
		DCB 0xFC ; ü
		DCB 0xFF
		DCB 0x1F
		DCB 0xD8 ; Ø
		DCB 0xFC ; ü
		DCB 0xFF
		DCB 0x1F
		DCB 0x6C ; l
		DCB    1
		DCB    0
		DCB 0x20
		DCB 0xF8 ; ø
		DCB 0xFF
		DCB 0xFF
		DCB 0xFF
		DCB 0x4B ; K
		DCB 0x83 ; 
		DCB    0
		DCB    0
		DCB 0x70 ; p
		DCB 0x17
		DCB    0
		DCB    0
		DCB 0xB8 ; ¸
		DCB  0xB
		DCB    0
		DCB    0
		DCB 0xFF
		DCB 0xFF
		DCB 0xFF
		DCB 0xFF
		DCB 0xD5 ; Õ
		DCB 0x7F ; 
		DCB    0
		DCB    0
		DCB 0x6C ; l
		DCB    1
		DCB    0
		DCB 0x20
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB 0x14
		DCB    0
		DCB    0
		DCB 0xF8 ; ø
		DCB 0xFF
		DCB 0xFF
		DCB 0xFF
		DCB    0
		DCB 0x2C ; ,
		DCB 0xD4 ; Ô
		DCB 0xDD ; Ý
		DCB    0
		DCB 0xC2 ; Â
		DCB 0xD5 ; Õ
		DCB 0xDD ; Ý
		DCB    0
		DCB 0x1E
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB 0x7F ; 
		DCB 0xFC ; ü
		DCB 0xFF
		DCB 0x1F
		DCB 0x97 ; 
		DCB 0x8A ; 
		DCB    0
		DCB    0
		DCB 0x9A ; 
		DCB 0x8A ; 
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB 0x81 ; 
		DCB 0x3C ; <
		DCB 0x15
		DCB    0
		DCB 0x20
		DCB 0xE0 ; à
		DCB 0x14
		DCB    0
		DCB 0x20
		DCB 0x40 ; @
		DCB 0x15
		DCB    0
		DCB 0x20
		DCB 0x73 ; s
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB 0x4F ; O
		DCB 0x7A ; z
		DCB    0
		DCB    0
		DCB    6
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB  0xF
		DCB    0
		DCB 0x14
		DCB    0
		DCB    0
		DCB    0
		DCB 0xAE ; ®
		DCB    2
		DCB    0
		DCB 0x20
		DCB    1
		DCB    0
		DCB    0
		DCB    0
		DCB 0x10
		DCB 0x27 ; '
		DCB    0
		DCB    0
		DCB 0xE0 ; à
		DCB 0xFD ; ý
		DCB 0xFF
		DCB 0x1F
		DCB 0x11
		DCB    0
		DCB    0
		DCB    0
		DCB 0xFF
		DCB 0xFF
		DCB 0xFF
		DCB 0xFF
		DCB 0x9F ; 
		DCB 0xF6 ; ö
		DCB    0
		DCB    0
		DCB 0xFE ; þ
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    6
		DCB    0
		DCB    0
		DCB    0
		DCB 0xAE ; ®
		DCB    2
		DCB    0
		DCB 0x20
		DCB 0x14
		DCB    0
		DCB    0
		DCB    0
		DCB 0xAE ; ®
		DCB    2
		DCB    0
		DCB 0x20
		DCB 0x6B ; k
		DCB 0xF7 ; ÷
		DCB    0
		DCB    0
		DCB 0x10
		DCB 0x27 ; '
		DCB    0
		DCB    0
		DCB    6
		DCB    0
		DCB    0
		DCB    0
		DCB 0xAE ; ®
		DCB    2
		DCB    0
		DCB 0x20
		DCB 0x14
		DCB    0
		DCB    0
		DCB    0
		DCB 0xAE ; ®
		DCB    2
		DCB    0
		DCB 0x20
		DCB 0x95 ; 
		DCB 0xAB ; «
		DCB    0
		DCB    0
		DCB 0x33 ; 3
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB 0xF0 ; ð
		DCB 0xD8 ; Ø
		DCB 0xFF
		DCB 0xFF
		DCB  0xB
		DCB    0
		DCB    0
		DCB    0
		DCB 0x10
		DCB 0x27 ; '
		DCB    0
		DCB    0
		DCB 0x10
		DCB 0x27 ; '
		DCB    0
		DCB    0
		DCB 0x33 ; 3
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB 0xF0 ; ð
		DCB 0xD8 ; Ø
		DCB 0xFF
		DCB 0xFF
		DCB  0xB
		DCB    0
		DCB    0
		DCB    0
		DCB 0xBC ; ¼
		DCB 0x1B
		DCB    0
		DCB    0
		DCB 0x10
		DCB 0x27 ; '
		DCB    0
		DCB    0
		DCB    1
		DCB    0
		DCB    0
		DCB    0
		DCB 0xCE ; Î
		DCB    2
		DCB    0
		DCB 0x20
		DCB 0xFC ; ü
		DCB 0xFF
		DCB    0
		DCB    0
		DCB 0xC0 ; À
		DCB 0x15
		DCB    0
		DCB 0x20
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB 0x14
		DCB    0
		DCB    0
		DCB 0xE4 ; ä
		DCB  0xE
		DCB    0
		DCB 0x20
		DCB 0x4F ; O
		DCB 0x7A ; z
		DCB    0
		DCB    0
		DCB 0xC0 ; À
		DCB 0x15
		DCB    0
		DCB 0x20
		DCB 0xF9 ; ù
		DCB 0xFF
		DCB 0xFF
		DCB 0xFF
		DCB 0xC1 ; Á
		DCB 0x15
		DCB    0
		DCB 0x20
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB 0xFE ; þ
		DCB 0xFF
		DCB    0
		DCB    0
		DCB 0xFC ; ü
		DCB 0xFF
		DCB    0
		DCB    0
		DCB 0xFF
		DCB 0xFF
		DCB 0xFF
		DCB 0xFF
		DCB  0xB
		DCB 0x81 ; 
		DCB    0
		DCB    0
		DCB 0x28 ; (
		DCB 0x64 ; d
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB 0x81 ; 
		DCB 0xEF ; ï
		DCB 0x82 ; 
		DCB    0
		DCB    0
		DCB 0x4F ; O
		DCB 0x7A ; z
		DCB    0
		DCB    0
		DCB 0x6C ; l
		DCB    1
		DCB    0
		DCB 0x20
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB 0x14
		DCB    0
		DCB    0
		DCB 0x6C ; l
		DCB    1
		DCB    0
		DCB 0x20
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB 0x14
		DCB    0
		DCB    0
		DCB 0xEF ; ï
		DCB 0x82 ; 
		DCB    0
		DCB    0
		DCB  0xB
		DCB 0x81 ; 
		DCB    0
		DCB    0
		DCB 0x6C ; l
		DCB    1
		DCB    0
		DCB 0x20
		DCB 0x37 ; 7
		DCB 0x88 ; 
		DCB    0
		DCB    0
		DCB 0xAA ; ª
		DCB 0x50 ; P
		DCB 0x89 ; 
		DCB 0x36 ; 6
		DCB 0x77 ; w
		DCB 0x86 ; 
		DCB 0xA2 ; ¢
		DCB 0x94 ; 
		DCB 0x41 ; A
		DCB    0
		DCB    0
		DCB 0x48 ; H
		DCB    4
		DCB 0xFF
		DCB 0xFF
		DCB 0xFF
		DCB 0xFF
		DCB 0xFF
		DCB 0xFF
		DCB 0xFF
		DCB 0xFF
		DCB 0xFF
		DCB 0xFF
		DCB 0xFF
		DCB 0xFF
		DCB 0xFF
		DCB 0xFF
		DCB 0xFF
		DCB 0xFF
		DCB 0xFF
		DCB 0xFF
		DCB 0xFF
		DCB 0xFF
		DCB 0xFF
		DCB 0xFF
		DCB 0xFF
		DCB 0xFF
		DCB 0xB6 ; ¶
		DCB    0
		DCB    0
		DCB 0xAA ; ª
		DCB    0
		DCB    0
		DCB 0x48 ; H
		DCB    4
		DCB 0xFF
		DCB 0xFF
		DCB 0xFF
		DCB 0xFF
		DCB 0xFF
		DCB 0xFF
		DCB 0xFF
		DCB 0xFF
		DCB 0xFF
		DCB 0xFF
		DCB 0xFF
		DCB 0xFF
		DCB 0xFF
		DCB 0xFF
		DCB 0xFF
		DCB 0xFF
		DCB 0xFF
		DCB 0xFF
		DCB 0xFF
		DCB 0xFF
		DCB 0xFF
		DCB 0xFF
		DCB 0xFF
		DCB 0xFF
		DCB 0x53 ; S
		DCB    0
		DCB    0
		DCB 0xAC ; ¬
		DCB 0x53 ; S
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    1
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB 0xB0 ; °
		DCB 0xF8 ; ø
		DCB 0xFF
		DCB 0x1F
		DCB    0
		DCB    0
		DCB    0
		DCB 0x20
		DCB  0xE
		DCB    3
		DCB    0
		DCB 0x20
		DCB 0xF4 ; ô
		DCB    1
		DCB    0
		DCB    0
		DCB 0x44 ; D
		DCB    1
		DCB    0
		DCB 0x20
		DCB    0
		DCB    0
		DCB    0
		DCB 0x20
		DCB 0xB0 ; °
		DCB 0xF8 ; ø
		DCB 0xFF
		DCB 0x1F
		DCB 0xEF ; ï
		DCB 0x82 ; 
		DCB    0
		DCB    0
		DCB 0xCF ; Ï
		DCB 0x7E ; ~
		DCB    0
		DCB    0
		DCB 0x44 ; D
		DCB    1
		DCB    0
		DCB 0x20
		DCB 0x19
		DCB 0x9F ; 
		DCB    0
		DCB    0
		DCB 0x86 ; 
		DCB 0x7B ; {
		DCB    0
		DCB    0
		DCB 0x7B ; {
		DCB 0x25 ; %
		DCB    0
		DCB    0
		DCB 0x86 ; 
		DCB 0x7B ; {
		DCB    0
		DCB    0
		DCB 0xE3 ; ã
		DCB 0xC8 ; È
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    2
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB    0
		DCB 0x13
		DCB    0
		DCB    0
		DCB    0
unk_20001640	DCB 0x50 ; P		; DATA XREF: get1FFFFE40+2o
					; ROM:off_19F0o
		DCB 0xDA ; Ú
		DCB 0xB4 ; ´
		DCB 0xD2 ; Ò
		DCB 0xBB ; »
		DCB 0x56 ; V
		DCB 0x65 ; e
		DCB 0x75 ; u
		DCB 0xA7 ; §
		DCB 0x8E ; 
		DCB 0x4A ; J
		DCB 0x80 ; 
		DCB 0x40 ; @
		DCB 0xFE ; þ
		DCB 0x18
		DCB 0xB3 ; ³
		DCB 0x53 ; S
		DCB 0x85 ; 
		DCB 0xD0 ; Ð
		DCB 0x94 ; 
		DCB 0xD2 ; Ò
		DCB 0xD7 ; ×
		DCB 0xD2 ; Ò
		DCB 0xDD ; Ý
		DCB 0x5B ; [
		DCB 0xC7 ; Ç
		DCB 0x14
		DCB    2
		DCB 0x2A ; *
		DCB 0x84 ; 
		DCB 0x37 ; 7
		DCB 0x32 ; 2
		DCB    2
		DCB 0x2E ; .
		DCB 0xBB ; »
		DCB 0xA5 ; ¥
		DCB 0x5B ; [
		DCB 0xC7 ; Ç
		DCB 0x2F ; /
		DCB 0x27 ; '
		DCB 0x9A ; 
		DCB 0x4F ; O
		DCB 0xC8 ; È
		DCB 0x25 ; %
		DCB 0xBE ; ¾
		DCB 0x58 ; X
		DCB 0xDE ; Þ
		DCB 0x34 ; 4
		DCB 0xEE ; î
		DCB 0x46 ; F
		DCB 0xA4 ; ¤
		DCB 0x95 ; 
		DCB 0x8A ; 
		DCB 0x85 ; 
		DCB 0x2D ; -
		DCB 0x32 ; 2
		DCB 0x91 ; 
		DCB  0xF
		DCB 0xEA ; ê
		DCB 0x5E ; ^
		DCB 0xD8 ; Ø
		DCB 0x51 ; Q
		DCB 0x25 ; %
		DCB 0x30 ; 0
		DCB 0x44 ; D
		DCB 0xCD ; Í
		DCB 0xAB ; «
		DCB 0x5F ; _
		DCB 0x9A ; 
		DCB 0xCC ; Ì
		DCB 0x2B ; +
		DCB 0xB1 ; ±
		DCB 0x4D ; M
		DCB 0x15
		DCB 0xB0 ; °
		DCB 0xA7 ; §
		DCB 0x45 ; E
		DCB 0xDD ; Ý
		DCB 0xF3 ; ó
		DCB 0xC8 ; È
		DCB 0x75 ; u
		DCB 0x75 ; u
		DCB 0x47 ; G
		DCB 0xCF ; Ï
		DCB 0x8F ; 
		DCB 0xA6 ; ¦
		DCB 0x87 ; 
		DCB 0xE1 ; á
		DCB 0x46 ; F
		DCB 0x5E ; ^
		DCB 0xBF ; ¿
		DCB 0x37 ; 7
		DCB 0xDF ; ß
		DCB 0xA4 ; ¤
		DCB 0x10
		DCB 0xC1 ; Á
		DCB 0x1B
		DCB 0x47 ; G
		DCB 0xF6 ; ö
		DCB 0x3C ; <
		DCB 0x2E ; .
		DCB 0x98 ; 
		DCB 0x24 ; $
		DCB 0x49 ; I
		DCB 0x6E ; n
		DCB 0xF3 ; ó
		DCB 0x15
		DCB 0x27 ; '
		DCB 0xA7 ; §
		DCB 0xE5 ; å
		DCB 0xFD ; ý
		DCB 0x66 ; f
		DCB 0x84 ; 
		DCB 0xBD ; ½
		DCB 0xC2 ; Â
		DCB 0xF1 ; ñ
		DCB 0xE2 ; â
		DCB 0x77 ; w
		DCB 0xEF ; ï
		DCB 0x6A ; j
		DCB 0x3E ; >
		DCB 0x80 ; 
		DCB 0x2A ; *
		DCB 0xF0 ; ð
		DCB 0x6F ; o
		DCB    0
		DCB 0x45 ; E
		DCB 0xE0 ; à
		DCB 0xC6 ; Æ
		DCB    3
		DCB 0xEE ; î
		DCB 0x6E ; n
		DCB 0x40 ; @
		DCB 0xCB ; Ë
		DCB 0xF0 ; ð
		DCB 0xCD ; Í
		DCB 0x77 ; w
		DCB    3
		DCB 0x8C ; 
		DCB 0x81 ; 
		DCB 0x48 ; H
		DCB 0x7C ; |
		DCB 0x54 ; T
		DCB 0xA5 ; ¥
		DCB 0xDE ; Þ
		DCB 0xAC ; ¬
		DCB 0x46 ; F
		DCB 0xAB ; «
		DCB 0xE2 ; â
		DCB 0xE6 ; æ
		DCB 0x7F ; 
		DCB 0x2A ; *
		DCB 0x83 ; 
		DCB 0xE4 ; ä
		DCB 0xBA ; º
		DCB 0xF8 ; ø
		DCB 0xCC ; Ì
		DCB 0xEE ; î
		DCB 0x66 ; f
		DCB    8
		DCB 0xB7 ; ·
		DCB 0x7D ; }
		DCB 0xAA ; ª
		DCB 0x72 ; r
		DCB 0x33 ; 3
		DCB 0x1A
		DCB 0x47 ; G
		DCB 0x6C ; l
		DCB 0x14
		DCB 0x3D ; =
		DCB 0x3D ; =
		DCB 0x28 ; (
		DCB 0x50 ; P
		DCB 0xB3 ; ³
		DCB 0xCC ; Ì
		DCB 0xB4 ; ´
		DCB    2
		DCB 0xBE ; ¾
		DCB 0x4F ; O
		DCB 0x41 ; A
		DCB 0x3E ; >
		DCB 0x84 ; 
		DCB 0xBE ; ¾
		DCB 0xF2 ; ò
		DCB 0x36 ; 6
		DCB 0x5A ; Z
		DCB 0x38 ; 8
		DCB 0x6A ; j
		DCB 0x54 ; T
		DCB 0xA0 ;  
		DCB 0xBE ; ¾
		DCB 0x39 ; 9
		DCB  0xE
		DCB 0x49 ; I
		DCB 0x60 ; `
		DCB 0x1A
		DCB 0x83 ; 
		DCB 0x10
		DCB 0x32 ; 2
		DCB 0x65 ; e
		DCB 0x3E ; >
		DCB 0xF4 ; ô
		DCB 0xF7 ; ÷
		DCB 0xDC ; Ü
		DCB 0x39 ; 9
		DCB 0x75 ; u
		DCB 0x57 ; W
		DCB 0x7E ; ~
		DCB 0x37 ; 7
		DCB 0x66 ; f
		DCB 0xF8 ; ø
		DCB 0x49 ; I
		DCB    4
		DCB 0x9B ; 
		DCB 0xF1 ; ñ
		DCB 0x5C ; \
		DCB 0x98 ; 
		DCB 0xA9 ; ©
		DCB 0xA2 ; ¢
		DCB 0x7D ; }
		DCB 0x10
		DCB    1
		DCB 0xDA ; Ú
		DCB 0x2E ; .
		DCB 0x7A ; z
		DCB 0xE3 ; ã
		DCB 0x26 ; &
		DCB 0x17
		DCB 0x7C ; |
		DCB 0x3A ; :
		DCB 0x96 ; 
		DCB 0x17
		DCB 0x9D ; 
		DCB 0x85 ; 
		DCB 0x27 ; '
		DCB 0xE8 ; è
		DCB 0x7B ; {
		DCB 0x57 ; W
		DCB 0x64 ; d
		DCB    9
		DCB 0x61 ; a
		DCB 0xA0 ;  
		DCB 0x6C ; l
		DCB 0x41 ; A
		DCB 0xB6 ; ¶
		DCB 0x4A ; J
		DCB 0x26 ; &
		DCB 0xC8 ; È
		DCB 0xF7 ; ÷
		DCB 0x5A ; Z
		DCB 0xF4 ; ô
		DCB 0x72 ; r
		DCB 0x1E
		DCB 0x29 ; )
		DCB 0xE0 ; à
		DCB 0x83 ; 
		DCB 0x38 ; 8
		DCB 0xA3 ; £
		DCB 0xE4 ; ä
		DCB 0x63 ; c
		DCB 0x8D ; 
		DCB 0x5E ; ^
		DCB 0xFF
		DCB 0xA3 ; £
		DCB 0x8A ; 
		DCB 0xC9 ; É
		DCB 0x26 ; &
		DCB 0xF1 ; ñ
		DCB 0xC5 ; Å
		DCB 0x8C ; 
		DCB 0x14
		DCB 0xCE ; Î
		DCB 0xA7 ; §
		DCB 0xD1 ; Ñ
		DCB 0xD3 ; Ó
		DCB 0xB5 ; µ
		DCB 0xF3 ; ó
		DCB 0x42 ; B
		DCB 0x94 ; 
		DCB    6
		DCB 0x69 ; i
		DCB 0x16
		DCB    1
		DCB 0x25 ; %
		DCB 0x7D ; }
		DCB 0xCE ; Î
		DCB 0x76 ; v
		DCB 0x11
		DCB 0x54 ; T
		DCB 0x45 ; E
		DCB 0x9B ; 
		DCB  0xA
		DCB 0xCB ; Ë
		DCB 0x96 ; 
		DCB 0xBD ; ½
		DCB 0xE5 ; å
		DCB 0xC6 ; Æ
		DCB 0x44 ; D
		DCB 0xB7 ; ·
		DCB 0xAE ; ®
		DCB  0xA
		DCB 0xA9 ; ©
		DCB 0x8A ; 
		DCB 0xA0 ;  
		DCB 0x8D ; 
		DCB 0x93 ; 
		DCB 0x6F ; o
		DCB 0xC1 ; Á
		DCB 0x62 ; b
		DCB 0xE3 ; ã
		DCB 0x8E ; 
		DCB 0x98 ; 
		DCB 0xE3 ; ã
		DCB 0x46 ; F
		DCB 0x34 ; 4
		DCB 0x26 ; &
		DCB 0x79 ; y
		DCB 0x1A
		DCB 0xC7 ; Ç
		DCB 0xF4 ; ô
		DCB    9
		DCB 0xE8 ; è
		DCB 0xAD ; ­
		DCB    8
		DCB 0xEB ; ë
		DCB 0x74 ; t
		DCB 0x74 ; t
		DCB 0x7E ; ~
		DCB 0x9F ; 
		DCB  0xD
		DCB 0x7A ; z
		DCB  0xF
		DCB 0x95 ; 
		DCB 0x4B ; K
		DCB 0x89 ; 
		DCB 0x62 ; b
		DCB 0xA5 ; ¥
		DCB 0xD1 ; Ñ
		DCB 0x8D ; 
		DCB    3
		DCB 0x45 ; E
		DCB 0x52 ; R
		DCB 0xE1 ; á
		DCB 0x92 ; 
		DCB 0x2C ; ,
		DCB    6
		DCB 0x93 ; 
		DCB 0x52 ; R
		DCB 0x33 ; 3
		DCB 0x69 ; i
		DCB 0x41 ; A
		DCB 0xF2 ; ò
		DCB 0x14
		DCB 0x88 ; 
		DCB 0x85 ; 
		DCB 0x9D ; 
		DCB 0x11
		DCB 0x32 ; 2
		DCB 0x54 ; T
		DCB 0xC0 ; À
		DCB 0x6B ; k
		DCB 0x44 ; D
		DCB 0x52 ; R
		DCB 0x1C
		DCB 0x57 ; W
		DCB 0xCA ; Ê
		DCB 0x60 ; `
		DCB 0xC8 ; È
		DCB 0x7D ; }
		DCB 0x19
		DCB 0x86 ; 
		DCB 0x41 ; A
		DCB 0x5D ; ]
		DCB 0x7E ; ~
		DCB 0xF4 ; ô
		DCB 0xE3 ; ã
		DCB 0x2B ; +
		DCB 0xCD ; Í
		DCB 0x34 ; 4
		DCB 0x26 ; &
		DCB 0x3D ; =
		DCB 0x8F ; 
		DCB    6
		DCB 0x35 ; 5
		DCB 0x43 ; C
		DCB 0x5B ; [
		DCB 0xFC ; ü
		DCB 0x2B ; +
		DCB 0x4B ; K
		DCB 0x6D ; m
		DCB 0xC6 ; Æ
		DCB 0x8E ; 
		DCB 0xC3 ; Ã
		DCB  0xF
		DCB 0x71 ; q
		DCB 0x6D ; m
		DCB 0xEC ; ì
		DCB 0xB1 ; ±
		DCB 0x99 ; 
		DCB    2
		DCB 0xEB ; ë
		DCB 0x11
		DCB 0x5D ; ]
		DCB 0xD0 ; Ð
		DCB 0x54 ; T
		DCB    7
		DCB 0xBC ; ¼
		DCB 0xE0 ; à
		DCB 0x51 ; Q
		DCB 0xD7 ; ×
		DCB 0x73 ; s
		DCB 0x46 ; F
		DCB 0xBD ; ½
		DCB 0x37 ; 7
		DCB 0xE4 ; ä
		DCB 0xC4 ; Ä
		DCB 0x2F ; /
		DCB 0xFE ; þ
		DCB 0x34 ; 4
		DCB 0x5C ; \
		DCB 0x3B ; ;
		DCB 0x5A ; Z
		DCB 0x43 ; C
		DCB 0xBB ; »
		DCB 0xAA ; ª
		DCB 0xAA ; ª
		DCB 0x21 ; !
		DCB 0x72 ; r
		DCB 0xAE ; ®
		DCB 0xCB ; Ë
		DCB 0x24 ; $
		DCB 0xD0 ; Ð
		DCB 0x82 ; 
		DCB 0x42 ; B
		DCB 0x5E ; ^
		DCB 0xA6 ; ¦
		DCB 0x39 ; 9
		DCB 0xA7 ; §
		DCB 0x1D
		DCB 0xB6 ; ¶
		DCB 0xAB ; «
		DCB 0x9C ; 
		DCB 0xC8 ; È
		DCB 0x1D
		DCB    0
		DCB 0xE7 ; ç
		DCB 0x52 ; R
		DCB 0x26 ; &
; RAM		ends

		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		% 1
		END
